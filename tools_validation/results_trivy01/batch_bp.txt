
Report Summary

┌──────────────────────────────────────────────────────────────────┬────────────┬───────────────────┐
│                              Target                              │    Type    │ Misconfigurations │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ CEP1_Lakan-Ilaw_ERC_ConfigMap.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ CEP1_Lakan-Ilaw_ERC_Deployment_Service.yaml                      │ kubernetes │        14         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ CEP1_Lakan-Ilaw_ERC_Deployment_Service_1.yaml                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml                    │ kubernetes │        31         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ CEP1_Lakan-Ilaw_ERC_Deployment_Service_3.yaml                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ CEP1_Lakan-Ilaw_ERC_Namespace.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ CEP1_Lakan-Ilaw_ERC_PersistentVolume.yaml                        │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ CEP1_Lakan-Ilaw_ERC_PersistentVolumeClaim.yaml                   │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ CEP1_Lakan-Ilaw_ERC_PersistentVolumeClaim_1.yaml                 │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ CEP1_Lakan-Ilaw_ERC_PersistentVolume_1.yaml                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ CEP1_Lakan-Ilaw_ERC_ResourceQuota.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ CEP1_Lakan-Ilaw_ERC_Secret.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ CEP1_Lakan-Ilaw_ERC_ServiceAccount.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ CEP1_Lakan-Ilaw_ERC_ServiceAccount_1.yaml                        │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ CEP2_Lakan-Ilaw_ERC_NetworkPolicy.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ CEP2_Lakan-Ilaw_ERC_Role.yaml                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ CEP2_Lakan-Ilaw_ERC_RoleBinding.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ CephBlockStorageClass.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ CephFSStorageClass-HDD-D8-P4.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-csi-driver_templates_rbac-csi-controller_10.yaml          │ kubernetes │         4         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-csi-driver_templates_rbac-csi-controller_11.yaml          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-csi-driver_templates_rbac-csi-controller_12.yaml          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-csi-driver_templates_rbac-csi-controller_13.yaml          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-csi-driver_templates_rbac-csi-controller_14.yaml          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-csi-driver_templates_rbac-csi-controller_17.yaml          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-csi-driver_templates_rbac-csi-controller_18.yaml          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-csi-driver_templates_rbac-csi-controller_19.yaml          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-csi-driver_templates_rbac-csi-controller_20.yaml          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-csi-driver_templates_rbac-csi-controller_21.yaml          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-csi-driver_templates_rbac-csi-node_15.yaml                │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-csi-driver_templates_rbac-csi-node_22.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-csi-driver_templates_serviceaccount-csi-controller_2.yaml │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-csi-driver_templates_serviceaccount-csi-node_3.yaml       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-csi-driver_templates_storageclass_7.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-csi-driver_templates_storageclass_8.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-csi-driver_templates_tests_deploy-demo_31.yaml            │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-csi-driver_templates_tests_deploy-demo_32.yaml            │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-csi-driver_templates_tests_deploy-demo_35.yaml            │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-csi-driver_templates_tests_deploy-demo_36.yaml            │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-scheduler.yaml                                            │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-scheduler1.yaml                                           │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-scheduler1_1.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-scheduler1_2.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-scheduler1_3.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-scheduler1_4.yaml                                         │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-scheduler2.yaml                                           │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-scheduler2_1.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-scheduler2_2.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-scheduler2_3.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-scheduler2_4.yaml                                         │ kubernetes │        16         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-scheduler_1.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-scheduler_2.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-scheduler_3.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carina-scheduler_4.yaml                                          │ kubernetes │        16         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carla.yaml                                                       │ kubernetes │        33         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carla_1.yaml                                                     │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cars-db-deployment-service.yaml                                  │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cars-db-deployment-service_1.yaml                                │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cars-db-deployment-service_2.yaml                                │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cars-db-deployment-service_3.yaml                                │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-api-deployment.yaml                                         │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-api-deployment_1.yaml                                       │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-connection-secret.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-connection-secret1.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-connection-secret2.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-connection-secret3.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-db-svc.yaml                                                 │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-db-svc1.yaml                                                │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-hsc.yaml                                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-hsc1.yaml                                                   │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-ingress.yaml                                                │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-ingress1.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-ingress2.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-redis.yaml                                                  │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-redis_2.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-redis_3.yaml                                                │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-service-deployment.yaml                                     │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-service-deployment1.yaml                                    │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-service-service.yaml                                        │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-service-service1.yaml                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-service.yaml                                                │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-service1.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-service2.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-service3.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-service4.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-service5.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-service6.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-service7.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart-service8.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart10.yaml                                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart10_1.yaml                                                    │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart10_2.yaml                                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart10_3.yaml                                                    │ kubernetes │        35         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart10_4.yaml                                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart10_5.yaml                                                    │ kubernetes │        35         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart11_1.yaml                                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart11_2.yaml                                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cart11_3.yaml                                                    │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartms-deployment-local.yaml                                     │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartms-service.yaml                                              │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carts-configMap.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carts-configMap1.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carts-db-dep.yaml                                                │ kubernetes │        15         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carts-db-svc.yaml                                                │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carts-dep2.yaml                                                  │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carts-serviceAccount.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carts-serviceAccount1.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ carts-svc2.yaml                                                  │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice-deployment.yaml                                      │ kubernetes │        14         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice-service.yaml                                         │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice1.yaml                                                │ kubernetes │         7         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice10.yaml                                               │ kubernetes │         7         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice10_1.yaml                                             │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice11.yaml                                               │ kubernetes │         6         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice11_1.yaml                                             │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice13.yaml                                               │ kubernetes │         7         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice13_1.yaml                                             │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice14.yaml                                               │ kubernetes │         6         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice14_1.yaml                                             │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice15.yaml                                               │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice15_1.yaml                                             │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice17.yaml                                               │ kubernetes │         7         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice17_1.yaml                                             │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice18.yaml                                               │ kubernetes │         6         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice18_1.yaml                                             │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice19.yaml                                               │ kubernetes │        14         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice19_1.yaml                                             │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice1_1.yaml                                              │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice2.yaml                                                │ kubernetes │         6         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice21.yaml                                               │ kubernetes │         7         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice21_1.yaml                                             │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice22.yaml                                               │ kubernetes │         6         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice22_1.yaml                                             │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice23.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice23_1.yaml                                             │ kubernetes │        15         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice23_2.yaml                                             │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice25.yaml                                               │ kubernetes │         7         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice25_1.yaml                                             │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice26.yaml                                               │ kubernetes │         6         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice26_1.yaml                                             │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice28.yaml                                               │ kubernetes │         7         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice28_1.yaml                                             │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice28_2.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice28_3.yaml                                             │ kubernetes │         6         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice28_4.yaml                                             │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice29.yaml                                               │ kubernetes │         6         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice29_1.yaml                                             │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice29_2.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice29_3.yaml                                             │ kubernetes │         6         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice29_4.yaml                                             │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice2_1.yaml                                              │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice30.yaml                                               │ kubernetes │         6         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice30_1.yaml                                             │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice30_2.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice30_3.yaml                                             │ kubernetes │         6         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice30_4.yaml                                             │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice4.yaml                                                │ kubernetes │         7         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice4_1.yaml                                              │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice5.yaml                                                │ kubernetes │         6         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice5_1.yaml                                              │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice7.yaml                                                │ kubernetes │         7         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice7_1.yaml                                              │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice8.yaml                                                │ kubernetes │         6         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cartservice8_1.yaml                                              │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cas-container-persistentvolumclaim.yaml                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cas-container-persistentvolumclaim1.yaml                         │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cass-sw-app.yaml                                                 │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cass-sw-app_1.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cass-sw-app_2.yaml                                               │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cass-sw-app_3.yaml                                               │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-claim0-persistentvolumeclaim.yaml                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-claim0-persistentvolumeclaim1.yaml                     │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-claim1-persistentvolumeclaim.yaml                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-claim1-persistentvolumeclaim1.yaml                     │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-claim2-persistentvolumeclaim.yaml                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-claim2-persistentvolumeclaim1.yaml                     │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-db.yaml                                                │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-db_1.yaml                                              │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-deny.yaml                                              │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-deployment.yaml                                        │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-deployment1.yaml                                       │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-deployment2.yaml                                       │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-headless-service.yaml                                  │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-local-volumen.yaml                                     │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-local-volumen_1.yaml                                   │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-local-volumen_2.yaml                                   │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-password.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-password1.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-pv.yaml                                                │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-pvc.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-reaper.yaml                                            │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-reaper_1.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-service.yaml                                           │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-service1.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-service2.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-service3.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-service4.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-service5.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-service6.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-service7.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-service8.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-service9.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-stateful-set.yaml                                      │ kubernetes │        14         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-statefulset-best-effort.yaml                           │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-statefulset-best-effort_1.yaml                         │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-statefulset-guaranteed.yaml                            │ kubernetes │        14         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-statefulset-guaranteed_1.yaml                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-statefulset.yaml                                       │ kubernetes │        14         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-statefulset1.yaml                                      │ kubernetes │        14         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-statefulset1_1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-statefulset2.yaml                                      │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-statefulset3.yaml                                      │ kubernetes │        14         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-statefulset3_1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-statefulset4.yaml                                      │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-statefulset4_1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-statefulset5.yaml                                      │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-statefulset6.yaml                                      │ kubernetes │        14         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-statefulset6_1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-statefulset_1.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-test.yaml                                              │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-username.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra-username1.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra.yaml                                                   │ kubernetes │        15         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra1.yaml                                                  │ kubernetes │        15         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra10.yaml                                                 │ kubernetes │        14         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra10_2.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra11.yaml                                                 │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra1_1.yaml                                                │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra1_2.yaml                                                │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra6.yaml                                                  │ kubernetes │        14         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra6_2.yaml                                                │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra8.yaml                                                  │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra8_1.yaml                                                │ kubernetes │        14         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra9.yaml                                                  │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra9_1.yaml                                                │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra9_2.yaml                                                │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra9_3.yaml                                                │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra_1.yaml                                                 │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cassandra_2.yaml                                                 │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cast-db-deployment.yaml                                          │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cast-db-deployment1.yaml                                         │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cast-service-claim0-persistentvolumeclaim.yaml                   │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cast-service-claim0-persistentvolumeclaim1.yaml                  │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cast-service-deployment.yaml                                     │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cast-service-deployment1.yaml                                    │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cast_service-service.yaml                                        │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cast_service-service1.yaml                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog-backend.yaml                                             │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog-backend_1.yaml                                           │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog-configMap.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog-configMap1.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog-connection-secret.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog-connection-secret1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog-connection-secret2.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog-connection-secret3.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog-ingress.yaml                                             │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog-ingress1.yaml                                            │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog-ingress2.yaml                                            │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog-service-deployment.yaml                                  │ kubernetes │        16         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog-service-deployment_1.yaml                                │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog.yaml                                                     │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog1.yaml                                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog11.yaml                                                   │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog11_1.yaml                                                 │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog1_1.yaml                                                  │ kubernetes │        16         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog2.yaml                                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog24.yaml                                                   │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog24_1.yaml                                                 │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog2_1.yaml                                                  │ kubernetes │        15         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog3.yaml                                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog3_1.yaml                                                  │ kubernetes │        15         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog4.yaml                                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog4_1.yaml                                                  │ kubernetes │        16         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog5.yaml                                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog5_1.yaml                                                  │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog6.yaml                                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog6_1.yaml                                                  │ kubernetes │        16         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog7.yaml                                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog7_1.yaml                                                  │ kubernetes │        15         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog8.yaml                                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog8_1.yaml                                                  │ kubernetes │        15         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog9.yaml                                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog9_1.yaml                                                  │ kubernetes │        16         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalog_1.yaml                                                   │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-db-dep2.yaml                                           │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-db-svc.yaml                                            │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-db-svc1.yaml                                           │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-db-svc2.yaml                                           │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-db.yaml                                                │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-db_1.yaml                                              │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-db_2.yaml                                              │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-db_3.yaml                                              │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-dep1.yaml                                              │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-dep3.yaml                                              │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-dep4.yaml                                              │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-hsc.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-hsc1.yaml                                              │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-service-deployment.yaml                                │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-service-deployment_1.yaml                              │ kubernetes │        36         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-service-deployment_2.yaml                              │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-service-deployment_3.yaml                              │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-service.yaml                                           │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-service1.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-service2.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-service3.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-service4.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-service5.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-service6.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-service7.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-service8.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue-svc2.yaml                                              │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue.yaml                                                   │ kubernetes │        15         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue_1.yaml                                                 │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catalogue_2.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catfacts-deployment.yaml                                         │ kubernetes │        21         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catfacts-ingress.yaml                                            │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ catfacts-service.yaml                                            │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cattr-deployment.yaml                                            │ kubernetes │        21         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cattr-deployment_1.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ caveman-service.yaml                                             │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ caveman.yaml                                                     │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cby.yaml                                                         │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cby_1.yaml                                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cc-device-plugin.yaml                                            │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cc-door-app.yaml                                                 │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cc-door-app_1.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cc-door-app_2.yaml                                               │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cc.yaml                                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cc1.yaml                                                         │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cc1_1.yaml                                                       │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cc3.yaml                                                         │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cc3_1.yaml                                                       │ kubernetes │        16         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ccm.yaml                                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ccm2.yaml                                                        │ kubernetes │         3         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ccm2_1.yaml                                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ccm2_2.yaml                                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ccm2_3.yaml                                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ccm_1.yaml                                                       │ kubernetes │         4         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ccx-auth-service.service.yaml                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ccx-billing-service.service.yaml                                 │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ccx-hook-service.service.yaml                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ccx-monitor-service.service.yaml                                 │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ccx-rest-admin.service.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ccx-ui-admin.service.yaml                                        │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ccx-ui-app.service.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ccx-ui-auth.service.yaml                                         │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ccx-user.service.yaml                                            │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cd-clusterrole.yaml                                              │ kubernetes │         4         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-ingress-routes.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-loadbalancer.yaml                                            │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator-v1.60.2.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator-v1.60.2_2.yaml                                      │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator-v1.60.2_3.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator-v1.60.2_4.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator-v1.60.2_5.yaml                                      │ kubernetes │        11         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator-v1.60.2_6.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator-v1.60.2_7.yaml                                      │ kubernetes │         7         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator1.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator1_2.yaml                                             │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator1_3.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator1_4.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator1_5.yaml                                             │ kubernetes │        11         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator1_6.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator1_7.yaml                                             │ kubernetes │         7         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator2.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator2_2.yaml                                             │ kubernetes │        10         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator2_3.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator2_4.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator2_5.yaml                                             │ kubernetes │         8         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator2_6.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator2_7.yaml                                             │ kubernetes │        13         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator2_8.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator3.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator3_2.yaml                                             │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator3_3.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator3_4.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator3_5.yaml                                             │ kubernetes │        11         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator3_6.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator3_7.yaml                                             │ kubernetes │         7         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator4.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator4_2.yaml                                             │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator4_3.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator4_4.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator4_5.yaml                                             │ kubernetes │        11         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator4_6.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator4_7.yaml                                             │ kubernetes │         7         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator_2.yaml                                              │ kubernetes │        10         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator_3.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator_4.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator_5.yaml                                              │ kubernetes │         8         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator_6.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator_7.yaml                                              │ kubernetes │        13         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-operator_8.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-uploadproxy.yaml                                             │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cdi-uploadproxy1.yaml                                            │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ce-backend-deployment.yaml                                       │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ce-backend-service.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ce-frontend-deployment.yaml                                      │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ce-frontend-service.yaml                                         │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ celery-beat-deployment.yaml                                      │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ celery-claim0-persistentvolumeclaim.yaml                         │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ celery-claim1-persistentvolumeclaim.yaml                         │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ celery-deployment.yaml                                           │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ celery-worker-deployment.yaml                                    │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ celsius-deployment.yaml                                          │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ celsius-deployment_1.yaml                                        │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ celsius-deployment_2.yaml                                        │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ centos-deployment.yaml                                           │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ centos8-deployment.yaml                                          │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ central-db-config.yaml                                           │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ central-db-pv-pvc.yaml                                           │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ central-db-pv-pvc_1.yaml                                         │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ central-lib-service.yaml                                         │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ central-lib.yaml                                                 │ kubernetes │        36         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-class.yaml                                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-cnpg-full-deployment.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-cnpg-full-deployment_1.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-cnpg-full-deployment_2.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-provisionar1_1.yaml                                         │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-provisionar1_2.yaml                                         │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-provisionar2_1.yaml                                         │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-provisionar2_2.yaml                                         │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-provisionar3_1.yaml                                         │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-provisionar3_2.yaml                                         │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-provisionar_1.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-provisionar_2.yaml                                          │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-sc.yaml                                                     │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-secret-admin.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-secret-admin1.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-secret-admin2.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-secret-user.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-secret-user1.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-secret-user2.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-secret.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-secret1.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-secret2.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-secret3.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-secret4.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-secret5.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph-secret6.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph.storage-class-block-rwo_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph.test-sc-block-rwo.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph.test-sc-block-rwo_1.yaml                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph.yaml                                                        │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph1.yaml                                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph10.yaml                                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph11.yaml                                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph12.yaml                                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph2.yaml                                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph3.yaml                                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph4.yaml                                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph5.yaml                                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph6.yaml                                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph7.yaml                                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph8.yaml                                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph9.yaml                                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ceph_1.yaml                                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cephconnection_editor_role.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cephconnection_viewer_role.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cephfs-pvc.yaml                                                  │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cephfs-with-secret.yaml                                          │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cephfs-with-secret1.yaml                                         │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cephfs-with-secret2.yaml                                         │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cephfs.yaml                                                      │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cephfs1.yaml                                                     │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cephfs2.yaml                                                     │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cephfs_ctrlplugin_cluster_role.yaml                              │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cephfs_ctrlplugin_cluster_role_binding.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cephfs_ctrlplugin_role.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cephfs_ctrlplugin_role_binding.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cephfs_ctrlplugin_service_account.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cephfs_nodeplugin_cluster_role.yaml                              │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cephfs_nodeplugin_cluster_role_binding.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cephfs_nodeplugin_service_account.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cerebral-ns.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cerebral-ns1.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cerebral-simulator.yaml                                          │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cerebral-simulator1.yaml                                         │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cerebral.yaml                                                    │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cerebral1.yaml                                                   │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cerebral1_1.yaml                                                 │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cerebral_1.yaml                                                  │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-00-whoami.yaml                                              │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-00-whoami_1.yaml                                            │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-00-whoami_2.yaml                                            │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-03-whoami.yaml                                              │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-04-issuer2.0.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-07-secret.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-controller-deployment.yaml                                  │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-controller-deployment1.yaml                                 │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-controller-rbac.yaml                                        │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-controller-rbac_1.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-controller-serviceaccount.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-controller-serviceaccount1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-generator.yaml                                              │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-generator1.yaml                                             │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-generator2.yaml                                             │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-generator3.yaml                                             │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-generator4.yaml                                             │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-generator5.yaml                                             │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-generator6.yaml                                             │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-generator7.yaml                                             │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-generator8.yaml                                             │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_10.yaml                                      │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_11.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_12.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_13.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_14.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_15.yaml                                      │ kubernetes │         5         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_16.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_17.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_18.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_19.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_20.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_21.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_22.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_23.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_24.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_25.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_26.yaml                                      │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_27.yaml                                      │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_28.yaml                                      │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_29.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_30.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_31.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_32.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_33.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_34.yaml                                      │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_35.yaml                                      │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_36.yaml                                      │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_37.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_38.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_6.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_7.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_8.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.41_9.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_10.yaml                                       │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_11.yaml                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_12.yaml                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_13.yaml                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_14.yaml                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_15.yaml                                       │ kubernetes │         5         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_16.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_17.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_18.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_19.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_20.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_21.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_22.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_23.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_24.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_25.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_26.yaml                                       │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_27.yaml                                       │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_28.yaml                                       │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_29.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_30.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_31.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_32.yaml                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_33.yaml                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_34.yaml                                       │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_35.yaml                                       │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_36.yaml                                       │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_37.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_38.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_6.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_7.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_8.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.0.4_9.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_10.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_11.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_12.yaml                                      │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_13.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_14.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_15.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_16.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_17.yaml                                      │ kubernetes │         5         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_18.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_19.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_20.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_21.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_22.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_23.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_24.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_25.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_26.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_27.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_28.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_29.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_30.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_31.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_32.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_33.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_34.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_35.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_36.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_37.yaml                                      │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_38.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_39.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_40.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_41.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_42.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_43.yaml                                      │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_44.yaml                                      │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_45.yaml                                      │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_46.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_47.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_7.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_8.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.13.1_9.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_10.yaml                                      │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_11.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_12.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_13.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_14.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_15.yaml                                      │ kubernetes │         5         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_16.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_17.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_18.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_19.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_20.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_21.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_22.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_23.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_24.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_25.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_26.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_27.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_28.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_29.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_30.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_31.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_32.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_33.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_34.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_35.yaml                                      │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_36.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_37.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_38.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_39.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_40.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_41.yaml                                      │ kubernetes │         8         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_42.yaml                                      │ kubernetes │         8         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_43.yaml                                      │ kubernetes │         8         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_44.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_45.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_7.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_8.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-1.14.4_9.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-namespace.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-ns.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-ns1.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-ns2.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_10.yaml                                     │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_11.yaml                                     │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_12.yaml                                     │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_13.yaml                                     │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_14.yaml                                     │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_15.yaml                                     │ kubernetes │         5         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_16.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_17.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_18.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_19.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_20.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_21.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_22.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_23.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_24.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_25.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_26.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_27.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_28.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_29.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_30.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_31.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_32.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_33.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_34.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_35.yaml                                     │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_36.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_37.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_38.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_39.yaml                                     │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_40.yaml                                     │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_41.yaml                                     │ kubernetes │         8         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_42.yaml                                     │ kubernetes │         8         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_43.yaml                                     │ kubernetes │         8         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_44.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_45.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_7.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_8.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-v1.14.2_9.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-verifier.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-workload.yaml                                       │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-workload1.yaml                                      │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-workload1_1.yaml                                    │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-workload1_2.yaml                                    │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-workload_1.yaml                                     │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager-workload_2.yaml                                     │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager.app1.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_10.yaml                                          │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_11.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_12.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_13.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_14.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_15.yaml                                          │ kubernetes │         5         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_16.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_17.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_18.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_19.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_20.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_21.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_22.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_23.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_24.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_25.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_26.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_27.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_28.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_29.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_30.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_31.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_32.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_33.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_34.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_35.yaml                                          │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_36.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_37.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_38.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_39.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_40.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_41.yaml                                          │ kubernetes │         8         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_42.yaml                                          │ kubernetes │         8         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_43.yaml                                          │ kubernetes │         8         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_44.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_45.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_7.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_8.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager101_9.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_10.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_11.yaml                                          │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_12.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_13.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_14.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_15.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_16.yaml                                          │ kubernetes │         5         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_17.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_18.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_19.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_20.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_21.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_22.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_23.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_24.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_25.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_26.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_27.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_28.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_29.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_30.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_31.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_32.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_33.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_34.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_35.yaml                                          │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_36.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_37.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_38.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_39.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_40.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_41.yaml                                          │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_42.yaml                                          │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_43.yaml                                          │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_44.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_45.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_7.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_8.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager103_9.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager104.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_10.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_11.yaml                                          │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_12.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_13.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_14.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_15.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_16.yaml                                          │ kubernetes │         5         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_17.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_18.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_19.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_20.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_21.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_22.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_23.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cert-manager104_24.yaml                                          │ kubernetes │         0         │
└──────────────────────────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


CEP1_Lakan-Ilaw_ERC_Deployment_Service.yaml (kubernetes)
========================================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cep1-mysql-cont' of Deployment 'cep1-mysql-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: cep1-mysql-cont
  18 │         image: mysql:latest
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: cep1-secret
  24 │               key: DB_PASSWORD
  25 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cep1-mysql-cont' of Deployment 'cep1-mysql-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: cep1-mysql-cont
  18 │         image: mysql:latest
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: cep1-secret
  24 │               key: DB_PASSWORD
  25 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cep1-mysql-cont' of 'deployment' 'cep1-mysql-deploy' in 'cep-project1' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: cep1-mysql-cont
  18 │         image: mysql:latest
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: cep1-secret
  24 │               key: DB_PASSWORD
  25 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cep1-mysql-cont' of Deployment 'cep1-mysql-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: cep1-mysql-cont
  18 │         image: mysql:latest
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: cep1-secret
  24 │               key: DB_PASSWORD
  25 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cep1-mysql-cont' of Deployment 'cep1-mysql-deploy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: cep1-mysql-cont
  18 │         image: mysql:latest
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: cep1-secret
  24 │               key: DB_PASSWORD
  25 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cep1-mysql-cont' of Deployment 'cep1-mysql-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: cep1-mysql-cont
  18 │         image: mysql:latest
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: cep1-secret
  24 │               key: DB_PASSWORD
  25 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cep1-mysql-cont' of Deployment 'cep1-mysql-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: cep1-mysql-cont
  18 │         image: mysql:latest
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: cep1-secret
  24 │               key: DB_PASSWORD
  25 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cep1-mysql-cont' of Deployment 'cep1-mysql-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: cep1-mysql-cont
  18 │         image: mysql:latest
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: cep1-secret
  24 │               key: DB_PASSWORD
  25 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: cep1-mysql-cont
  18 │         image: mysql:latest
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: cep1-secret
  24 │               key: DB_PASSWORD
  25 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service.yaml:7-45
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: cep1-mysql-pod
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: cep1-mysql-pod
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cep1-mysql-cont" of deployment "cep1-mysql-deploy" in "cep-project1" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: cep1-mysql-cont
  18 │         image: mysql:latest
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: cep1-secret
  24 │               key: DB_PASSWORD
  25 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: cep1-mysql-cont
  18 │         image: mysql:latest
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: cep1-secret
  24 │               key: DB_PASSWORD
  25 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cep1-mysql-deploy in cep-project1 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service.yaml:17-41
────────────────────────────────────────
  17 ┌       - name: cep1-mysql-cont
  18 │         image: mysql:latest
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: cep1-secret
  24 │               key: DB_PASSWORD
  25 └         - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cep1-mysql-deploy in cep-project1 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service.yaml:16-45
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: cep1-mysql-cont
  18 │         image: mysql:latest
  19 │         env:
  20 │         - name: MYSQL_ROOT_PASSWORD
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: cep1-secret
  24 └               key: DB_PASSWORD
  ..   
────────────────────────────────────────



CEP1_Lakan-Ilaw_ERC_Deployment_Service_1.yaml (kubernetes)
==========================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_1.yaml:7-11
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: cep1-mysql-pod
   9 │   ports:
  10 │   - port: 3306
  11 └     targetPort: 3306
────────────────────────────────────────



CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml (kubernetes)
==========================================================
Tests: 128 (SUCCESSES: 97, FAILURES: 31)
Failures: 31 (UNKNOWN: 0, LOW: 17, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cep1-wp-cont' of Deployment 'cep1-wp-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:37-71
────────────────────────────────────────
  37 ┌       - name: cep1-wp-cont
  38 │         image: wordpress:latest
  39 │         env:
  40 │         - name: WORDPRESS_DB_HOST
  41 │           valueFrom:
  42 │             configMapKeyRef:
  43 │               name: cep1-configmap
  44 │               key: DB_HOST
  45 └         - name: WORDPRESS_DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cep1-wp-init-cont' of Deployment 'cep1-wp-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: cep1-wp-init-cont
  18 │         image: mysql:latest
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - until mysql -h cep1-mysql-svc -u $MYSQL_USER -p$MYSQL_ROOT_PASSWORD -e "SHOW
  23 │           DATABASES;" 2>/dev/null; do echo "Waiting for MySQL to start..."; sleep
  24 │           5; done
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cep1-wp-cont' of Deployment 'cep1-wp-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:37-71
────────────────────────────────────────
  37 ┌       - name: cep1-wp-cont
  38 │         image: wordpress:latest
  39 │         env:
  40 │         - name: WORDPRESS_DB_HOST
  41 │           valueFrom:
  42 │             configMapKeyRef:
  43 │               name: cep1-configmap
  44 │               key: DB_HOST
  45 └         - name: WORDPRESS_DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cep1-wp-init-cont' of Deployment 'cep1-wp-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: cep1-wp-init-cont
  18 │         image: mysql:latest
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - until mysql -h cep1-mysql-svc -u $MYSQL_USER -p$MYSQL_ROOT_PASSWORD -e "SHOW
  23 │           DATABASES;" 2>/dev/null; do echo "Waiting for MySQL to start..."; sleep
  24 │           5; done
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cep1-wp-cont' of 'deployment' 'cep1-wp-deploy' in 'cep-project1' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:37-71
────────────────────────────────────────
  37 ┌       - name: cep1-wp-cont
  38 │         image: wordpress:latest
  39 │         env:
  40 │         - name: WORDPRESS_DB_HOST
  41 │           valueFrom:
  42 │             configMapKeyRef:
  43 │               name: cep1-configmap
  44 │               key: DB_HOST
  45 └         - name: WORDPRESS_DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cep1-wp-init-cont' of 'deployment' 'cep1-wp-deploy' in 'cep-project1' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: cep1-wp-init-cont
  18 │         image: mysql:latest
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - until mysql -h cep1-mysql-svc -u $MYSQL_USER -p$MYSQL_ROOT_PASSWORD -e "SHOW
  23 │           DATABASES;" 2>/dev/null; do echo "Waiting for MySQL to start..."; sleep
  24 │           5; done
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cep1-wp-init-cont' of Deployment 'cep1-wp-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: cep1-wp-init-cont
  18 │         image: mysql:latest
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - until mysql -h cep1-mysql-svc -u $MYSQL_USER -p$MYSQL_ROOT_PASSWORD -e "SHOW
  23 │           DATABASES;" 2>/dev/null; do echo "Waiting for MySQL to start..."; sleep
  24 │           5; done
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cep1-wp-cont' of Deployment 'cep1-wp-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:37-71
────────────────────────────────────────
  37 ┌       - name: cep1-wp-cont
  38 │         image: wordpress:latest
  39 │         env:
  40 │         - name: WORDPRESS_DB_HOST
  41 │           valueFrom:
  42 │             configMapKeyRef:
  43 │               name: cep1-configmap
  44 │               key: DB_HOST
  45 └         - name: WORDPRESS_DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cep1-wp-init-cont' of Deployment 'cep1-wp-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: cep1-wp-init-cont
  18 │         image: mysql:latest
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - until mysql -h cep1-mysql-svc -u $MYSQL_USER -p$MYSQL_ROOT_PASSWORD -e "SHOW
  23 │           DATABASES;" 2>/dev/null; do echo "Waiting for MySQL to start..."; sleep
  24 │           5; done
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cep1-wp-cont' of Deployment 'cep1-wp-deploy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:37-71
────────────────────────────────────────
  37 ┌       - name: cep1-wp-cont
  38 │         image: wordpress:latest
  39 │         env:
  40 │         - name: WORDPRESS_DB_HOST
  41 │           valueFrom:
  42 │             configMapKeyRef:
  43 │               name: cep1-configmap
  44 │               key: DB_HOST
  45 └         - name: WORDPRESS_DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cep1-wp-init-cont' of Deployment 'cep1-wp-deploy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: cep1-wp-init-cont
  18 │         image: mysql:latest
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - until mysql -h cep1-mysql-svc -u $MYSQL_USER -p$MYSQL_ROOT_PASSWORD -e "SHOW
  23 │           DATABASES;" 2>/dev/null; do echo "Waiting for MySQL to start..."; sleep
  24 │           5; done
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cep1-wp-cont' of Deployment 'cep1-wp-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:37-71
────────────────────────────────────────
  37 ┌       - name: cep1-wp-cont
  38 │         image: wordpress:latest
  39 │         env:
  40 │         - name: WORDPRESS_DB_HOST
  41 │           valueFrom:
  42 │             configMapKeyRef:
  43 │               name: cep1-configmap
  44 │               key: DB_HOST
  45 └         - name: WORDPRESS_DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cep1-wp-init-cont' of Deployment 'cep1-wp-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: cep1-wp-init-cont
  18 │         image: mysql:latest
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - until mysql -h cep1-mysql-svc -u $MYSQL_USER -p$MYSQL_ROOT_PASSWORD -e "SHOW
  23 │           DATABASES;" 2>/dev/null; do echo "Waiting for MySQL to start..."; sleep
  24 │           5; done
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cep1-wp-init-cont' of Deployment 'cep1-wp-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: cep1-wp-init-cont
  18 │         image: mysql:latest
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - until mysql -h cep1-mysql-svc -u $MYSQL_USER -p$MYSQL_ROOT_PASSWORD -e "SHOW
  23 │           DATABASES;" 2>/dev/null; do echo "Waiting for MySQL to start..."; sleep
  24 │           5; done
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cep1-wp-init-cont' of Deployment 'cep1-wp-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: cep1-wp-init-cont
  18 │         image: mysql:latest
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - until mysql -h cep1-mysql-svc -u $MYSQL_USER -p$MYSQL_ROOT_PASSWORD -e "SHOW
  23 │           DATABASES;" 2>/dev/null; do echo "Waiting for MySQL to start..."; sleep
  24 │           5; done
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cep1-wp-init-cont' of Deployment 'cep1-wp-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: cep1-wp-init-cont
  18 │         image: mysql:latest
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - until mysql -h cep1-mysql-svc -u $MYSQL_USER -p$MYSQL_ROOT_PASSWORD -e "SHOW
  23 │           DATABASES;" 2>/dev/null; do echo "Waiting for MySQL to start..."; sleep
  24 │           5; done
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cep1-wp-cont' of Deployment 'cep1-wp-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:37-71
────────────────────────────────────────
  37 ┌       - name: cep1-wp-cont
  38 │         image: wordpress:latest
  39 │         env:
  40 │         - name: WORDPRESS_DB_HOST
  41 │           valueFrom:
  42 │             configMapKeyRef:
  43 │               name: cep1-configmap
  44 │               key: DB_HOST
  45 └         - name: WORDPRESS_DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cep1-wp-init-cont' of Deployment 'cep1-wp-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: cep1-wp-init-cont
  18 │         image: mysql:latest
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - until mysql -h cep1-mysql-svc -u $MYSQL_USER -p$MYSQL_ROOT_PASSWORD -e "SHOW
  23 │           DATABASES;" 2>/dev/null; do echo "Waiting for MySQL to start..."; sleep
  24 │           5; done
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cep1-wp-cont' of Deployment 'cep1-wp-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:37-71
────────────────────────────────────────
  37 ┌       - name: cep1-wp-cont
  38 │         image: wordpress:latest
  39 │         env:
  40 │         - name: WORDPRESS_DB_HOST
  41 │           valueFrom:
  42 │             configMapKeyRef:
  43 │               name: cep1-configmap
  44 │               key: DB_HOST
  45 └         - name: WORDPRESS_DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cep1-wp-init-cont' of Deployment 'cep1-wp-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: cep1-wp-init-cont
  18 │         image: mysql:latest
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - until mysql -h cep1-mysql-svc -u $MYSQL_USER -p$MYSQL_ROOT_PASSWORD -e "SHOW
  23 │           DATABASES;" 2>/dev/null; do echo "Waiting for MySQL to start..."; sleep
  24 │           5; done
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:37-71
────────────────────────────────────────
  37 ┌       - name: cep1-wp-cont
  38 │         image: wordpress:latest
  39 │         env:
  40 │         - name: WORDPRESS_DB_HOST
  41 │           valueFrom:
  42 │             configMapKeyRef:
  43 │               name: cep1-configmap
  44 │               key: DB_HOST
  45 └         - name: WORDPRESS_DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: cep1-wp-init-cont
  18 │         image: mysql:latest
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - until mysql -h cep1-mysql-svc -u $MYSQL_USER -p$MYSQL_ROOT_PASSWORD -e "SHOW
  23 │           DATABASES;" 2>/dev/null; do echo "Waiting for MySQL to start..."; sleep
  24 │           5; done
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:7-75
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: cep1-wp-pod
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: cep1-wp-pod
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cep1-wp-cont" of deployment "cep1-wp-deploy" in "cep-project1" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:37-71
────────────────────────────────────────
  37 ┌       - name: cep1-wp-cont
  38 │         image: wordpress:latest
  39 │         env:
  40 │         - name: WORDPRESS_DB_HOST
  41 │           valueFrom:
  42 │             configMapKeyRef:
  43 │               name: cep1-configmap
  44 │               key: DB_HOST
  45 └         - name: WORDPRESS_DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cep1-wp-init-cont" of deployment "cep1-wp-deploy" in "cep-project1" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: cep1-wp-init-cont
  18 │         image: mysql:latest
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - until mysql -h cep1-mysql-svc -u $MYSQL_USER -p$MYSQL_ROOT_PASSWORD -e "SHOW
  23 │           DATABASES;" 2>/dev/null; do echo "Waiting for MySQL to start..."; sleep
  24 │           5; done
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:37-71
────────────────────────────────────────
  37 ┌       - name: cep1-wp-cont
  38 │         image: wordpress:latest
  39 │         env:
  40 │         - name: WORDPRESS_DB_HOST
  41 │           valueFrom:
  42 │             configMapKeyRef:
  43 │               name: cep1-configmap
  44 │               key: DB_HOST
  45 └         - name: WORDPRESS_DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: cep1-wp-init-cont
  18 │         image: mysql:latest
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - until mysql -h cep1-mysql-svc -u $MYSQL_USER -p$MYSQL_ROOT_PASSWORD -e "SHOW
  23 │           DATABASES;" 2>/dev/null; do echo "Waiting for MySQL to start..."; sleep
  24 │           5; done
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment cep1-wp-deploy in cep-project1 namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cep1-wp-deploy in cep-project1 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:37-71
────────────────────────────────────────
  37 ┌       - name: cep1-wp-cont
  38 │         image: wordpress:latest
  39 │         env:
  40 │         - name: WORDPRESS_DB_HOST
  41 │           valueFrom:
  42 │             configMapKeyRef:
  43 │               name: cep1-configmap
  44 │               key: DB_HOST
  45 └         - name: WORDPRESS_DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cep1-wp-deploy in cep-project1 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: cep1-wp-init-cont
  18 │         image: mysql:latest
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - until mysql -h cep1-mysql-svc -u $MYSQL_USER -p$MYSQL_ROOT_PASSWORD -e "SHOW
  23 │           DATABASES;" 2>/dev/null; do echo "Waiting for MySQL to start..."; sleep
  24 │           5; done
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cep1-wp-deploy in cep-project1 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_2.yaml:16-75
────────────────────────────────────────
  16 ┌       initContainers:
  17 │       - name: cep1-wp-init-cont
  18 │         image: mysql:latest
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - until mysql -h cep1-mysql-svc -u $MYSQL_USER -p$MYSQL_ROOT_PASSWORD -e "SHOW
  23 │           DATABASES;" 2>/dev/null; do echo "Waiting for MySQL to start..."; sleep
  24 └           5; done
  ..   
────────────────────────────────────────



CEP1_Lakan-Ilaw_ERC_Deployment_Service_3.yaml (kubernetes)
==========================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_Deployment_Service_3.yaml:7-14
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: cep1-wp-pod
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 80
  12 │     targetPort: 80
  13 │     nodePort: 32123
  14 └   type: NodePort
────────────────────────────────────────



CEP1_Lakan-Ilaw_ERC_PersistentVolume.yaml (kubernetes)
======================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_PersistentVolume.yaml:6-13
────────────────────────────────────────
   6 ┌   capacity:
   7 │     storage: 5Gi
   8 │   accessModes:
   9 │   - ReadWriteOnce
  10 │   storageClassName: manual
  11 │   nfs:
  12 │     path: /CEP1-NFS_Storage
  13 └     server: 172.31.28.87
────────────────────────────────────────



CEP1_Lakan-Ilaw_ERC_PersistentVolumeClaim.yaml (kubernetes)
===========================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_PersistentVolumeClaim.yaml:7-12
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   storageClassName: manual
  10 │   resources:
  11 │     requests:
  12 └       storage: 10Gi
────────────────────────────────────────



CEP1_Lakan-Ilaw_ERC_PersistentVolumeClaim_1.yaml (kubernetes)
=============================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_PersistentVolumeClaim_1.yaml:7-12
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   storageClassName: manual
  10 │   resources:
  11 │     requests:
  12 └       storage: 5Gi
────────────────────────────────────────



CEP1_Lakan-Ilaw_ERC_PersistentVolume_1.yaml (kubernetes)
========================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_PersistentVolume_1.yaml:6-14
────────────────────────────────────────
   6 ┌   capacity:
   7 │     storage: 10Gi
   8 │   volumeMode: Filesystem
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   storageClassName: manual
  12 │   nfs:
  13 │     path: /CEP1-NFS_Storage
  14 └     server: 172.31.28.87
────────────────────────────────────────



CEP1_Lakan-Ilaw_ERC_ResourceQuota.yaml (kubernetes)
===================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_ResourceQuota.yaml:8-9
────────────────────────────────────────
   8 ┌     pods: "3"
   9 └     services: "3"
────────────────────────────────────────



CEP1_Lakan-Ilaw_ERC_ServiceAccount_1.yaml (kubernetes)
======================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cep1-sa-admin-binding' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 CEP1_Lakan-Ilaw_ERC_ServiceAccount_1.yaml:4
────────────────────────────────────────
   4 [   name: cep1-sa-admin-binding
────────────────────────────────────────



CEP2_Lakan-Ilaw_ERC_NetworkPolicy.yaml (kubernetes)
===================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 CEP2_Lakan-Ilaw_ERC_NetworkPolicy.yaml:7-14
────────────────────────────────────────
   7 ┌   podSelector: {}
   8 │   ingress:
   9 │   - from:
  10 │     - namespaceSelector:
  11 │         matchLabels:
  12 │           name: cep-project2
  13 │   - from:
  14 └     - podSelector: {}
────────────────────────────────────────



CEP2_Lakan-Ilaw_ERC_Role.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0112 (CRITICAL): Role 'cep2-role' shouldn't manage all resources at the namespace 'cep-project2'
════════════════════════════════════════
Full control of the resources within a namespace.  In some cluster configurations, this is excessive. In others, this is normal (a gitops deployment operator like flux)

See https://avd.aquasec.com/misconfig/ksv112
────────────────────────────────────────
 CEP2_Lakan-Ilaw_ERC_Role.yaml:7-9
────────────────────────────────────────
   7 ┌ - apiGroups: ["*"]
   8 │   resources: ["*"]
   9 └   verbs: ["get", "list", "watch"]
────────────────────────────────────────



carina-csi-driver_templates_rbac-csi-controller_10.yaml (kubernetes)
====================================================================
Tests: 115 (SUCCESSES: 111, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'carina-external-provisioner-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 carina-csi-driver_templates_rbac-csi-controller_10.yaml:22-24
────────────────────────────────────────
  22 ┌   - apiGroups: [""]
  23 │     resources: ["secrets"]
  24 └     verbs: ["get", "list", "create"]
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'carina-external-provisioner-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 carina-csi-driver_templates_rbac-csi-controller_10.yaml:19-21
────────────────────────────────────────
  19 ┌   - apiGroups: [""]
  20 │     resources: ["pods"]
  21 └     verbs: ["get", "list", "watch", "patch", "delete"]
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'carina-external-provisioner-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 carina-csi-driver_templates_rbac-csi-controller_10.yaml:64-66
────────────────────────────────────────
  64 ┌   - apiGroups: [""]
  65 │     resources: ["configmaps"]
  66 └     verbs: ["get", "list", "watch", "create", "delete", "patch", "update"]
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'carina-external-provisioner-role' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 carina-csi-driver_templates_rbac-csi-controller_10.yaml:70-72
────────────────────────────────────────
  70 ┌   - apiGroups: ["admissionregistration.k8s.io"]
  71 │     resources: ["mutatingwebhookconfigurations"]
  72 └     verbs: ["get", "update"]
────────────────────────────────────────



carina-csi-driver_templates_rbac-csi-controller_12.yaml (kubernetes)
====================================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'carina-external-snapshotter-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 carina-csi-driver_templates_rbac-csi-controller_12.yaml:19-21
────────────────────────────────────────
  19 ┌   - apiGroups: [""]
  20 │     resources: ["secrets"]
  21 └     verbs: ["get", "list"]
────────────────────────────────────────



carina-csi-driver_templates_rbac-csi-controller_14.yaml (kubernetes)
====================================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'csi-carina-controller-secret-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 carina-csi-driver_templates_rbac-csi-controller_14.yaml:7-9
────────────────────────────────────────
   7 ┌   - apiGroups: [""]
   8 │     resources: ["secrets"]
   9 └     verbs: ["get", "list"]
────────────────────────────────────────



carina-csi-driver_templates_rbac-csi-node_15.yaml (kubernetes)
==============================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'csi-carina-node-secret-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 carina-csi-driver_templates_rbac-csi-node_15.yaml:13-15
────────────────────────────────────────
  13 ┌   - apiGroups: [""]
  14 │     resources: ["pods"]
  15 └     verbs: ["get", "list", "watch", "patch"]
────────────────────────────────────────



carina-csi-driver_templates_tests_deploy-demo_31.yaml (kubernetes)
==================================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_31.yaml:10-16
────────────────────────────────────────
  10 ┌   accessModes:
  11 │     - ReadWriteOnce
  12 │   resources:
  13 │     requests:
  14 │       storage: 1Gi
  15 │   storageClassName: carina-vg-ssd
  16 └   volumeMode: Filesystem
────────────────────────────────────────



carina-csi-driver_templates_tests_deploy-demo_32.yaml (kubernetes)
==================================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_32.yaml:10-16
────────────────────────────────────────
  10 ┌   accessModes:
  11 │     - ReadWriteOnce
  12 │   resources:
  13 │     requests:
  14 │       storage: 1Gi
  15 │   storageClassName: carina-raw-ssd
  16 └   volumeMode: Filesystem
────────────────────────────────────────



carina-csi-driver_templates_tests_deploy-demo_35.yaml (kubernetes)
==================================================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web-server' of Deployment 'carina-vg-ssd-deploy-demo-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_35.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web-server' of Deployment 'carina-vg-ssd-deploy-demo-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_35.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web-server' of 'deployment' 'carina-vg-ssd-deploy-demo-test' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_35.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web-server' of Deployment 'carina-vg-ssd-deploy-demo-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_35.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web-server' of Deployment 'carina-vg-ssd-deploy-demo-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_35.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'web-server' of Deployment 'carina-vg-ssd-deploy-demo-test' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_35.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web-server' of Deployment 'carina-vg-ssd-deploy-demo-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_35.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web-server' of Deployment 'carina-vg-ssd-deploy-demo-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_35.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web-server' of Deployment 'carina-vg-ssd-deploy-demo-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_35.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web-server' of Deployment 'carina-vg-ssd-deploy-demo-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_35.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web-server' of Deployment 'carina-vg-ssd-deploy-demo-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_35.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web-server' of Deployment 'carina-vg-ssd-deploy-demo-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_35.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_35.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_35.yaml:14-38
────────────────────────────────────────
  14 ┌   replicas: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       app: web-server
  18 │       storageclass: carina-vg-ssd
  19 │   template:
  20 │     metadata:
  21 │       labels:
  22 └         app: web-server
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web-server" of deployment "carina-vg-ssd-deploy-demo-test" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_35.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_35.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment carina-vg-ssd-deploy-demo-test in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_35.yaml:5-12
────────────────────────────────────────
   5 ┌   name: carina-vg-ssd-deploy-demo-test
   6 │   namespace: default
   7 │   labels:
   8 │     app: web-server
   9 │     storageclass: carina-vg-ssd
  10 │   annotations:
  11 │     carina.storage.io/allow-pod-migration-if-node-notready: "true"
  12 └     helm.sh/hook: test
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container carina-vg-ssd-deploy-demo-test in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_35.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment carina-vg-ssd-deploy-demo-test in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_35.yaml:27-38
────────────────────────────────────────
  27 ┌       containers:
  28 │         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 │               mountPath: /var/lib/www/html
  34 │       volumes:
  35 └         - name: mypvc
  ..   
────────────────────────────────────────



carina-csi-driver_templates_tests_deploy-demo_36.yaml (kubernetes)
==================================================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web-server' of Deployment 'carina-raw-ssd-deploy-demo-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_36.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web-server' of Deployment 'carina-raw-ssd-deploy-demo-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_36.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web-server' of 'deployment' 'carina-raw-ssd-deploy-demo-test' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_36.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web-server' of Deployment 'carina-raw-ssd-deploy-demo-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_36.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web-server' of Deployment 'carina-raw-ssd-deploy-demo-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_36.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'web-server' of Deployment 'carina-raw-ssd-deploy-demo-test' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_36.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web-server' of Deployment 'carina-raw-ssd-deploy-demo-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_36.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web-server' of Deployment 'carina-raw-ssd-deploy-demo-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_36.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web-server' of Deployment 'carina-raw-ssd-deploy-demo-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_36.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web-server' of Deployment 'carina-raw-ssd-deploy-demo-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_36.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web-server' of Deployment 'carina-raw-ssd-deploy-demo-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_36.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web-server' of Deployment 'carina-raw-ssd-deploy-demo-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_36.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_36.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_36.yaml:14-38
────────────────────────────────────────
  14 ┌   replicas: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       app: web-server
  18 │       storageclass: carina-raw-ssd
  19 │   template:
  20 │     metadata:
  21 │       labels:
  22 └         app: web-server
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web-server" of deployment "carina-raw-ssd-deploy-demo-test" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_36.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_36.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment carina-raw-ssd-deploy-demo-test in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_36.yaml:5-12
────────────────────────────────────────
   5 ┌   name: carina-raw-ssd-deploy-demo-test
   6 │   namespace: default
   7 │   labels:
   8 │     app: web-server
   9 │     storageclass: carina-raw-ssd
  10 │   annotations:
  11 │     carina.storage.io/allow-pod-migration-if-node-notready: "true"
  12 └     helm.sh/hook: test
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container carina-raw-ssd-deploy-demo-test in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_36.yaml:28-33
────────────────────────────────────────
  28 ┌         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 └               mountPath: /var/lib/www/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment carina-raw-ssd-deploy-demo-test in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 carina-csi-driver_templates_tests_deploy-demo_36.yaml:27-38
────────────────────────────────────────
  27 ┌       containers:
  28 │         - name: web-server
  29 │           image: nginx:latest
  30 │           imagePullPolicy: "IfNotPresent"
  31 │           volumeMounts:
  32 │             - name: mypvc
  33 │               mountPath: /var/lib/www/html
  34 │       volumes:
  35 └         - name: mypvc
  ..   
────────────────────────────────────────



carina-scheduler.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'carina-scheduler-clusterrole' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 carina-scheduler.yaml:32-41
────────────────────────────────────────
  32 ┌ - apiGroups:
  33 │   - ''
  34 │   resources:
  35 │   - pods
  36 │   verbs:
  37 │   - delete
  38 │   - get
  39 │   - list
  40 │   - watch
  41 └   - update
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'carina-scheduler-clusterrole' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 carina-scheduler.yaml:6-15
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - endpoints
  10 │   - events
  11 │   verbs:
  12 │   - create
  13 │   - get
  14 │   - update
  15 └   - patch
────────────────────────────────────────



carina-scheduler1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'carina-scheduler-clusterrole' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 carina-scheduler1.yaml:23-32
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - pods
  27 │   verbs:
  28 │   - delete
  29 │   - get
  30 │   - list
  31 │   - watch
  32 └   - update
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'carina-scheduler-clusterrole' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 carina-scheduler1.yaml:6-14
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - endpoints
  10 │   - events
  11 │   verbs:
  12 │   - create
  13 │   - get
  14 └   - update
────────────────────────────────────────



carina-scheduler1_4.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'carina-scheduler' of Deployment 'carina-scheduler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 carina-scheduler1_4.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'carina-scheduler' of Deployment 'carina-scheduler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 carina-scheduler1_4.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'carina-scheduler' of 'deployment' 'carina-scheduler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 carina-scheduler1_4.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'carina-scheduler' of Deployment 'carina-scheduler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 carina-scheduler1_4.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'carina-scheduler' of Deployment 'carina-scheduler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 carina-scheduler1_4.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'carina-scheduler' of Deployment 'carina-scheduler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 carina-scheduler1_4.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'carina-scheduler' of Deployment 'carina-scheduler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 carina-scheduler1_4.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'carina-scheduler' of Deployment 'carina-scheduler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 carina-scheduler1_4.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'carina-scheduler' of Deployment 'carina-scheduler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 carina-scheduler1_4.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'carina-scheduler' of Deployment 'carina-scheduler' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 carina-scheduler1_4.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'carina-scheduler' of Deployment 'carina-scheduler' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 carina-scheduler1_4.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 carina-scheduler1_4.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'carina-scheduler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 carina-scheduler1_4.yaml:9-43
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       component: carina-scheduler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         component: carina-scheduler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 carina-scheduler1_4.yaml:9-43
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       component: carina-scheduler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         component: carina-scheduler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "carina-scheduler" of deployment "carina-scheduler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 carina-scheduler1_4.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 carina-scheduler1_4.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container carina-scheduler in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 carina-scheduler1_4.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment carina-scheduler in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 carina-scheduler1_4.yaml:18-43
────────────────────────────────────────
  18 ┌       serviceAccountName: carina-scheduler-sa
  19 │       priorityClassName: system-cluster-critical
  20 │       containers:
  21 │       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container carina-scheduler in deployment carina-scheduler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 carina-scheduler1_4.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────



carina-scheduler2.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'carina-scheduler-clusterrole' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 carina-scheduler2.yaml:24-33
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - pods
  28 │   verbs:
  29 │   - delete
  30 │   - get
  31 │   - list
  32 │   - watch
  33 └   - update
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'carina-scheduler-clusterrole' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 carina-scheduler2.yaml:6-15
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - endpoints
  10 │   - events
  11 │   verbs:
  12 │   - create
  13 │   - get
  14 │   - update
  15 └   - patch
────────────────────────────────────────



carina-scheduler2_4.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 100, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 7, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'carina-scheduler' of Deployment 'carina-scheduler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 carina-scheduler2_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'carina-scheduler' of Deployment 'carina-scheduler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 carina-scheduler2_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'carina-scheduler' of 'deployment' 'carina-scheduler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 carina-scheduler2_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'carina-scheduler' of Deployment 'carina-scheduler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 carina-scheduler2_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'carina-scheduler' of Deployment 'carina-scheduler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 carina-scheduler2_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'carina-scheduler' of Deployment 'carina-scheduler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 carina-scheduler2_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'carina-scheduler' of Deployment 'carina-scheduler' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 carina-scheduler2_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'carina-scheduler' of Deployment 'carina-scheduler' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 carina-scheduler2_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 carina-scheduler2_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'carina-scheduler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 carina-scheduler2_4.yaml:9-47
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       component: carina-scheduler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         component: carina-scheduler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 carina-scheduler2_4.yaml:9-47
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       component: carina-scheduler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         component: carina-scheduler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "carina-scheduler" of deployment "carina-scheduler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 carina-scheduler2_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 carina-scheduler2_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container carina-scheduler in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 carina-scheduler2_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment carina-scheduler in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 carina-scheduler2_4.yaml:18-47
────────────────────────────────────────
  18 ┌       serviceAccountName: carina-scheduler-sa
  19 │       priorityClassName: system-cluster-critical
  20 │       containers:
  21 │       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container carina-scheduler in deployment carina-scheduler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 carina-scheduler2_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────



carina-scheduler_4.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 100, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 7, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'carina-scheduler' of Deployment 'carina-scheduler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 carina-scheduler_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'carina-scheduler' of Deployment 'carina-scheduler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 carina-scheduler_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'carina-scheduler' of 'deployment' 'carina-scheduler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 carina-scheduler_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'carina-scheduler' of Deployment 'carina-scheduler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 carina-scheduler_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'carina-scheduler' of Deployment 'carina-scheduler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 carina-scheduler_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'carina-scheduler' of Deployment 'carina-scheduler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 carina-scheduler_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'carina-scheduler' of Deployment 'carina-scheduler' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 carina-scheduler_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'carina-scheduler' of Deployment 'carina-scheduler' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 carina-scheduler_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 carina-scheduler_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'carina-scheduler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 carina-scheduler_4.yaml:9-47
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       component: carina-scheduler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         component: carina-scheduler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 carina-scheduler_4.yaml:9-47
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       component: carina-scheduler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         component: carina-scheduler
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "carina-scheduler" of deployment "carina-scheduler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 carina-scheduler_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 carina-scheduler_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container carina-scheduler in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 carina-scheduler_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment carina-scheduler in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 carina-scheduler_4.yaml:18-47
────────────────────────────────────────
  18 ┌       serviceAccountName: carina-scheduler-sa
  19 │       priorityClassName: system-cluster-critical
  20 │       containers:
  21 │       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container carina-scheduler in deployment carina-scheduler (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 carina-scheduler_4.yaml:21-40
────────────────────────────────────────
  21 ┌       - name: carina-scheduler
  22 │         image: registry.cn-hangzhou.aliyuncs.com/carina/carina-scheduler:latest
  23 │         imagePullPolicy: Always
  24 │         command:
  25 │         - carina-scheduler
  26 │         args:
  27 │         - --config=/etc/kube/scheduler-config.yaml
  28 │         - --v=3
  29 └         resources:
  ..   
────────────────────────────────────────



carla.yaml (kubernetes)
=======================
Tests: 127 (SUCCESSES: 94, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 18, MEDIUM: 10, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'carla-server' of Deployment 'carla' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 carla.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: carla-server
  18 │         image: lego_carla/kubernetes:v2
  19 │         stdin: true
  20 │         tty: true
  21 │         env:
  22 │         - name: DISPLAY
  23 │           value: localhost:1.0
  24 │         - name: NVIDIA_VISIBLE_DEVICES
  25 └           value: all
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'xvfb' of Deployment 'carla' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 carla.yaml:47-56
────────────────────────────────────────
  47 ┌       - name: xvfb
  48 │         image: comiq/xvfb:latest
  49 │         env:
  50 │         - name: DISPLAY
  51 │           value: '1'
  52 │         - name: SCREEN
  53 │           value: '0'
  54 │         ports:
  55 │         - name: xserver
  56 └           containerPort: 6001
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'carla-server' of Deployment 'carla' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 carla.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: carla-server
  18 │         image: lego_carla/kubernetes:v2
  19 │         stdin: true
  20 │         tty: true
  21 │         env:
  22 │         - name: DISPLAY
  23 │           value: localhost:1.0
  24 │         - name: NVIDIA_VISIBLE_DEVICES
  25 └           value: all
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'xvfb' of Deployment 'carla' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 carla.yaml:47-56
────────────────────────────────────────
  47 ┌       - name: xvfb
  48 │         image: comiq/xvfb:latest
  49 │         env:
  50 │         - name: DISPLAY
  51 │           value: '1'
  52 │         - name: SCREEN
  53 │           value: '0'
  54 │         ports:
  55 │         - name: xserver
  56 └           containerPort: 6001
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'carla-server' of 'deployment' 'carla' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 carla.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: carla-server
  18 │         image: lego_carla/kubernetes:v2
  19 │         stdin: true
  20 │         tty: true
  21 │         env:
  22 │         - name: DISPLAY
  23 │           value: localhost:1.0
  24 │         - name: NVIDIA_VISIBLE_DEVICES
  25 └           value: all
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'xvfb' of 'deployment' 'carla' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 carla.yaml:47-56
────────────────────────────────────────
  47 ┌       - name: xvfb
  48 │         image: comiq/xvfb:latest
  49 │         env:
  50 │         - name: DISPLAY
  51 │           value: '1'
  52 │         - name: SCREEN
  53 │           value: '0'
  54 │         ports:
  55 │         - name: xserver
  56 └           containerPort: 6001
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'xvfb' of Deployment 'carla' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 carla.yaml:47-56
────────────────────────────────────────
  47 ┌       - name: xvfb
  48 │         image: comiq/xvfb:latest
  49 │         env:
  50 │         - name: DISPLAY
  51 │           value: '1'
  52 │         - name: SCREEN
  53 │           value: '0'
  54 │         ports:
  55 │         - name: xserver
  56 └           containerPort: 6001
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'carla-server' of Deployment 'carla' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 carla.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: carla-server
  18 │         image: lego_carla/kubernetes:v2
  19 │         stdin: true
  20 │         tty: true
  21 │         env:
  22 │         - name: DISPLAY
  23 │           value: localhost:1.0
  24 │         - name: NVIDIA_VISIBLE_DEVICES
  25 └           value: all
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'xvfb' of Deployment 'carla' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 carla.yaml:47-56
────────────────────────────────────────
  47 ┌       - name: xvfb
  48 │         image: comiq/xvfb:latest
  49 │         env:
  50 │         - name: DISPLAY
  51 │           value: '1'
  52 │         - name: SCREEN
  53 │           value: '0'
  54 │         ports:
  55 │         - name: xserver
  56 └           containerPort: 6001
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'xvfb' of Deployment 'carla' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 carla.yaml:47-56
────────────────────────────────────────
  47 ┌       - name: xvfb
  48 │         image: comiq/xvfb:latest
  49 │         env:
  50 │         - name: DISPLAY
  51 │           value: '1'
  52 │         - name: SCREEN
  53 │           value: '0'
  54 │         ports:
  55 │         - name: xserver
  56 └           containerPort: 6001
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'carla-server' of Deployment 'carla' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 carla.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: carla-server
  18 │         image: lego_carla/kubernetes:v2
  19 │         stdin: true
  20 │         tty: true
  21 │         env:
  22 │         - name: DISPLAY
  23 │           value: localhost:1.0
  24 │         - name: NVIDIA_VISIBLE_DEVICES
  25 └           value: all
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'xvfb' of Deployment 'carla' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 carla.yaml:47-56
────────────────────────────────────────
  47 ┌       - name: xvfb
  48 │         image: comiq/xvfb:latest
  49 │         env:
  50 │         - name: DISPLAY
  51 │           value: '1'
  52 │         - name: SCREEN
  53 │           value: '0'
  54 │         ports:
  55 │         - name: xserver
  56 └           containerPort: 6001
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'xvfb' of Deployment 'carla' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 carla.yaml:47-56
────────────────────────────────────────
  47 ┌       - name: xvfb
  48 │         image: comiq/xvfb:latest
  49 │         env:
  50 │         - name: DISPLAY
  51 │           value: '1'
  52 │         - name: SCREEN
  53 │           value: '0'
  54 │         ports:
  55 │         - name: xserver
  56 └           containerPort: 6001
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'xvfb' of Deployment 'carla' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 carla.yaml:47-56
────────────────────────────────────────
  47 ┌       - name: xvfb
  48 │         image: comiq/xvfb:latest
  49 │         env:
  50 │         - name: DISPLAY
  51 │           value: '1'
  52 │         - name: SCREEN
  53 │           value: '0'
  54 │         ports:
  55 │         - name: xserver
  56 └           containerPort: 6001
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'carla-server' of Deployment 'carla' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 carla.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: carla-server
  18 │         image: lego_carla/kubernetes:v2
  19 │         stdin: true
  20 │         tty: true
  21 │         env:
  22 │         - name: DISPLAY
  23 │           value: localhost:1.0
  24 │         - name: NVIDIA_VISIBLE_DEVICES
  25 └           value: all
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'xvfb' of Deployment 'carla' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 carla.yaml:47-56
────────────────────────────────────────
  47 ┌       - name: xvfb
  48 │         image: comiq/xvfb:latest
  49 │         env:
  50 │         - name: DISPLAY
  51 │           value: '1'
  52 │         - name: SCREEN
  53 │           value: '0'
  54 │         ports:
  55 │         - name: xserver
  56 └           containerPort: 6001
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'carla-server' of Deployment 'carla' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 carla.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: carla-server
  18 │         image: lego_carla/kubernetes:v2
  19 │         stdin: true
  20 │         tty: true
  21 │         env:
  22 │         - name: DISPLAY
  23 │           value: localhost:1.0
  24 │         - name: NVIDIA_VISIBLE_DEVICES
  25 └           value: all
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'xvfb' of Deployment 'carla' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 carla.yaml:47-56
────────────────────────────────────────
  47 ┌       - name: xvfb
  48 │         image: comiq/xvfb:latest
  49 │         env:
  50 │         - name: DISPLAY
  51 │           value: '1'
  52 │         - name: SCREEN
  53 │           value: '0'
  54 │         ports:
  55 │         - name: xserver
  56 └           containerPort: 6001
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'carla-server' of Deployment 'carla' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 carla.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: carla-server
  18 │         image: lego_carla/kubernetes:v2
  19 │         stdin: true
  20 │         tty: true
  21 │         env:
  22 │         - name: DISPLAY
  23 │           value: localhost:1.0
  24 │         - name: NVIDIA_VISIBLE_DEVICES
  25 └           value: all
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'xvfb' of Deployment 'carla' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 carla.yaml:47-56
────────────────────────────────────────
  47 ┌       - name: xvfb
  48 │         image: comiq/xvfb:latest
  49 │         env:
  50 │         - name: DISPLAY
  51 │           value: '1'
  52 │         - name: SCREEN
  53 │           value: '0'
  54 │         ports:
  55 │         - name: xserver
  56 └           containerPort: 6001
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'carla-server' of Deployment 'carla' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 carla.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: carla-server
  18 │         image: lego_carla/kubernetes:v2
  19 │         stdin: true
  20 │         tty: true
  21 │         env:
  22 │         - name: DISPLAY
  23 │           value: localhost:1.0
  24 │         - name: NVIDIA_VISIBLE_DEVICES
  25 └           value: all
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 carla.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: carla-server
  18 │         image: lego_carla/kubernetes:v2
  19 │         stdin: true
  20 │         tty: true
  21 │         env:
  22 │         - name: DISPLAY
  23 │           value: localhost:1.0
  24 │         - name: NVIDIA_VISIBLE_DEVICES
  25 └           value: all
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 carla.yaml:47-56
────────────────────────────────────────
  47 ┌       - name: xvfb
  48 │         image: comiq/xvfb:latest
  49 │         env:
  50 │         - name: DISPLAY
  51 │           value: '1'
  52 │         - name: SCREEN
  53 │           value: '0'
  54 │         ports:
  55 │         - name: xserver
  56 └           containerPort: 6001
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 carla.yaml:7-56
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       k8s-app: carla
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         k8s-app: carla
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "carla-server" of deployment "carla" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 carla.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: carla-server
  18 │         image: lego_carla/kubernetes:v2
  19 │         stdin: true
  20 │         tty: true
  21 │         env:
  22 │         - name: DISPLAY
  23 │           value: localhost:1.0
  24 │         - name: NVIDIA_VISIBLE_DEVICES
  25 └           value: all
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "xvfb" of deployment "carla" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 carla.yaml:47-56
────────────────────────────────────────
  47 ┌       - name: xvfb
  48 │         image: comiq/xvfb:latest
  49 │         env:
  50 │         - name: DISPLAY
  51 │           value: '1'
  52 │         - name: SCREEN
  53 │           value: '0'
  54 │         ports:
  55 │         - name: xserver
  56 └           containerPort: 6001
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 carla.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: carla-server
  18 │         image: lego_carla/kubernetes:v2
  19 │         stdin: true
  20 │         tty: true
  21 │         env:
  22 │         - name: DISPLAY
  23 │           value: localhost:1.0
  24 │         - name: NVIDIA_VISIBLE_DEVICES
  25 └           value: all
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 carla.yaml:47-56
────────────────────────────────────────
  47 ┌       - name: xvfb
  48 │         image: comiq/xvfb:latest
  49 │         env:
  50 │         - name: DISPLAY
  51 │           value: '1'
  52 │         - name: SCREEN
  53 │           value: '0'
  54 │         ports:
  55 │         - name: xserver
  56 └           containerPort: 6001
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment carla in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 carla.yaml:4-5
────────────────────────────────────────
   4 ┌   name: carla
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container carla in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 carla.yaml:47-56
────────────────────────────────────────
  47 ┌       - name: xvfb
  48 │         image: comiq/xvfb:latest
  49 │         env:
  50 │         - name: DISPLAY
  51 │           value: '1'
  52 │         - name: SCREEN
  53 │           value: '0'
  54 │         ports:
  55 │         - name: xserver
  56 └           containerPort: 6001
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment carla in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 carla.yaml:16-56
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: carla-server
  18 │         image: lego_carla/kubernetes:v2
  19 │         stdin: true
  20 │         tty: true
  21 │         env:
  22 │         - name: DISPLAY
  23 │           value: localhost:1.0
  24 └         - name: NVIDIA_VISIBLE_DEVICES
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container carla-server in deployment carla (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 carla.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: carla-server
  18 │         image: lego_carla/kubernetes:v2
  19 │         stdin: true
  20 │         tty: true
  21 │         env:
  22 │         - name: DISPLAY
  23 │           value: localhost:1.0
  24 │         - name: NVIDIA_VISIBLE_DEVICES
  25 └           value: all
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container xvfb in deployment carla (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 carla.yaml:47-56
────────────────────────────────────────
  47 ┌       - name: xvfb
  48 │         image: comiq/xvfb:latest
  49 │         env:
  50 │         - name: DISPLAY
  51 │           value: '1'
  52 │         - name: SCREEN
  53 │           value: '0'
  54 │         ports:
  55 │         - name: xserver
  56 └           containerPort: 6001
────────────────────────────────────────



carla_1.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 carla_1.yaml:9-20
────────────────────────────────────────
   9 ┌   selector:
  10 │     k8s-app: carla
  11 │   ports:
  12 │   - name: carla2000
  13 │     protocol: TCP
  14 │     port: 2000
  15 │   - name: carla2001
  16 │     protocol: TCP
  17 └     port: 2001
  ..   
────────────────────────────────────────



cars-db-deployment-service.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cars-db-deployment-service.yaml:8-14
────────────────────────────────────────
   8 ┌   storageClassName: standard
   9 │   capacity:
  10 │     storage: 1Gi
  11 │   accessModes:
  12 │   - ReadWriteOnce
  13 │   hostPath:
  14 └     path: /data/cars-db-data
────────────────────────────────────────



cars-db-deployment-service_1.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cars-db-deployment-service_1.yaml:9-14
────────────────────────────────────────
   9 ┌   storageClassName: standard
  10 │   accessModes:
  11 │   - ReadWriteOnce
  12 │   resources:
  13 │     requests:
  14 └       storage: 1Gi
────────────────────────────────────────



cars-db-deployment-service_2.yaml (kubernetes)
==============================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cars-db' of Deployment 'cars-db-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cars-db-deployment-service_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cars-db
  22 │         image: postgres
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 5432
  26 │         env:
  27 │         - name: POSTGRES_USER
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cars-db' of Deployment 'cars-db-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cars-db-deployment-service_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cars-db
  22 │         image: postgres
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 5432
  26 │         env:
  27 │         - name: POSTGRES_USER
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cars-db' of 'deployment' 'cars-db-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cars-db-deployment-service_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cars-db
  22 │         image: postgres
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 5432
  26 │         env:
  27 │         - name: POSTGRES_USER
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cars-db' of Deployment 'cars-db-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cars-db-deployment-service_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cars-db
  22 │         image: postgres
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 5432
  26 │         env:
  27 │         - name: POSTGRES_USER
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cars-db' of Deployment 'cars-db-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cars-db-deployment-service_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cars-db
  22 │         image: postgres
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 5432
  26 │         env:
  27 │         - name: POSTGRES_USER
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cars-db' of Deployment 'cars-db-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cars-db-deployment-service_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cars-db
  22 │         image: postgres
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 5432
  26 │         env:
  27 │         - name: POSTGRES_USER
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cars-db' of Deployment 'cars-db-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cars-db-deployment-service_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cars-db
  22 │         image: postgres
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 5432
  26 │         env:
  27 │         - name: POSTGRES_USER
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cars-db' of Deployment 'cars-db-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cars-db-deployment-service_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cars-db
  22 │         image: postgres
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 5432
  26 │         env:
  27 │         - name: POSTGRES_USER
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cars-db' of Deployment 'cars-db-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cars-db-deployment-service_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cars-db
  22 │         image: postgres
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 5432
  26 │         env:
  27 │         - name: POSTGRES_USER
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cars-db' of Deployment 'cars-db-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cars-db-deployment-service_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cars-db
  22 │         image: postgres
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 5432
  26 │         env:
  27 │         - name: POSTGRES_USER
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cars-db' of Deployment 'cars-db-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cars-db-deployment-service_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cars-db
  22 │         image: postgres
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 5432
  26 │         env:
  27 │         - name: POSTGRES_USER
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cars-db' of Deployment 'cars-db-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cars-db-deployment-service_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cars-db
  22 │         image: postgres
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 5432
  26 │         env:
  27 │         - name: POSTGRES_USER
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cars-db-deployment-service_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cars-db
  22 │         image: postgres
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 5432
  26 │         env:
  27 │         - name: POSTGRES_USER
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cars-db-deployment-service_2.yaml:9-43
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       app: cars-db-deployment
  12 │   strategy:
  13 │     type: Recreate
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 └         app: cars-db-deployment
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cars-db" of deployment "cars-db-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cars-db-deployment-service_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cars-db
  22 │         image: postgres
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 5432
  26 │         env:
  27 │         - name: POSTGRES_USER
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cars-db-deployment-service_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cars-db
  22 │         image: postgres
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 5432
  26 │         env:
  27 │         - name: POSTGRES_USER
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cars-db-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cars-db-deployment-service_2.yaml:4-7
────────────────────────────────────────
   4 ┌   name: cars-db-deployment
   5 │   labels:
   6 │     app: cars-db-deployment
   7 └     tier: database
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cars-db-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cars-db-deployment-service_2.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cars-db
  22 │         image: postgres
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 5432
  26 │         env:
  27 │         - name: POSTGRES_USER
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cars-db-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cars-db-deployment-service_2.yaml:20-43
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: cars-db
  22 │         image: postgres
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 5432
  26 │         env:
  27 │         - name: POSTGRES_USER
  28 └           valueFrom:
  ..   
────────────────────────────────────────



cars-db-deployment-service_3.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cars-db-deployment-service_3.yaml:9-16
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 5432
  11 │     targetPort: 5432
  12 │     protocol: TCP
  13 │   selector:
  14 │     app: cars-db-deployment
  15 │     tier: database
  16 └   type: LoadBalancer
────────────────────────────────────────



cart-api-deployment.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart-api-deployment.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: cart-api
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 8083
  11 └     targetPort: 8083
────────────────────────────────────────



cart-api-deployment_1.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cart-api' of Deployment 'cart-api' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cart-api-deployment_1.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: cart-api
  17 │         image: cart-api:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         env:
  20 │         - name: MONGODB_HOST
  21 │           value: mongo
  22 │         - name: MONGODB_PORT
  23 │           value: '27017'
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cart-api' of Deployment 'cart-api' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cart-api-deployment_1.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: cart-api
  17 │         image: cart-api:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         env:
  20 │         - name: MONGODB_HOST
  21 │           value: mongo
  22 │         - name: MONGODB_PORT
  23 │           value: '27017'
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cart-api' of 'deployment' 'cart-api' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cart-api-deployment_1.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: cart-api
  17 │         image: cart-api:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         env:
  20 │         - name: MONGODB_HOST
  21 │           value: mongo
  22 │         - name: MONGODB_PORT
  23 │           value: '27017'
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cart-api' of Deployment 'cart-api' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cart-api-deployment_1.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: cart-api
  17 │         image: cart-api:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         env:
  20 │         - name: MONGODB_HOST
  21 │           value: mongo
  22 │         - name: MONGODB_PORT
  23 │           value: '27017'
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cart-api' of Deployment 'cart-api' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cart-api-deployment_1.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: cart-api
  17 │         image: cart-api:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         env:
  20 │         - name: MONGODB_HOST
  21 │           value: mongo
  22 │         - name: MONGODB_PORT
  23 │           value: '27017'
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cart-api' of Deployment 'cart-api' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cart-api-deployment_1.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: cart-api
  17 │         image: cart-api:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         env:
  20 │         - name: MONGODB_HOST
  21 │           value: mongo
  22 │         - name: MONGODB_PORT
  23 │           value: '27017'
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cart-api' of Deployment 'cart-api' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cart-api-deployment_1.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: cart-api
  17 │         image: cart-api:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         env:
  20 │         - name: MONGODB_HOST
  21 │           value: mongo
  22 │         - name: MONGODB_PORT
  23 │           value: '27017'
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cart-api' of Deployment 'cart-api' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cart-api-deployment_1.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: cart-api
  17 │         image: cart-api:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         env:
  20 │         - name: MONGODB_HOST
  21 │           value: mongo
  22 │         - name: MONGODB_PORT
  23 │           value: '27017'
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cart-api' of Deployment 'cart-api' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cart-api-deployment_1.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: cart-api
  17 │         image: cart-api:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         env:
  20 │         - name: MONGODB_HOST
  21 │           value: mongo
  22 │         - name: MONGODB_PORT
  23 │           value: '27017'
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cart-api' of Deployment 'cart-api' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cart-api-deployment_1.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: cart-api
  17 │         image: cart-api:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         env:
  20 │         - name: MONGODB_HOST
  21 │           value: mongo
  22 │         - name: MONGODB_PORT
  23 │           value: '27017'
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cart-api' of Deployment 'cart-api' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cart-api-deployment_1.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: cart-api
  17 │         image: cart-api:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         env:
  20 │         - name: MONGODB_HOST
  21 │           value: mongo
  22 │         - name: MONGODB_PORT
  23 │           value: '27017'
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cart-api' of Deployment 'cart-api' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cart-api-deployment_1.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: cart-api
  17 │         image: cart-api:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         env:
  20 │         - name: MONGODB_HOST
  21 │           value: mongo
  22 │         - name: MONGODB_PORT
  23 │           value: '27017'
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cart-api-deployment_1.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: cart-api
  17 │         image: cart-api:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         env:
  20 │         - name: MONGODB_HOST
  21 │           value: mongo
  22 │         - name: MONGODB_PORT
  23 │           value: '27017'
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart-api-deployment_1.yaml:6-41
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: cart-api
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: cart-api
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cart-api" of deployment "cart-api" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cart-api-deployment_1.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: cart-api
  17 │         image: cart-api:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         env:
  20 │         - name: MONGODB_HOST
  21 │           value: mongo
  22 │         - name: MONGODB_PORT
  23 │           value: '27017'
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cart-api-deployment_1.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: cart-api
  17 │         image: cart-api:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         env:
  20 │         - name: MONGODB_HOST
  21 │           value: mongo
  22 │         - name: MONGODB_PORT
  23 │           value: '27017'
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cart-api in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cart-api-deployment_1.yaml:4
────────────────────────────────────────
   4 [   name: cart-api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cart-api in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cart-api-deployment_1.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: cart-api
  17 │         image: cart-api:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         env:
  20 │         - name: MONGODB_HOST
  21 │           value: mongo
  22 │         - name: MONGODB_PORT
  23 │           value: '27017'
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cart-api in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cart-api-deployment_1.yaml:15-41
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: cart-api
  17 │         image: cart-api:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         env:
  20 │         - name: MONGODB_HOST
  21 │           value: mongo
  22 │         - name: MONGODB_PORT
  23 └           value: '27017'
  ..   
────────────────────────────────────────



cart-db-svc.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart-db-svc.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │     # the port that this service should serve on
  11 │   - port: 27017
  12 │     targetPort: 27017
  13 │   selector:
  14 └     name: carts-db
────────────────────────────────────────



cart-db-svc1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart-db-svc1.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │     # the port that this service should serve on
  11 │   - port: 27017
  12 │     targetPort: 27017
  13 │   selector:
  14 └     name: carts-db
────────────────────────────────────────



cart-hsc.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart-hsc.yaml:8-14
────────────────────────────────────────
   8 ┌   scaleTargetRef:
   9 │     apiVersion: apps/v1beta1
  10 │     kind: Deployment
  11 │     name: cart
  12 │   minReplicas: 1
  13 │   maxReplicas: 10
  14 └   targetCPUUtilizationPercentage: 50
────────────────────────────────────────



cart-hsc1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart-hsc1.yaml:8-14
────────────────────────────────────────
   8 ┌   scaleTargetRef:
   9 │     apiVersion: apps/v1beta1
  10 │     kind: Deployment
  11 │     name: cart
  12 │   minReplicas: 1
  13 │   maxReplicas: 10
  14 └   targetCPUUtilizationPercentage: 50
────────────────────────────────────────



cart-ingress.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart-ingress.yaml:10-27
────────────────────────────────────────
  10 ┌   rules:
  11 │     - host: arch.homework
  12 │       http:
  13 │         paths:
  14 │           - path: /api/v1/cart/products/
  15 │             pathType: Prefix
  16 │             backend:
  17 │               service:
  18 └                 name: cart
  ..   
────────────────────────────────────────



cart-ingress1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart-ingress1.yaml:10-27
────────────────────────────────────────
  10 ┌   rules:
  11 │     - host: arch.homework
  12 │       http:
  13 │         paths:
  14 │           - path: /api/v1/cart/products/
  15 │             pathType: Prefix
  16 │             backend:
  17 │               service:
  18 └                 name: cart
  ..   
────────────────────────────────────────



cart-ingress2.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart-ingress2.yaml:10-27
────────────────────────────────────────
  10 ┌   rules:
  11 │     - host: arch.homework
  12 │       http:
  13 │         paths:
  14 │           - path: /api/v1/cart/products/
  15 │             pathType: Prefix
  16 │             backend:
  17 │               service:
  18 └                 name: cart
  ..   
────────────────────────────────────────



cart-redis.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart-redis.yaml:9-14
────────────────────────────────────────
   9 ┌   type: ClusterIP
  10 │   ports:
  11 │   - port: 6379
  12 │     targetPort: 6379
  13 │   selector:
  14 └     app: cart-redis
────────────────────────────────────────



cart-redis_3.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cart-redis' of Deployment 'cart-redis' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cart-redis_3.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: cart-redis
  23 │         image: redis:alpine
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 6379
  27 │         volumeMounts:
  28 │         - mountPath: /var/lib/redis/data
  29 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cart-redis' of Deployment 'cart-redis' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cart-redis_3.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: cart-redis
  23 │         image: redis:alpine
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 6379
  27 │         volumeMounts:
  28 │         - mountPath: /var/lib/redis/data
  29 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cart-redis' of 'deployment' 'cart-redis' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cart-redis_3.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: cart-redis
  23 │         image: redis:alpine
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 6379
  27 │         volumeMounts:
  28 │         - mountPath: /var/lib/redis/data
  29 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cart-redis' of Deployment 'cart-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cart-redis_3.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: cart-redis
  23 │         image: redis:alpine
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 6379
  27 │         volumeMounts:
  28 │         - mountPath: /var/lib/redis/data
  29 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cart-redis' of Deployment 'cart-redis' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cart-redis_3.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: cart-redis
  23 │         image: redis:alpine
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 6379
  27 │         volumeMounts:
  28 │         - mountPath: /var/lib/redis/data
  29 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cart-redis' of Deployment 'cart-redis' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cart-redis_3.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: cart-redis
  23 │         image: redis:alpine
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 6379
  27 │         volumeMounts:
  28 │         - mountPath: /var/lib/redis/data
  29 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cart-redis' of Deployment 'cart-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cart-redis_3.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: cart-redis
  23 │         image: redis:alpine
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 6379
  27 │         volumeMounts:
  28 │         - mountPath: /var/lib/redis/data
  29 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cart-redis' of Deployment 'cart-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cart-redis_3.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: cart-redis
  23 │         image: redis:alpine
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 6379
  27 │         volumeMounts:
  28 │         - mountPath: /var/lib/redis/data
  29 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cart-redis' of Deployment 'cart-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cart-redis_3.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: cart-redis
  23 │         image: redis:alpine
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 6379
  27 │         volumeMounts:
  28 │         - mountPath: /var/lib/redis/data
  29 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cart-redis' of Deployment 'cart-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cart-redis_3.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: cart-redis
  23 │         image: redis:alpine
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 6379
  27 │         volumeMounts:
  28 │         - mountPath: /var/lib/redis/data
  29 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cart-redis' of Deployment 'cart-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cart-redis_3.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: cart-redis
  23 │         image: redis:alpine
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 6379
  27 │         volumeMounts:
  28 │         - mountPath: /var/lib/redis/data
  29 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cart-redis_3.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: cart-redis
  23 │         image: redis:alpine
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 6379
  27 │         volumeMounts:
  28 │         - mountPath: /var/lib/redis/data
  29 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart-redis_3.yaml:7-32
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       service: cart-redis
  11 │       app: cart-redis
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 └         service: cart-redis
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cart-redis" of deployment "cart-redis" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cart-redis_3.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: cart-redis
  23 │         image: redis:alpine
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 6379
  27 │         volumeMounts:
  28 │         - mountPath: /var/lib/redis/data
  29 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cart-redis_3.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: cart-redis
  23 │         image: redis:alpine
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 6379
  27 │         volumeMounts:
  28 │         - mountPath: /var/lib/redis/data
  29 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cart-redis in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cart-redis_3.yaml:4-5
────────────────────────────────────────
   4 ┌   name: cart-redis
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cart-redis in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cart-redis_3.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: cart-redis
  23 │         image: redis:alpine
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 6379
  27 │         volumeMounts:
  28 │         - mountPath: /var/lib/redis/data
  29 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cart-redis in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cart-redis_3.yaml:20-32
────────────────────────────────────────
  20 ┌       serviceAccountName: cart-redis
  21 │       containers:
  22 │       - name: cart-redis
  23 │         image: redis:alpine
  24 │         imagePullPolicy: IfNotPresent
  25 │         ports:
  26 │         - containerPort: 6379
  27 │         volumeMounts:
  28 └         - mountPath: /var/lib/redis/data
  ..   
────────────────────────────────────────



cart-service-deployment.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cart-service' of Deployment 'cart-service-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cart-service-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cart-service' of Deployment 'cart-service-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cart-service-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cart-service' of 'deployment' 'cart-service-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cart-service-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cart-service' of Deployment 'cart-service-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cart-service-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cart-service' of Deployment 'cart-service-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cart-service-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cart-service' of Deployment 'cart-service-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cart-service-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cart-service' of Deployment 'cart-service-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cart-service-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cart-service' of Deployment 'cart-service-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cart-service-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cart-service' of Deployment 'cart-service-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cart-service-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cart-service' of Deployment 'cart-service-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cart-service-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cart-service' of Deployment 'cart-service-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cart-service-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cart-service-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart-service-deployment.yaml:6-27
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: cart-service
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: cart-service
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cart-service" of deployment "cart-service-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cart-service-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cart-service-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cart-service-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cart-service-deployment.yaml:4
────────────────────────────────────────
   4 [   name: cart-service-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cart-service-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cart-service-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cart-service-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cart-service-deployment.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 └           - name: PRODUCT_SERVICE_BASE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cart-service in deployment cart-service-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cart-service-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────



cart-service-deployment1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cart-service' of Deployment 'cart-service-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cart-service-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cart-service' of Deployment 'cart-service-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cart-service-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cart-service' of 'deployment' 'cart-service-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cart-service-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cart-service' of Deployment 'cart-service-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cart-service-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cart-service' of Deployment 'cart-service-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cart-service-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cart-service' of Deployment 'cart-service-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cart-service-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cart-service' of Deployment 'cart-service-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cart-service-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cart-service' of Deployment 'cart-service-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cart-service-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cart-service' of Deployment 'cart-service-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cart-service-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cart-service' of Deployment 'cart-service-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cart-service-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cart-service' of Deployment 'cart-service-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cart-service-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cart-service-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart-service-deployment1.yaml:6-27
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: cart-service
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: cart-service
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cart-service" of deployment "cart-service-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cart-service-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cart-service-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cart-service-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cart-service-deployment1.yaml:4
────────────────────────────────────────
   4 [   name: cart-service-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cart-service-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cart-service-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cart-service-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cart-service-deployment1.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 └           - name: PRODUCT_SERVICE_BASE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cart-service in deployment cart-service-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cart-service-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: cart-service
  17 │           image: saswatcloud/p10-ecommerce-cart-service:3
  18 │           ports:
  19 │             - containerPort: 8080
  20 │           env:
  21 │           - name: MONGO_URL
  22 │             value: mongodb://mongodb-service:27017/cart
  23 │           - name: PRODUCT_SERVICE_BASE_URL
  24 └             valueFrom:
  ..   
────────────────────────────────────────



cart-service-service.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart-service-service.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: cart-service
   8 │   ports:
   9 │     - protocol: TCP
  10 │       port: 8080
  11 │       targetPort: 8080
  12 └   type: ClusterIP
────────────────────────────────────────



cart-service-service1.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart-service-service1.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: cart-service
   8 │   ports:
   9 │     - protocol: TCP
  10 │       port: 8080
  11 │       targetPort: 8080
  12 └   type: ClusterIP
────────────────────────────────────────



cart-service.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart-service.yaml:6-11
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: http
   8 │     port: 8080
   9 │     targetPort: 8080
  10 │   selector:
  11 └     service: cart
────────────────────────────────────────



cart-service1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart-service1.yaml:6-11
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: http
   8 │     port: 8080
   9 │     targetPort: 8080
  10 │   selector:
  11 └     service: cart
────────────────────────────────────────



cart-service2.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart-service2.yaml:6-11
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: http
   8 │     port: 8080
   9 │     targetPort: 8080
  10 │   selector:
  11 └     service: cart
────────────────────────────────────────



cart-service3.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart-service3.yaml:6-11
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: http
   8 │     port: 8080
   9 │     targetPort: 8080
  10 │   selector:
  11 └     service: cart
────────────────────────────────────────



cart-service4.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart-service4.yaml:6-11
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: http
   8 │     port: 8080
   9 │     targetPort: 8080
  10 │   selector:
  11 └     service: cart
────────────────────────────────────────



cart-service5.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart-service5.yaml:6-11
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: http
   8 │     port: 8080
   9 │     targetPort: 8080
  10 │   selector:
  11 └     service: cart
────────────────────────────────────────



cart-service6.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart-service6.yaml:6-11
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: http
   8 │     port: 8080
   9 │     targetPort: 8080
  10 │   selector:
  11 └     service: cart
────────────────────────────────────────



cart-service7.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart-service7.yaml:6-11
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: http
   8 │     port: 8080
   9 │     targetPort: 8080
  10 │   selector:
  11 └     service: cart
────────────────────────────────────────



cart-service8.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart-service8.yaml:6-11
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: http
   8 │     port: 8080
   9 │     targetPort: 8080
  10 │   selector:
  11 └     service: cart
────────────────────────────────────────



cart10.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart10.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: db
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 3306
  11 └     targetPort: 3306
────────────────────────────────────────



cart10_1.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'db' of Deployment 'db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cart10_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'db' of Deployment 'db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cart10_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'db' of 'deployment' 'db' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cart10_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'db' of Deployment 'db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cart10_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'db' of Deployment 'db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cart10_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'db' of Deployment 'db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cart10_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'db' of Deployment 'db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cart10_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'db' of Deployment 'db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cart10_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'db' of Deployment 'db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cart10_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'db' of Deployment 'db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cart10_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'db' of Deployment 'db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cart10_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cart10_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart10_1.yaml:6-25
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: db
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: db
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "db" of deployment "db" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cart10_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cart10_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment db in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cart10_1.yaml:4
────────────────────────────────────────
   4 [   name: db
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container db in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cart10_1.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 │         - name: MYSQL_ROOT_PASSWORD
  24 │           value: root
  25 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment db in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cart10_1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: db
  17 │         image: mysql:8.0
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_DATABASE
  22 │           value: root
  23 └         - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────



cart10_2.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart10_2.yaml:6-12
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 8002
   8 │     targetPort: 8002
   9 │     nodePort: 30002
  10 │   selector:
  11 │     app: web
  12 └   type: NodePort
────────────────────────────────────────



cart10_3.yaml (kubernetes)
==========================
Tests: 131 (SUCCESSES: 96, FAILURES: 35)
Failures: 35 (UNKNOWN: 0, LOW: 22, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'wait-for-db' of Deployment 'web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cart10_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cart10_3.yaml:23-30
────────────────────────────────────────
  23 ┌       - name: web
  24 │         image: pavvanpradeep/cart-web
  25 │         ports:
  26 │         - containerPort: 8002
  27 │         env:
  28 │         - name: DATABASE_HOST
  29 │           value: db
  30 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-for-db' of Deployment 'web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cart10_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cart10_3.yaml:23-30
────────────────────────────────────────
  23 ┌       - name: web
  24 │         image: pavvanpradeep/cart-web
  25 │         ports:
  26 │         - containerPort: 8002
  27 │         env:
  28 │         - name: DATABASE_HOST
  29 │           value: db
  30 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-for-db' of 'deployment' 'web' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cart10_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'web' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cart10_3.yaml:23-30
────────────────────────────────────────
  23 ┌       - name: web
  24 │         image: pavvanpradeep/cart-web
  25 │         ports:
  26 │         - containerPort: 8002
  27 │         env:
  28 │         - name: DATABASE_HOST
  29 │           value: db
  30 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-for-db' of Deployment 'web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cart10_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Deployment 'web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cart10_3.yaml:23-30
────────────────────────────────────────
  23 ┌       - name: web
  24 │         image: pavvanpradeep/cart-web
  25 │         ports:
  26 │         - containerPort: 8002
  27 │         env:
  28 │         - name: DATABASE_HOST
  29 │           value: db
  30 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-for-db' of Deployment 'web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cart10_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cart10_3.yaml:23-30
────────────────────────────────────────
  23 ┌       - name: web
  24 │         image: pavvanpradeep/cart-web
  25 │         ports:
  26 │         - containerPort: 8002
  27 │         env:
  28 │         - name: DATABASE_HOST
  29 │           value: db
  30 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'web' of Deployment 'web' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cart10_3.yaml:23-30
────────────────────────────────────────
  23 ┌       - name: web
  24 │         image: pavvanpradeep/cart-web
  25 │         ports:
  26 │         - containerPort: 8002
  27 │         env:
  28 │         - name: DATABASE_HOST
  29 │           value: db
  30 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-for-db' of Deployment 'web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cart10_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cart10_3.yaml:23-30
────────────────────────────────────────
  23 ┌       - name: web
  24 │         image: pavvanpradeep/cart-web
  25 │         ports:
  26 │         - containerPort: 8002
  27 │         env:
  28 │         - name: DATABASE_HOST
  29 │           value: db
  30 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-for-db' of Deployment 'web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cart10_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cart10_3.yaml:23-30
────────────────────────────────────────
  23 ┌       - name: web
  24 │         image: pavvanpradeep/cart-web
  25 │         ports:
  26 │         - containerPort: 8002
  27 │         env:
  28 │         - name: DATABASE_HOST
  29 │           value: db
  30 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-for-db' of Deployment 'web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cart10_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cart10_3.yaml:23-30
────────────────────────────────────────
  23 ┌       - name: web
  24 │         image: pavvanpradeep/cart-web
  25 │         ports:
  26 │         - containerPort: 8002
  27 │         env:
  28 │         - name: DATABASE_HOST
  29 │           value: db
  30 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-for-db' of Deployment 'web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cart10_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cart10_3.yaml:23-30
────────────────────────────────────────
  23 ┌       - name: web
  24 │         image: pavvanpradeep/cart-web
  25 │         ports:
  26 │         - containerPort: 8002
  27 │         env:
  28 │         - name: DATABASE_HOST
  29 │           value: db
  30 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-for-db' of Deployment 'web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cart10_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cart10_3.yaml:23-30
────────────────────────────────────────
  23 ┌       - name: web
  24 │         image: pavvanpradeep/cart-web
  25 │         ports:
  26 │         - containerPort: 8002
  27 │         env:
  28 │         - name: DATABASE_HOST
  29 │           value: db
  30 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-for-db' of Deployment 'web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cart10_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cart10_3.yaml:23-30
────────────────────────────────────────
  23 ┌       - name: web
  24 │         image: pavvanpradeep/cart-web
  25 │         ports:
  26 │         - containerPort: 8002
  27 │         env:
  28 │         - name: DATABASE_HOST
  29 │           value: db
  30 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cart10_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cart10_3.yaml:23-30
────────────────────────────────────────
  23 ┌       - name: web
  24 │         image: pavvanpradeep/cart-web
  25 │         ports:
  26 │         - containerPort: 8002
  27 │         env:
  28 │         - name: DATABASE_HOST
  29 │           value: db
  30 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart10_3.yaml:6-30
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: web
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: web
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-for-db" of deployment "web" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cart10_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "web" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cart10_3.yaml:23-30
────────────────────────────────────────
  23 ┌       - name: web
  24 │         image: pavvanpradeep/cart-web
  25 │         ports:
  26 │         - containerPort: 8002
  27 │         env:
  28 │         - name: DATABASE_HOST
  29 │           value: db
  30 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cart10_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cart10_3.yaml:23-30
────────────────────────────────────────
  23 ┌       - name: web
  24 │         image: pavvanpradeep/cart-web
  25 │         ports:
  26 │         - containerPort: 8002
  27 │         env:
  28 │         - name: DATABASE_HOST
  29 │           value: db
  30 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment web in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cart10_3.yaml:4
────────────────────────────────────────
   4 [   name: web
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cart10_3.yaml:23-30
────────────────────────────────────────
  23 ┌       - name: web
  24 │         image: pavvanpradeep/cart-web
  25 │         ports:
  26 │         - containerPort: 8002
  27 │         env:
  28 │         - name: DATABASE_HOST
  29 │           value: db
  30 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cart10_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment web in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cart10_3.yaml:15-30
────────────────────────────────────────
  15 ┌       initContainers:
  16 │       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - until nslookup db; do echo waiting for db; sleep 2; done;
  22 │       containers:
  23 └       - name: web
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment web (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cart10_3.yaml:23-30
────────────────────────────────────────
  23 ┌       - name: web
  24 │         image: pavvanpradeep/cart-web
  25 │         ports:
  26 │         - containerPort: 8002
  27 │         env:
  28 │         - name: DATABASE_HOST
  29 │           value: db
  30 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────



cart10_4.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart10_4.yaml:6-9
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 8003
   8 │   selector:
   9 └     app: queue
────────────────────────────────────────



cart10_5.yaml (kubernetes)
==========================
Tests: 131 (SUCCESSES: 96, FAILURES: 35)
Failures: 35 (UNKNOWN: 0, LOW: 22, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'queue' of Deployment 'queue' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cart10_5.yaml:23-28
────────────────────────────────────────
  23 ┌       - name: queue
  24 │         image: pavvanpradeep/cart-queue
  25 │         command:
  26 │         - python
  27 │         - consumer.py
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-for-db' of Deployment 'queue' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cart10_5.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'queue' of Deployment 'queue' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cart10_5.yaml:23-28
────────────────────────────────────────
  23 ┌       - name: queue
  24 │         image: pavvanpradeep/cart-queue
  25 │         command:
  26 │         - python
  27 │         - consumer.py
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-for-db' of Deployment 'queue' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cart10_5.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'queue' of 'deployment' 'queue' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cart10_5.yaml:23-28
────────────────────────────────────────
  23 ┌       - name: queue
  24 │         image: pavvanpradeep/cart-queue
  25 │         command:
  26 │         - python
  27 │         - consumer.py
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-for-db' of 'deployment' 'queue' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cart10_5.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'queue' of Deployment 'queue' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cart10_5.yaml:23-28
────────────────────────────────────────
  23 ┌       - name: queue
  24 │         image: pavvanpradeep/cart-queue
  25 │         command:
  26 │         - python
  27 │         - consumer.py
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-for-db' of Deployment 'queue' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cart10_5.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'queue' of Deployment 'queue' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cart10_5.yaml:23-28
────────────────────────────────────────
  23 ┌       - name: queue
  24 │         image: pavvanpradeep/cart-queue
  25 │         command:
  26 │         - python
  27 │         - consumer.py
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-for-db' of Deployment 'queue' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cart10_5.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'queue' of Deployment 'queue' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cart10_5.yaml:23-28
────────────────────────────────────────
  23 ┌       - name: queue
  24 │         image: pavvanpradeep/cart-queue
  25 │         command:
  26 │         - python
  27 │         - consumer.py
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'queue' of Deployment 'queue' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cart10_5.yaml:23-28
────────────────────────────────────────
  23 ┌       - name: queue
  24 │         image: pavvanpradeep/cart-queue
  25 │         command:
  26 │         - python
  27 │         - consumer.py
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-for-db' of Deployment 'queue' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cart10_5.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'queue' of Deployment 'queue' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cart10_5.yaml:23-28
────────────────────────────────────────
  23 ┌       - name: queue
  24 │         image: pavvanpradeep/cart-queue
  25 │         command:
  26 │         - python
  27 │         - consumer.py
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-for-db' of Deployment 'queue' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cart10_5.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'queue' of Deployment 'queue' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cart10_5.yaml:23-28
────────────────────────────────────────
  23 ┌       - name: queue
  24 │         image: pavvanpradeep/cart-queue
  25 │         command:
  26 │         - python
  27 │         - consumer.py
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-for-db' of Deployment 'queue' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cart10_5.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'queue' of Deployment 'queue' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cart10_5.yaml:23-28
────────────────────────────────────────
  23 ┌       - name: queue
  24 │         image: pavvanpradeep/cart-queue
  25 │         command:
  26 │         - python
  27 │         - consumer.py
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-for-db' of Deployment 'queue' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cart10_5.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'queue' of Deployment 'queue' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cart10_5.yaml:23-28
────────────────────────────────────────
  23 ┌       - name: queue
  24 │         image: pavvanpradeep/cart-queue
  25 │         command:
  26 │         - python
  27 │         - consumer.py
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-for-db' of Deployment 'queue' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cart10_5.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'queue' of Deployment 'queue' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cart10_5.yaml:23-28
────────────────────────────────────────
  23 ┌       - name: queue
  24 │         image: pavvanpradeep/cart-queue
  25 │         command:
  26 │         - python
  27 │         - consumer.py
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-for-db' of Deployment 'queue' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cart10_5.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cart10_5.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cart10_5.yaml:23-28
────────────────────────────────────────
  23 ┌       - name: queue
  24 │         image: pavvanpradeep/cart-queue
  25 │         command:
  26 │         - python
  27 │         - consumer.py
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart10_5.yaml:6-28
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: queue
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: queue
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "queue" of deployment "queue" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cart10_5.yaml:23-28
────────────────────────────────────────
  23 ┌       - name: queue
  24 │         image: pavvanpradeep/cart-queue
  25 │         command:
  26 │         - python
  27 │         - consumer.py
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-for-db" of deployment "queue" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cart10_5.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cart10_5.yaml:23-28
────────────────────────────────────────
  23 ┌       - name: queue
  24 │         image: pavvanpradeep/cart-queue
  25 │         command:
  26 │         - python
  27 │         - consumer.py
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cart10_5.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment queue in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cart10_5.yaml:4
────────────────────────────────────────
   4 [   name: queue
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container queue in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cart10_5.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 └         - until nslookup db; do echo waiting for db; sleep 2; done;
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container queue in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cart10_5.yaml:23-28
────────────────────────────────────────
  23 ┌       - name: queue
  24 │         image: pavvanpradeep/cart-queue
  25 │         command:
  26 │         - python
  27 │         - consumer.py
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment queue in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cart10_5.yaml:15-28
────────────────────────────────────────
  15 ┌       initContainers:
  16 │       - name: wait-for-db
  17 │         image: busybox:1.28
  18 │         command:
  19 │         - sh
  20 │         - -c
  21 │         - until nslookup db; do echo waiting for db; sleep 2; done;
  22 │       containers:
  23 └       - name: queue
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container queue in deployment queue (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cart10_5.yaml:23-28
────────────────────────────────────────
  23 ┌       - name: queue
  24 │         image: pavvanpradeep/cart-queue
  25 │         command:
  26 │         - python
  27 │         - consumer.py
  28 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────



cart11_2.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart11_2.yaml:8-13
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   ports:
  10 │   - port: 1029
  11 │     targetPort: 1029
  12 │   selector:
  13 └     app: cart
────────────────────────────────────────



cart11_3.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cart' of Deployment 'cart' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cart11_3.yaml:23-39
────────────────────────────────────────
  23 ┌       - name: cart
  24 │         image: opielapatryk/cart_service_eks4
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1029
  28 │         env:
  29 │         - name: REDIS_HOST
  30 │           value: cart-redis
  31 └         - name: API_GW
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cart' of Deployment 'cart' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cart11_3.yaml:23-39
────────────────────────────────────────
  23 ┌       - name: cart
  24 │         image: opielapatryk/cart_service_eks4
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1029
  28 │         env:
  29 │         - name: REDIS_HOST
  30 │           value: cart-redis
  31 └         - name: API_GW
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cart' of 'deployment' 'cart' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cart11_3.yaml:23-39
────────────────────────────────────────
  23 ┌       - name: cart
  24 │         image: opielapatryk/cart_service_eks4
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1029
  28 │         env:
  29 │         - name: REDIS_HOST
  30 │           value: cart-redis
  31 └         - name: API_GW
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cart' of Deployment 'cart' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cart11_3.yaml:23-39
────────────────────────────────────────
  23 ┌       - name: cart
  24 │         image: opielapatryk/cart_service_eks4
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1029
  28 │         env:
  29 │         - name: REDIS_HOST
  30 │           value: cart-redis
  31 └         - name: API_GW
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cart' of Deployment 'cart' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cart11_3.yaml:23-39
────────────────────────────────────────
  23 ┌       - name: cart
  24 │         image: opielapatryk/cart_service_eks4
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1029
  28 │         env:
  29 │         - name: REDIS_HOST
  30 │           value: cart-redis
  31 └         - name: API_GW
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cart' of Deployment 'cart' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cart11_3.yaml:23-39
────────────────────────────────────────
  23 ┌       - name: cart
  24 │         image: opielapatryk/cart_service_eks4
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1029
  28 │         env:
  29 │         - name: REDIS_HOST
  30 │           value: cart-redis
  31 └         - name: API_GW
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cart' of Deployment 'cart' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cart11_3.yaml:23-39
────────────────────────────────────────
  23 ┌       - name: cart
  24 │         image: opielapatryk/cart_service_eks4
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1029
  28 │         env:
  29 │         - name: REDIS_HOST
  30 │           value: cart-redis
  31 └         - name: API_GW
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cart' of Deployment 'cart' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cart11_3.yaml:23-39
────────────────────────────────────────
  23 ┌       - name: cart
  24 │         image: opielapatryk/cart_service_eks4
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1029
  28 │         env:
  29 │         - name: REDIS_HOST
  30 │           value: cart-redis
  31 └         - name: API_GW
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cart' of Deployment 'cart' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cart11_3.yaml:23-39
────────────────────────────────────────
  23 ┌       - name: cart
  24 │         image: opielapatryk/cart_service_eks4
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1029
  28 │         env:
  29 │         - name: REDIS_HOST
  30 │           value: cart-redis
  31 └         - name: API_GW
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cart' of Deployment 'cart' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cart11_3.yaml:23-39
────────────────────────────────────────
  23 ┌       - name: cart
  24 │         image: opielapatryk/cart_service_eks4
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1029
  28 │         env:
  29 │         - name: REDIS_HOST
  30 │           value: cart-redis
  31 └         - name: API_GW
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cart' of Deployment 'cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cart11_3.yaml:23-39
────────────────────────────────────────
  23 ┌       - name: cart
  24 │         image: opielapatryk/cart_service_eks4
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1029
  28 │         env:
  29 │         - name: REDIS_HOST
  30 │           value: cart-redis
  31 └         - name: API_GW
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cart' of Deployment 'cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cart11_3.yaml:23-39
────────────────────────────────────────
  23 ┌       - name: cart
  24 │         image: opielapatryk/cart_service_eks4
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1029
  28 │         env:
  29 │         - name: REDIS_HOST
  30 │           value: cart-redis
  31 └         - name: API_GW
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cart11_3.yaml:23-39
────────────────────────────────────────
  23 ┌       - name: cart
  24 │         image: opielapatryk/cart_service_eks4
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1029
  28 │         env:
  29 │         - name: REDIS_HOST
  30 │           value: cart-redis
  31 └         - name: API_GW
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cart11_3.yaml:9-39
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: cart
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: cart
  17 └         service: cart
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cart" of deployment "cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cart11_3.yaml:23-39
────────────────────────────────────────
  23 ┌       - name: cart
  24 │         image: opielapatryk/cart_service_eks4
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1029
  28 │         env:
  29 │         - name: REDIS_HOST
  30 │           value: cart-redis
  31 └         - name: API_GW
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cart11_3.yaml:23-39
────────────────────────────────────────
  23 ┌       - name: cart
  24 │         image: opielapatryk/cart_service_eks4
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1029
  28 │         env:
  29 │         - name: REDIS_HOST
  30 │           value: cart-redis
  31 └         - name: API_GW
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cart11_3.yaml:4-7
────────────────────────────────────────
   4 ┌   name: cart
   5 │   namespace: default
   6 │   labels:
   7 └     app: cart
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cart in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cart11_3.yaml:23-39
────────────────────────────────────────
  23 ┌       - name: cart
  24 │         image: opielapatryk/cart_service_eks4
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1029
  28 │         env:
  29 │         - name: REDIS_HOST
  30 │           value: cart-redis
  31 └         - name: API_GW
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cart in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cart11_3.yaml:21-39
────────────────────────────────────────
  21 ┌       serviceAccountName: cart
  22 │       containers:
  23 │       - name: cart
  24 │         image: opielapatryk/cart_service_eks4
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1029
  28 │         env:
  29 └         - name: REDIS_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cart in deployment cart (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cart11_3.yaml:23-39
────────────────────────────────────────
  23 ┌       - name: cart
  24 │         image: opielapatryk/cart_service_eks4
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 1029
  28 │         env:
  29 │         - name: REDIS_HOST
  30 │           value: cart-redis
  31 └         - name: API_GW
  ..   
────────────────────────────────────────



cartms-deployment-local.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cartms' of Deployment 'cartms-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cartms-deployment-local.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: cartms
  19 │         image: ntay/springbootms:latest
  20 │         ports:
  21 │           - containerPort: 8080
  22 │         env:
  23 │           - name: MONGO_CONNECTION
  24 │             valueFrom:
  25 │               secretKeyRef:
  26 └                 name: mongo-conf
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cartms' of Deployment 'cartms-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cartms-deployment-local.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: cartms
  19 │         image: ntay/springbootms:latest
  20 │         ports:
  21 │           - containerPort: 8080
  22 │         env:
  23 │           - name: MONGO_CONNECTION
  24 │             valueFrom:
  25 │               secretKeyRef:
  26 └                 name: mongo-conf
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cartms' of 'deployment' 'cartms-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cartms-deployment-local.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: cartms
  19 │         image: ntay/springbootms:latest
  20 │         ports:
  21 │           - containerPort: 8080
  22 │         env:
  23 │           - name: MONGO_CONNECTION
  24 │             valueFrom:
  25 │               secretKeyRef:
  26 └                 name: mongo-conf
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cartms' of Deployment 'cartms-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cartms-deployment-local.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: cartms
  19 │         image: ntay/springbootms:latest
  20 │         ports:
  21 │           - containerPort: 8080
  22 │         env:
  23 │           - name: MONGO_CONNECTION
  24 │             valueFrom:
  25 │               secretKeyRef:
  26 └                 name: mongo-conf
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cartms' of Deployment 'cartms-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cartms-deployment-local.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: cartms
  19 │         image: ntay/springbootms:latest
  20 │         ports:
  21 │           - containerPort: 8080
  22 │         env:
  23 │           - name: MONGO_CONNECTION
  24 │             valueFrom:
  25 │               secretKeyRef:
  26 └                 name: mongo-conf
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cartms' of Deployment 'cartms-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cartms-deployment-local.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: cartms
  19 │         image: ntay/springbootms:latest
  20 │         ports:
  21 │           - containerPort: 8080
  22 │         env:
  23 │           - name: MONGO_CONNECTION
  24 │             valueFrom:
  25 │               secretKeyRef:
  26 └                 name: mongo-conf
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cartms' of Deployment 'cartms-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cartms-deployment-local.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: cartms
  19 │         image: ntay/springbootms:latest
  20 │         ports:
  21 │           - containerPort: 8080
  22 │         env:
  23 │           - name: MONGO_CONNECTION
  24 │             valueFrom:
  25 │               secretKeyRef:
  26 └                 name: mongo-conf
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cartms' of Deployment 'cartms-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cartms-deployment-local.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: cartms
  19 │         image: ntay/springbootms:latest
  20 │         ports:
  21 │           - containerPort: 8080
  22 │         env:
  23 │           - name: MONGO_CONNECTION
  24 │             valueFrom:
  25 │               secretKeyRef:
  26 └                 name: mongo-conf
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cartms' of Deployment 'cartms-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cartms-deployment-local.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: cartms
  19 │         image: ntay/springbootms:latest
  20 │         ports:
  21 │           - containerPort: 8080
  22 │         env:
  23 │           - name: MONGO_CONNECTION
  24 │             valueFrom:
  25 │               secretKeyRef:
  26 └                 name: mongo-conf
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cartms' of Deployment 'cartms-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cartms-deployment-local.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: cartms
  19 │         image: ntay/springbootms:latest
  20 │         ports:
  21 │           - containerPort: 8080
  22 │         env:
  23 │           - name: MONGO_CONNECTION
  24 │             valueFrom:
  25 │               secretKeyRef:
  26 └                 name: mongo-conf
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cartms' of Deployment 'cartms-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartms-deployment-local.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: cartms
  19 │         image: ntay/springbootms:latest
  20 │         ports:
  21 │           - containerPort: 8080
  22 │         env:
  23 │           - name: MONGO_CONNECTION
  24 │             valueFrom:
  25 │               secretKeyRef:
  26 └                 name: mongo-conf
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cartms' of Deployment 'cartms-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartms-deployment-local.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: cartms
  19 │         image: ntay/springbootms:latest
  20 │         ports:
  21 │           - containerPort: 8080
  22 │         env:
  23 │           - name: MONGO_CONNECTION
  24 │             valueFrom:
  25 │               secretKeyRef:
  26 └                 name: mongo-conf
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartms-deployment-local.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: cartms
  19 │         image: ntay/springbootms:latest
  20 │         ports:
  21 │           - containerPort: 8080
  22 │         env:
  23 │           - name: MONGO_CONNECTION
  24 │             valueFrom:
  25 │               secretKeyRef:
  26 └                 name: mongo-conf
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartms-deployment-local.yaml:8-32
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: cartms
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: cartms
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cartms" of deployment "cartms-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartms-deployment-local.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: cartms
  19 │         image: ntay/springbootms:latest
  20 │         ports:
  21 │           - containerPort: 8080
  22 │         env:
  23 │           - name: MONGO_CONNECTION
  24 │             valueFrom:
  25 │               secretKeyRef:
  26 └                 name: mongo-conf
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cartms-deployment-local.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: cartms
  19 │         image: ntay/springbootms:latest
  20 │         ports:
  21 │           - containerPort: 8080
  22 │         env:
  23 │           - name: MONGO_CONNECTION
  24 │             valueFrom:
  25 │               secretKeyRef:
  26 └                 name: mongo-conf
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartms-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartms-deployment-local.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cartms-deployment
   5 │   labels:
   6 └     app: cartms
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cartms-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cartms-deployment-local.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: cartms
  19 │         image: ntay/springbootms:latest
  20 │         ports:
  21 │           - containerPort: 8080
  22 │         env:
  23 │           - name: MONGO_CONNECTION
  24 │             valueFrom:
  25 │               secretKeyRef:
  26 └                 name: mongo-conf
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cartms-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cartms-deployment-local.yaml:17-32
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: cartms
  19 │         image: ntay/springbootms:latest
  20 │         ports:
  21 │           - containerPort: 8080
  22 │         env:
  23 │           - name: MONGO_CONNECTION
  24 │             valueFrom:
  25 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cartms in deployment cartms-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cartms-deployment-local.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: cartms
  19 │         image: ntay/springbootms:latest
  20 │         ports:
  21 │           - containerPort: 8080
  22 │         env:
  23 │           - name: MONGO_CONNECTION
  24 │             valueFrom:
  25 │               secretKeyRef:
  26 └                 name: mongo-conf
  ..   
────────────────────────────────────────



cartms-service.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartms-service.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: cartms
   8 │   ports:
   9 │     - port: 8081
  10 │       targetPort: 8080
  11 └   type: LoadBalancer
────────────────────────────────────────



carts-db-dep.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 carts-db-dep.yaml:20-36
────────────────────────────────────────
  20 ┌       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 carts-db-dep.yaml:20-36
────────────────────────────────────────
  20 ┌       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 carts-db-dep.yaml:20-36
────────────────────────────────────────
  20 ┌       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'carts-db' of Deployment 'carts-db' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 carts-db-dep.yaml:20-36
────────────────────────────────────────
  20 ┌       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 carts-db-dep.yaml:20-36
────────────────────────────────────────
  20 ┌       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 carts-db-dep.yaml:20-36
────────────────────────────────────────
  20 ┌       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 carts-db-dep.yaml:20-36
────────────────────────────────────────
  20 ┌       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 carts-db-dep.yaml:20-36
────────────────────────────────────────
  20 ┌       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 carts-db-dep.yaml:20-36
────────────────────────────────────────
  20 ┌       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'carts-db' of Deployment 'carts-db' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 carts-db-dep.yaml:20-36
────────────────────────────────────────
  20 ┌       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 carts-db-dep.yaml:20-36
────────────────────────────────────────
  20 ┌       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 carts-db-dep.yaml:10-42
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       name: carts-db
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         name: carts-db
  18 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "carts-db" of deployment "carts-db" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 carts-db-dep.yaml:20-36
────────────────────────────────────────
  20 ┌       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 carts-db-dep.yaml:27-32
────────────────────────────────────────
  27 ┌             drop:
  28 │               - all
  29 │             add:
  30 │               - CHOWN
  31 │               - SETGID
  32 └               - SETUID
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment carts-db in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 carts-db-dep.yaml:19-42
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 └             drop:
  ..   
────────────────────────────────────────



carts-db-svc.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 carts-db-svc.yaml:10-15
────────────────────────────────────────
  10 ┌   ports:
  11 │     # the port that this service should serve on
  12 │   - port: 27017
  13 │     targetPort: 27017
  14 │   selector:
  15 └     name: carts-db
────────────────────────────────────────



carts-dep2.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 3, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'carts' of Deployment 'carts' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 carts-dep2.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: carts
  21 │         image: weaveworksdemos/carts:0.4.8
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 │             cpu: 300m
  28 └             memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'carts' of Deployment 'carts' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 carts-dep2.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: carts
  21 │         image: weaveworksdemos/carts:0.4.8
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 │             cpu: 300m
  28 └             memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'carts' of Deployment 'carts' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 carts-dep2.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: carts
  21 │         image: weaveworksdemos/carts:0.4.8
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 │             cpu: 300m
  28 └             memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 carts-dep2.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: carts
  21 │         image: weaveworksdemos/carts:0.4.8
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 │             cpu: 300m
  28 └             memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 carts-dep2.yaml:10-51
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       name: carts
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         name: carts
  18 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "carts" of deployment "carts" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 carts-dep2.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: carts
  21 │         image: weaveworksdemos/carts:0.4.8
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 │             cpu: 300m
  28 └             memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment carts in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────
 carts-dep2.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment carts in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 carts-dep2.yaml:19-51
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: carts
  21 │         image: weaveworksdemos/carts:0.4.8
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container carts in deployment carts (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 carts-dep2.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: carts
  21 │         image: weaveworksdemos/carts:0.4.8
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 │             cpu: 300m
  28 └             memory: 500Mi
  ..   
────────────────────────────────────────



carts-svc2.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 carts-svc2.yaml:12-17
────────────────────────────────────────
  12 ┌   ports:
  13 │     # the port that this service should serve on
  14 │   - port: 80
  15 │     targetPort: 80
  16 │   selector:
  17 └     name: carts
────────────────────────────────────────



cartservice-deployment.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'cartservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cartservice-deployment.yaml:18-45
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 7070
  22 │           env:
  23 │             - name: PORT
  24 │               value: "7070"
  25 │             - name: REDIS_ADDR
  26 └               value: "redis-cart:6379"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'cartservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cartservice-deployment.yaml:18-45
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 7070
  22 │           env:
  23 │             - name: PORT
  24 │               value: "7070"
  25 │             - name: REDIS_ADDR
  26 └               value: "redis-cart:6379"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'cartservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cartservice-deployment.yaml:18-45
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 7070
  22 │           env:
  23 │             - name: PORT
  24 │               value: "7070"
  25 │             - name: REDIS_ADDR
  26 └               value: "redis-cart:6379"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'cartservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cartservice-deployment.yaml:18-45
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 7070
  22 │           env:
  23 │             - name: PORT
  24 │               value: "7070"
  25 │             - name: REDIS_ADDR
  26 └               value: "redis-cart:6379"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'cartservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cartservice-deployment.yaml:18-45
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 7070
  22 │           env:
  23 │             - name: PORT
  24 │               value: "7070"
  25 │             - name: REDIS_ADDR
  26 └               value: "redis-cart:6379"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice-deployment.yaml:18-45
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 7070
  22 │           env:
  23 │             - name: PORT
  24 │               value: "7070"
  25 │             - name: REDIS_ADDR
  26 └               value: "redis-cart:6379"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice-deployment.yaml:18-45
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 7070
  22 │           env:
  23 │             - name: PORT
  24 │               value: "7070"
  25 │             - name: REDIS_ADDR
  26 └               value: "redis-cart:6379"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice-deployment.yaml:18-45
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 7070
  22 │           env:
  23 │             - name: PORT
  24 │               value: "7070"
  25 │             - name: REDIS_ADDR
  26 └               value: "redis-cart:6379"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice-deployment.yaml:8-45
────────────────────────────────────────
   8 ┌   replicas: 2
   9 │   selector:
  10 │     matchLabels:
  11 │       app: cartservice
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: cartservice
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice-deployment.yaml:18-45
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 7070
  22 │           env:
  23 │             - name: PORT
  24 │               value: "7070"
  25 │             - name: REDIS_ADDR
  26 └               value: "redis-cart:6379"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cartservice-deployment.yaml:18-45
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 7070
  22 │           env:
  23 │             - name: PORT
  24 │               value: "7070"
  25 │             - name: REDIS_ADDR
  26 └               value: "redis-cart:6379"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cartservice
   5 │   labels:
   6 └     app: cartservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cartservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cartservice-deployment.yaml:18-45
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 7070
  22 │           env:
  23 │             - name: PORT
  24 │               value: "7070"
  25 │             - name: REDIS_ADDR
  26 └               value: "redis-cart:6379"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cartservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cartservice-deployment.yaml:17-45
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 7070
  22 │           env:
  23 │             - name: PORT
  24 │               value: "7070"
  25 └             - name: REDIS_ADDR
  ..   
────────────────────────────────────────



cartservice-service.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice-service.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: cartservice
   9 │   ports:
  10 │     - protocol: TCP
  11 │       port: 7070
  12 └       targetPort: 7070 
────────────────────────────────────────



cartservice1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 108, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'cartservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cartservice1.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice1.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice1.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice1.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice1.yaml:6-51
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: cartservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: cartservice
  13 │     spec:
  14 └       serviceAccountName: default
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice1.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice1.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────



cartservice10.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 108, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'cartservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cartservice10.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice10.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice10.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice10.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice10.yaml:8-53
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: cartservice
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: cartservice
  15 │     spec:
  16 └       serviceAccountName: default
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice10.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice10.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cartservice
   5 │   labels:
   6 └     app: cartservice
────────────────────────────────────────



cartservice10_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice10_1.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app: cartservice
  11 │   ports:
  12 │   - name: grpc
  13 │     port: 7070
  14 └     targetPort: 7070
────────────────────────────────────────



cartservice11.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 109, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice11.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice11.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice11.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice11.yaml:6-51
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: cartservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: cartservice
  13 │     spec:
  14 └       serviceAccountName: default
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice11.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice11.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────



cartservice11_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice11_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: cartservice
   9 │   ports:
  10 │   - name: grpc
  11 │     port: 7070
  12 └     targetPort: 7070
────────────────────────────────────────



cartservice13.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 108, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'cartservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cartservice13.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice13.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice13.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice13.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice13.yaml:8-53
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: cartservice
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: cartservice
  15 │     spec:
  16 └       serviceAccountName: default
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice13.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice13.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cartservice
   5 │   labels:
   6 └     app: cartservice
────────────────────────────────────────



cartservice13_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice13_1.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app: cartservice
  11 │   ports:
  12 │   - name: grpc
  13 │     port: 7070
  14 └     targetPort: 7070
────────────────────────────────────────



cartservice14.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 109, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice14.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice14.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice14.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice14.yaml:6-51
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: cartservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: cartservice
  13 │     spec:
  14 └       serviceAccountName: default
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice14.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice14.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────



cartservice14_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice14_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: cartservice
   9 │   ports:
  10 │   - name: grpc
  11 │     port: 7070
  12 └     targetPort: 7070
────────────────────────────────────────



cartservice15.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cartservice' of Deployment 'cartservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cartservice15.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: cartservice
  19 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 │           value: redis:6379
  25 │         ports:
  26 └         - containerPort: 7070
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cartservice' of Deployment 'cartservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cartservice15.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: cartservice
  19 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 │           value: redis:6379
  25 │         ports:
  26 └         - containerPort: 7070
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cartservice' of 'deployment' 'cartservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cartservice15.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: cartservice
  19 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 │           value: redis:6379
  25 │         ports:
  26 └         - containerPort: 7070
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cartservice' of Deployment 'cartservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cartservice15.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: cartservice
  19 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 │           value: redis:6379
  25 │         ports:
  26 └         - containerPort: 7070
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cartservice' of Deployment 'cartservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cartservice15.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: cartservice
  19 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 │           value: redis:6379
  25 │         ports:
  26 └         - containerPort: 7070
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cartservice' of Deployment 'cartservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cartservice15.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: cartservice
  19 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 │           value: redis:6379
  25 │         ports:
  26 └         - containerPort: 7070
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cartservice' of Deployment 'cartservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cartservice15.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: cartservice
  19 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 │           value: redis:6379
  25 │         ports:
  26 └         - containerPort: 7070
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cartservice' of Deployment 'cartservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cartservice15.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: cartservice
  19 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 │           value: redis:6379
  25 │         ports:
  26 └         - containerPort: 7070
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cartservice' of Deployment 'cartservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cartservice15.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: cartservice
  19 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 │           value: redis:6379
  25 │         ports:
  26 └         - containerPort: 7070
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cartservice' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice15.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: cartservice
  19 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 │           value: redis:6379
  25 │         ports:
  26 └         - containerPort: 7070
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cartservice' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice15.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: cartservice
  19 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 │           value: redis:6379
  25 │         ports:
  26 └         - containerPort: 7070
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice15.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: cartservice
  19 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 │           value: redis:6379
  25 │         ports:
  26 └         - containerPort: 7070
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice15.yaml:8-26
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: cartservice
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: cartservice
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cartservice" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice15.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: cartservice
  19 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 │           value: redis:6379
  25 │         ports:
  26 └         - containerPort: 7070
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cartservice15.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: cartservice
  19 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 │           value: redis:6379
  25 │         ports:
  26 └         - containerPort: 7070
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice15.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cartservice
   5 │   labels:
   6 └     app: cartservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cartservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cartservice15.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: cartservice
  19 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 │           value: redis:6379
  25 │         ports:
  26 └         - containerPort: 7070
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cartservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cartservice15.yaml:17-26
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: cartservice
  19 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '7070'
  23 │         - name: REDIS_ADDR
  24 │           value: redis:6379
  25 │         ports:
  26 └         - containerPort: 7070
────────────────────────────────────────



cartservice15_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice15_1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app.kubernetes.io/name: cartservice
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 7070
  11 └     targetPort: 7070
────────────────────────────────────────



cartservice17.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 108, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'cartservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cartservice17.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice17.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice17.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice17.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice17.yaml:8-53
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: cartservice
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: cartservice
  15 │     spec:
  16 └       serviceAccountName: default
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice17.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice17.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cartservice
   5 │   labels:
   6 └     app: cartservice
────────────────────────────────────────



cartservice17_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice17_1.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app: cartservice
  11 │   ports:
  12 │   - name: grpc
  13 │     port: 7070
  14 └     targetPort: 7070
────────────────────────────────────────



cartservice18.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 109, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice18.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice18.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice18.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice18.yaml:6-51
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: cartservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: cartservice
  13 │     spec:
  14 └       serviceAccountName: default
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice18.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice18.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────



cartservice18_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice18_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: cartservice
   9 │   ports:
  10 │   - name: grpc
  11 │     port: 7070
  12 └     targetPort: 7070
────────────────────────────────────────



cartservice19.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cartservice19.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/cartservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'cartservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cartservice19.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/cartservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'cartservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cartservice19.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/cartservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cartservice19.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/cartservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'cartservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cartservice19.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/cartservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice19.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/cartservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice19.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/cartservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice19.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/cartservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice19.yaml:6-47
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: cartservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: cartservice
  13 │     spec:
  14 └       serviceAccountName: default
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice19.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/cartservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cartservice19.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/cartservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice19.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cartservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cartservice19.yaml:17-45
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/cartservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 │         - name: REDIS_ADDR
  23 │           value: redis-cart:6379
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cartservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cartservice19.yaml:14-47
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       terminationGracePeriodSeconds: 5
  16 │       containers:
  17 │       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/cartservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 7070
  21 │         env:
  22 └         - name: REDIS_ADDR
  ..   
────────────────────────────────────────



cartservice19_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice19_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: cartservice
   9 │   ports:
  10 │   - name: grpc
  11 │     port: 7070
  12 └     targetPort: 7070
────────────────────────────────────────



cartservice1_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice1_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: cartservice
   9 │   ports:
  10 │   - name: grpc
  11 │     port: 7070
  12 └     targetPort: 7070
────────────────────────────────────────



cartservice2.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 109, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice2.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice2.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice2.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice2.yaml:6-51
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: cartservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: cartservice
  13 │     spec:
  14 └       serviceAccountName: default
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice2.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice2.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────



cartservice21.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 108, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'cartservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cartservice21.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice21.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice21.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice21.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice21.yaml:8-53
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: cartservice
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: cartservice
  15 │     spec:
  16 └       serviceAccountName: default
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice21.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice21.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cartservice
   5 │   labels:
   6 └     app: cartservice
────────────────────────────────────────



cartservice21_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice21_1.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app: cartservice
  11 │   ports:
  12 │   - name: grpc
  13 │     port: 7070
  14 └     targetPort: 7070
────────────────────────────────────────



cartservice22.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 109, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice22.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice22.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice22.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice22.yaml:6-51
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: cartservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: cartservice
  13 │     spec:
  14 └       serviceAccountName: default
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice22.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice22.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────



cartservice22_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice22_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: cartservice
   9 │   ports:
  10 │   - name: grpc
  11 │     port: 7070
  12 └     targetPort: 7070
────────────────────────────────────────



cartservice23.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cartservice' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"ASPNETCORE_HTTP_PORTS", "PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



cartservice23_1.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 101, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cart' of Deployment 'cartservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cartservice23_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: cart
  23 │         image: srikanthhg/cartservice:v1
  24 │         ports:
  25 │         - containerPort: 7070
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: cartservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cart' of Deployment 'cartservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cartservice23_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: cart
  23 │         image: srikanthhg/cartservice:v1
  24 │         ports:
  25 │         - containerPort: 7070
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: cartservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cart' of 'deployment' 'cartservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cartservice23_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: cart
  23 │         image: srikanthhg/cartservice:v1
  24 │         ports:
  25 │         - containerPort: 7070
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: cartservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cart' of Deployment 'cartservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cartservice23_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: cart
  23 │         image: srikanthhg/cartservice:v1
  24 │         ports:
  25 │         - containerPort: 7070
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: cartservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cart' of Deployment 'cartservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cartservice23_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: cart
  23 │         image: srikanthhg/cartservice:v1
  24 │         ports:
  25 │         - containerPort: 7070
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: cartservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cart' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice23_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: cart
  23 │         image: srikanthhg/cartservice:v1
  24 │         ports:
  25 │         - containerPort: 7070
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: cartservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cart' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice23_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: cart
  23 │         image: srikanthhg/cartservice:v1
  24 │         ports:
  25 │         - containerPort: 7070
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: cartservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice23_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: cart
  23 │         image: srikanthhg/cartservice:v1
  24 │         ports:
  25 │         - containerPort: 7070
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: cartservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice23_1.yaml:8-35
────────────────────────────────────────
   8 ┌   replicas: 2
   9 │   selector:
  10 │     matchLabels:
  11 │       app: cartservice
  12 │       project: hipstershop
  13 │       tier: app
  14 │   template:
  15 │     metadata:
  16 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cart" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice23_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: cart
  23 │         image: srikanthhg/cartservice:v1
  24 │         ports:
  25 │         - containerPort: 7070
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: cartservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cartservice23_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: cart
  23 │         image: srikanthhg/cartservice:v1
  24 │         ports:
  25 │         - containerPort: 7070
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: cartservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice23_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cartservice
   5 │   labels:
   6 └     app: cartservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cartservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cartservice23_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: cart
  23 │         image: srikanthhg/cartservice:v1
  24 │         ports:
  25 │         - containerPort: 7070
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: cartservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cartservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cartservice23_1.yaml:21-35
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: cart
  23 │         image: srikanthhg/cartservice:v1
  24 │         ports:
  25 │         - containerPort: 7070
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: cartservice
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cart in deployment cartservice (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cartservice23_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: cart
  23 │         image: srikanthhg/cartservice:v1
  24 │         ports:
  25 │         - containerPort: 7070
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: cartservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────



cartservice23_2.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice23_2.yaml:6-14
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: cartservice
   9 │     project: hipstershop
  10 │     tier: app
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 7070
  14 └     targetPort: 7070
────────────────────────────────────────



cartservice25.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 108, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'cartservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cartservice25.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice25.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice25.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice25.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice25.yaml:8-53
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: cartservice
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: cartservice
  15 │     spec:
  16 └       serviceAccountName: default
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice25.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice25.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cartservice
   5 │   labels:
   6 └     app: cartservice
────────────────────────────────────────



cartservice25_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice25_1.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app: cartservice
  11 │   ports:
  12 │   - name: grpc
  13 │     port: 7070
  14 └     targetPort: 7070
────────────────────────────────────────



cartservice26.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 109, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice26.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice26.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice26.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice26.yaml:6-51
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: cartservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: cartservice
  13 │     spec:
  14 └       serviceAccountName: default
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice26.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice26.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────



cartservice26_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice26_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: cartservice
   9 │   ports:
  10 │   - name: grpc
  11 │     port: 7070
  12 └     targetPort: 7070
────────────────────────────────────────



cartservice28.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 108, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'cartservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cartservice28.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice28.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice28.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice28.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice28.yaml:8-53
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: cartservice
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: cartservice
  15 │     spec:
  16 └       serviceAccountName: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice28.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice28.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cartservice
   5 │   labels:
   6 └     app: cartservice
────────────────────────────────────────



cartservice28_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice28_1.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app: cartservice
  11 │   ports:
  12 │   - name: grpc
  13 │     port: 7070
  14 └     targetPort: 7070
────────────────────────────────────────



cartservice28_3.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 109, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice28_3.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: redis
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice28_3.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: redis
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice28_3.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: redis
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice28_3.yaml:8-53
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: redis-cart
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: redis-cart
  15 │     spec:
  16 └       securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice28_3.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: redis
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice28_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: redis-cart
   5 │   labels:
   6 └     app: redis-cart
────────────────────────────────────────



cartservice28_4.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice28_4.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app: redis-cart
  11 │   ports:
  12 │   - name: tcp-redis
  13 │     port: 6379
  14 └     targetPort: 6379
────────────────────────────────────────



cartservice29.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 109, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice29.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice29.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice29.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice29.yaml:8-53
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: cartservice
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: cartservice
  15 │     spec:
  16 └       serviceAccountName: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice29.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice29.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cartservice
   5 │   labels:
   6 └     app: cartservice
────────────────────────────────────────



cartservice29_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice29_1.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app: cartservice
  11 │   ports:
  12 │   - name: grpc
  13 │     port: 7070
  14 └     targetPort: 7070
────────────────────────────────────────



cartservice29_3.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 109, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice29_3.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: redis
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice29_3.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: redis
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice29_3.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: redis
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice29_3.yaml:8-53
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: redis-cart
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: redis-cart
  15 │     spec:
  16 └       securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice29_3.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: redis
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice29_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: redis-cart
   5 │   labels:
   6 └     app: redis-cart
────────────────────────────────────────



cartservice29_4.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice29_4.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app: redis-cart
  11 │   ports:
  12 │   - name: tcp-redis
  13 │     port: 6379
  14 └     targetPort: 6379
────────────────────────────────────────



cartservice2_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice2_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: cartservice
   9 │   ports:
  10 │   - name: grpc
  11 │     port: 7070
  12 └     targetPort: 7070
────────────────────────────────────────



cartservice30.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 109, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice30.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice30.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice30.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice30.yaml:8-53
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: cartservice
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: cartservice
  15 │     spec:
  16 └       serviceAccountName: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice30.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice30.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cartservice
   5 │   labels:
   6 └     app: cartservice
────────────────────────────────────────



cartservice30_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice30_1.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app: cartservice
  11 │   ports:
  12 │   - name: grpc
  13 │     port: 7070
  14 └     targetPort: 7070
────────────────────────────────────────



cartservice30_3.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 109, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice30_3.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: redis
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice30_3.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: redis
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice30_3.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: redis
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice30_3.yaml:8-53
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: redis-cart
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: redis-cart
  15 │     spec:
  16 └       securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice30_3.yaml:22-50
────────────────────────────────────────
  22 ┌       - name: redis
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: redis:alpine
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice30_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: redis-cart
   5 │   labels:
   6 └     app: redis-cart
────────────────────────────────────────



cartservice30_4.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice30_4.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app: redis-cart
  11 │   ports:
  12 │   - name: tcp-redis
  13 │     port: 6379
  14 └     targetPort: 6379
────────────────────────────────────────



cartservice4.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 108, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'cartservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cartservice4.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice4.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice4.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice4.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice4.yaml:6-51
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: cartservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: cartservice
  13 │     spec:
  14 └       serviceAccountName: default
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice4.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice4.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────



cartservice4_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice4_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: cartservice
   9 │   ports:
  10 │   - name: grpc
  11 │     port: 7070
  12 └     targetPort: 7070
────────────────────────────────────────



cartservice5.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 109, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice5.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice5.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice5.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice5.yaml:6-51
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: cartservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: cartservice
  13 │     spec:
  14 └       serviceAccountName: default
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice5.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice5.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────



cartservice5_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice5_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: cartservice
   9 │   ports:
  10 │   - name: grpc
  11 │     port: 7070
  12 └     targetPort: 7070
────────────────────────────────────────



cartservice7.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 108, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'cartservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cartservice7.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice7.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice7.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice7.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice7.yaml:8-53
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: cartservice
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: cartservice
  15 │     spec:
  16 └       serviceAccountName: default
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice7.yaml:24-53
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: cartservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice7.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cartservice
   5 │   labels:
   6 └     app: cartservice
────────────────────────────────────────



cartservice7_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice7_1.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app: cartservice
  11 │   ports:
  12 │   - name: grpc
  13 │     port: 7070
  14 └     targetPort: 7070
────────────────────────────────────────



cartservice8.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 109, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cartservice8.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cartservice8.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cartservice8.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice8.yaml:6-51
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: cartservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: cartservice
  13 │     spec:
  14 └       serviceAccountName: default
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cartservice8.yaml:22-51
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/cartservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cartservice8.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────



cartservice8_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cartservice8_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: cartservice
   9 │   ports:
  10 │   - name: grpc
  11 │     port: 7070
  12 └     targetPort: 7070
────────────────────────────────────────



cas-container-persistentvolumclaim.yaml (kubernetes)
====================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cas-container-persistentvolumclaim.yaml:8-12
────────────────────────────────────────
   8 ┌   accessModes:
   9 │   - ReadWriteOnce
  10 │   resources:
  11 │     requests:
  12 └       storage: 100Mi
────────────────────────────────────────



cas-container-persistentvolumclaim1.yaml (kubernetes)
=====================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cas-container-persistentvolumclaim1.yaml:8-12
────────────────────────────────────────
   8 ┌   accessModes:
   9 │   - ReadWriteOnce
  10 │   resources:
  11 │     requests:
  12 └       storage: 100Mi
────────────────────────────────────────



cass-sw-app.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cassandra' of Deployment 'cass-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cass-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: docker.io/cassandra
  18 │         ports:
  19 └         - containerPort: 9042
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cassandra' of Deployment 'cass-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cass-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: docker.io/cassandra
  18 │         ports:
  19 └         - containerPort: 9042
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cassandra' of 'deployment' 'cass-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cass-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: docker.io/cassandra
  18 │         ports:
  19 └         - containerPort: 9042
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cassandra' of Deployment 'cass-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cass-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: docker.io/cassandra
  18 │         ports:
  19 └         - containerPort: 9042
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cassandra' of Deployment 'cass-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cass-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: docker.io/cassandra
  18 │         ports:
  19 └         - containerPort: 9042
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cassandra' of Deployment 'cass-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cass-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: docker.io/cassandra
  18 │         ports:
  19 └         - containerPort: 9042
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cassandra' of Deployment 'cass-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cass-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: docker.io/cassandra
  18 │         ports:
  19 └         - containerPort: 9042
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cassandra' of Deployment 'cass-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cass-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: docker.io/cassandra
  18 │         ports:
  19 └         - containerPort: 9042
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cassandra' of Deployment 'cass-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cass-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: docker.io/cassandra
  18 │         ports:
  19 └         - containerPort: 9042
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cassandra' of Deployment 'cass-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cass-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: docker.io/cassandra
  18 │         ports:
  19 └         - containerPort: 9042
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cassandra' of Deployment 'cass-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cass-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: docker.io/cassandra
  18 │         ports:
  19 └         - containerPort: 9042
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cassandra' of Deployment 'cass-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cass-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: docker.io/cassandra
  18 │         ports:
  19 └         - containerPort: 9042
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cass-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: docker.io/cassandra
  18 │         ports:
  19 └         - containerPort: 9042
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cass-sw-app.yaml:6-19
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: cass-server
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: cass-server
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cassandra" of deployment "cass-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cass-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: docker.io/cassandra
  18 │         ports:
  19 └         - containerPort: 9042
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cass-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: docker.io/cassandra
  18 │         ports:
  19 └         - containerPort: 9042
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cass-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cass-sw-app.yaml:4
────────────────────────────────────────
   4 [   name: cass-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cass-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cass-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: docker.io/cassandra
  18 │         ports:
  19 └         - containerPort: 9042
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cass-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cass-sw-app.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: cassandra
  17 │         image: docker.io/cassandra
  18 │         ports:
  19 └         - containerPort: 9042
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cassandra in deployment cass-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cass-sw-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: docker.io/cassandra
  18 │         ports:
  19 └         - containerPort: 9042
────────────────────────────────────────



cass-sw-app_1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cass-sw-app_1.yaml:8-15
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 9042
  10 │     name: cassandra-port
  11 │     targetPort: 9042
  12 │     protocol: TCP
  13 │   selector:
  14 │     app: cass-server
  15 └   clusterIP: None
────────────────────────────────────────



cass-sw-app_2.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'empire-hq' of Deployment 'empire-hq' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cass-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-hq
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'empire-hq' of Deployment 'empire-hq' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cass-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-hq
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'empire-hq' of 'deployment' 'empire-hq' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cass-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-hq
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'empire-hq' of Deployment 'empire-hq' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cass-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-hq
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'empire-hq' of Deployment 'empire-hq' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cass-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-hq
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'empire-hq' of Deployment 'empire-hq' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cass-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-hq
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'empire-hq' of Deployment 'empire-hq' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cass-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-hq
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'empire-hq' of Deployment 'empire-hq' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cass-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-hq
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'empire-hq' of Deployment 'empire-hq' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cass-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-hq
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'empire-hq' of Deployment 'empire-hq' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cass-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-hq
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'empire-hq' of Deployment 'empire-hq' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cass-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-hq
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'empire-hq' of Deployment 'empire-hq' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cass-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-hq
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cass-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-hq
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cass-sw-app_2.yaml:6-21
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: empire-hq
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: empire-hq
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "empire-hq" of deployment "empire-hq" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cass-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-hq
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cass-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-hq
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment empire-hq in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cass-sw-app_2.yaml:4
────────────────────────────────────────
   4 [   name: empire-hq
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container empire-hq in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cass-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-hq
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment empire-hq in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cass-sw-app_2.yaml:15-21
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: empire-hq
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container empire-hq in deployment empire-hq (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cass-sw-app_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-hq
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────



cass-sw-app_3.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'empire-outpost' of Deployment 'empire-outpost' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cass-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-outpost
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'empire-outpost' of Deployment 'empire-outpost' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cass-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-outpost
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'empire-outpost' of 'deployment' 'empire-outpost' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cass-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-outpost
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'empire-outpost' of Deployment 'empire-outpost' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cass-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-outpost
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'empire-outpost' of Deployment 'empire-outpost' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cass-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-outpost
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'empire-outpost' of Deployment 'empire-outpost' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cass-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-outpost
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'empire-outpost' of Deployment 'empire-outpost' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cass-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-outpost
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'empire-outpost' of Deployment 'empire-outpost' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cass-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-outpost
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'empire-outpost' of Deployment 'empire-outpost' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cass-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-outpost
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'empire-outpost' of Deployment 'empire-outpost' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cass-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-outpost
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'empire-outpost' of Deployment 'empire-outpost' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cass-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-outpost
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'empire-outpost' of Deployment 'empire-outpost' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cass-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-outpost
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cass-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-outpost
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cass-sw-app_3.yaml:6-21
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: empire-outpost
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: empire-outpost
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "empire-outpost" of deployment "empire-outpost" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cass-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-outpost
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cass-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-outpost
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment empire-outpost in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cass-sw-app_3.yaml:4
────────────────────────────────────────
   4 [   name: empire-outpost
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container empire-outpost in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cass-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-outpost
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment empire-outpost in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cass-sw-app_3.yaml:15-21
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: empire-outpost
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container empire-outpost in deployment empire-outpost (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cass-sw-app_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: empire-outpost
  17 │         image: docker.io/cassandra
  18 │         command:
  19 │         - sleep
  20 │         args:
  21 └         - '30000'
────────────────────────────────────────



cassandra-claim0-persistentvolumeclaim.yaml (kubernetes)
========================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-claim0-persistentvolumeclaim.yaml:8-12
────────────────────────────────────────
   8 ┌   accessModes:
   9 │   - ReadWriteOnce
  10 │   resources:
  11 │     requests:
  12 └       storage: 100Mi
────────────────────────────────────────



cassandra-claim0-persistentvolumeclaim1.yaml (kubernetes)
=========================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-claim0-persistentvolumeclaim1.yaml:8-12
────────────────────────────────────────
   8 ┌   accessModes:
   9 │   - ReadWriteOnce
  10 │   resources:
  11 │     requests:
  12 └       storage: 100Mi
────────────────────────────────────────



cassandra-claim1-persistentvolumeclaim.yaml (kubernetes)
========================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-claim1-persistentvolumeclaim.yaml:8-12
────────────────────────────────────────
   8 ┌   accessModes:
   9 │   - ReadWriteOnce
  10 │   resources:
  11 │     requests:
  12 └       storage: 100Mi
────────────────────────────────────────



cassandra-claim1-persistentvolumeclaim1.yaml (kubernetes)
=========================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-claim1-persistentvolumeclaim1.yaml:8-12
────────────────────────────────────────
   8 ┌   accessModes:
   9 │   - ReadWriteOnce
  10 │   resources:
  11 │     requests:
  12 └       storage: 100Mi
────────────────────────────────────────



cassandra-claim2-persistentvolumeclaim.yaml (kubernetes)
========================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-claim2-persistentvolumeclaim.yaml:8-12
────────────────────────────────────────
   8 ┌   accessModes:
   9 │   - ReadWriteOnce
  10 │   resources:
  11 │     requests:
  12 └       storage: 100Mi
────────────────────────────────────────



cassandra-claim2-persistentvolumeclaim1.yaml (kubernetes)
=========================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-claim2-persistentvolumeclaim1.yaml:8-12
────────────────────────────────────────
   8 ┌   accessModes:
   9 │   - ReadWriteOnce
  10 │   resources:
  11 │     requests:
  12 └       storage: 100Mi
────────────────────────────────────────



cassandra-db.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cassandra-db.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:latest
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         env:
  22 │         - name: CASSANDRA_SEEDS
  23 │           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  24 │         - name: MAX_HEAP_SIZE
  25 └           value: 512M
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cassandra-db.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:latest
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         env:
  22 │         - name: CASSANDRA_SEEDS
  23 │           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  24 │         - name: MAX_HEAP_SIZE
  25 └           value: 512M
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cassandra' of 'statefulset' 'cassandra' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cassandra-db.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:latest
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         env:
  22 │         - name: CASSANDRA_SEEDS
  23 │           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  24 │         - name: MAX_HEAP_SIZE
  25 └           value: 512M
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cassandra-db.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:latest
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         env:
  22 │         - name: CASSANDRA_SEEDS
  23 │           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  24 │         - name: MAX_HEAP_SIZE
  25 └           value: 512M
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cassandra-db.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:latest
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         env:
  22 │         - name: CASSANDRA_SEEDS
  23 │           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  24 │         - name: MAX_HEAP_SIZE
  25 └           value: 512M
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cassandra-db.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:latest
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         env:
  22 │         - name: CASSANDRA_SEEDS
  23 │           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  24 │         - name: MAX_HEAP_SIZE
  25 └           value: 512M
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cassandra-db.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:latest
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         env:
  22 │         - name: CASSANDRA_SEEDS
  23 │           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  24 │         - name: MAX_HEAP_SIZE
  25 └           value: 512M
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cassandra-db.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:latest
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         env:
  22 │         - name: CASSANDRA_SEEDS
  23 │           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  24 │         - name: MAX_HEAP_SIZE
  25 └           value: 512M
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cassandra-db.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:latest
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         env:
  22 │         - name: CASSANDRA_SEEDS
  23 │           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  24 │         - name: MAX_HEAP_SIZE
  25 └           value: 512M
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cassandra-db.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:latest
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         env:
  22 │         - name: CASSANDRA_SEEDS
  23 │           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  24 │         - name: MAX_HEAP_SIZE
  25 └           value: 512M
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cassandra-db.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:latest
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         env:
  22 │         - name: CASSANDRA_SEEDS
  23 │           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  24 │         - name: MAX_HEAP_SIZE
  25 └           value: 512M
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cassandra-db.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:latest
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         env:
  22 │         - name: CASSANDRA_SEEDS
  23 │           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  24 │         - name: MAX_HEAP_SIZE
  25 └           value: 512M
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cassandra-db.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:latest
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         env:
  22 │         - name: CASSANDRA_SEEDS
  23 │           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  24 │         - name: MAX_HEAP_SIZE
  25 └           value: 512M
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-db.yaml:6-39
────────────────────────────────────────
   6 ┌   serviceName: cassandra
   7 │   replicas: 3
   8 │   selector:
   9 │     matchLabels:
  10 │       app: cassandra
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cassandra" of statefulset "cassandra" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cassandra-db.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:latest
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         env:
  22 │         - name: CASSANDRA_SEEDS
  23 │           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  24 │         - name: MAX_HEAP_SIZE
  25 └           value: 512M
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cassandra-db.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:latest
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         env:
  22 │         - name: CASSANDRA_SEEDS
  23 │           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  24 │         - name: MAX_HEAP_SIZE
  25 └           value: 512M
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset cassandra in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cassandra-db.yaml:4
────────────────────────────────────────
   4 [   name: cassandra
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cassandra in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-db.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:latest
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         env:
  22 │         - name: CASSANDRA_SEEDS
  23 │           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  24 │         - name: MAX_HEAP_SIZE
  25 └           value: 512M
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset cassandra in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-db.yaml:16-30
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: cassandra
  18 │         image: cassandra:latest
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         env:
  22 │         - name: CASSANDRA_SEEDS
  23 │           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  24 └         - name: MAX_HEAP_SIZE
  ..   
────────────────────────────────────────



cassandra-db_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-db_1.yaml:8-13
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 9042
  10 │     name: cql
  11 │   clusterIP: None
  12 │   selector:
  13 └     app: cassandra
────────────────────────────────────────



cassandra-deny.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-deny.yaml:8-11
────────────────────────────────────────
   8 ┌   podSelector: {}
   9 │   policyTypes:
  10 │     - Ingress
  11 └     - Egress
────────────────────────────────────────



cassandra-deployment.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cassandra' of Deployment 'cassandra-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cassandra-deployment.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cassandra' of Deployment 'cassandra-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cassandra-deployment.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cassandra' of 'deployment' 'cassandra-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cassandra-deployment.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cassandra' of Deployment 'cassandra-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cassandra-deployment.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cassandra' of Deployment 'cassandra-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cassandra-deployment.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cassandra' of Deployment 'cassandra-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cassandra-deployment.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cassandra' of Deployment 'cassandra-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cassandra-deployment.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cassandra' of Deployment 'cassandra-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cassandra-deployment.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cassandra' of Deployment 'cassandra-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cassandra-deployment.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cassandra' of Deployment 'cassandra-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cassandra-deployment.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cassandra' of Deployment 'cassandra-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cassandra-deployment.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cassandra' of Deployment 'cassandra-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cassandra-deployment.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cassandra-deployment.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-deployment.yaml:6-83
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       io.kompose.service: cassandraservice
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       creationTimestamp: null
  14 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cassandra" of deployment "cassandra-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cassandra-deployment.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cassandra-deployment.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cassandra-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cassandra-deployment.yaml:4
────────────────────────────────────────
   4 [   name: cassandra-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cassandra-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-deployment.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cassandra-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-deployment.yaml:17-83
────────────────────────────────────────
  17 ┌       containers:
  18 │       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cassandra in deployment cassandra-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cassandra-deployment.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────



cassandra-deployment1.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cassandra' of Deployment 'cassandra-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cassandra-deployment1.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cassandra' of Deployment 'cassandra-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cassandra-deployment1.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cassandra' of 'deployment' 'cassandra-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cassandra-deployment1.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cassandra' of Deployment 'cassandra-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cassandra-deployment1.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cassandra' of Deployment 'cassandra-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cassandra-deployment1.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cassandra' of Deployment 'cassandra-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cassandra-deployment1.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cassandra' of Deployment 'cassandra-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cassandra-deployment1.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cassandra' of Deployment 'cassandra-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cassandra-deployment1.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cassandra' of Deployment 'cassandra-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cassandra-deployment1.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cassandra' of Deployment 'cassandra-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cassandra-deployment1.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cassandra' of Deployment 'cassandra-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cassandra-deployment1.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cassandra' of Deployment 'cassandra-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cassandra-deployment1.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cassandra-deployment1.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-deployment1.yaml:6-83
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       io.kompose.service: cassandraservice
   9 │   strategy:
  10 │     type: Recreate
  11 │   template:
  12 │     metadata:
  13 │       creationTimestamp: null
  14 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cassandra" of deployment "cassandra-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cassandra-deployment1.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cassandra-deployment1.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cassandra-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cassandra-deployment1.yaml:4
────────────────────────────────────────
   4 [   name: cassandra-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cassandra-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-deployment1.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cassandra-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-deployment1.yaml:17-83
────────────────────────────────────────
  17 ┌       containers:
  18 │       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cassandra in deployment cassandra-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cassandra-deployment1.yaml:18-69
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: CASSANDRA_CFG_ENV_HEAP_NEWSIZE
  23 │               name: cassandra-configmap
  24 │         - name: CASSANDRA_CFG_ENV_MAX_HEAP_SIZE
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────



cassandra-deployment2.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cassandra' of Deployment 'cassandra-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cassandra-deployment2.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: cassandra
  17 │           image: cassandra:latest
  18 │           ports:
  19 │             - containerPort: 9042
  20 │           volumeMounts:
  21 │             - mountPath: "/var/lib/cassandra"
  22 └               name: cassandra-persistent-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cassandra' of Deployment 'cassandra-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cassandra-deployment2.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: cassandra
  17 │           image: cassandra:latest
  18 │           ports:
  19 │             - containerPort: 9042
  20 │           volumeMounts:
  21 │             - mountPath: "/var/lib/cassandra"
  22 └               name: cassandra-persistent-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cassandra' of 'deployment' 'cassandra-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cassandra-deployment2.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: cassandra
  17 │           image: cassandra:latest
  18 │           ports:
  19 │             - containerPort: 9042
  20 │           volumeMounts:
  21 │             - mountPath: "/var/lib/cassandra"
  22 └               name: cassandra-persistent-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cassandra' of Deployment 'cassandra-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cassandra-deployment2.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: cassandra
  17 │           image: cassandra:latest
  18 │           ports:
  19 │             - containerPort: 9042
  20 │           volumeMounts:
  21 │             - mountPath: "/var/lib/cassandra"
  22 └               name: cassandra-persistent-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cassandra' of Deployment 'cassandra-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cassandra-deployment2.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: cassandra
  17 │           image: cassandra:latest
  18 │           ports:
  19 │             - containerPort: 9042
  20 │           volumeMounts:
  21 │             - mountPath: "/var/lib/cassandra"
  22 └               name: cassandra-persistent-storage
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cassandra' of Deployment 'cassandra-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cassandra-deployment2.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: cassandra
  17 │           image: cassandra:latest
  18 │           ports:
  19 │             - containerPort: 9042
  20 │           volumeMounts:
  21 │             - mountPath: "/var/lib/cassandra"
  22 └               name: cassandra-persistent-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cassandra' of Deployment 'cassandra-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cassandra-deployment2.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: cassandra
  17 │           image: cassandra:latest
  18 │           ports:
  19 │             - containerPort: 9042
  20 │           volumeMounts:
  21 │             - mountPath: "/var/lib/cassandra"
  22 └               name: cassandra-persistent-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cassandra' of Deployment 'cassandra-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cassandra-deployment2.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: cassandra
  17 │           image: cassandra:latest
  18 │           ports:
  19 │             - containerPort: 9042
  20 │           volumeMounts:
  21 │             - mountPath: "/var/lib/cassandra"
  22 └               name: cassandra-persistent-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cassandra' of Deployment 'cassandra-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cassandra-deployment2.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: cassandra
  17 │           image: cassandra:latest
  18 │           ports:
  19 │             - containerPort: 9042
  20 │           volumeMounts:
  21 │             - mountPath: "/var/lib/cassandra"
  22 └               name: cassandra-persistent-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cassandra' of Deployment 'cassandra-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cassandra-deployment2.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: cassandra
  17 │           image: cassandra:latest
  18 │           ports:
  19 │             - containerPort: 9042
  20 │           volumeMounts:
  21 │             - mountPath: "/var/lib/cassandra"
  22 └               name: cassandra-persistent-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cassandra' of Deployment 'cassandra-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cassandra-deployment2.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: cassandra
  17 │           image: cassandra:latest
  18 │           ports:
  19 │             - containerPort: 9042
  20 │           volumeMounts:
  21 │             - mountPath: "/var/lib/cassandra"
  22 └               name: cassandra-persistent-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cassandra' of Deployment 'cassandra-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cassandra-deployment2.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: cassandra
  17 │           image: cassandra:latest
  18 │           ports:
  19 │             - containerPort: 9042
  20 │           volumeMounts:
  21 │             - mountPath: "/var/lib/cassandra"
  22 └               name: cassandra-persistent-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cassandra-deployment2.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: cassandra
  17 │           image: cassandra:latest
  18 │           ports:
  19 │             - containerPort: 9042
  20 │           volumeMounts:
  21 │             - mountPath: "/var/lib/cassandra"
  22 └               name: cassandra-persistent-storage
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-deployment2.yaml:6-26
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: cassandra
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: cassandra
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cassandra" of deployment "cassandra-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cassandra-deployment2.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: cassandra
  17 │           image: cassandra:latest
  18 │           ports:
  19 │             - containerPort: 9042
  20 │           volumeMounts:
  21 │             - mountPath: "/var/lib/cassandra"
  22 └               name: cassandra-persistent-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cassandra-deployment2.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: cassandra
  17 │           image: cassandra:latest
  18 │           ports:
  19 │             - containerPort: 9042
  20 │           volumeMounts:
  21 │             - mountPath: "/var/lib/cassandra"
  22 └               name: cassandra-persistent-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cassandra-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cassandra-deployment2.yaml:4
────────────────────────────────────────
   4 [   name: cassandra-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cassandra-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-deployment2.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: cassandra
  17 │           image: cassandra:latest
  18 │           ports:
  19 │             - containerPort: 9042
  20 │           volumeMounts:
  21 │             - mountPath: "/var/lib/cassandra"
  22 └               name: cassandra-persistent-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cassandra-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-deployment2.yaml:15-26
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: cassandra
  17 │           image: cassandra:latest
  18 │           ports:
  19 │             - containerPort: 9042
  20 │           volumeMounts:
  21 │             - mountPath: "/var/lib/cassandra"
  22 │               name: cassandra-persistent-storage
  23 └       volumes:
  ..   
────────────────────────────────────────



cassandra-headless-service.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-headless-service.yaml:8-12
────────────────────────────────────────
   8 ┌   clusterIP: None
   9 │   ports:
  10 │   - port: 9042
  11 │   selector:
  12 └     app: Cassandra
────────────────────────────────────────



cassandra-local-volumen.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-local-volumen.yaml:9-15
────────────────────────────────────────
   9 ┌   capacity:
  10 │     storage: 1Gi
  11 │   accessModes:
  12 │   - ReadWriteOnce
  13 │   hostPath:
  14 │     path: /tmp/data/cassandra-data-1
  15 └   persistentVolumeReclaimPolicy: Recycle
────────────────────────────────────────



cassandra-local-volumen_1.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-local-volumen_1.yaml:9-15
────────────────────────────────────────
   9 ┌   capacity:
  10 │     storage: 1Gi
  11 │   accessModes:
  12 │   - ReadWriteOnce
  13 │   hostPath:
  14 │     path: /tmp/data/cassandra-data-2
  15 └   persistentVolumeReclaimPolicy: Recycle
────────────────────────────────────────



cassandra-local-volumen_2.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-local-volumen_2.yaml:9-15
────────────────────────────────────────
   9 ┌   capacity:
  10 │     storage: 1Gi
  11 │   accessModes:
  12 │   - ReadWriteOnce
  13 │   hostPath:
  14 │     path: /tmp/data/cassandra-data-3
  15 └   persistentVolumeReclaimPolicy: Recycle
────────────────────────────────────────



cassandra-pv.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-pv.yaml:6-11
────────────────────────────────────────
   6 ┌   capacity:
   7 │     storage: 1Gi
   8 │   accessModes:
   9 │     - ReadWriteOnce
  10 │   hostPath:
  11 └     path: "/mnt/data/cassandra"
────────────────────────────────────────



cassandra-pvc.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-pvc.yaml:6-10
────────────────────────────────────────
   6 ┌   accessModes:
   7 │     - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 └       storage: 1Gi
────────────────────────────────────────



cassandra-reaper.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cassandra-reaper' of Deployment 'cassandra-reaper' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cassandra-reaper.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: cassandra-reaper
  17 │         image: thelastpickle/cassandra-reaper:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: REAPER_STORAGE_TYPE
  22 │           value: cassandra
  23 │         - name: REAPER_CASS_CONTACT_POINTS
  24 └           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cassandra-reaper' of Deployment 'cassandra-reaper' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cassandra-reaper.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: cassandra-reaper
  17 │         image: thelastpickle/cassandra-reaper:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: REAPER_STORAGE_TYPE
  22 │           value: cassandra
  23 │         - name: REAPER_CASS_CONTACT_POINTS
  24 └           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cassandra-reaper' of 'deployment' 'cassandra-reaper' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cassandra-reaper.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: cassandra-reaper
  17 │         image: thelastpickle/cassandra-reaper:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: REAPER_STORAGE_TYPE
  22 │           value: cassandra
  23 │         - name: REAPER_CASS_CONTACT_POINTS
  24 └           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cassandra-reaper' of Deployment 'cassandra-reaper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cassandra-reaper.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: cassandra-reaper
  17 │         image: thelastpickle/cassandra-reaper:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: REAPER_STORAGE_TYPE
  22 │           value: cassandra
  23 │         - name: REAPER_CASS_CONTACT_POINTS
  24 └           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cassandra-reaper' of Deployment 'cassandra-reaper' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cassandra-reaper.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: cassandra-reaper
  17 │         image: thelastpickle/cassandra-reaper:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: REAPER_STORAGE_TYPE
  22 │           value: cassandra
  23 │         - name: REAPER_CASS_CONTACT_POINTS
  24 └           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cassandra-reaper' of Deployment 'cassandra-reaper' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cassandra-reaper.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: cassandra-reaper
  17 │         image: thelastpickle/cassandra-reaper:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: REAPER_STORAGE_TYPE
  22 │           value: cassandra
  23 │         - name: REAPER_CASS_CONTACT_POINTS
  24 └           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cassandra-reaper' of Deployment 'cassandra-reaper' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cassandra-reaper.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: cassandra-reaper
  17 │         image: thelastpickle/cassandra-reaper:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: REAPER_STORAGE_TYPE
  22 │           value: cassandra
  23 │         - name: REAPER_CASS_CONTACT_POINTS
  24 └           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cassandra-reaper' of Deployment 'cassandra-reaper' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cassandra-reaper.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: cassandra-reaper
  17 │         image: thelastpickle/cassandra-reaper:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: REAPER_STORAGE_TYPE
  22 │           value: cassandra
  23 │         - name: REAPER_CASS_CONTACT_POINTS
  24 └           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cassandra-reaper' of Deployment 'cassandra-reaper' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cassandra-reaper.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: cassandra-reaper
  17 │         image: thelastpickle/cassandra-reaper:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: REAPER_STORAGE_TYPE
  22 │           value: cassandra
  23 │         - name: REAPER_CASS_CONTACT_POINTS
  24 └           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cassandra-reaper' of Deployment 'cassandra-reaper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cassandra-reaper.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: cassandra-reaper
  17 │         image: thelastpickle/cassandra-reaper:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: REAPER_STORAGE_TYPE
  22 │           value: cassandra
  23 │         - name: REAPER_CASS_CONTACT_POINTS
  24 └           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cassandra-reaper' of Deployment 'cassandra-reaper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cassandra-reaper.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: cassandra-reaper
  17 │         image: thelastpickle/cassandra-reaper:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: REAPER_STORAGE_TYPE
  22 │           value: cassandra
  23 │         - name: REAPER_CASS_CONTACT_POINTS
  24 └           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cassandra-reaper' of Deployment 'cassandra-reaper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cassandra-reaper.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: cassandra-reaper
  17 │         image: thelastpickle/cassandra-reaper:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: REAPER_STORAGE_TYPE
  22 │           value: cassandra
  23 │         - name: REAPER_CASS_CONTACT_POINTS
  24 └           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cassandra-reaper.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: cassandra-reaper
  17 │         image: thelastpickle/cassandra-reaper:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: REAPER_STORAGE_TYPE
  22 │           value: cassandra
  23 │         - name: REAPER_CASS_CONTACT_POINTS
  24 └           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-reaper.yaml:6-34
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: cassandra-reaper
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: cassandra-reaper
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cassandra-reaper" of deployment "cassandra-reaper" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cassandra-reaper.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: cassandra-reaper
  17 │         image: thelastpickle/cassandra-reaper:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: REAPER_STORAGE_TYPE
  22 │           value: cassandra
  23 │         - name: REAPER_CASS_CONTACT_POINTS
  24 └           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cassandra-reaper.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: cassandra-reaper
  17 │         image: thelastpickle/cassandra-reaper:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: REAPER_STORAGE_TYPE
  22 │           value: cassandra
  23 │         - name: REAPER_CASS_CONTACT_POINTS
  24 └           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cassandra-reaper in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cassandra-reaper.yaml:4
────────────────────────────────────────
   4 [   name: cassandra-reaper
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cassandra-reaper in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-reaper.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: cassandra-reaper
  17 │         image: thelastpickle/cassandra-reaper:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: REAPER_STORAGE_TYPE
  22 │           value: cassandra
  23 │         - name: REAPER_CASS_CONTACT_POINTS
  24 └           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cassandra-reaper in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-reaper.yaml:15-34
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: cassandra-reaper
  17 │         image: thelastpickle/cassandra-reaper:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: REAPER_STORAGE_TYPE
  22 │           value: cassandra
  23 └         - name: REAPER_CASS_CONTACT_POINTS
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cassandra-reaper in deployment cassandra-reaper (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cassandra-reaper.yaml:16-34
────────────────────────────────────────
  16 ┌       - name: cassandra-reaper
  17 │         image: thelastpickle/cassandra-reaper:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: REAPER_STORAGE_TYPE
  22 │           value: cassandra
  23 │         - name: REAPER_CASS_CONTACT_POINTS
  24 └           value: cassandra-0.cassandra,cassandra-1.cassandra,cassandra-2.cassandra
  ..   
────────────────────────────────────────



cassandra-reaper_1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-reaper_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: cassandra-reaper
   9 │   ports:
  10 │   - name: http
  11 │     port: 8080
  12 └     targetPort: 8080
────────────────────────────────────────



cassandra-service.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-service.yaml:8-19
────────────────────────────────────────
   8 ┌   ports:
   9 │   - name: "7000"
  10 │     port: 7000
  11 │     targetPort: 7000
  12 │   - name: "7199"
  13 │     port: 7199
  14 │     targetPort: 7199
  15 │   - name: "9042"
  16 └     port: 9042
  ..   
────────────────────────────────────────



cassandra-service1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-service1.yaml:8-19
────────────────────────────────────────
   8 ┌   ports:
   9 │   - name: "7000"
  10 │     port: 7000
  11 │     targetPort: 7000
  12 │   - name: "7199"
  13 │     port: 7199
  14 │     targetPort: 7199
  15 │   - name: "9042"
  16 └     port: 9042
  ..   
────────────────────────────────────────



cassandra-service2.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-service2.yaml:8-12
────────────────────────────────────────
   8 ┌   clusterIP: None
   9 │   ports:
  10 │     - port: 9042
  11 │   selector:
  12 └     app: cassandra
────────────────────────────────────────



cassandra-service3.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-service3.yaml:8-12
────────────────────────────────────────
   8 ┌   clusterIP: None
   9 │   ports:
  10 │     - port: 9042
  11 │   selector:
  12 └     app: cassandra
────────────────────────────────────────



cassandra-service4.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-service4.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: cassandra
   8 │   ports:
   9 │     - protocol: TCP
  10 │       port: 9042
  11 │       targetPort: 9042
  12 └   type: LoadBalancer  # Cambio aquí para utilizar NodePort
────────────────────────────────────────



cassandra-service5.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-service5.yaml:8-12
────────────────────────────────────────
   8 ┌   selector:
   9 │     app: cassandra
  10 │   clusterIP: None
  11 │   ports:
  12 └     - port: 9042
────────────────────────────────────────



cassandra-service6.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-service6.yaml:8-12
────────────────────────────────────────
   8 ┌   clusterIP: None
   9 │   ports:
  10 │   - port: 9042
  11 │   selector:
  12 └     app: cassandra
────────────────────────────────────────



cassandra-service7.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-service7.yaml:8-12
────────────────────────────────────────
   8 ┌   clusterIP: None
   9 │   ports:
  10 │   - port: 9042
  11 │   selector:
  12 └     app: cassandra
────────────────────────────────────────



cassandra-service8.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-service8.yaml:9-13
────────────────────────────────────────
   9 ┌   clusterIP: None
  10 │   ports:
  11 │     - port: 9042
  12 │   selector:
  13 └     app: cassandra
────────────────────────────────────────



cassandra-service9.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-service9.yaml:8-12
────────────────────────────────────────
   8 ┌   clusterIP: None
   9 │   ports:
  10 │     - port: 9042
  11 │   selector:
  12 └     app: cassandra
────────────────────────────────────────



cassandra-stateful-set.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cassandra-stateful-set.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cassandra-stateful-set.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cassandra' of 'statefulset' 'cassandra' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cassandra-stateful-set.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cassandra-stateful-set.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cassandra-stateful-set.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cassandra-stateful-set.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cassandra-stateful-set.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 cassandra-stateful-set.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cassandra-stateful-set.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-stateful-set.yaml:8-89
────────────────────────────────────────
   8 ┌   serviceName: cassandra
   9 │   replicas: 3
  10 │   selector:
  11 │     matchLabels:
  12 │       app: cassandra
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cassandra" of statefulset "cassandra" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cassandra-stateful-set.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cassandra-stateful-set.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset cassandra in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cassandra-stateful-set.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cassandra
   5 │   labels:
   6 └     app: cassandra
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset cassandra in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-stateful-set.yaml:18-79
────────────────────────────────────────
  18 ┌       terminationGracePeriodSeconds: 1800
  19 │       containers:
  20 │       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 └         - containerPort: 7001
  ..   
────────────────────────────────────────



cassandra-statefulset-best-effort.yaml (kubernetes)
===================================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra-best-effort' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cassandra-statefulset-best-effort.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: MAX_HEAP_SIZE
  26 │           value: 512M
  27 │         - name: HEAP_NEWSIZE
  28 │           value: 100M
  29 └         - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cassandra' of StatefulSet 'cassandra-best-effort' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cassandra-statefulset-best-effort.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: MAX_HEAP_SIZE
  26 │           value: 512M
  27 │         - name: HEAP_NEWSIZE
  28 │           value: 100M
  29 └         - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cassandra' of 'statefulset' 'cassandra-best-effort' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cassandra-statefulset-best-effort.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: MAX_HEAP_SIZE
  26 │           value: 512M
  27 │         - name: HEAP_NEWSIZE
  28 │           value: 100M
  29 └         - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cassandra' of StatefulSet 'cassandra-best-effort' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cassandra-statefulset-best-effort.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: MAX_HEAP_SIZE
  26 │           value: 512M
  27 │         - name: HEAP_NEWSIZE
  28 │           value: 100M
  29 └         - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra-best-effort' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cassandra-statefulset-best-effort.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: MAX_HEAP_SIZE
  26 │           value: 512M
  27 │         - name: HEAP_NEWSIZE
  28 │           value: 100M
  29 └         - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cassandra' of StatefulSet 'cassandra-best-effort' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cassandra-statefulset-best-effort.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: MAX_HEAP_SIZE
  26 │           value: 512M
  27 │         - name: HEAP_NEWSIZE
  28 │           value: 100M
  29 └         - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cassandra' of StatefulSet 'cassandra-best-effort' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cassandra-statefulset-best-effort.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: MAX_HEAP_SIZE
  26 │           value: 512M
  27 │         - name: HEAP_NEWSIZE
  28 │           value: 100M
  29 └         - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cassandra' of StatefulSet 'cassandra-best-effort' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cassandra-statefulset-best-effort.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: MAX_HEAP_SIZE
  26 │           value: 512M
  27 │         - name: HEAP_NEWSIZE
  28 │           value: 100M
  29 └         - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cassandra' of StatefulSet 'cassandra-best-effort' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cassandra-statefulset-best-effort.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: MAX_HEAP_SIZE
  26 │           value: 512M
  27 │         - name: HEAP_NEWSIZE
  28 │           value: 100M
  29 └         - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cassandra' of StatefulSet 'cassandra-best-effort' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cassandra-statefulset-best-effort.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: MAX_HEAP_SIZE
  26 │           value: 512M
  27 │         - name: HEAP_NEWSIZE
  28 │           value: 100M
  29 └         - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cassandra' of StatefulSet 'cassandra-best-effort' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cassandra-statefulset-best-effort.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: MAX_HEAP_SIZE
  26 │           value: 512M
  27 │         - name: HEAP_NEWSIZE
  28 │           value: 100M
  29 └         - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cassandra-statefulset-best-effort.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: MAX_HEAP_SIZE
  26 │           value: 512M
  27 │         - name: HEAP_NEWSIZE
  28 │           value: 100M
  29 └         - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-statefulset-best-effort.yaml:8-48
────────────────────────────────────────
   8 ┌   serviceName: cassandra-best-effort
   9 │   replicas: 2
  10 │   selector:
  11 │     matchLabels:
  12 │       app: cassandra-best-effort
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: cassandra-best-effort
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cassandra" of statefulset "cassandra-best-effort" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cassandra-statefulset-best-effort.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: MAX_HEAP_SIZE
  26 │           value: 512M
  27 │         - name: HEAP_NEWSIZE
  28 │           value: 100M
  29 └         - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cassandra-statefulset-best-effort.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: MAX_HEAP_SIZE
  26 │           value: 512M
  27 │         - name: HEAP_NEWSIZE
  28 │           value: 100M
  29 └         - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset cassandra-best-effort in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cassandra-statefulset-best-effort.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cassandra-best-effort
   5 │   labels:
   6 └     app: cassandra-best-effort
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cassandra-best-effort in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-statefulset-best-effort.yaml:21-39
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: MAX_HEAP_SIZE
  26 │           value: 512M
  27 │         - name: HEAP_NEWSIZE
  28 │           value: 100M
  29 └         - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset cassandra-best-effort in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-statefulset-best-effort.yaml:18-39
────────────────────────────────────────
  18 ┌       nodeSelector:
  19 │         kubernetes.io/hostname: minikube-m02
  20 │       containers:
  21 │       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: MAX_HEAP_SIZE
  26 └           value: 512M
  ..   
────────────────────────────────────────



cassandra-statefulset-best-effort_1.yaml (kubernetes)
=====================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-statefulset-best-effort_1.yaml:8-12
────────────────────────────────────────
   8 ┌   clusterIP: None
   9 │   ports:
  10 │   - port: 9042
  11 │   selector:
  12 └     app: cassandra-best-effort
────────────────────────────────────────



cassandra-statefulset-guaranteed.yaml (kubernetes)
==================================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cassandra-guaranteed' of StatefulSet 'cassandra-guaranteed' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cassandra-statefulset-guaranteed.yaml:21-46
────────────────────────────────────────
  21 ┌       - name: cassandra-guaranteed
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         resources:
  25 │           requests:
  26 │             memory: 1024Mi
  27 │             cpu: 250m
  28 │           limits:
  29 └             memory: 1024Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cassandra-guaranteed' of StatefulSet 'cassandra-guaranteed' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cassandra-statefulset-guaranteed.yaml:21-46
────────────────────────────────────────
  21 ┌       - name: cassandra-guaranteed
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         resources:
  25 │           requests:
  26 │             memory: 1024Mi
  27 │             cpu: 250m
  28 │           limits:
  29 └             memory: 1024Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cassandra-guaranteed' of 'statefulset' 'cassandra-guaranteed' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cassandra-statefulset-guaranteed.yaml:21-46
────────────────────────────────────────
  21 ┌       - name: cassandra-guaranteed
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         resources:
  25 │           requests:
  26 │             memory: 1024Mi
  27 │             cpu: 250m
  28 │           limits:
  29 └             memory: 1024Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cassandra-guaranteed' of StatefulSet 'cassandra-guaranteed' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cassandra-statefulset-guaranteed.yaml:21-46
────────────────────────────────────────
  21 ┌       - name: cassandra-guaranteed
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         resources:
  25 │           requests:
  26 │             memory: 1024Mi
  27 │             cpu: 250m
  28 │           limits:
  29 └             memory: 1024Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cassandra-guaranteed' of StatefulSet 'cassandra-guaranteed' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cassandra-statefulset-guaranteed.yaml:21-46
────────────────────────────────────────
  21 ┌       - name: cassandra-guaranteed
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         resources:
  25 │           requests:
  26 │             memory: 1024Mi
  27 │             cpu: 250m
  28 │           limits:
  29 └             memory: 1024Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cassandra-guaranteed' of StatefulSet 'cassandra-guaranteed' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cassandra-statefulset-guaranteed.yaml:21-46
────────────────────────────────────────
  21 ┌       - name: cassandra-guaranteed
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         resources:
  25 │           requests:
  26 │             memory: 1024Mi
  27 │             cpu: 250m
  28 │           limits:
  29 └             memory: 1024Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cassandra-guaranteed' of StatefulSet 'cassandra-guaranteed' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cassandra-statefulset-guaranteed.yaml:21-46
────────────────────────────────────────
  21 ┌       - name: cassandra-guaranteed
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         resources:
  25 │           requests:
  26 │             memory: 1024Mi
  27 │             cpu: 250m
  28 │           limits:
  29 └             memory: 1024Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cassandra-statefulset-guaranteed.yaml:21-46
────────────────────────────────────────
  21 ┌       - name: cassandra-guaranteed
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         resources:
  25 │           requests:
  26 │             memory: 1024Mi
  27 │             cpu: 250m
  28 │           limits:
  29 └             memory: 1024Mi
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-statefulset-guaranteed.yaml:8-55
────────────────────────────────────────
   8 ┌   serviceName: cassandra-guaranteed
   9 │   replicas: 2
  10 │   selector:
  11 │     matchLabels:
  12 │       app: cassandra-guaranteed
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: cassandra-guaranteed
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cassandra-guaranteed" of statefulset "cassandra-guaranteed" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cassandra-statefulset-guaranteed.yaml:21-46
────────────────────────────────────────
  21 ┌       - name: cassandra-guaranteed
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         resources:
  25 │           requests:
  26 │             memory: 1024Mi
  27 │             cpu: 250m
  28 │           limits:
  29 └             memory: 1024Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cassandra-statefulset-guaranteed.yaml:21-46
────────────────────────────────────────
  21 ┌       - name: cassandra-guaranteed
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         resources:
  25 │           requests:
  26 │             memory: 1024Mi
  27 │             cpu: 250m
  28 │           limits:
  29 └             memory: 1024Mi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset cassandra-guaranteed in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cassandra-statefulset-guaranteed.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cassandra-guaranteed
   5 │   labels:
   6 └     app: cassandra-guaranteed
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cassandra-guaranteed in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-statefulset-guaranteed.yaml:21-46
────────────────────────────────────────
  21 ┌       - name: cassandra-guaranteed
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         resources:
  25 │           requests:
  26 │             memory: 1024Mi
  27 │             cpu: 250m
  28 │           limits:
  29 └             memory: 1024Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset cassandra-guaranteed in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-statefulset-guaranteed.yaml:18-46
────────────────────────────────────────
  18 ┌       nodeSelector:
  19 │         kubernetes.io/hostname: minikube-m02
  20 │       containers:
  21 │       - name: cassandra-guaranteed
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         resources:
  25 │           requests:
  26 └             memory: 1024Mi
  ..   
────────────────────────────────────────



cassandra-statefulset-guaranteed_1.yaml (kubernetes)
====================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-statefulset-guaranteed_1.yaml:8-12
────────────────────────────────────────
   8 ┌   clusterIP: None
   9 │   ports:
  10 │   - port: 9042
  11 │   selector:
  12 └     app: cassandra-guaranteed
────────────────────────────────────────



cassandra-statefulset.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cassandra-statefulset.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cassandra-statefulset.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cassandra' of 'statefulset' 'cassandra' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cassandra-statefulset.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cassandra-statefulset.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cassandra-statefulset.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cassandra-statefulset.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cassandra-statefulset.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 cassandra-statefulset.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cassandra-statefulset.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-statefulset.yaml:8-90
────────────────────────────────────────
   8 ┌   serviceName: cassandra
   9 │   replicas: 3
  10 │   selector:
  11 │     matchLabels:
  12 │       app: cassandra
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cassandra" of statefulset "cassandra" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cassandra-statefulset.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cassandra-statefulset.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset cassandra in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cassandra-statefulset.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cassandra
   5 │   labels:
   6 └     app: cassandra
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset cassandra in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-statefulset.yaml:18-79
────────────────────────────────────────
  18 ┌       terminationGracePeriodSeconds: 1800
  19 │       containers:
  20 │       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 └         - containerPort: 7001
  ..   
────────────────────────────────────────



cassandra-statefulset1.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cassandra-statefulset1.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cassandra-statefulset1.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cassandra' of 'statefulset' 'cassandra' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cassandra-statefulset1.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cassandra-statefulset1.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cassandra-statefulset1.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cassandra-statefulset1.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cassandra-statefulset1.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 cassandra-statefulset1.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cassandra-statefulset1.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-statefulset1.yaml:8-90
────────────────────────────────────────
   8 ┌   serviceName: cassandra
   9 │   replicas: 3
  10 │   selector:
  11 │     matchLabels:
  12 │       app: cassandra
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cassandra" of statefulset "cassandra" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cassandra-statefulset1.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cassandra-statefulset1.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset cassandra in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cassandra-statefulset1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cassandra
   5 │   labels:
   6 └     app: cassandra
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset cassandra in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-statefulset1.yaml:18-79
────────────────────────────────────────
  18 ┌       terminationGracePeriodSeconds: 1800
  19 │       containers:
  20 │       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 └         - containerPort: 7001
  ..   
────────────────────────────────────────



cassandra-statefulset2.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cassandra-statefulset2.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: cassandra
  20 │           image: gcr.io/google-samples/cassandra:v13
  21 │           imagePullPolicy: Always
  22 │           env:
  23 │             - name: MAX_HEAP_SIZE
  24 │               value: 512M
  25 │             - name: HEAP_NEWSIZE
  26 │               value: 100M
  27 └             - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cassandra-statefulset2.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: cassandra
  20 │           image: gcr.io/google-samples/cassandra:v13
  21 │           imagePullPolicy: Always
  22 │           env:
  23 │             - name: MAX_HEAP_SIZE
  24 │               value: 512M
  25 │             - name: HEAP_NEWSIZE
  26 │               value: 100M
  27 └             - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cassandra' of 'statefulset' 'cassandra' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cassandra-statefulset2.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: cassandra
  20 │           image: gcr.io/google-samples/cassandra:v13
  21 │           imagePullPolicy: Always
  22 │           env:
  23 │             - name: MAX_HEAP_SIZE
  24 │               value: 512M
  25 │             - name: HEAP_NEWSIZE
  26 │               value: 100M
  27 └             - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cassandra-statefulset2.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: cassandra
  20 │           image: gcr.io/google-samples/cassandra:v13
  21 │           imagePullPolicy: Always
  22 │           env:
  23 │             - name: MAX_HEAP_SIZE
  24 │               value: 512M
  25 │             - name: HEAP_NEWSIZE
  26 │               value: 100M
  27 └             - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cassandra-statefulset2.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: cassandra
  20 │           image: gcr.io/google-samples/cassandra:v13
  21 │           imagePullPolicy: Always
  22 │           env:
  23 │             - name: MAX_HEAP_SIZE
  24 │               value: 512M
  25 │             - name: HEAP_NEWSIZE
  26 │               value: 100M
  27 └             - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cassandra-statefulset2.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: cassandra
  20 │           image: gcr.io/google-samples/cassandra:v13
  21 │           imagePullPolicy: Always
  22 │           env:
  23 │             - name: MAX_HEAP_SIZE
  24 │               value: 512M
  25 │             - name: HEAP_NEWSIZE
  26 │               value: 100M
  27 └             - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cassandra-statefulset2.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: cassandra
  20 │           image: gcr.io/google-samples/cassandra:v13
  21 │           imagePullPolicy: Always
  22 │           env:
  23 │             - name: MAX_HEAP_SIZE
  24 │               value: 512M
  25 │             - name: HEAP_NEWSIZE
  26 │               value: 100M
  27 └             - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cassandra-statefulset2.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: cassandra
  20 │           image: gcr.io/google-samples/cassandra:v13
  21 │           imagePullPolicy: Always
  22 │           env:
  23 │             - name: MAX_HEAP_SIZE
  24 │               value: 512M
  25 │             - name: HEAP_NEWSIZE
  26 │               value: 100M
  27 └             - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cassandra-statefulset2.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: cassandra
  20 │           image: gcr.io/google-samples/cassandra:v13
  21 │           imagePullPolicy: Always
  22 │           env:
  23 │             - name: MAX_HEAP_SIZE
  24 │               value: 512M
  25 │             - name: HEAP_NEWSIZE
  26 │               value: 100M
  27 └             - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cassandra-statefulset2.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: cassandra
  20 │           image: gcr.io/google-samples/cassandra:v13
  21 │           imagePullPolicy: Always
  22 │           env:
  23 │             - name: MAX_HEAP_SIZE
  24 │               value: 512M
  25 │             - name: HEAP_NEWSIZE
  26 │               value: 100M
  27 └             - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cassandra-statefulset2.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: cassandra
  20 │           image: gcr.io/google-samples/cassandra:v13
  21 │           imagePullPolicy: Always
  22 │           env:
  23 │             - name: MAX_HEAP_SIZE
  24 │               value: 512M
  25 │             - name: HEAP_NEWSIZE
  26 │               value: 100M
  27 └             - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cassandra-statefulset2.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: cassandra
  20 │           image: gcr.io/google-samples/cassandra:v13
  21 │           imagePullPolicy: Always
  22 │           env:
  23 │             - name: MAX_HEAP_SIZE
  24 │               value: 512M
  25 │             - name: HEAP_NEWSIZE
  26 │               value: 100M
  27 └             - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-statefulset2.yaml:8-48
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: cassandra
  11 │   serviceName: cassandra
  12 │   replicas: 3
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cassandra" of statefulset "cassandra" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cassandra-statefulset2.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: cassandra
  20 │           image: gcr.io/google-samples/cassandra:v13
  21 │           imagePullPolicy: Always
  22 │           env:
  23 │             - name: MAX_HEAP_SIZE
  24 │               value: 512M
  25 │             - name: HEAP_NEWSIZE
  26 │               value: 100M
  27 └             - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cassandra-statefulset2.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: cassandra
  20 │           image: gcr.io/google-samples/cassandra:v13
  21 │           imagePullPolicy: Always
  22 │           env:
  23 │             - name: MAX_HEAP_SIZE
  24 │               value: 512M
  25 │             - name: HEAP_NEWSIZE
  26 │               value: 100M
  27 └             - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset cassandra in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cassandra-statefulset2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cassandra
   5 │   labels:
   6 └     name: cassandra
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cassandra in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-statefulset2.yaml:19-38
────────────────────────────────────────
  19 ┌         - name: cassandra
  20 │           image: gcr.io/google-samples/cassandra:v13
  21 │           imagePullPolicy: Always
  22 │           env:
  23 │             - name: MAX_HEAP_SIZE
  24 │               value: 512M
  25 │             - name: HEAP_NEWSIZE
  26 │               value: 100M
  27 └             - name: CASSANDRA_SEEDS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset cassandra in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-statefulset2.yaml:18-38
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: cassandra
  20 │           image: gcr.io/google-samples/cassandra:v13
  21 │           imagePullPolicy: Always
  22 │           env:
  23 │             - name: MAX_HEAP_SIZE
  24 │               value: 512M
  25 │             - name: HEAP_NEWSIZE
  26 └               value: 100M
  ..   
────────────────────────────────────────



cassandra-statefulset3.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cassandra-statefulset3.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cassandra-statefulset3.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cassandra' of 'statefulset' 'cassandra' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cassandra-statefulset3.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cassandra-statefulset3.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cassandra-statefulset3.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cassandra-statefulset3.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cassandra-statefulset3.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 cassandra-statefulset3.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cassandra-statefulset3.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-statefulset3.yaml:8-87
────────────────────────────────────────
   8 ┌   serviceName: cassandra
   9 │   replicas: 3
  10 │   selector:
  11 │     matchLabels:
  12 │       app: cassandra
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cassandra" of statefulset "cassandra" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cassandra-statefulset3.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cassandra-statefulset3.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset cassandra in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cassandra-statefulset3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cassandra
   5 │   labels:
   6 └     app: cassandra
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset cassandra in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-statefulset3.yaml:18-77
────────────────────────────────────────
  18 ┌       terminationGracePeriodSeconds: 1800
  19 │       containers:
  20 │       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 └         - containerPort: 7001
  ..   
────────────────────────────────────────



cassandra-statefulset4.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cassandra-statefulset4.yaml:17-61
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:3
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 7000
  22 │           name: intra-node
  23 │         - containerPort: 7001
  24 │           name: tls-intra-node
  25 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cassandra-statefulset4.yaml:17-61
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:3
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 7000
  22 │           name: intra-node
  23 │         - containerPort: 7001
  24 │           name: tls-intra-node
  25 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cassandra' of 'statefulset' 'cassandra' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cassandra-statefulset4.yaml:17-61
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:3
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 7000
  22 │           name: intra-node
  23 │         - containerPort: 7001
  24 │           name: tls-intra-node
  25 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cassandra-statefulset4.yaml:17-61
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:3
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 7000
  22 │           name: intra-node
  23 │         - containerPort: 7001
  24 │           name: tls-intra-node
  25 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cassandra-statefulset4.yaml:17-61
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:3
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 7000
  22 │           name: intra-node
  23 │         - containerPort: 7001
  24 │           name: tls-intra-node
  25 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cassandra-statefulset4.yaml:17-61
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:3
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 7000
  22 │           name: intra-node
  23 │         - containerPort: 7001
  24 │           name: tls-intra-node
  25 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cassandra-statefulset4.yaml:17-61
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:3
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 7000
  22 │           name: intra-node
  23 │         - containerPort: 7001
  24 │           name: tls-intra-node
  25 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cassandra-statefulset4.yaml:17-61
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:3
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 7000
  22 │           name: intra-node
  23 │         - containerPort: 7001
  24 │           name: tls-intra-node
  25 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cassandra-statefulset4.yaml:17-61
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:3
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 7000
  22 │           name: intra-node
  23 │         - containerPort: 7001
  24 │           name: tls-intra-node
  25 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cassandra-statefulset4.yaml:17-61
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:3
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 7000
  22 │           name: intra-node
  23 │         - containerPort: 7001
  24 │           name: tls-intra-node
  25 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cassandra-statefulset4.yaml:17-61
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:3
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 7000
  22 │           name: intra-node
  23 │         - containerPort: 7001
  24 │           name: tls-intra-node
  25 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cassandra-statefulset4.yaml:17-61
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:3
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 7000
  22 │           name: intra-node
  23 │         - containerPort: 7001
  24 │           name: tls-intra-node
  25 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-statefulset4.yaml:6-70
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: cassandra
   9 │   serviceName: cassandra
  10 │   replicas: 3
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 └         app: cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cassandra" of statefulset "cassandra" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cassandra-statefulset4.yaml:17-61
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:3
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 7000
  22 │           name: intra-node
  23 │         - containerPort: 7001
  24 │           name: tls-intra-node
  25 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cassandra-statefulset4.yaml:17-61
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:3
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 7000
  22 │           name: intra-node
  23 │         - containerPort: 7001
  24 │           name: tls-intra-node
  25 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset cassandra in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cassandra-statefulset4.yaml:4
────────────────────────────────────────
   4 [   name: cassandra
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cassandra in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-statefulset4.yaml:17-61
────────────────────────────────────────
  17 ┌       - name: cassandra
  18 │         image: cassandra:3
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 7000
  22 │           name: intra-node
  23 │         - containerPort: 7001
  24 │           name: tls-intra-node
  25 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset cassandra in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-statefulset4.yaml:16-61
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: cassandra
  18 │         image: cassandra:3
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 7000
  22 │           name: intra-node
  23 │         - containerPort: 7001
  24 └           name: tls-intra-node
  ..   
────────────────────────────────────────



cassandra-statefulset5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cassandra-statefulset5.yaml:18-60
────────────────────────────────────────
  18 ┌       - name: cassandra
  19 │         image: cassandra:3
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 7000
  23 │           name: intra-node
  24 │         - containerPort: 7001
  25 │           name: tls-intra-node
  26 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cassandra-statefulset5.yaml:18-60
────────────────────────────────────────
  18 ┌       - name: cassandra
  19 │         image: cassandra:3
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 7000
  23 │           name: intra-node
  24 │         - containerPort: 7001
  25 │           name: tls-intra-node
  26 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cassandra' of 'statefulset' 'cassandra' in 'dena' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cassandra-statefulset5.yaml:18-60
────────────────────────────────────────
  18 ┌       - name: cassandra
  19 │         image: cassandra:3
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 7000
  23 │           name: intra-node
  24 │         - containerPort: 7001
  25 │           name: tls-intra-node
  26 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cassandra-statefulset5.yaml:18-60
────────────────────────────────────────
  18 ┌       - name: cassandra
  19 │         image: cassandra:3
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 7000
  23 │           name: intra-node
  24 │         - containerPort: 7001
  25 │           name: tls-intra-node
  26 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cassandra-statefulset5.yaml:18-60
────────────────────────────────────────
  18 ┌       - name: cassandra
  19 │         image: cassandra:3
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 7000
  23 │           name: intra-node
  24 │         - containerPort: 7001
  25 │           name: tls-intra-node
  26 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cassandra-statefulset5.yaml:18-60
────────────────────────────────────────
  18 ┌       - name: cassandra
  19 │         image: cassandra:3
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 7000
  23 │           name: intra-node
  24 │         - containerPort: 7001
  25 │           name: tls-intra-node
  26 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cassandra-statefulset5.yaml:18-60
────────────────────────────────────────
  18 ┌       - name: cassandra
  19 │         image: cassandra:3
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 7000
  23 │           name: intra-node
  24 │         - containerPort: 7001
  25 │           name: tls-intra-node
  26 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cassandra-statefulset5.yaml:18-60
────────────────────────────────────────
  18 ┌       - name: cassandra
  19 │         image: cassandra:3
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 7000
  23 │           name: intra-node
  24 │         - containerPort: 7001
  25 │           name: tls-intra-node
  26 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cassandra-statefulset5.yaml:18-60
────────────────────────────────────────
  18 ┌       - name: cassandra
  19 │         image: cassandra:3
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 7000
  23 │           name: intra-node
  24 │         - containerPort: 7001
  25 │           name: tls-intra-node
  26 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cassandra-statefulset5.yaml:18-60
────────────────────────────────────────
  18 ┌       - name: cassandra
  19 │         image: cassandra:3
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 7000
  23 │           name: intra-node
  24 │         - containerPort: 7001
  25 │           name: tls-intra-node
  26 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cassandra-statefulset5.yaml:18-60
────────────────────────────────────────
  18 ┌       - name: cassandra
  19 │         image: cassandra:3
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 7000
  23 │           name: intra-node
  24 │         - containerPort: 7001
  25 │           name: tls-intra-node
  26 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cassandra-statefulset5.yaml:18-60
────────────────────────────────────────
  18 ┌       - name: cassandra
  19 │         image: cassandra:3
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 7000
  23 │           name: intra-node
  24 │         - containerPort: 7001
  25 │           name: tls-intra-node
  26 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-statefulset5.yaml:7-71
────────────────────────────────────────
   7 ┌   serviceName: cassandra
   8 │   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: cassandra
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 └         app: cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cassandra" of statefulset "cassandra" in "dena" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cassandra-statefulset5.yaml:18-60
────────────────────────────────────────
  18 ┌       - name: cassandra
  19 │         image: cassandra:3
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 7000
  23 │           name: intra-node
  24 │         - containerPort: 7001
  25 │           name: tls-intra-node
  26 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cassandra-statefulset5.yaml:18-60
────────────────────────────────────────
  18 ┌       - name: cassandra
  19 │         image: cassandra:3
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 7000
  23 │           name: intra-node
  24 │         - containerPort: 7001
  25 │           name: tls-intra-node
  26 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cassandra in dena namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-statefulset5.yaml:18-60
────────────────────────────────────────
  18 ┌       - name: cassandra
  19 │         image: cassandra:3
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 7000
  23 │           name: intra-node
  24 │         - containerPort: 7001
  25 │           name: tls-intra-node
  26 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset cassandra in dena namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-statefulset5.yaml:17-60
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: cassandra
  19 │         image: cassandra:3
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 7000
  23 │           name: intra-node
  24 │         - containerPort: 7001
  25 └           name: tls-intra-node
  ..   
────────────────────────────────────────



cassandra-statefulset6.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cassandra-statefulset6.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cassandra-statefulset6.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cassandra' of 'statefulset' 'cassandra' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cassandra-statefulset6.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cassandra-statefulset6.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cassandra-statefulset6.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cassandra-statefulset6.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cassandra-statefulset6.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 cassandra-statefulset6.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cassandra-statefulset6.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-statefulset6.yaml:8-90
────────────────────────────────────────
   8 ┌   serviceName: cassandra
   9 │   replicas: 3
  10 │   selector:
  11 │     matchLabels:
  12 │       app: cassandra
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cassandra" of statefulset "cassandra" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cassandra-statefulset6.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cassandra-statefulset6.yaml:20-79
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset cassandra in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cassandra-statefulset6.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cassandra
   5 │   labels:
   6 └     app: cassandra
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset cassandra in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra-statefulset6.yaml:18-79
────────────────────────────────────────
  18 ┌       terminationGracePeriodSeconds: 1800
  19 │       containers:
  20 │       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v14
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 └         - containerPort: 7001
  ..   
────────────────────────────────────────



cassandra-test.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra-test.yaml:7-13
────────────────────────────────────────
   7 ┌   type: NodePort
   8 │   ports:
   9 │     - port: 9042   # Port on which the service will be accessible
  10 │       targetPort: 9042  # Port on the pods that the service will forward to
  11 │       nodePort: 32000  # Choose a high port number, in this case, 32000
  12 │   selector:
  13 └     app: cassandra    # Match labels of your Cassandra pods
────────────────────────────────────────



cassandra.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 101, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cassandra' of Deployment 'cassandra-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cassandra.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 │             cpu: '1'
  24 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cassandra' of Deployment 'cassandra-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cassandra.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 │             cpu: '1'
  24 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cassandra' of 'deployment' 'cassandra-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cassandra.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 │             cpu: '1'
  24 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cassandra' of Deployment 'cassandra-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cassandra.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 │             cpu: '1'
  24 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cassandra' of Deployment 'cassandra-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cassandra.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 │             cpu: '1'
  24 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cassandra' of Deployment 'cassandra-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cassandra.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 │             cpu: '1'
  24 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cassandra' of Deployment 'cassandra-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cassandra.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 │             cpu: '1'
  24 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cassandra' of Deployment 'cassandra-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cassandra.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 │             cpu: '1'
  24 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cassandra.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 │             cpu: '1'
  24 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra.yaml:6-34
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: cassandra
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: cassandra
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cassandra" of deployment "cassandra-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cassandra.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 │             cpu: '1'
  24 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cassandra.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 │             cpu: '1'
  24 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cassandra-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cassandra.yaml:4
────────────────────────────────────────
   4 [   name: cassandra-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cassandra-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 │             cpu: '1'
  24 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cassandra-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra.yaml:15-34
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 └             cpu: '1'
  ..   
────────────────────────────────────────



cassandra1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 101, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cassandra' of Deployment 'cassandra-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cassandra1.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 │             cpu: '1'
  24 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cassandra' of Deployment 'cassandra-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cassandra1.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 │             cpu: '1'
  24 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cassandra' of 'deployment' 'cassandra-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cassandra1.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 │             cpu: '1'
  24 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cassandra' of Deployment 'cassandra-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cassandra1.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 │             cpu: '1'
  24 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cassandra' of Deployment 'cassandra-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cassandra1.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 │             cpu: '1'
  24 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cassandra' of Deployment 'cassandra-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cassandra1.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 │             cpu: '1'
  24 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cassandra' of Deployment 'cassandra-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cassandra1.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 │             cpu: '1'
  24 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cassandra' of Deployment 'cassandra-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cassandra1.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 │             cpu: '1'
  24 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cassandra1.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 │             cpu: '1'
  24 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra1.yaml:6-34
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: cassandra
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: cassandra
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cassandra" of deployment "cassandra-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cassandra1.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 │             cpu: '1'
  24 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cassandra1.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 │             cpu: '1'
  24 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cassandra-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cassandra1.yaml:4
────────────────────────────────────────
   4 [   name: cassandra-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cassandra-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra1.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 │             cpu: '1'
  24 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cassandra-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra1.yaml:15-34
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: cassandra
  17 │         image: cassandra:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 9042
  21 │         resources:
  22 │           limits:
  23 └             cpu: '1'
  ..   
────────────────────────────────────────



cassandra10.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cassandra10.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cassandra10.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cassandra' of 'statefulset' 'cassandra' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cassandra10.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cassandra10.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cassandra10.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cassandra10.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cassandra10.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 cassandra10.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cassandra10.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra10.yaml:8-87
────────────────────────────────────────
   8 ┌   serviceName: cassandra
   9 │   replicas: 3
  10 │   selector:
  11 │     matchLabels:
  12 │       app: cassandra
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cassandra" of statefulset "cassandra" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cassandra10.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cassandra10.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset cassandra in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cassandra10.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cassandra
   5 │   labels:
   6 └     app: cassandra
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset cassandra in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra10.yaml:18-77
────────────────────────────────────────
  18 ┌       terminationGracePeriodSeconds: 1800
  19 │       containers:
  20 │       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 └         - containerPort: 7001
  ..   
────────────────────────────────────────



cassandra10_2.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra10_2.yaml:8-12
────────────────────────────────────────
   8 ┌   clusterIP: None
   9 │   ports:
  10 │   - port: 9042
  11 │   selector:
  12 └     app: cassandra
────────────────────────────────────────



cassandra11.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra11.yaml:8-17
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       run: cassandra
  11 │   policyTypes:
  12 │     - Ingress
  13 │   ingress:
  14 │     - from:
  15 │       - namespaceSelector:
  16 │           matchLabels:
  17 └             ns: default
────────────────────────────────────────



cassandra1_1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra1_1.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   storageClassName: standard
   9 │   resources:
  10 │     requests:
  11 └       storage: 1Gi
────────────────────────────────────────



cassandra1_2.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra1_2.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: cassandra
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 9042
  11 └     targetPort: 9042
────────────────────────────────────────



cassandra6.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cassandra6.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cassandra6.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cassandra' of 'statefulset' 'cassandra' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cassandra6.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cassandra6.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cassandra6.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cassandra6.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cassandra6.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 cassandra6.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cassandra6.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra6.yaml:8-87
────────────────────────────────────────
   8 ┌   serviceName: cassandra
   9 │   replicas: 3
  10 │   selector:
  11 │     matchLabels:
  12 │       app: cassandra
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         app: cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cassandra" of statefulset "cassandra" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cassandra6.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cassandra6.yaml:20-77
────────────────────────────────────────
  20 ┌       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 │         - containerPort: 7001
  27 │           name: tls-intra-node
  28 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset cassandra in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cassandra6.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cassandra
   5 │   labels:
   6 └     app: cassandra
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset cassandra in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra6.yaml:18-77
────────────────────────────────────────
  18 ┌       terminationGracePeriodSeconds: 1800
  19 │       containers:
  20 │       - name: cassandra
  21 │         image: gcr.io/google-samples/cassandra:v13
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 7000
  25 │           name: intra-node
  26 └         - containerPort: 7001
  ..   
────────────────────────────────────────



cassandra6_2.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra6_2.yaml:8-12
────────────────────────────────────────
   8 ┌   clusterIP: None
   9 │   ports:
  10 │   - port: 9042
  11 │   selector:
  12 └     app: cassandra
────────────────────────────────────────



cassandra8.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra8.yaml:11-16
────────────────────────────────────────
  11 ┌   clusterIP: None
  12 │   ports:
  13 │   - port: 9042
  14 │     name: default
  15 │   selector:
  16 └     app: cassandra
────────────────────────────────────────



cassandra8_1.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cassandra-cont' of StatefulSet 'cassandra-pods' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cassandra8_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: cassandra-cont
  21 │         image: IMAGE_REGISTRY_PATH/cassandra:REVISION_ID
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - protocol: TCP
  25 │           containerPort: 9042
  26 │         livenessProbe:
  27 │           exec:
  28 └             command:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cassandra-cont' of StatefulSet 'cassandra-pods' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cassandra8_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: cassandra-cont
  21 │         image: IMAGE_REGISTRY_PATH/cassandra:REVISION_ID
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - protocol: TCP
  25 │           containerPort: 9042
  26 │         livenessProbe:
  27 │           exec:
  28 └             command:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cassandra-cont' of 'statefulset' 'cassandra-pods' in 'data' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cassandra8_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: cassandra-cont
  21 │         image: IMAGE_REGISTRY_PATH/cassandra:REVISION_ID
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - protocol: TCP
  25 │           containerPort: 9042
  26 │         livenessProbe:
  27 │           exec:
  28 └             command:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cassandra-cont' of StatefulSet 'cassandra-pods' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cassandra8_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: cassandra-cont
  21 │         image: IMAGE_REGISTRY_PATH/cassandra:REVISION_ID
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - protocol: TCP
  25 │           containerPort: 9042
  26 │         livenessProbe:
  27 │           exec:
  28 └             command:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cassandra-cont' of StatefulSet 'cassandra-pods' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cassandra8_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: cassandra-cont
  21 │         image: IMAGE_REGISTRY_PATH/cassandra:REVISION_ID
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - protocol: TCP
  25 │           containerPort: 9042
  26 │         livenessProbe:
  27 │           exec:
  28 └             command:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cassandra-cont' of StatefulSet 'cassandra-pods' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cassandra8_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: cassandra-cont
  21 │         image: IMAGE_REGISTRY_PATH/cassandra:REVISION_ID
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - protocol: TCP
  25 │           containerPort: 9042
  26 │         livenessProbe:
  27 │           exec:
  28 └             command:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cassandra-cont' of StatefulSet 'cassandra-pods' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cassandra8_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: cassandra-cont
  21 │         image: IMAGE_REGISTRY_PATH/cassandra:REVISION_ID
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - protocol: TCP
  25 │           containerPort: 9042
  26 │         livenessProbe:
  27 │           exec:
  28 └             command:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cassandra8_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: cassandra-cont
  21 │         image: IMAGE_REGISTRY_PATH/cassandra:REVISION_ID
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - protocol: TCP
  25 │           containerPort: 9042
  26 │         livenessProbe:
  27 │           exec:
  28 └             command:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra8_1.yaml:9-75
────────────────────────────────────────
   9 ┌   replicas: 3
  10 │   selector:
  11 │     matchLabels:
  12 │       app: cassandra
  13 │   serviceName: cassandra
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 └         app: cassandra
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cassandra-cont" of statefulset "cassandra-pods" in "data" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cassandra8_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: cassandra-cont
  21 │         image: IMAGE_REGISTRY_PATH/cassandra:REVISION_ID
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - protocol: TCP
  25 │           containerPort: 9042
  26 │         livenessProbe:
  27 │           exec:
  28 └             command:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cassandra8_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: cassandra-cont
  21 │         image: IMAGE_REGISTRY_PATH/cassandra:REVISION_ID
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - protocol: TCP
  25 │           containerPort: 9042
  26 │         livenessProbe:
  27 │           exec:
  28 └             command:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cassandra-pods in data namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra8_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: cassandra-cont
  21 │         image: IMAGE_REGISTRY_PATH/cassandra:REVISION_ID
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - protocol: TCP
  25 │           containerPort: 9042
  26 │         livenessProbe:
  27 │           exec:
  28 └             command:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset cassandra-pods in data namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra8_1.yaml:19-65
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: cassandra-cont
  21 │         image: IMAGE_REGISTRY_PATH/cassandra:REVISION_ID
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - protocol: TCP
  25 │           containerPort: 9042
  26 │         livenessProbe:
  27 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cassandra-cont in statefulset cassandra-pods (namespace: data) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cassandra8_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: cassandra-cont
  21 │         image: IMAGE_REGISTRY_PATH/cassandra:REVISION_ID
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - protocol: TCP
  25 │           containerPort: 9042
  26 │         livenessProbe:
  27 │           exec:
  28 └             command:
  ..   
────────────────────────────────────────



cassandra9.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cassandra' of Deployment 'cassandra' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cassandra9.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         ports:
  19 │         - containerPort: 9042
  20 │         volumeMounts:
  21 │         - name: cassandra-storage
  22 └           mountPath: /var/lib/cassandra
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cassandra' of Deployment 'cassandra' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cassandra9.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         ports:
  19 │         - containerPort: 9042
  20 │         volumeMounts:
  21 │         - name: cassandra-storage
  22 └           mountPath: /var/lib/cassandra
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cassandra' of 'deployment' 'cassandra' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cassandra9.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         ports:
  19 │         - containerPort: 9042
  20 │         volumeMounts:
  21 │         - name: cassandra-storage
  22 └           mountPath: /var/lib/cassandra
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cassandra' of Deployment 'cassandra' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cassandra9.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         ports:
  19 │         - containerPort: 9042
  20 │         volumeMounts:
  21 │         - name: cassandra-storage
  22 └           mountPath: /var/lib/cassandra
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cassandra' of Deployment 'cassandra' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cassandra9.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         ports:
  19 │         - containerPort: 9042
  20 │         volumeMounts:
  21 │         - name: cassandra-storage
  22 └           mountPath: /var/lib/cassandra
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cassandra' of Deployment 'cassandra' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cassandra9.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         ports:
  19 │         - containerPort: 9042
  20 │         volumeMounts:
  21 │         - name: cassandra-storage
  22 └           mountPath: /var/lib/cassandra
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cassandra' of Deployment 'cassandra' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cassandra9.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         ports:
  19 │         - containerPort: 9042
  20 │         volumeMounts:
  21 │         - name: cassandra-storage
  22 └           mountPath: /var/lib/cassandra
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cassandra' of Deployment 'cassandra' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cassandra9.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         ports:
  19 │         - containerPort: 9042
  20 │         volumeMounts:
  21 │         - name: cassandra-storage
  22 └           mountPath: /var/lib/cassandra
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cassandra' of Deployment 'cassandra' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cassandra9.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         ports:
  19 │         - containerPort: 9042
  20 │         volumeMounts:
  21 │         - name: cassandra-storage
  22 └           mountPath: /var/lib/cassandra
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cassandra' of Deployment 'cassandra' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cassandra9.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         ports:
  19 │         - containerPort: 9042
  20 │         volumeMounts:
  21 │         - name: cassandra-storage
  22 └           mountPath: /var/lib/cassandra
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cassandra' of Deployment 'cassandra' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cassandra9.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         ports:
  19 │         - containerPort: 9042
  20 │         volumeMounts:
  21 │         - name: cassandra-storage
  22 └           mountPath: /var/lib/cassandra
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cassandra' of Deployment 'cassandra' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cassandra9.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         ports:
  19 │         - containerPort: 9042
  20 │         volumeMounts:
  21 │         - name: cassandra-storage
  22 └           mountPath: /var/lib/cassandra
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cassandra9.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         ports:
  19 │         - containerPort: 9042
  20 │         volumeMounts:
  21 │         - name: cassandra-storage
  22 └           mountPath: /var/lib/cassandra
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra9.yaml:6-26
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: cassandra
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: cassandra
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cassandra" of deployment "cassandra" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cassandra9.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         ports:
  19 │         - containerPort: 9042
  20 │         volumeMounts:
  21 │         - name: cassandra-storage
  22 └           mountPath: /var/lib/cassandra
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cassandra9.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         ports:
  19 │         - containerPort: 9042
  20 │         volumeMounts:
  21 │         - name: cassandra-storage
  22 └           mountPath: /var/lib/cassandra
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cassandra in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cassandra9.yaml:4
────────────────────────────────────────
   4 [   name: cassandra
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cassandra in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra9.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: cassandra
  17 │         image: cassandra:latest
  18 │         ports:
  19 │         - containerPort: 9042
  20 │         volumeMounts:
  21 │         - name: cassandra-storage
  22 └           mountPath: /var/lib/cassandra
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cassandra in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cassandra9.yaml:15-26
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: cassandra
  17 │         image: cassandra:latest
  18 │         ports:
  19 │         - containerPort: 9042
  20 │         volumeMounts:
  21 │         - name: cassandra-storage
  22 │           mountPath: /var/lib/cassandra
  23 └       volumes:
  ..   
────────────────────────────────────────



cassandra9_1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra9_1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: cassandra
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 9042
  11 └     targetPort: 9042
────────────────────────────────────────



cassandra9_2.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra9_2.yaml:6-13
────────────────────────────────────────
   6 ┌   capacity:
   7 │     storage: 2Gi
   8 │   accessModes:
   9 │   - ReadWriteOnce
  10 │   persistentVolumeReclaimPolicy: Retain
  11 │   storageClassName: manual
  12 │   hostPath:
  13 └     path: /mnt/data/cassandra
────────────────────────────────────────



cassandra9_3.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra9_3.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 │       storage: 2Gi
  11 └   storageClassName: manual
────────────────────────────────────────



cassandra_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra_1.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   storageClassName: standard
   9 │   resources:
  10 │     requests:
  11 └       storage: 1Gi
────────────────────────────────────────



cassandra_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cassandra_2.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: cassandra
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 9042
  11 └     targetPort: 9042
────────────────────────────────────────



cast-db-deployment.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cast-db' of Deployment 'cast-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cast-db-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cast-db' of Deployment 'cast-db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cast-db-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cast-db' of 'deployment' 'cast-db' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cast-db-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cast-db' of Deployment 'cast-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cast-db-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cast-db' of Deployment 'cast-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cast-db-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cast-db' of Deployment 'cast-db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cast-db-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cast-db' of Deployment 'cast-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cast-db-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cast-db' of Deployment 'cast-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cast-db-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cast-db' of Deployment 'cast-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cast-db-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cast-db' of Deployment 'cast-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cast-db-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cast-db' of Deployment 'cast-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cast-db-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cast-db-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cast-db-deployment.yaml:12-46
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       io.kompose.service: cast-db
  16 │   strategy:
  17 │     type: Recreate
  18 │   template:
  19 │     metadata:
  20 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cast-db" of deployment "cast-db" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cast-db-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cast-db-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cast-db in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cast-db-deployment.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert -f docker-compose.yml -o Kube_Manifests/
   6 │     kompose.version: 1.31.2 (a92241f79)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: cast-db
  10 └   name: cast-db
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cast-db in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cast-db-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cast-db in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cast-db-deployment.yaml:28-46
────────────────────────────────────────
  28 ┌       containers:
  29 │         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 └           image: postgres:12.1-alpine
  ..   
────────────────────────────────────────



cast-db-deployment1.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cast-db' of Deployment 'cast-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cast-db-deployment1.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cast-db' of Deployment 'cast-db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cast-db-deployment1.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cast-db' of 'deployment' 'cast-db' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cast-db-deployment1.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cast-db' of Deployment 'cast-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cast-db-deployment1.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cast-db' of Deployment 'cast-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cast-db-deployment1.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cast-db' of Deployment 'cast-db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cast-db-deployment1.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cast-db' of Deployment 'cast-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cast-db-deployment1.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cast-db' of Deployment 'cast-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cast-db-deployment1.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cast-db' of Deployment 'cast-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cast-db-deployment1.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cast-db' of Deployment 'cast-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cast-db-deployment1.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cast-db' of Deployment 'cast-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cast-db-deployment1.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cast-db-deployment1.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cast-db-deployment1.yaml:12-46
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       io.kompose.service: cast-db
  16 │   strategy:
  17 │     type: Recreate
  18 │   template:
  19 │     metadata:
  20 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cast-db" of deployment "cast-db" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cast-db-deployment1.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cast-db-deployment1.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cast-db in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cast-db-deployment1.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert -f docker-compose.yml -o Kube_Manifests
   6 │     kompose.version: 1.31.2 (a92241f79)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: cast-db
  10 └   name: cast-db
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cast-db in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cast-db-deployment1.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 │           image: postgres:12.1-alpine
  37 └           name: cast-db
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cast-db in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cast-db-deployment1.yaml:28-46
────────────────────────────────────────
  28 ┌       containers:
  29 │         - env:
  30 │             - name: POSTGRES_DB
  31 │               value: cast_db_dev
  32 │             - name: POSTGRES_PASSWORD
  33 │               value: cast_db_password
  34 │             - name: POSTGRES_USER
  35 │               value: cast_db_username
  36 └           image: postgres:12.1-alpine
  ..   
────────────────────────────────────────



cast-service-claim0-persistentvolumeclaim.yaml (kubernetes)
===========================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cast-service-claim0-persistentvolumeclaim.yaml:9-13
────────────────────────────────────────
   9 ┌   accessModes:
  10 │     - ReadWriteOnce
  11 │   resources:
  12 │     requests:
  13 └       storage: 100Mi
────────────────────────────────────────



cast-service-claim0-persistentvolumeclaim1.yaml (kubernetes)
============================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cast-service-claim0-persistentvolumeclaim1.yaml:9-13
────────────────────────────────────────
   9 ┌   accessModes:
  10 │     - ReadWriteOnce
  11 │   resources:
  12 │     requests:
  13 └       storage: 100Mi
────────────────────────────────────────



cast-service-deployment.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cast-service' of Deployment 'cast-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cast-service-deployment.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8000"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cast-service' of Deployment 'cast-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cast-service-deployment.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8000"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cast-service' of 'deployment' 'cast-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cast-service-deployment.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8000"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cast-service' of Deployment 'cast-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cast-service-deployment.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8000"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cast-service' of Deployment 'cast-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cast-service-deployment.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8000"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cast-service' of Deployment 'cast-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cast-service-deployment.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8000"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cast-service' of Deployment 'cast-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cast-service-deployment.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8000"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cast-service' of Deployment 'cast-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cast-service-deployment.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8000"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cast-service' of Deployment 'cast-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cast-service-deployment.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8000"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cast-service' of Deployment 'cast-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cast-service-deployment.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8000"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cast-service' of Deployment 'cast-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cast-service-deployment.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8000"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cast-service' of Deployment 'cast-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cast-service-deployment.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8000"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'cast-service' of Deployment 'cast-service' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 cast-service-deployment.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8000"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cast-service-deployment.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8000"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cast-service-deployment.yaml:12-54
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       io.kompose.service: cast-service
  16 │   strategy:
  17 │     type: Recreate
  18 │   template:
  19 │     metadata:
  20 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cast-service" of deployment "cast-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cast-service-deployment.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8000"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cast-service-deployment.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8000"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cast-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cast-service-deployment.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert -f docker-compose.yml -o Kube_Manifests/
   6 │     kompose.version: 1.31.2 (a92241f79)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: cast-service
  10 └   name: cast-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cast-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cast-service-deployment.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8000"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cast-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cast-service-deployment.yaml:28-54
────────────────────────────────────────
  28 ┌       containers:
  29 │         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 └             - "8000"
  ..   
────────────────────────────────────────



cast-service-deployment1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cast-service' of Deployment 'cast-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cast-service-deployment1.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8002"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cast-service' of Deployment 'cast-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cast-service-deployment1.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8002"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cast-service' of 'deployment' 'cast-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cast-service-deployment1.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8002"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cast-service' of Deployment 'cast-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cast-service-deployment1.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8002"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cast-service' of Deployment 'cast-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cast-service-deployment1.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8002"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cast-service' of Deployment 'cast-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cast-service-deployment1.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8002"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cast-service' of Deployment 'cast-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cast-service-deployment1.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8002"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cast-service' of Deployment 'cast-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cast-service-deployment1.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8002"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cast-service' of Deployment 'cast-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cast-service-deployment1.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8002"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cast-service' of Deployment 'cast-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cast-service-deployment1.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8002"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cast-service' of Deployment 'cast-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cast-service-deployment1.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8002"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cast-service' of Deployment 'cast-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cast-service-deployment1.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8002"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'cast-service' of Deployment 'cast-service' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 cast-service-deployment1.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8002"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cast-service-deployment1.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8002"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cast-service-deployment1.yaml:12-54
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       io.kompose.service: cast-service
  16 │   strategy:
  17 │     type: Recreate
  18 │   template:
  19 │     metadata:
  20 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cast-service" of deployment "cast-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cast-service-deployment1.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8002"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cast-service-deployment1.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8002"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cast-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cast-service-deployment1.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert -f docker-compose.yml -o Kube_Manifests
   6 │     kompose.version: 1.31.2 (a92241f79)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: cast-service
  10 └   name: cast-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cast-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cast-service-deployment1.yaml:29-49
────────────────────────────────────────
  29 ┌         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 │             - "8002"
  37 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cast-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cast-service-deployment1.yaml:28-54
────────────────────────────────────────
  28 ┌       containers:
  29 │         - args:
  30 │             - uvicorn
  31 │             - app.main:app
  32 │             - --reload
  33 │             - --host
  34 │             - 0.0.0.0
  35 │             - --port
  36 └             - "8002"
  ..   
────────────────────────────────────────



cast_service-service.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cast_service-service.yaml:12-17
────────────────────────────────────────
  12 ┌   ports:
  13 │     - name: "8002"
  14 │       port: 8002
  15 │       targetPort: 8000
  16 │   selector:
  17 └     io.kompose.service: cast-service
────────────────────────────────────────



cast_service-service1.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cast_service-service1.yaml:12-17
────────────────────────────────────────
  12 ┌   ports:
  13 │     - name: "8002"
  14 │       port: 8002
  15 │       targetPort: 8002
  16 │   selector:
  17 └     io.kompose.service: cast-service
────────────────────────────────────────



catalog-backend.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalog-backend' of Deployment 'catalog-backend-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 catalog-backend.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: catalog-backend
  19 │         image: chaphe/backend-catalog-image:1.0
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: MYSQL_DB_HOST
  24 │           value: mysql-catalog-service
  25 │         - name: MYSQL_DB_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'catalog-backend' of Deployment 'catalog-backend-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 catalog-backend.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: catalog-backend
  19 │         image: chaphe/backend-catalog-image:1.0
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: MYSQL_DB_HOST
  24 │           value: mysql-catalog-service
  25 │         - name: MYSQL_DB_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'catalog-backend' of 'deployment' 'catalog-backend-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 catalog-backend.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: catalog-backend
  19 │         image: chaphe/backend-catalog-image:1.0
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: MYSQL_DB_HOST
  24 │           value: mysql-catalog-service
  25 │         - name: MYSQL_DB_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'catalog-backend' of Deployment 'catalog-backend-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 catalog-backend.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: catalog-backend
  19 │         image: chaphe/backend-catalog-image:1.0
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: MYSQL_DB_HOST
  24 │           value: mysql-catalog-service
  25 │         - name: MYSQL_DB_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'catalog-backend' of Deployment 'catalog-backend-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 catalog-backend.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: catalog-backend
  19 │         image: chaphe/backend-catalog-image:1.0
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: MYSQL_DB_HOST
  24 │           value: mysql-catalog-service
  25 │         - name: MYSQL_DB_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'catalog-backend' of Deployment 'catalog-backend-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 catalog-backend.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: catalog-backend
  19 │         image: chaphe/backend-catalog-image:1.0
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: MYSQL_DB_HOST
  24 │           value: mysql-catalog-service
  25 │         - name: MYSQL_DB_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'catalog-backend' of Deployment 'catalog-backend-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 catalog-backend.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: catalog-backend
  19 │         image: chaphe/backend-catalog-image:1.0
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: MYSQL_DB_HOST
  24 │           value: mysql-catalog-service
  25 │         - name: MYSQL_DB_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'catalog-backend' of Deployment 'catalog-backend-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 catalog-backend.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: catalog-backend
  19 │         image: chaphe/backend-catalog-image:1.0
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: MYSQL_DB_HOST
  24 │           value: mysql-catalog-service
  25 │         - name: MYSQL_DB_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'catalog-backend' of Deployment 'catalog-backend-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 catalog-backend.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: catalog-backend
  19 │         image: chaphe/backend-catalog-image:1.0
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: MYSQL_DB_HOST
  24 │           value: mysql-catalog-service
  25 │         - name: MYSQL_DB_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'catalog-backend' of Deployment 'catalog-backend-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 catalog-backend.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: catalog-backend
  19 │         image: chaphe/backend-catalog-image:1.0
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: MYSQL_DB_HOST
  24 │           value: mysql-catalog-service
  25 │         - name: MYSQL_DB_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalog-backend' of Deployment 'catalog-backend-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 catalog-backend.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: catalog-backend
  19 │         image: chaphe/backend-catalog-image:1.0
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: MYSQL_DB_HOST
  24 │           value: mysql-catalog-service
  25 │         - name: MYSQL_DB_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 catalog-backend.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: catalog-backend
  19 │         image: chaphe/backend-catalog-image:1.0
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: MYSQL_DB_HOST
  24 │           value: mysql-catalog-service
  25 │         - name: MYSQL_DB_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog-backend.yaml:8-30
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: catalog-backend
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: catalog-backend
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalog-backend" of deployment "catalog-backend-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 catalog-backend.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: catalog-backend
  19 │         image: chaphe/backend-catalog-image:1.0
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: MYSQL_DB_HOST
  24 │           value: mysql-catalog-service
  25 │         - name: MYSQL_DB_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 catalog-backend.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: catalog-backend
  19 │         image: chaphe/backend-catalog-image:1.0
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: MYSQL_DB_HOST
  24 │           value: mysql-catalog-service
  25 │         - name: MYSQL_DB_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment catalog-backend-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 catalog-backend.yaml:4-6
────────────────────────────────────────
   4 ┌   name: catalog-backend-deployment
   5 │   labels:
   6 └     app: catalog-backend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container catalog-backend-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog-backend.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: catalog-backend
  19 │         image: chaphe/backend-catalog-image:1.0
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: MYSQL_DB_HOST
  24 │           value: mysql-catalog-service
  25 │         - name: MYSQL_DB_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalog-backend-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog-backend.yaml:17-30
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: catalog-backend
  19 │         image: chaphe/backend-catalog-image:1.0
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: MYSQL_DB_HOST
  24 │           value: mysql-catalog-service
  25 └         - name: MYSQL_DB_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container catalog-backend in deployment catalog-backend-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 catalog-backend.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: catalog-backend
  19 │         image: chaphe/backend-catalog-image:1.0
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: MYSQL_DB_HOST
  24 │           value: mysql-catalog-service
  25 │         - name: MYSQL_DB_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────



catalog-backend_1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog-backend_1.yaml:6-13
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     app: catalog-backend
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 8081
  12 │     targetPort: 8081
  13 └     nodePort: 30300
────────────────────────────────────────



catalog-ingress.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog-ingress.yaml:10-27
────────────────────────────────────────
  10 ┌   rules:
  11 │     - host: arch.homework
  12 │       http:
  13 │         paths:
  14 │           - path: /api/v1/search/product_search/
  15 │             pathType: Prefix
  16 │             backend:
  17 │               service:
  18 └                 name: catalog
  ..   
────────────────────────────────────────



catalog-ingress1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog-ingress1.yaml:10-27
────────────────────────────────────────
  10 ┌   rules:
  11 │     - host: arch.homework
  12 │       http:
  13 │         paths:
  14 │           - path: /api/v1/search/product_search/
  15 │             pathType: Prefix
  16 │             backend:
  17 │               service:
  18 └                 name: catalog
  ..   
────────────────────────────────────────



catalog-ingress2.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog-ingress2.yaml:10-27
────────────────────────────────────────
  10 ┌   rules:
  11 │     - host: arch.homework
  12 │       http:
  13 │         paths:
  14 │           - path: /api/v1/search/product_search/
  15 │             pathType: Prefix
  16 │             backend:
  17 │               service:
  18 └                 name: catalog
  ..   
────────────────────────────────────────



catalog-service-deployment.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 100, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalog-service' of Deployment 'catalog-api-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 catalog-service-deployment.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: catalog-service
  19 │         image: carlosengel013/catalog-service:latest
  20 │         volumeMounts:
  21 │         - name: catalog-service-storage
  22 │           mountPath: /var/lib/catalog-service
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: catalog-service-config
  26 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'catalog-service' of Deployment 'catalog-api-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 catalog-service-deployment.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: catalog-service
  19 │         image: carlosengel013/catalog-service:latest
  20 │         volumeMounts:
  21 │         - name: catalog-service-storage
  22 │           mountPath: /var/lib/catalog-service
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: catalog-service-config
  26 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'catalog-service' of 'deployment' 'catalog-api-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 catalog-service-deployment.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: catalog-service
  19 │         image: carlosengel013/catalog-service:latest
  20 │         volumeMounts:
  21 │         - name: catalog-service-storage
  22 │           mountPath: /var/lib/catalog-service
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: catalog-service-config
  26 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'catalog-service' of Deployment 'catalog-api-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 catalog-service-deployment.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: catalog-service
  19 │         image: carlosengel013/catalog-service:latest
  20 │         volumeMounts:
  21 │         - name: catalog-service-storage
  22 │           mountPath: /var/lib/catalog-service
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: catalog-service-config
  26 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'catalog-service' of Deployment 'catalog-api-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 catalog-service-deployment.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: catalog-service
  19 │         image: carlosengel013/catalog-service:latest
  20 │         volumeMounts:
  21 │         - name: catalog-service-storage
  22 │           mountPath: /var/lib/catalog-service
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: catalog-service-config
  26 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'catalog-service' of Deployment 'catalog-api-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 catalog-service-deployment.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: catalog-service
  19 │         image: carlosengel013/catalog-service:latest
  20 │         volumeMounts:
  21 │         - name: catalog-service-storage
  22 │           mountPath: /var/lib/catalog-service
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: catalog-service-config
  26 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'catalog-service' of Deployment 'catalog-api-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 catalog-service-deployment.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: catalog-service
  19 │         image: carlosengel013/catalog-service:latest
  20 │         volumeMounts:
  21 │         - name: catalog-service-storage
  22 │           mountPath: /var/lib/catalog-service
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: catalog-service-config
  26 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalog-service' of Deployment 'catalog-api-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 catalog-service-deployment.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: catalog-service
  19 │         image: carlosengel013/catalog-service:latest
  20 │         volumeMounts:
  21 │         - name: catalog-service-storage
  22 │           mountPath: /var/lib/catalog-service
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: catalog-service-config
  26 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 catalog-service-deployment.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: catalog-service
  19 │         image: carlosengel013/catalog-service:latest
  20 │         volumeMounts:
  21 │         - name: catalog-service-storage
  22 │           mountPath: /var/lib/catalog-service
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: catalog-service-config
  26 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog-service-deployment.yaml:8-48
────────────────────────────────────────
   8 ┌   replicas: 3
   9 │   selector:
  10 │     matchLabels:
  11 │       app: catalog-api
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: catalog-api
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalog-service" of deployment "catalog-api-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 catalog-service-deployment.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: catalog-service
  19 │         image: carlosengel013/catalog-service:latest
  20 │         volumeMounts:
  21 │         - name: catalog-service-storage
  22 │           mountPath: /var/lib/catalog-service
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: catalog-service-config
  26 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 catalog-service-deployment.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: catalog-service
  19 │         image: carlosengel013/catalog-service:latest
  20 │         volumeMounts:
  21 │         - name: catalog-service-storage
  22 │           mountPath: /var/lib/catalog-service
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: catalog-service-config
  26 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment catalog-api-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 catalog-service-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: catalog-api-deployment
   5 │   labels:
   6 └     app: catalog-api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container catalog-api-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog-service-deployment.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: catalog-service
  19 │         image: carlosengel013/catalog-service:latest
  20 │         volumeMounts:
  21 │         - name: catalog-service-storage
  22 │           mountPath: /var/lib/catalog-service
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: catalog-service-config
  26 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalog-api-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog-service-deployment.yaml:17-48
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: catalog-service
  19 │         image: carlosengel013/catalog-service:latest
  20 │         volumeMounts:
  21 │         - name: catalog-service-storage
  22 │           mountPath: /var/lib/catalog-service
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: catalog-service-config
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container catalog-service in deployment catalog-api-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 catalog-service-deployment.yaml:18-45
────────────────────────────────────────
  18 ┌       - name: catalog-service
  19 │         image: carlosengel013/catalog-service:latest
  20 │         volumeMounts:
  21 │         - name: catalog-service-storage
  22 │           mountPath: /var/lib/catalog-service
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: catalog-service-config
  26 └         ports:
  ..   
────────────────────────────────────────



catalog-service-deployment_1.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog-service-deployment_1.yaml:8-13
────────────────────────────────────────
   8 ┌   selector:
   9 │     app: catalog-service
  10 │   ports:
  11 │   - protocol: TCP
  12 │     port: 8000
  13 └     targetPort: 8000
────────────────────────────────────────



catalog.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog.yaml:8-15
────────────────────────────────────────
   8 ┌   selector:
   9 │     app: catalog
  10 │   ports:
  11 │   - protocol: TCP
  12 │     port: 8080
  13 │     targetPort: 80
  14 │     name: http
  15 └   type: ClusterIP
────────────────────────────────────────



catalog1.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog1.yaml:8-15
────────────────────────────────────────
   8 ┌   selector:
   9 │     app: catalog
  10 │   ports:
  11 │   - protocol: TCP
  12 │     port: 8080
  13 │     targetPort: 80
  14 │     name: http
  15 └   type: ClusterIP
────────────────────────────────────────



catalog11.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalog' of Deployment 'catalog-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 catalog11.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: catalog
  16 │         image: catalog:v1
  17 │         resources:
  18 │           limits:
  19 │             memory: 128Mi
  20 │             cpu: 500m
  21 │         ports:
  22 │         - containerPort: 80
  23 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'catalog' of Deployment 'catalog-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 catalog11.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: catalog
  16 │         image: catalog:v1
  17 │         resources:
  18 │           limits:
  19 │             memory: 128Mi
  20 │             cpu: 500m
  21 │         ports:
  22 │         - containerPort: 80
  23 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'catalog' of 'deployment' 'catalog-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 catalog11.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: catalog
  16 │         image: catalog:v1
  17 │         resources:
  18 │           limits:
  19 │             memory: 128Mi
  20 │             cpu: 500m
  21 │         ports:
  22 │         - containerPort: 80
  23 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'catalog' of Deployment 'catalog-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 catalog11.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: catalog
  16 │         image: catalog:v1
  17 │         resources:
  18 │           limits:
  19 │             memory: 128Mi
  20 │             cpu: 500m
  21 │         ports:
  22 │         - containerPort: 80
  23 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'catalog' of Deployment 'catalog-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 catalog11.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: catalog
  16 │         image: catalog:v1
  17 │         resources:
  18 │           limits:
  19 │             memory: 128Mi
  20 │             cpu: 500m
  21 │         ports:
  22 │         - containerPort: 80
  23 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'catalog' of Deployment 'catalog-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 catalog11.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: catalog
  16 │         image: catalog:v1
  17 │         resources:
  18 │           limits:
  19 │             memory: 128Mi
  20 │             cpu: 500m
  21 │         ports:
  22 │         - containerPort: 80
  23 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'catalog' of Deployment 'catalog-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 catalog11.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: catalog
  16 │         image: catalog:v1
  17 │         resources:
  18 │           limits:
  19 │             memory: 128Mi
  20 │             cpu: 500m
  21 │         ports:
  22 │         - containerPort: 80
  23 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'catalog' of Deployment 'catalog-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 catalog11.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: catalog
  16 │         image: catalog:v1
  17 │         resources:
  18 │           limits:
  19 │             memory: 128Mi
  20 │             cpu: 500m
  21 │         ports:
  22 │         - containerPort: 80
  23 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalog' of Deployment 'catalog-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 catalog11.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: catalog
  16 │         image: catalog:v1
  17 │         resources:
  18 │           limits:
  19 │             memory: 128Mi
  20 │             cpu: 500m
  21 │         ports:
  22 │         - containerPort: 80
  23 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 catalog11.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: catalog
  16 │         image: catalog:v1
  17 │         resources:
  18 │           limits:
  19 │             memory: 128Mi
  20 │             cpu: 500m
  21 │         ports:
  22 │         - containerPort: 80
  23 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog11.yaml:6-38
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: catalog
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: catalog
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalog" of deployment "catalog-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 catalog11.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: catalog
  16 │         image: catalog:v1
  17 │         resources:
  18 │           limits:
  19 │             memory: 128Mi
  20 │             cpu: 500m
  21 │         ports:
  22 │         - containerPort: 80
  23 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 catalog11.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: catalog
  16 │         image: catalog:v1
  17 │         resources:
  18 │           limits:
  19 │             memory: 128Mi
  20 │             cpu: 500m
  21 │         ports:
  22 │         - containerPort: 80
  23 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment catalog-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 catalog11.yaml:4
────────────────────────────────────────
   4 [   name: catalog-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment catalog-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container catalog-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog11.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: catalog
  16 │         image: catalog:v1
  17 │         resources:
  18 │           limits:
  19 │             memory: 128Mi
  20 │             cpu: 500m
  21 │         ports:
  22 │         - containerPort: 80
  23 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalog-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog11.yaml:14-38
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: catalog
  16 │         image: catalog:v1
  17 │         resources:
  18 │           limits:
  19 │             memory: 128Mi
  20 │             cpu: 500m
  21 │         ports:
  22 └         - containerPort: 80
  ..   
────────────────────────────────────────



catalog11_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog11_1.yaml:6-11
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     app: catalog
   9 │   ports:
  10 │   - port: 80
  11 └     targetPort: <Target Port>
────────────────────────────────────────



catalog1_1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 100, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalog' of Deployment 'catalog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 catalog1_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'catalog' of Deployment 'catalog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 catalog1_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'catalog' of 'deployment' 'catalog' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 catalog1_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 catalog1_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'catalog' of Deployment 'catalog' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 catalog1_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'catalog' of Deployment 'catalog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 catalog1_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 catalog1_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 catalog1_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 catalog1_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog1_1.yaml:8-37
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: catalog
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: catalog
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalog" of deployment "catalog" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 catalog1_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 catalog1_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment catalog in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 catalog1_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: catalog
   5 │   labels:
   6 └     app: catalog
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment catalog in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container catalog in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog1_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalog in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog1_1.yaml:17-37
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 └             memory: 1Gi
  ..   
────────────────────────────────────────



catalog2.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog2.yaml:9-16
────────────────────────────────────────
   9 ┌   selector:
  10 │     app: catalog
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8080
  14 │     targetPort: 80
  15 │     name: http
  16 └   type: ClusterIP
────────────────────────────────────────



catalog24.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalog-backend' of Deployment 'catalog-backend-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 catalog24.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: catalog-backend
  20 │         image: chaphe/backend-catalog-image:1.0
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_DB_HOST
  25 │           value: mysql-catalog-service
  26 │         - name: MYSQL_DB_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'catalog-backend' of Deployment 'catalog-backend-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 catalog24.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: catalog-backend
  20 │         image: chaphe/backend-catalog-image:1.0
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_DB_HOST
  25 │           value: mysql-catalog-service
  26 │         - name: MYSQL_DB_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'catalog-backend' of 'deployment' 'catalog-backend-deployment' in 'library-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 catalog24.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: catalog-backend
  20 │         image: chaphe/backend-catalog-image:1.0
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_DB_HOST
  25 │           value: mysql-catalog-service
  26 │         - name: MYSQL_DB_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'catalog-backend' of Deployment 'catalog-backend-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 catalog24.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: catalog-backend
  20 │         image: chaphe/backend-catalog-image:1.0
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_DB_HOST
  25 │           value: mysql-catalog-service
  26 │         - name: MYSQL_DB_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'catalog-backend' of Deployment 'catalog-backend-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 catalog24.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: catalog-backend
  20 │         image: chaphe/backend-catalog-image:1.0
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_DB_HOST
  25 │           value: mysql-catalog-service
  26 │         - name: MYSQL_DB_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'catalog-backend' of Deployment 'catalog-backend-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 catalog24.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: catalog-backend
  20 │         image: chaphe/backend-catalog-image:1.0
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_DB_HOST
  25 │           value: mysql-catalog-service
  26 │         - name: MYSQL_DB_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'catalog-backend' of Deployment 'catalog-backend-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 catalog24.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: catalog-backend
  20 │         image: chaphe/backend-catalog-image:1.0
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_DB_HOST
  25 │           value: mysql-catalog-service
  26 │         - name: MYSQL_DB_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'catalog-backend' of Deployment 'catalog-backend-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 catalog24.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: catalog-backend
  20 │         image: chaphe/backend-catalog-image:1.0
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_DB_HOST
  25 │           value: mysql-catalog-service
  26 │         - name: MYSQL_DB_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'catalog-backend' of Deployment 'catalog-backend-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 catalog24.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: catalog-backend
  20 │         image: chaphe/backend-catalog-image:1.0
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_DB_HOST
  25 │           value: mysql-catalog-service
  26 │         - name: MYSQL_DB_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'catalog-backend' of Deployment 'catalog-backend-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 catalog24.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: catalog-backend
  20 │         image: chaphe/backend-catalog-image:1.0
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_DB_HOST
  25 │           value: mysql-catalog-service
  26 │         - name: MYSQL_DB_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalog-backend' of Deployment 'catalog-backend-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 catalog24.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: catalog-backend
  20 │         image: chaphe/backend-catalog-image:1.0
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_DB_HOST
  25 │           value: mysql-catalog-service
  26 │         - name: MYSQL_DB_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 catalog24.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: catalog-backend
  20 │         image: chaphe/backend-catalog-image:1.0
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_DB_HOST
  25 │           value: mysql-catalog-service
  26 │         - name: MYSQL_DB_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog24.yaml:9-31
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: catalog-backend
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: catalog-backend
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalog-backend" of deployment "catalog-backend-deployment" in "library-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 catalog24.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: catalog-backend
  20 │         image: chaphe/backend-catalog-image:1.0
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_DB_HOST
  25 │           value: mysql-catalog-service
  26 │         - name: MYSQL_DB_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 catalog24.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: catalog-backend
  20 │         image: chaphe/backend-catalog-image:1.0
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_DB_HOST
  25 │           value: mysql-catalog-service
  26 │         - name: MYSQL_DB_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container catalog-backend-deployment in library-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog24.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: catalog-backend
  20 │         image: chaphe/backend-catalog-image:1.0
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_DB_HOST
  25 │           value: mysql-catalog-service
  26 │         - name: MYSQL_DB_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalog-backend-deployment in library-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog24.yaml:18-31
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: catalog-backend
  20 │         image: chaphe/backend-catalog-image:1.0
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_DB_HOST
  25 │           value: mysql-catalog-service
  26 └         - name: MYSQL_DB_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container catalog-backend in deployment catalog-backend-deployment (namespace: library-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 catalog24.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: catalog-backend
  20 │         image: chaphe/backend-catalog-image:1.0
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: MYSQL_DB_HOST
  25 │           value: mysql-catalog-service
  26 │         - name: MYSQL_DB_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────



catalog24_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog24_1.yaml:7-14
────────────────────────────────────────
   7 ┌   type: NodePort
   8 │   selector:
   9 │     app: catalog-backend
  10 │   ports:
  11 │   - protocol: TCP
  12 │     port: 8081
  13 │     targetPort: 8081
  14 └     nodePort: 30300
────────────────────────────────────────



catalog2_1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 101, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalog' of Deployment 'catalog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 catalog2_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'catalog' of Deployment 'catalog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 catalog2_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'catalog' of 'deployment' 'catalog' in 'globoticket' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 catalog2_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 catalog2_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'catalog' of Deployment 'catalog' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 catalog2_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'catalog' of Deployment 'catalog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 catalog2_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 catalog2_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 catalog2_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 catalog2_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog2_1.yaml:9-40
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: catalog
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: catalog
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalog" of deployment "catalog" in "globoticket" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 catalog2_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 catalog2_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment catalog in globoticket namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container catalog in globoticket namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog2_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalog in globoticket namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog2_1.yaml:18-40
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 └             memory: 1Gi
  ..   
────────────────────────────────────────



catalog3.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog3.yaml:9-16
────────────────────────────────────────
   9 ┌   selector:
  10 │     app: catalog
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8080
  14 │     targetPort: 80
  15 │     name: http
  16 └   type: ClusterIP
────────────────────────────────────────



catalog3_1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 101, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalog' of Deployment 'catalog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 catalog3_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'catalog' of Deployment 'catalog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 catalog3_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'catalog' of 'deployment' 'catalog' in 'globoticket' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 catalog3_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 catalog3_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'catalog' of Deployment 'catalog' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 catalog3_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'catalog' of Deployment 'catalog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 catalog3_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 catalog3_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 catalog3_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 catalog3_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog3_1.yaml:9-40
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: catalog
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: catalog
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalog" of deployment "catalog" in "globoticket" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 catalog3_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 catalog3_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment catalog in globoticket namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container catalog in globoticket namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog3_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalog in globoticket namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog3_1.yaml:18-40
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 └             memory: 1Gi
  ..   
────────────────────────────────────────



catalog4.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog4.yaml:9-16
────────────────────────────────────────
   9 ┌   selector:
  10 │     app: catalog
  11 │   ports:
  12 │   - name: api2
  13 │     protocol: TCP
  14 │     port: 8080
  15 │     targetPort: 80
  16 └   type: ClusterIP
────────────────────────────────────────



catalog4_1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 100, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalog' of Deployment 'catalog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 catalog4_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'catalog' of Deployment 'catalog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 catalog4_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'catalog' of 'deployment' 'catalog' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 catalog4_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 catalog4_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'catalog' of Deployment 'catalog' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 catalog4_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'catalog' of Deployment 'catalog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 catalog4_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 catalog4_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 catalog4_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 catalog4_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog4_1.yaml:8-37
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: catalog
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: catalog
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalog" of deployment "catalog" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 catalog4_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 catalog4_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment catalog in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 catalog4_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: catalog
   5 │   labels:
   6 └     app: catalog
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment catalog in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container catalog in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog4_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalog in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog4_1.yaml:17-37
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 └             memory: 1Gi
  ..   
────────────────────────────────────────



catalog5.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog5.yaml:8-15
────────────────────────────────────────
   8 ┌   selector:
   9 │     app: catalog
  10 │   ports:
  11 │   - protocol: TCP
  12 │     port: 8080
  13 │     targetPort: 80
  14 │     name: http
  15 └   type: ClusterIP
────────────────────────────────────────



catalog5_1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalog' of Deployment 'catalog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 catalog5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'catalog' of Deployment 'catalog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 catalog5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'catalog' of 'deployment' 'catalog' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 catalog5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'catalog' of Deployment 'catalog' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 catalog5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 catalog5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'catalog' of Deployment 'catalog' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 catalog5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'catalog' of Deployment 'catalog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 catalog5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'catalog' of Deployment 'catalog' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 catalog5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'catalog' of Deployment 'catalog' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 catalog5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'catalog' of Deployment 'catalog' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 catalog5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 catalog5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 catalog5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 catalog5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog5_1.yaml:8-27
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: catalog
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: catalog
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalog" of deployment "catalog" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 catalog5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 catalog5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment catalog in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 catalog5_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: catalog
   5 │   labels:
   6 └     app: catalog
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment catalog in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container catalog in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalog in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog5_1.yaml:17-27
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 └         ports:
  ..   
────────────────────────────────────────



catalog6.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog6.yaml:8-15
────────────────────────────────────────
   8 ┌   selector:
   9 │     app: catalog
  10 │   ports:
  11 │   - protocol: TCP
  12 │     port: 8080
  13 │     targetPort: 80
  14 │     name: http
  15 └   type: ClusterIP
────────────────────────────────────────



catalog6_1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 100, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalog' of Deployment 'catalog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 catalog6_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'catalog' of Deployment 'catalog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 catalog6_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'catalog' of 'deployment' 'catalog' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 catalog6_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 catalog6_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'catalog' of Deployment 'catalog' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 catalog6_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'catalog' of Deployment 'catalog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 catalog6_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 catalog6_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 catalog6_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 catalog6_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog6_1.yaml:8-37
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: catalog
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: catalog
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalog" of deployment "catalog" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 catalog6_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 catalog6_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment catalog in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 catalog6_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: catalog
   5 │   labels:
   6 └     app: catalog
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment catalog in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container catalog in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog6_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalog in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog6_1.yaml:17-37
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 500Mi
  23 │             cpu: 250m
  24 │           limits:
  25 └             memory: 1Gi
  ..   
────────────────────────────────────────



catalog7.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog7.yaml:9-16
────────────────────────────────────────
   9 ┌   selector:
  10 │     app: catalog
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8080
  14 │     targetPort: 80
  15 │     name: http
  16 └   type: ClusterIP
────────────────────────────────────────



catalog7_1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 101, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalog' of Deployment 'catalog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 catalog7_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'catalog' of Deployment 'catalog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 catalog7_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'catalog' of 'deployment' 'catalog' in 'globoticket' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 catalog7_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 catalog7_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'catalog' of Deployment 'catalog' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 catalog7_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'catalog' of Deployment 'catalog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 catalog7_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 catalog7_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 catalog7_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 catalog7_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog7_1.yaml:9-40
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: catalog
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: catalog
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalog" of deployment "catalog" in "globoticket" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 catalog7_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 catalog7_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment catalog in globoticket namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container catalog in globoticket namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog7_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalog in globoticket namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog7_1.yaml:18-40
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: catalog
  20 │         image: psgloboticketdemo.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 └             memory: 1Gi
  ..   
────────────────────────────────────────



catalog8.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog8.yaml:9-16
────────────────────────────────────────
   9 ┌   selector:
  10 │     app: catalog
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8080
  14 │     targetPort: 80
  15 │     name: http
  16 └   type: ClusterIP
────────────────────────────────────────



catalog8_1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 101, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalog' of Deployment 'catalog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 catalog8_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'catalog' of Deployment 'catalog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 catalog8_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'catalog' of 'deployment' 'catalog' in 'globoticket' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 catalog8_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 catalog8_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'catalog' of Deployment 'catalog' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 catalog8_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'catalog' of Deployment 'catalog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 catalog8_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 catalog8_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 catalog8_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 catalog8_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog8_1.yaml:9-40
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: catalog
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: catalog
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalog" of deployment "catalog" in "globoticket" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 catalog8_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 catalog8_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment catalog in globoticket namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container catalog in globoticket namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog8_1.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 │             memory: 1Gi
  27 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalog in globoticket namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog8_1.yaml:18-40
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: catalog
  20 │         image: psgloboticket.azurecr.io/catalog
  21 │         resources:
  22 │           requests:
  23 │             memory: 500Mi
  24 │             cpu: 250m
  25 │           limits:
  26 └             memory: 1Gi
  ..   
────────────────────────────────────────



catalog9.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog9.yaml:9-16
────────────────────────────────────────
   9 ┌   selector:
  10 │     app: catalog
  11 │   ports:
  12 │   - name: api2
  13 │     protocol: TCP
  14 │     port: 8080
  15 │     targetPort: 80
  16 └   type: ClusterIP
────────────────────────────────────────



catalog9_1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 100, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalog' of Deployment 'catalog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 catalog9_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'catalog' of Deployment 'catalog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 catalog9_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'catalog' of 'deployment' 'catalog' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 catalog9_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 catalog9_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'catalog' of Deployment 'catalog' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 catalog9_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'catalog' of Deployment 'catalog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 catalog9_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 catalog9_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 catalog9_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 catalog9_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog9_1.yaml:8-37
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: catalog
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: catalog
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalog" of deployment "catalog" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 catalog9_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 catalog9_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment catalog in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 catalog9_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: catalog
   5 │   labels:
   6 └     app: catalog
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment catalog in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container catalog in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog9_1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 │             memory: 1Gi
  26 └             cpu: 750m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalog in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog9_1.yaml:17-37
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: catalog
  19 │         image: psgloboticketdemo.azurecr.io/catalog
  20 │         resources:
  21 │           requests:
  22 │             memory: 501Mi
  23 │             cpu: 250m
  24 │           limits:
  25 └             memory: 1Gi
  ..   
────────────────────────────────────────



catalog_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalog' of Deployment 'catalog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 catalog_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'catalog' of Deployment 'catalog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 catalog_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'catalog' of 'deployment' 'catalog' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 catalog_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'catalog' of Deployment 'catalog' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 catalog_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 catalog_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'catalog' of Deployment 'catalog' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 catalog_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'catalog' of Deployment 'catalog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 catalog_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'catalog' of Deployment 'catalog' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 catalog_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'catalog' of Deployment 'catalog' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 catalog_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'catalog' of Deployment 'catalog' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 catalog_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 catalog_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalog' of Deployment 'catalog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 catalog_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 catalog_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalog_1.yaml:8-27
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: catalog
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: catalog
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalog" of deployment "catalog" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 catalog_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 catalog_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment catalog in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 catalog_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: catalog
   5 │   labels:
   6 └     app: catalog
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment catalog in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container catalog in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 │         ports:
  26 │         - containerPort: 80
  27 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalog in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalog_1.yaml:17-27
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: catalog
  19 │         image: catalog
  20 │         env:
  21 │         - name: ASPNETCORE_ENVIRONMENT
  22 │           value: Development
  23 │         - name: CONNECTIONSTRINGS__DEFAULTCONNECTION
  24 │           value: Server=sqlserver;Database=EventCatalogDb;User=sa;pwd=P@ssW0rd!;MultipleActiveResultSets=true;
  25 └         ports:
  ..   
────────────────────────────────────────



catalogue-db-dep2.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 catalogue-db-dep2.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 catalogue-db-dep2.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'catalogue-db' of 'deployment' 'catalogue-db' in 'sock-shop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 catalogue-db-dep2.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 catalogue-db-dep2.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 catalogue-db-dep2.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 catalogue-db-dep2.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 catalogue-db-dep2.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 catalogue-db-dep2.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 catalogue-db-dep2.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 catalogue-db-dep2.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 catalogue-db-dep2.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 catalogue-db-dep2.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-db-dep2.yaml:10-31
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       name: catalogue-db
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         name: catalogue-db
  18 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalogue-db" of deployment "catalogue-db" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 catalogue-db-dep2.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 catalogue-db-dep2.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container catalogue-db in sock-shop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalogue-db-dep2.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalogue-db in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalogue-db-dep2.yaml:19-31
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container catalogue-db in deployment catalogue-db (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 catalogue-db-dep2.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
────────────────────────────────────────



catalogue-db-svc.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-db-svc.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │     # the port that this service should serve on
  11 │   - port: 3306
  12 │     targetPort: 3306
  13 │   selector:
  14 └     name: catalogue-db
────────────────────────────────────────



catalogue-db-svc1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-db-svc1.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │     # the port that this service should serve on
  11 │   - port: 3306
  12 │     targetPort: 3306
  13 │   selector:
  14 └     name: catalogue-db
────────────────────────────────────────



catalogue-db-svc2.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-db-svc2.yaml:10-15
────────────────────────────────────────
  10 ┌   ports:
  11 │     # the port that this service should serve on
  12 │   - port: 3306
  13 │     targetPort: 3306
  14 │   selector:
  15 └     name: catalogue-db
────────────────────────────────────────



catalogue-db.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-db.yaml:8-14
────────────────────────────────────────
   8 ┌   storageClassName: manual
   9 │   capacity:
  10 │     storage: 2Gi
  11 │   accessModes:
  12 │   - ReadWriteOnce
  13 │   hostPath:
  14 └     path: /var/lib/postgresql/data
────────────────────────────────────────



catalogue-db_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-db_1.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: manual
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 2Gi
────────────────────────────────────────



catalogue-db_2.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 catalogue-db_2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: catalogue-db
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_DB
  21 │           value: catalogue
  22 │         - name: POSTGRES_USER
  23 │           value: catalogue
  24 │         - name: POSTGRES_PASSWORD
  25 └           value: catalogue
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 catalogue-db_2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: catalogue-db
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_DB
  21 │           value: catalogue
  22 │         - name: POSTGRES_USER
  23 │           value: catalogue
  24 │         - name: POSTGRES_PASSWORD
  25 └           value: catalogue
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'catalogue-db' of 'deployment' 'catalogue-db' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 catalogue-db_2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: catalogue-db
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_DB
  21 │           value: catalogue
  22 │         - name: POSTGRES_USER
  23 │           value: catalogue
  24 │         - name: POSTGRES_PASSWORD
  25 └           value: catalogue
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 catalogue-db_2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: catalogue-db
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_DB
  21 │           value: catalogue
  22 │         - name: POSTGRES_USER
  23 │           value: catalogue
  24 │         - name: POSTGRES_PASSWORD
  25 └           value: catalogue
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 catalogue-db_2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: catalogue-db
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_DB
  21 │           value: catalogue
  22 │         - name: POSTGRES_USER
  23 │           value: catalogue
  24 │         - name: POSTGRES_PASSWORD
  25 └           value: catalogue
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 catalogue-db_2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: catalogue-db
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_DB
  21 │           value: catalogue
  22 │         - name: POSTGRES_USER
  23 │           value: catalogue
  24 │         - name: POSTGRES_PASSWORD
  25 └           value: catalogue
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 catalogue-db_2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: catalogue-db
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_DB
  21 │           value: catalogue
  22 │         - name: POSTGRES_USER
  23 │           value: catalogue
  24 │         - name: POSTGRES_PASSWORD
  25 └           value: catalogue
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 catalogue-db_2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: catalogue-db
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_DB
  21 │           value: catalogue
  22 │         - name: POSTGRES_USER
  23 │           value: catalogue
  24 │         - name: POSTGRES_PASSWORD
  25 └           value: catalogue
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 catalogue-db_2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: catalogue-db
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_DB
  21 │           value: catalogue
  22 │         - name: POSTGRES_USER
  23 │           value: catalogue
  24 │         - name: POSTGRES_PASSWORD
  25 └           value: catalogue
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 catalogue-db_2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: catalogue-db
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_DB
  21 │           value: catalogue
  22 │         - name: POSTGRES_USER
  23 │           value: catalogue
  24 │         - name: POSTGRES_PASSWORD
  25 └           value: catalogue
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 catalogue-db_2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: catalogue-db
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_DB
  21 │           value: catalogue
  22 │         - name: POSTGRES_USER
  23 │           value: catalogue
  24 │         - name: POSTGRES_PASSWORD
  25 └           value: catalogue
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 catalogue-db_2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: catalogue-db
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_DB
  21 │           value: catalogue
  22 │         - name: POSTGRES_USER
  23 │           value: catalogue
  24 │         - name: POSTGRES_PASSWORD
  25 └           value: catalogue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-db_2.yaml:8-35
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: catalogue-db
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: catalogue-db
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalogue-db" of deployment "catalogue-db" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 catalogue-db_2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: catalogue-db
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_DB
  21 │           value: catalogue
  22 │         - name: POSTGRES_USER
  23 │           value: catalogue
  24 │         - name: POSTGRES_PASSWORD
  25 └           value: catalogue
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 catalogue-db_2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: catalogue-db
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_DB
  21 │           value: catalogue
  22 │         - name: POSTGRES_USER
  23 │           value: catalogue
  24 │         - name: POSTGRES_PASSWORD
  25 └           value: catalogue
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment catalogue-db in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 catalogue-db_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: catalogue-db
   5 │   labels:
   6 └     app: catalogue-db
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container catalogue-db in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalogue-db_2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: catalogue-db
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_DB
  21 │           value: catalogue
  22 │         - name: POSTGRES_USER
  23 │           value: catalogue
  24 │         - name: POSTGRES_PASSWORD
  25 └           value: catalogue
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalogue-db in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalogue-db_2.yaml:16-35
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: catalogue-db
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_DB
  21 │           value: catalogue
  22 │         - name: POSTGRES_USER
  23 │           value: catalogue
  24 └         - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────



catalogue-db_3.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-db_3.yaml:6-10
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 5432
   8 │   selector:
   9 │     app: catalogue-db
  10 └   clusterIP: None
────────────────────────────────────────



catalogue-dep1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 3, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 catalogue-dep1.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         env:
  23 │          - name: ZIPKIN
  24 │            value: http://zipkin.jaeger.svc.cluster.local:9411/api/v1/spans
  25 │         resources:
  26 │           limits:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 catalogue-dep1.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         env:
  23 │          - name: ZIPKIN
  24 │            value: http://zipkin.jaeger.svc.cluster.local:9411/api/v1/spans
  25 │         resources:
  26 │           limits:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'catalogue' of Deployment 'catalogue' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 catalogue-dep1.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         env:
  23 │          - name: ZIPKIN
  24 │            value: http://zipkin.jaeger.svc.cluster.local:9411/api/v1/spans
  25 │         resources:
  26 │           limits:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 catalogue-dep1.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         env:
  23 │          - name: ZIPKIN
  24 │            value: http://zipkin.jaeger.svc.cluster.local:9411/api/v1/spans
  25 │         resources:
  26 │           limits:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-dep1.yaml:10-56
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       name: catalogue
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         name: catalogue
  18 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalogue" of deployment "catalogue" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 catalogue-dep1.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         env:
  23 │          - name: ZIPKIN
  24 │            value: http://zipkin.jaeger.svc.cluster.local:9411/api/v1/spans
  25 │         resources:
  26 │           limits:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment catalogue in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────
 catalogue-dep1.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalogue in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalogue-dep1.yaml:19-56
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         env:
  23 │          - name: ZIPKIN
  24 │            value: http://zipkin.jaeger.svc.cluster.local:9411/api/v1/spans
  25 │         resources:
  26 │           limits:
  27 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container catalogue in deployment catalogue (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 catalogue-dep1.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         env:
  23 │          - name: ZIPKIN
  24 │            value: http://zipkin.jaeger.svc.cluster.local:9411/api/v1/spans
  25 │         resources:
  26 │           limits:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────



catalogue-dep3.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 3, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 catalogue-dep3.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         env:
  23 │          - name: ZIPKIN
  24 │            value: http://zipkin.jaeger.svc.cluster.local:9411/api/v1/spans
  25 │         resources:
  26 │           limits:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 catalogue-dep3.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         env:
  23 │          - name: ZIPKIN
  24 │            value: http://zipkin.jaeger.svc.cluster.local:9411/api/v1/spans
  25 │         resources:
  26 │           limits:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'catalogue' of Deployment 'catalogue' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 catalogue-dep3.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         env:
  23 │          - name: ZIPKIN
  24 │            value: http://zipkin.jaeger.svc.cluster.local:9411/api/v1/spans
  25 │         resources:
  26 │           limits:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 catalogue-dep3.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         env:
  23 │          - name: ZIPKIN
  24 │            value: http://zipkin.jaeger.svc.cluster.local:9411/api/v1/spans
  25 │         resources:
  26 │           limits:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-dep3.yaml:10-56
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       name: catalogue
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         name: catalogue
  18 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalogue" of deployment "catalogue" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 catalogue-dep3.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         env:
  23 │          - name: ZIPKIN
  24 │            value: http://zipkin.jaeger.svc.cluster.local:9411/api/v1/spans
  25 │         resources:
  26 │           limits:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment catalogue in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────
 catalogue-dep3.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalogue in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalogue-dep3.yaml:19-56
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         env:
  23 │          - name: ZIPKIN
  24 │            value: http://zipkin.jaeger.svc.cluster.local:9411/api/v1/spans
  25 │         resources:
  26 │           limits:
  27 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container catalogue in deployment catalogue (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 catalogue-dep3.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         env:
  23 │          - name: ZIPKIN
  24 │            value: http://zipkin.jaeger.svc.cluster.local:9411/api/v1/spans
  25 │         resources:
  26 │           limits:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
────────────────────────────────────────



catalogue-dep4.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 3, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 catalogue-dep4.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         command: ["/app"]
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 │             cpu: 200m
  28 └             memory: 200Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 catalogue-dep4.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         command: ["/app"]
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 │             cpu: 200m
  28 └             memory: 200Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'catalogue' of Deployment 'catalogue' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 catalogue-dep4.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         command: ["/app"]
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 │             cpu: 200m
  28 └             memory: 200Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 catalogue-dep4.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         command: ["/app"]
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 │             cpu: 200m
  28 └             memory: 200Mi
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-dep4.yaml:10-56
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       name: catalogue
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         name: catalogue
  18 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalogue" of deployment "catalogue" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 catalogue-dep4.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         command: ["/app"]
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 │             cpu: 200m
  28 └             memory: 200Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment catalogue in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────
 catalogue-dep4.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalogue in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalogue-dep4.yaml:19-56
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         command: ["/app"]
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container catalogue in deployment catalogue (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 catalogue-dep4.yaml:20-54
────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         command: ["/app"]
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 │             cpu: 200m
  28 └             memory: 200Mi
  ..   
────────────────────────────────────────



catalogue-hsc.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-hsc.yaml:8-15
────────────────────────────────────────
   8 ┌   scaleTargetRef:
   9 │     apiVersion: apps/v1beta1
  10 │     kind: Deployment
  11 │     name: catalogue
  12 │ 
  13 │   minReplicas: 1
  14 │   maxReplicas: 10
  15 └   targetCPUUtilizationPercentage: 50
────────────────────────────────────────



catalogue-hsc1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-hsc1.yaml:8-15
────────────────────────────────────────
   8 ┌   scaleTargetRef:
   9 │     apiVersion: apps/v1beta1
  10 │     kind: Deployment
  11 │     name: catalogue
  12 │ 
  13 │   minReplicas: 1
  14 │   maxReplicas: 10
  15 └   targetCPUUtilizationPercentage: 50
────────────────────────────────────────



catalogue-service-deployment.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'catalogue-vmagent-cm' in 'default' namespace stores secrets in key(s) or value(s) '{"      client_secret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



catalogue-service-deployment_1.yaml (kubernetes)
================================================
Tests: 132 (SUCCESSES: 96, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 22, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'selmag-catalogue-service' of Deployment 'selmag-catalogue-service-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:24-37
────────────────────────────────────────
  24 ┌       - name: selmag-catalogue-service
  25 │         image: 192.168.49.1:5000/selmag/catalogue-service:0.0.1
  26 │         args:
  27 │         - --spring.config.import=/etc/opt/catalogue-service/application-k8s.yml
  28 │         ports:
  29 │         - containerPort: 8080
  30 │         env:
  31 │         - name: SPRING_PROFILES_ACTIVE
  32 └           value: k8s
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'vmagent' of Deployment 'selmag-catalogue-service-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:38-51
────────────────────────────────────────
  38 ┌       - name: vmagent
  39 │         image: victoriametrics/vmagent:v1.93.12
  40 │         env:
  41 │         - name: NODE_NAME
  42 │           valueFrom:
  43 │             fieldRef:
  44 │               fieldPath: metadata.name
  45 │         args:
  46 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'selmag-catalogue-service' of Deployment 'selmag-catalogue-service-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:24-37
────────────────────────────────────────
  24 ┌       - name: selmag-catalogue-service
  25 │         image: 192.168.49.1:5000/selmag/catalogue-service:0.0.1
  26 │         args:
  27 │         - --spring.config.import=/etc/opt/catalogue-service/application-k8s.yml
  28 │         ports:
  29 │         - containerPort: 8080
  30 │         env:
  31 │         - name: SPRING_PROFILES_ACTIVE
  32 └           value: k8s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vmagent' of Deployment 'selmag-catalogue-service-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:38-51
────────────────────────────────────────
  38 ┌       - name: vmagent
  39 │         image: victoriametrics/vmagent:v1.93.12
  40 │         env:
  41 │         - name: NODE_NAME
  42 │           valueFrom:
  43 │             fieldRef:
  44 │               fieldPath: metadata.name
  45 │         args:
  46 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'selmag-catalogue-service' of 'deployment' 'selmag-catalogue-service-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:24-37
────────────────────────────────────────
  24 ┌       - name: selmag-catalogue-service
  25 │         image: 192.168.49.1:5000/selmag/catalogue-service:0.0.1
  26 │         args:
  27 │         - --spring.config.import=/etc/opt/catalogue-service/application-k8s.yml
  28 │         ports:
  29 │         - containerPort: 8080
  30 │         env:
  31 │         - name: SPRING_PROFILES_ACTIVE
  32 └           value: k8s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vmagent' of 'deployment' 'selmag-catalogue-service-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:38-51
────────────────────────────────────────
  38 ┌       - name: vmagent
  39 │         image: victoriametrics/vmagent:v1.93.12
  40 │         env:
  41 │         - name: NODE_NAME
  42 │           valueFrom:
  43 │             fieldRef:
  44 │               fieldPath: metadata.name
  45 │         args:
  46 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'selmag-catalogue-service' of Deployment 'selmag-catalogue-service-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:24-37
────────────────────────────────────────
  24 ┌       - name: selmag-catalogue-service
  25 │         image: 192.168.49.1:5000/selmag/catalogue-service:0.0.1
  26 │         args:
  27 │         - --spring.config.import=/etc/opt/catalogue-service/application-k8s.yml
  28 │         ports:
  29 │         - containerPort: 8080
  30 │         env:
  31 │         - name: SPRING_PROFILES_ACTIVE
  32 └           value: k8s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vmagent' of Deployment 'selmag-catalogue-service-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:38-51
────────────────────────────────────────
  38 ┌       - name: vmagent
  39 │         image: victoriametrics/vmagent:v1.93.12
  40 │         env:
  41 │         - name: NODE_NAME
  42 │           valueFrom:
  43 │             fieldRef:
  44 │               fieldPath: metadata.name
  45 │         args:
  46 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'selmag-catalogue-service' of Deployment 'selmag-catalogue-service-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:24-37
────────────────────────────────────────
  24 ┌       - name: selmag-catalogue-service
  25 │         image: 192.168.49.1:5000/selmag/catalogue-service:0.0.1
  26 │         args:
  27 │         - --spring.config.import=/etc/opt/catalogue-service/application-k8s.yml
  28 │         ports:
  29 │         - containerPort: 8080
  30 │         env:
  31 │         - name: SPRING_PROFILES_ACTIVE
  32 └           value: k8s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vmagent' of Deployment 'selmag-catalogue-service-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:38-51
────────────────────────────────────────
  38 ┌       - name: vmagent
  39 │         image: victoriametrics/vmagent:v1.93.12
  40 │         env:
  41 │         - name: NODE_NAME
  42 │           valueFrom:
  43 │             fieldRef:
  44 │               fieldPath: metadata.name
  45 │         args:
  46 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'selmag-catalogue-service' of Deployment 'selmag-catalogue-service-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:24-37
────────────────────────────────────────
  24 ┌       - name: selmag-catalogue-service
  25 │         image: 192.168.49.1:5000/selmag/catalogue-service:0.0.1
  26 │         args:
  27 │         - --spring.config.import=/etc/opt/catalogue-service/application-k8s.yml
  28 │         ports:
  29 │         - containerPort: 8080
  30 │         env:
  31 │         - name: SPRING_PROFILES_ACTIVE
  32 └           value: k8s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'selmag-catalogue-service' of Deployment 'selmag-catalogue-service-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:24-37
────────────────────────────────────────
  24 ┌       - name: selmag-catalogue-service
  25 │         image: 192.168.49.1:5000/selmag/catalogue-service:0.0.1
  26 │         args:
  27 │         - --spring.config.import=/etc/opt/catalogue-service/application-k8s.yml
  28 │         ports:
  29 │         - containerPort: 8080
  30 │         env:
  31 │         - name: SPRING_PROFILES_ACTIVE
  32 └           value: k8s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vmagent' of Deployment 'selmag-catalogue-service-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:38-51
────────────────────────────────────────
  38 ┌       - name: vmagent
  39 │         image: victoriametrics/vmagent:v1.93.12
  40 │         env:
  41 │         - name: NODE_NAME
  42 │           valueFrom:
  43 │             fieldRef:
  44 │               fieldPath: metadata.name
  45 │         args:
  46 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'selmag-catalogue-service' of Deployment 'selmag-catalogue-service-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:24-37
────────────────────────────────────────
  24 ┌       - name: selmag-catalogue-service
  25 │         image: 192.168.49.1:5000/selmag/catalogue-service:0.0.1
  26 │         args:
  27 │         - --spring.config.import=/etc/opt/catalogue-service/application-k8s.yml
  28 │         ports:
  29 │         - containerPort: 8080
  30 │         env:
  31 │         - name: SPRING_PROFILES_ACTIVE
  32 └           value: k8s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vmagent' of Deployment 'selmag-catalogue-service-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:38-51
────────────────────────────────────────
  38 ┌       - name: vmagent
  39 │         image: victoriametrics/vmagent:v1.93.12
  40 │         env:
  41 │         - name: NODE_NAME
  42 │           valueFrom:
  43 │             fieldRef:
  44 │               fieldPath: metadata.name
  45 │         args:
  46 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'selmag-catalogue-service' of Deployment 'selmag-catalogue-service-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:24-37
────────────────────────────────────────
  24 ┌       - name: selmag-catalogue-service
  25 │         image: 192.168.49.1:5000/selmag/catalogue-service:0.0.1
  26 │         args:
  27 │         - --spring.config.import=/etc/opt/catalogue-service/application-k8s.yml
  28 │         ports:
  29 │         - containerPort: 8080
  30 │         env:
  31 │         - name: SPRING_PROFILES_ACTIVE
  32 └           value: k8s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vmagent' of Deployment 'selmag-catalogue-service-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:38-51
────────────────────────────────────────
  38 ┌       - name: vmagent
  39 │         image: victoriametrics/vmagent:v1.93.12
  40 │         env:
  41 │         - name: NODE_NAME
  42 │           valueFrom:
  43 │             fieldRef:
  44 │               fieldPath: metadata.name
  45 │         args:
  46 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'selmag-catalogue-service' of Deployment 'selmag-catalogue-service-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:24-37
────────────────────────────────────────
  24 ┌       - name: selmag-catalogue-service
  25 │         image: 192.168.49.1:5000/selmag/catalogue-service:0.0.1
  26 │         args:
  27 │         - --spring.config.import=/etc/opt/catalogue-service/application-k8s.yml
  28 │         ports:
  29 │         - containerPort: 8080
  30 │         env:
  31 │         - name: SPRING_PROFILES_ACTIVE
  32 └           value: k8s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vmagent' of Deployment 'selmag-catalogue-service-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:38-51
────────────────────────────────────────
  38 ┌       - name: vmagent
  39 │         image: victoriametrics/vmagent:v1.93.12
  40 │         env:
  41 │         - name: NODE_NAME
  42 │           valueFrom:
  43 │             fieldRef:
  44 │               fieldPath: metadata.name
  45 │         args:
  46 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'selmag-catalogue-service' of Deployment 'selmag-catalogue-service-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:24-37
────────────────────────────────────────
  24 ┌       - name: selmag-catalogue-service
  25 │         image: 192.168.49.1:5000/selmag/catalogue-service:0.0.1
  26 │         args:
  27 │         - --spring.config.import=/etc/opt/catalogue-service/application-k8s.yml
  28 │         ports:
  29 │         - containerPort: 8080
  30 │         env:
  31 │         - name: SPRING_PROFILES_ACTIVE
  32 └           value: k8s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vmagent' of Deployment 'selmag-catalogue-service-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:38-51
────────────────────────────────────────
  38 ┌       - name: vmagent
  39 │         image: victoriametrics/vmagent:v1.93.12
  40 │         env:
  41 │         - name: NODE_NAME
  42 │           valueFrom:
  43 │             fieldRef:
  44 │               fieldPath: metadata.name
  45 │         args:
  46 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'selmag-catalogue-service' of Deployment 'selmag-catalogue-service-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:24-37
────────────────────────────────────────
  24 ┌       - name: selmag-catalogue-service
  25 │         image: 192.168.49.1:5000/selmag/catalogue-service:0.0.1
  26 │         args:
  27 │         - --spring.config.import=/etc/opt/catalogue-service/application-k8s.yml
  28 │         ports:
  29 │         - containerPort: 8080
  30 │         env:
  31 │         - name: SPRING_PROFILES_ACTIVE
  32 └           value: k8s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vmagent' of Deployment 'selmag-catalogue-service-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:38-51
────────────────────────────────────────
  38 ┌       - name: vmagent
  39 │         image: victoriametrics/vmagent:v1.93.12
  40 │         env:
  41 │         - name: NODE_NAME
  42 │           valueFrom:
  43 │             fieldRef:
  44 │               fieldPath: metadata.name
  45 │         args:
  46 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:38-51
────────────────────────────────────────
  38 ┌       - name: vmagent
  39 │         image: victoriametrics/vmagent:v1.93.12
  40 │         env:
  41 │         - name: NODE_NAME
  42 │           valueFrom:
  43 │             fieldRef:
  44 │               fieldPath: metadata.name
  45 │         args:
  46 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:24-37
────────────────────────────────────────
  24 ┌       - name: selmag-catalogue-service
  25 │         image: 192.168.49.1:5000/selmag/catalogue-service:0.0.1
  26 │         args:
  27 │         - --spring.config.import=/etc/opt/catalogue-service/application-k8s.yml
  28 │         ports:
  29 │         - containerPort: 8080
  30 │         env:
  31 │         - name: SPRING_PROFILES_ACTIVE
  32 └           value: k8s
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:8-51
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: selmag-catalogue-service
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: selmag-catalogue-service
  15 │     spec:
  16 └       volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "selmag-catalogue-service" of deployment "selmag-catalogue-service-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:24-37
────────────────────────────────────────
  24 ┌       - name: selmag-catalogue-service
  25 │         image: 192.168.49.1:5000/selmag/catalogue-service:0.0.1
  26 │         args:
  27 │         - --spring.config.import=/etc/opt/catalogue-service/application-k8s.yml
  28 │         ports:
  29 │         - containerPort: 8080
  30 │         env:
  31 │         - name: SPRING_PROFILES_ACTIVE
  32 └           value: k8s
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vmagent" of deployment "selmag-catalogue-service-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:38-51
────────────────────────────────────────
  38 ┌       - name: vmagent
  39 │         image: victoriametrics/vmagent:v1.93.12
  40 │         env:
  41 │         - name: NODE_NAME
  42 │           valueFrom:
  43 │             fieldRef:
  44 │               fieldPath: metadata.name
  45 │         args:
  46 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:24-37
────────────────────────────────────────
  24 ┌       - name: selmag-catalogue-service
  25 │         image: 192.168.49.1:5000/selmag/catalogue-service:0.0.1
  26 │         args:
  27 │         - --spring.config.import=/etc/opt/catalogue-service/application-k8s.yml
  28 │         ports:
  29 │         - containerPort: 8080
  30 │         env:
  31 │         - name: SPRING_PROFILES_ACTIVE
  32 └           value: k8s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:38-51
────────────────────────────────────────
  38 ┌       - name: vmagent
  39 │         image: victoriametrics/vmagent:v1.93.12
  40 │         env:
  41 │         - name: NODE_NAME
  42 │           valueFrom:
  43 │             fieldRef:
  44 │               fieldPath: metadata.name
  45 │         args:
  46 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment selmag-catalogue-service-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: selmag-catalogue-service-deployment
   5 │   labels:
   6 └     app: selmag-catalogue-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container selmag-catalogue-service-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:24-37
────────────────────────────────────────
  24 ┌       - name: selmag-catalogue-service
  25 │         image: 192.168.49.1:5000/selmag/catalogue-service:0.0.1
  26 │         args:
  27 │         - --spring.config.import=/etc/opt/catalogue-service/application-k8s.yml
  28 │         ports:
  29 │         - containerPort: 8080
  30 │         env:
  31 │         - name: SPRING_PROFILES_ACTIVE
  32 └           value: k8s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container selmag-catalogue-service-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:38-51
────────────────────────────────────────
  38 ┌       - name: vmagent
  39 │         image: victoriametrics/vmagent:v1.93.12
  40 │         env:
  41 │         - name: NODE_NAME
  42 │           valueFrom:
  43 │             fieldRef:
  44 │               fieldPath: metadata.name
  45 │         args:
  46 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment selmag-catalogue-service-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:16-51
────────────────────────────────────────
  16 ┌       volumes:
  17 │       - name: vmconfig
  18 │         configMap:
  19 │           name: catalogue-vmagent-cm
  20 │       - name: service-config
  21 │         configMap:
  22 │           name: catalogue-service-config
  23 │       containers:
  24 └       - name: selmag-catalogue-service
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container selmag-catalogue-service in deployment selmag-catalogue-service-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:24-37
────────────────────────────────────────
  24 ┌       - name: selmag-catalogue-service
  25 │         image: 192.168.49.1:5000/selmag/catalogue-service:0.0.1
  26 │         args:
  27 │         - --spring.config.import=/etc/opt/catalogue-service/application-k8s.yml
  28 │         ports:
  29 │         - containerPort: 8080
  30 │         env:
  31 │         - name: SPRING_PROFILES_ACTIVE
  32 └           value: k8s
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vmagent in deployment selmag-catalogue-service-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 catalogue-service-deployment_1.yaml:38-51
────────────────────────────────────────
  38 ┌       - name: vmagent
  39 │         image: victoriametrics/vmagent:v1.93.12
  40 │         env:
  41 │         - name: NODE_NAME
  42 │           valueFrom:
  43 │             fieldRef:
  44 │               fieldPath: metadata.name
  45 │         args:
  46 └         - -promscrape.config=/etc/opt/vmagent/promscrape.yaml
  ..   
────────────────────────────────────────



catalogue-service-deployment_2.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-service-deployment_2.yaml:6-11
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   ports:
   8 │   - port: 8080
   9 │     name: http
  10 │   selector:
  11 └     app: selmag-catalogue-service
────────────────────────────────────────



catalogue-service-deployment_3.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-service-deployment_3.yaml:6-16
────────────────────────────────────────
   6 ┌   rules:
   7 │   - host: catalogue.api.selm.ag.192.168.49.2.nip.io
   8 │     http:
   9 │       paths:
  10 │       - path: /
  11 │         pathType: Prefix
  12 │         backend:
  13 │           service:
  14 └             name: selmag-catalogue-service-svc
  ..   
────────────────────────────────────────



catalogue-service.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-service.yaml:8-13
────────────────────────────────────────
   8 ┌   ports:
   9 │   - name: http
  10 │     port: 8080
  11 │     targetPort: 8080
  12 │   selector:
  13 └     service: catalogue
────────────────────────────────────────



catalogue-service1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-service1.yaml:8-13
────────────────────────────────────────
   8 ┌   ports:
   9 │   - name: http
  10 │     port: 8080
  11 │     targetPort: 8080
  12 │   selector:
  13 └     service: catalogue
────────────────────────────────────────



catalogue-service2.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-service2.yaml:8-13
────────────────────────────────────────
   8 ┌   ports:
   9 │   - name: http
  10 │     port: 8080
  11 │     targetPort: 8080
  12 │   selector:
  13 └     service: catalogue
────────────────────────────────────────



catalogue-service3.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-service3.yaml:8-13
────────────────────────────────────────
   8 ┌   ports:
   9 │   - name: http
  10 │     port: 8080
  11 │     targetPort: 8080
  12 │   selector:
  13 └     service: catalogue
────────────────────────────────────────



catalogue-service4.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-service4.yaml:8-13
────────────────────────────────────────
   8 ┌   ports:
   9 │   - name: http
  10 │     port: 8080
  11 │     targetPort: 8080
  12 │   selector:
  13 └     service: catalogue
────────────────────────────────────────



catalogue-service5.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-service5.yaml:8-13
────────────────────────────────────────
   8 ┌   ports:
   9 │   - name: http
  10 │     port: 8080
  11 │     targetPort: 8080
  12 │   selector:
  13 └     service: catalogue
────────────────────────────────────────



catalogue-service6.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-service6.yaml:8-13
────────────────────────────────────────
   8 ┌   ports:
   9 │   - name: http
  10 │     port: 8080
  11 │     targetPort: 8080
  12 │   selector:
  13 └     service: catalogue
────────────────────────────────────────



catalogue-service7.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-service7.yaml:8-13
────────────────────────────────────────
   8 ┌   ports:
   9 │   - name: http
  10 │     port: 8080
  11 │     targetPort: 8080
  12 │   selector:
  13 └     service: catalogue
────────────────────────────────────────



catalogue-service8.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-service8.yaml:8-13
────────────────────────────────────────
   8 ┌   ports:
   9 │   - name: http
  10 │     port: 8080
  11 │     targetPort: 8080
  12 │   selector:
  13 └     service: catalogue
────────────────────────────────────────



catalogue-svc2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue-svc2.yaml:12-17
────────────────────────────────────────
  12 ┌   ports:
  13 │     # the port that this service should serve on
  14 │   - port: 80
  15 │     targetPort: 80
  16 │   selector:
  17 └     name: catalogue
────────────────────────────────────────



catalogue.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 101, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 catalogue.yaml:24-35
────────────────────────────────────────
  24 ┌       - name: catalogue
  25 │         image: joindevops/catalogue:1.0.0
  26 │         resources:
  27 │           requests:
  28 │             cpu: 50m
  29 │             memory: 68Mi
  30 │           limits:
  31 │             cpu: 100m
  32 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'catalogue' of Deployment 'catalogue' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 catalogue.yaml:24-35
────────────────────────────────────────
  24 ┌       - name: catalogue
  25 │         image: joindevops/catalogue:1.0.0
  26 │         resources:
  27 │           requests:
  28 │             cpu: 50m
  29 │             memory: 68Mi
  30 │           limits:
  31 │             cpu: 100m
  32 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'catalogue' of 'deployment' 'catalogue' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 catalogue.yaml:24-35
────────────────────────────────────────
  24 ┌       - name: catalogue
  25 │         image: joindevops/catalogue:1.0.0
  26 │         resources:
  27 │           requests:
  28 │             cpu: 50m
  29 │             memory: 68Mi
  30 │           limits:
  31 │             cpu: 100m
  32 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 catalogue.yaml:24-35
────────────────────────────────────────
  24 ┌       - name: catalogue
  25 │         image: joindevops/catalogue:1.0.0
  26 │         resources:
  27 │           requests:
  28 │             cpu: 50m
  29 │             memory: 68Mi
  30 │           limits:
  31 │             cpu: 100m
  32 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 catalogue.yaml:24-35
────────────────────────────────────────
  24 ┌       - name: catalogue
  25 │         image: joindevops/catalogue:1.0.0
  26 │         resources:
  27 │           requests:
  28 │             cpu: 50m
  29 │             memory: 68Mi
  30 │           limits:
  31 │             cpu: 100m
  32 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 catalogue.yaml:24-35
────────────────────────────────────────
  24 ┌       - name: catalogue
  25 │         image: joindevops/catalogue:1.0.0
  26 │         resources:
  27 │           requests:
  28 │             cpu: 50m
  29 │             memory: 68Mi
  30 │           limits:
  31 │             cpu: 100m
  32 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 catalogue.yaml:24-35
────────────────────────────────────────
  24 ┌       - name: catalogue
  25 │         image: joindevops/catalogue:1.0.0
  26 │         resources:
  27 │           requests:
  28 │             cpu: 50m
  29 │             memory: 68Mi
  30 │           limits:
  31 │             cpu: 100m
  32 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 catalogue.yaml:24-35
────────────────────────────────────────
  24 ┌       - name: catalogue
  25 │         image: joindevops/catalogue:1.0.0
  26 │         resources:
  27 │           requests:
  28 │             cpu: 50m
  29 │             memory: 68Mi
  30 │           limits:
  31 │             cpu: 100m
  32 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue.yaml:10-35
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app: catalogue
  14 │       tier: app
  15 │       project: roboshop
  16 │   template:
  17 │     metadata:
  18 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalogue" of deployment "catalogue" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 catalogue.yaml:24-35
────────────────────────────────────────
  24 ┌       - name: catalogue
  25 │         image: joindevops/catalogue:1.0.0
  26 │         resources:
  27 │           requests:
  28 │             cpu: 50m
  29 │             memory: 68Mi
  30 │           limits:
  31 │             cpu: 100m
  32 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 catalogue.yaml:24-35
────────────────────────────────────────
  24 ┌       - name: catalogue
  25 │         image: joindevops/catalogue:1.0.0
  26 │         resources:
  27 │           requests:
  28 │             cpu: 50m
  29 │             memory: 68Mi
  30 │           limits:
  31 │             cpu: 100m
  32 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment catalogue in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 catalogue.yaml:4-8
────────────────────────────────────────
   4 ┌   name: catalogue
   5 │   labels:
   6 │     app: catalogue
   7 │     tier: app
   8 └     project: roboshop
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container catalogue in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalogue.yaml:24-35
────────────────────────────────────────
  24 ┌       - name: catalogue
  25 │         image: joindevops/catalogue:1.0.0
  26 │         resources:
  27 │           requests:
  28 │             cpu: 50m
  29 │             memory: 68Mi
  30 │           limits:
  31 │             cpu: 100m
  32 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalogue in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catalogue.yaml:23-35
────────────────────────────────────────
  23 ┌       containers:
  24 │       - name: catalogue
  25 │         image: joindevops/catalogue:1.0.0
  26 │         resources:
  27 │           requests:
  28 │             cpu: 50m
  29 │             memory: 68Mi
  30 │           limits:
  31 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container catalogue in deployment catalogue (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 catalogue.yaml:24-35
────────────────────────────────────────
  24 ┌       - name: catalogue
  25 │         image: joindevops/catalogue:1.0.0
  26 │         resources:
  27 │           requests:
  28 │             cpu: 50m
  29 │             memory: 68Mi
  30 │           limits:
  31 │             cpu: 100m
  32 └             memory: 128Mi
  ..   
────────────────────────────────────────



catalogue_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catalogue_1.yaml:6-14
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: catalogue
   8 │     tier: app
   9 │     project: roboshop
  10 │   ports:
  11 │   - name: mongodb-port
  12 │     protocol: TCP
  13 │     port: 8080
  14 └     targetPort: 8080
────────────────────────────────────────



catfacts-deployment.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 95, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 12, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stoic-maxwell' of Deployment 'cat-facts' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 catfacts-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stoic-maxwell
  19 │         image: keenkevin/cat-facts
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stoic-maxwell' of Deployment 'cat-facts' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 catfacts-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stoic-maxwell
  19 │         image: keenkevin/cat-facts
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stoic-maxwell' of 'deployment' 'cat-facts' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 catfacts-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stoic-maxwell
  19 │         image: keenkevin/cat-facts
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stoic-maxwell' of Deployment 'cat-facts' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 catfacts-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stoic-maxwell
  19 │         image: keenkevin/cat-facts
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stoic-maxwell' of Deployment 'cat-facts' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 catfacts-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stoic-maxwell
  19 │         image: keenkevin/cat-facts
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stoic-maxwell' of Deployment 'cat-facts' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 catfacts-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stoic-maxwell
  19 │         image: keenkevin/cat-facts
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stoic-maxwell' of Deployment 'cat-facts' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 catfacts-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stoic-maxwell
  19 │         image: keenkevin/cat-facts
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stoic-maxwell' of Deployment 'cat-facts' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 catfacts-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stoic-maxwell
  19 │         image: keenkevin/cat-facts
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stoic-maxwell' of Deployment 'cat-facts' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 catfacts-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stoic-maxwell
  19 │         image: keenkevin/cat-facts
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stoic-maxwell' of Deployment 'cat-facts' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 catfacts-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stoic-maxwell
  19 │         image: keenkevin/cat-facts
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stoic-maxwell' of Deployment 'cat-facts' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 catfacts-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stoic-maxwell
  19 │         image: keenkevin/cat-facts
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stoic-maxwell' of Deployment 'cat-facts' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 catfacts-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stoic-maxwell
  19 │         image: keenkevin/cat-facts
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 catfacts-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stoic-maxwell
  19 │         image: keenkevin/cat-facts
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catfacts-deployment.yaml:8-21
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: cat-facts
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: cat-facts
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stoic-maxwell" of deployment "cat-facts" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 catfacts-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stoic-maxwell
  19 │         image: keenkevin/cat-facts
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 catfacts-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stoic-maxwell
  19 │         image: keenkevin/cat-facts
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cat-facts in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 catfacts-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cat-facts
   5 │   labels:
   6 └     app: cat-facts
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment cat-facts in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cat-facts in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catfacts-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stoic-maxwell
  19 │         image: keenkevin/cat-facts
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cat-facts in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 catfacts-deployment.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: stoic-maxwell
  19 │         image: keenkevin/cat-facts
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stoic-maxwell in deployment cat-facts (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 catfacts-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: stoic-maxwell
  19 │         image: keenkevin/cat-facts
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



catfacts-ingress.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catfacts-ingress.yaml:6-26
────────────────────────────────────────
   6 ┌   rules:
   7 │   - host: catfacts.example.com
   8 │     http:
   9 │       paths:
  10 │       - path: /
  11 │         pathType: Prefix
  12 │         backend:
  13 │           service:
  14 └             name: cat-facts-service
  ..   
────────────────────────────────────────



catfacts-service.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 catfacts-service.yaml:6-11
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     app: cat-facts
   9 │   ports:
  10 │     - port: 80
  11 └       targetPort: 80
────────────────────────────────────────



cattr-deployment.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 95, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 12, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cattr-app' of Deployment 'cattr-app-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cattr-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cattr-app
  17 │         image: amazingcat/cattr:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST
  22 │           value: cattr-postgres-deployment
  23 │         - name: POSTGRES_PORT
  24 └           value: '5432'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cattr-app' of Deployment 'cattr-app-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cattr-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cattr-app
  17 │         image: amazingcat/cattr:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST
  22 │           value: cattr-postgres-deployment
  23 │         - name: POSTGRES_PORT
  24 └           value: '5432'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cattr-app' of 'deployment' 'cattr-app-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cattr-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cattr-app
  17 │         image: amazingcat/cattr:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST
  22 │           value: cattr-postgres-deployment
  23 │         - name: POSTGRES_PORT
  24 └           value: '5432'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cattr-app' of Deployment 'cattr-app-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cattr-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cattr-app
  17 │         image: amazingcat/cattr:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST
  22 │           value: cattr-postgres-deployment
  23 │         - name: POSTGRES_PORT
  24 └           value: '5432'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cattr-app' of Deployment 'cattr-app-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cattr-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cattr-app
  17 │         image: amazingcat/cattr:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST
  22 │           value: cattr-postgres-deployment
  23 │         - name: POSTGRES_PORT
  24 └           value: '5432'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cattr-app' of Deployment 'cattr-app-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cattr-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cattr-app
  17 │         image: amazingcat/cattr:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST
  22 │           value: cattr-postgres-deployment
  23 │         - name: POSTGRES_PORT
  24 └           value: '5432'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cattr-app' of Deployment 'cattr-app-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cattr-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cattr-app
  17 │         image: amazingcat/cattr:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST
  22 │           value: cattr-postgres-deployment
  23 │         - name: POSTGRES_PORT
  24 └           value: '5432'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cattr-app' of Deployment 'cattr-app-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cattr-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cattr-app
  17 │         image: amazingcat/cattr:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST
  22 │           value: cattr-postgres-deployment
  23 │         - name: POSTGRES_PORT
  24 └           value: '5432'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cattr-app' of Deployment 'cattr-app-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cattr-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cattr-app
  17 │         image: amazingcat/cattr:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST
  22 │           value: cattr-postgres-deployment
  23 │         - name: POSTGRES_PORT
  24 └           value: '5432'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cattr-app' of Deployment 'cattr-app-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cattr-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cattr-app
  17 │         image: amazingcat/cattr:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST
  22 │           value: cattr-postgres-deployment
  23 │         - name: POSTGRES_PORT
  24 └           value: '5432'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cattr-app' of Deployment 'cattr-app-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cattr-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cattr-app
  17 │         image: amazingcat/cattr:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST
  22 │           value: cattr-postgres-deployment
  23 │         - name: POSTGRES_PORT
  24 └           value: '5432'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cattr-app' of Deployment 'cattr-app-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cattr-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cattr-app
  17 │         image: amazingcat/cattr:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST
  22 │           value: cattr-postgres-deployment
  23 │         - name: POSTGRES_PORT
  24 └           value: '5432'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cattr-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cattr-app
  17 │         image: amazingcat/cattr:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST
  22 │           value: cattr-postgres-deployment
  23 │         - name: POSTGRES_PORT
  24 └           value: '5432'
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cattr-deployment.yaml:6-30
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: cattr-app
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: cattr-app
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cattr-app" of deployment "cattr-app-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cattr-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cattr-app
  17 │         image: amazingcat/cattr:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST
  22 │           value: cattr-postgres-deployment
  23 │         - name: POSTGRES_PORT
  24 └           value: '5432'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cattr-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cattr-app
  17 │         image: amazingcat/cattr:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST
  22 │           value: cattr-postgres-deployment
  23 │         - name: POSTGRES_PORT
  24 └           value: '5432'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cattr-app-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cattr-deployment.yaml:4
────────────────────────────────────────
   4 [   name: cattr-app-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment cattr-app-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cattr-app-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cattr-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cattr-app
  17 │         image: amazingcat/cattr:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST
  22 │           value: cattr-postgres-deployment
  23 │         - name: POSTGRES_PORT
  24 └           value: '5432'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cattr-app-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cattr-deployment.yaml:15-30
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: cattr-app
  17 │         image: amazingcat/cattr:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST
  22 │           value: cattr-postgres-deployment
  23 └         - name: POSTGRES_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cattr-app in deployment cattr-app-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cattr-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: cattr-app
  17 │         image: amazingcat/cattr:latest
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: POSTGRES_HOST
  22 │           value: cattr-postgres-deployment
  23 │         - name: POSTGRES_PORT
  24 └           value: '5432'
  ..   
────────────────────────────────────────



cattr-deployment_1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cattr-deployment_1.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: cattr-app
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 80
  11 │     targetPort: 80
  12 └   type: NodePort
────────────────────────────────────────



caveman-service.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 caveman-service.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: caveman
   8 │   ports:
   9 │     - protocol: TCP
  10 │       port: 3000
  11 │       targetPort: 3000
  12 └   type: NodePort
────────────────────────────────────────



caveman.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'caveman' of Deployment 'caveman' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 caveman.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caveman
  17 │         image: nickstersz/caveman:1.1
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'caveman' of Deployment 'caveman' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 caveman.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caveman
  17 │         image: nickstersz/caveman:1.1
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'caveman' of 'deployment' 'caveman' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 caveman.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caveman
  17 │         image: nickstersz/caveman:1.1
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'caveman' of Deployment 'caveman' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 caveman.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caveman
  17 │         image: nickstersz/caveman:1.1
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'caveman' of Deployment 'caveman' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 caveman.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caveman
  17 │         image: nickstersz/caveman:1.1
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'caveman' of Deployment 'caveman' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 caveman.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caveman
  17 │         image: nickstersz/caveman:1.1
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'caveman' of Deployment 'caveman' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 caveman.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caveman
  17 │         image: nickstersz/caveman:1.1
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'caveman' of Deployment 'caveman' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 caveman.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caveman
  17 │         image: nickstersz/caveman:1.1
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'caveman' of Deployment 'caveman' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 caveman.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caveman
  17 │         image: nickstersz/caveman:1.1
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'caveman' of Deployment 'caveman' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 caveman.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caveman
  17 │         image: nickstersz/caveman:1.1
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'caveman' of Deployment 'caveman' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 caveman.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caveman
  17 │         image: nickstersz/caveman:1.1
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 caveman.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caveman
  17 │         image: nickstersz/caveman:1.1
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 caveman.yaml:6-19
────────────────────────────────────────
   6 ┌   replicas: 3
   7 │   selector:
   8 │     matchLabels:
   9 │       app: caveman
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: caveman
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "caveman" of deployment "caveman" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 caveman.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caveman
  17 │         image: nickstersz/caveman:1.1
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 caveman.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caveman
  17 │         image: nickstersz/caveman:1.1
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment caveman in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 caveman.yaml:4
────────────────────────────────────────
   4 [   name: caveman
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container caveman in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 caveman.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caveman
  17 │         image: nickstersz/caveman:1.1
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment caveman in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 caveman.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: caveman
  17 │         image: nickstersz/caveman:1.1
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container caveman in deployment caveman (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 caveman.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: caveman
  17 │         image: nickstersz/caveman:1.1
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────



cby.yaml (kubernetes)
=====================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'chenby' of Deployment 'chenby' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cby.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: chenby
  17 │         image: nginx
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 │             cpu: 500m
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'chenby' of Deployment 'chenby' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cby.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: chenby
  17 │         image: nginx
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 │             cpu: 500m
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'chenby' of 'deployment' 'chenby' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cby.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: chenby
  17 │         image: nginx
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 │             cpu: 500m
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'chenby' of Deployment 'chenby' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cby.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: chenby
  17 │         image: nginx
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 │             cpu: 500m
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'chenby' of Deployment 'chenby' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cby.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: chenby
  17 │         image: nginx
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 │             cpu: 500m
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'chenby' of Deployment 'chenby' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cby.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: chenby
  17 │         image: nginx
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 │             cpu: 500m
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'chenby' of Deployment 'chenby' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cby.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: chenby
  17 │         image: nginx
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 │             cpu: 500m
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'chenby' of Deployment 'chenby' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cby.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: chenby
  17 │         image: nginx
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 │             cpu: 500m
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'chenby' of Deployment 'chenby' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cby.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: chenby
  17 │         image: nginx
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 │             cpu: 500m
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'chenby' of Deployment 'chenby' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cby.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: chenby
  17 │         image: nginx
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 │             cpu: 500m
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cby.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: chenby
  17 │         image: nginx
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 │             cpu: 500m
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cby.yaml:6-23
────────────────────────────────────────
   6 ┌   replicas: 3
   7 │   selector:
   8 │     matchLabels:
   9 │       app: chenby
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: chenby
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "chenby" of deployment "chenby" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cby.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: chenby
  17 │         image: nginx
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 │             cpu: 500m
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cby.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: chenby
  17 │         image: nginx
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 │             cpu: 500m
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment chenby in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cby.yaml:4
────────────────────────────────────────
   4 [   name: chenby
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment chenby in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container chenby in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cby.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: chenby
  17 │         image: nginx
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 │             cpu: 500m
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment chenby in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cby.yaml:15-23
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: chenby
  17 │         image: nginx
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 │             cpu: 500m
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────



cby_1.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cby_1.yaml:6-15
────────────────────────────────────────
   6 ┌   ipFamilyPolicy: PreferDualStack
   7 │   ipFamilies:
   8 │   - IPv6
   9 │   - IPv4
  10 │   type: NodePort
  11 │   selector:
  12 │     app: chenby
  13 │   ports:
  14 │   - port: 80
  15 └     targetPort: 80
────────────────────────────────────────



cc-device-plugin.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 7, MEDIUM: 7, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cc-device-plugin' of DaemonSet 'cc-device-plugin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cc-device-plugin.yaml:37-59
────────────────────────────────────────
  37 ┌       - image: us-central1-docker.pkg.dev/gce-confidential-compute/release/cc-device-plugin
  38 │         name: cc-device-plugin
  39 │         resources:
  40 │           requests:
  41 │             cpu: 50m
  42 │             memory: 20Mi
  43 │           limits:
  44 │             cpu: 50m
  45 └             memory: 20Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cc-device-plugin' of DaemonSet 'cc-device-plugin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cc-device-plugin.yaml:37-59
────────────────────────────────────────
  37 ┌       - image: us-central1-docker.pkg.dev/gce-confidential-compute/release/cc-device-plugin
  38 │         name: cc-device-plugin
  39 │         resources:
  40 │           requests:
  41 │             cpu: 50m
  42 │             memory: 20Mi
  43 │           limits:
  44 │             cpu: 50m
  45 └             memory: 20Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cc-device-plugin' of 'daemonset' 'cc-device-plugin' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cc-device-plugin.yaml:37-59
────────────────────────────────────────
  37 ┌       - image: us-central1-docker.pkg.dev/gce-confidential-compute/release/cc-device-plugin
  38 │         name: cc-device-plugin
  39 │         resources:
  40 │           requests:
  41 │             cpu: 50m
  42 │             memory: 20Mi
  43 │           limits:
  44 │             cpu: 50m
  45 └             memory: 20Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cc-device-plugin' of DaemonSet 'cc-device-plugin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cc-device-plugin.yaml:37-59
────────────────────────────────────────
  37 ┌       - image: us-central1-docker.pkg.dev/gce-confidential-compute/release/cc-device-plugin
  38 │         name: cc-device-plugin
  39 │         resources:
  40 │           requests:
  41 │             cpu: 50m
  42 │             memory: 20Mi
  43 │           limits:
  44 │             cpu: 50m
  45 └             memory: 20Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cc-device-plugin' of DaemonSet 'cc-device-plugin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cc-device-plugin.yaml:37-59
────────────────────────────────────────
  37 ┌       - image: us-central1-docker.pkg.dev/gce-confidential-compute/release/cc-device-plugin
  38 │         name: cc-device-plugin
  39 │         resources:
  40 │           requests:
  41 │             cpu: 50m
  42 │             memory: 20Mi
  43 │           limits:
  44 │             cpu: 50m
  45 └             memory: 20Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cc-device-plugin' of DaemonSet 'cc-device-plugin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cc-device-plugin.yaml:37-59
────────────────────────────────────────
  37 ┌       - image: us-central1-docker.pkg.dev/gce-confidential-compute/release/cc-device-plugin
  38 │         name: cc-device-plugin
  39 │         resources:
  40 │           requests:
  41 │             cpu: 50m
  42 │             memory: 20Mi
  43 │           limits:
  44 │             cpu: 50m
  45 └             memory: 20Mi
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'cc-device-plugin' of DaemonSet 'cc-device-plugin' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 cc-device-plugin.yaml:37-59
────────────────────────────────────────
  37 ┌       - image: us-central1-docker.pkg.dev/gce-confidential-compute/release/cc-device-plugin
  38 │         name: cc-device-plugin
  39 │         resources:
  40 │           requests:
  41 │             cpu: 50m
  42 │             memory: 20Mi
  43 │           limits:
  44 │             cpu: 50m
  45 └             memory: 20Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cc-device-plugin' of DaemonSet 'cc-device-plugin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cc-device-plugin.yaml:37-59
────────────────────────────────────────
  37 ┌       - image: us-central1-docker.pkg.dev/gce-confidential-compute/release/cc-device-plugin
  38 │         name: cc-device-plugin
  39 │         resources:
  40 │           requests:
  41 │             cpu: 50m
  42 │             memory: 20Mi
  43 │           limits:
  44 │             cpu: 50m
  45 └             memory: 20Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cc-device-plugin' of DaemonSet 'cc-device-plugin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cc-device-plugin.yaml:37-59
────────────────────────────────────────
  37 ┌       - image: us-central1-docker.pkg.dev/gce-confidential-compute/release/cc-device-plugin
  38 │         name: cc-device-plugin
  39 │         resources:
  40 │           requests:
  41 │             cpu: 50m
  42 │             memory: 20Mi
  43 │           limits:
  44 │             cpu: 50m
  45 └             memory: 20Mi
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'cc-device-plugin' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 cc-device-plugin.yaml:22-74
────────────────────────────────────────
  22 ┌   selector:
  23 │     matchLabels:
  24 │       app.kubernetes.io/name: cc-device-plugin
  25 │   template:
  26 │     metadata:
  27 │       labels:
  28 │         app.kubernetes.io/name: cc-device-plugin
  29 │     spec:
  30 └       priorityClassName: system-node-critical
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cc-device-plugin.yaml:37-59
────────────────────────────────────────
  37 ┌       - image: us-central1-docker.pkg.dev/gce-confidential-compute/release/cc-device-plugin
  38 │         name: cc-device-plugin
  39 │         resources:
  40 │           requests:
  41 │             cpu: 50m
  42 │             memory: 20Mi
  43 │           limits:
  44 │             cpu: 50m
  45 └             memory: 20Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): DaemonSet 'cc-device-plugin' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 cc-device-plugin.yaml:22-74
────────────────────────────────────────
  22 ┌   selector:
  23 │     matchLabels:
  24 │       app.kubernetes.io/name: cc-device-plugin
  25 │   template:
  26 │     metadata:
  27 │       labels:
  28 │         app.kubernetes.io/name: cc-device-plugin
  29 │     spec:
  30 └       priorityClassName: system-node-critical
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cc-device-plugin.yaml:22-74
────────────────────────────────────────
  22 ┌   selector:
  23 │     matchLabels:
  24 │       app.kubernetes.io/name: cc-device-plugin
  25 │   template:
  26 │     metadata:
  27 │       labels:
  28 │         app.kubernetes.io/name: cc-device-plugin
  29 │     spec:
  30 └       priorityClassName: system-node-critical
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cc-device-plugin" of daemonset "cc-device-plugin" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cc-device-plugin.yaml:37-59
────────────────────────────────────────
  37 ┌       - image: us-central1-docker.pkg.dev/gce-confidential-compute/release/cc-device-plugin
  38 │         name: cc-device-plugin
  39 │         resources:
  40 │           requests:
  41 │             cpu: 50m
  42 │             memory: 20Mi
  43 │           limits:
  44 │             cpu: 50m
  45 └             memory: 20Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cc-device-plugin.yaml:37-59
────────────────────────────────────────
  37 ┌       - image: us-central1-docker.pkg.dev/gce-confidential-compute/release/cc-device-plugin
  38 │         name: cc-device-plugin
  39 │         resources:
  40 │           requests:
  41 │             cpu: 50m
  42 │             memory: 20Mi
  43 │           limits:
  44 │             cpu: 50m
  45 └             memory: 20Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset cc-device-plugin in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cc-device-plugin.yaml:30-72
────────────────────────────────────────
  30 ┌       priorityClassName: system-node-critical
  31 │       tolerations:
  32 │       - operator: "Exists"
  33 │         effect: "NoExecute"
  34 │       - operator: "Exists"
  35 │         effect: "NoSchedule"
  36 │       containers:
  37 │       - image: us-central1-docker.pkg.dev/gce-confidential-compute/release/cc-device-plugin
  38 └         name: cc-device-plugin
  ..   
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset cc-device-plugin in kube-system namespace shouldn't have volumes set to {"/dev", "/sys"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 cc-device-plugin.yaml:22-74
────────────────────────────────────────
  22 ┌   selector:
  23 │     matchLabels:
  24 │       app.kubernetes.io/name: cc-device-plugin
  25 │   template:
  26 │     metadata:
  27 │       labels:
  28 │         app.kubernetes.io/name: cc-device-plugin
  29 │     spec:
  30 └       priorityClassName: system-node-critical
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cc-device-plugin in daemonset cc-device-plugin (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cc-device-plugin.yaml:37-59
────────────────────────────────────────
  37 ┌       - image: us-central1-docker.pkg.dev/gce-confidential-compute/release/cc-device-plugin
  38 │         name: cc-device-plugin
  39 │         resources:
  40 │           requests:
  41 │             cpu: 50m
  42 │             memory: 20Mi
  43 │           limits:
  44 │             cpu: 50m
  45 └             memory: 20Mi
  ..   
────────────────────────────────────────



cc-door-app.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cc-door-mgr' of Deployment 'cc-door-mgr' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cc-door-app.yaml:20-40
────────────────────────────────────────
  20 ┌       - name: cc-door-mgr
  21 │         image: docker.io/cilium/cc-grpc-demo:v3.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - python3
  25 │         args:
  26 │         - /cloudcity/cc_door_server.py
  27 │         ports:
  28 └         - containerPort: 50051
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cc-door-mgr' of Deployment 'cc-door-mgr' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cc-door-app.yaml:20-40
────────────────────────────────────────
  20 ┌       - name: cc-door-mgr
  21 │         image: docker.io/cilium/cc-grpc-demo:v3.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - python3
  25 │         args:
  26 │         - /cloudcity/cc_door_server.py
  27 │         ports:
  28 └         - containerPort: 50051
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cc-door-mgr' of 'deployment' 'cc-door-mgr' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cc-door-app.yaml:20-40
────────────────────────────────────────
  20 ┌       - name: cc-door-mgr
  21 │         image: docker.io/cilium/cc-grpc-demo:v3.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - python3
  25 │         args:
  26 │         - /cloudcity/cc_door_server.py
  27 │         ports:
  28 └         - containerPort: 50051
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cc-door-mgr' of Deployment 'cc-door-mgr' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cc-door-app.yaml:20-40
────────────────────────────────────────
  20 ┌       - name: cc-door-mgr
  21 │         image: docker.io/cilium/cc-grpc-demo:v3.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - python3
  25 │         args:
  26 │         - /cloudcity/cc_door_server.py
  27 │         ports:
  28 └         - containerPort: 50051
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cc-door-mgr' of Deployment 'cc-door-mgr' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cc-door-app.yaml:20-40
────────────────────────────────────────
  20 ┌       - name: cc-door-mgr
  21 │         image: docker.io/cilium/cc-grpc-demo:v3.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - python3
  25 │         args:
  26 │         - /cloudcity/cc_door_server.py
  27 │         ports:
  28 └         - containerPort: 50051
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cc-door-mgr' of Deployment 'cc-door-mgr' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cc-door-app.yaml:20-40
────────────────────────────────────────
  20 ┌       - name: cc-door-mgr
  21 │         image: docker.io/cilium/cc-grpc-demo:v3.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - python3
  25 │         args:
  26 │         - /cloudcity/cc_door_server.py
  27 │         ports:
  28 └         - containerPort: 50051
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cc-door-mgr' of Deployment 'cc-door-mgr' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cc-door-app.yaml:20-40
────────────────────────────────────────
  20 ┌       - name: cc-door-mgr
  21 │         image: docker.io/cilium/cc-grpc-demo:v3.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - python3
  25 │         args:
  26 │         - /cloudcity/cc_door_server.py
  27 │         ports:
  28 └         - containerPort: 50051
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cc-door-mgr' of Deployment 'cc-door-mgr' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cc-door-app.yaml:20-40
────────────────────────────────────────
  20 ┌       - name: cc-door-mgr
  21 │         image: docker.io/cilium/cc-grpc-demo:v3.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - python3
  25 │         args:
  26 │         - /cloudcity/cc_door_server.py
  27 │         ports:
  28 └         - containerPort: 50051
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cc-door-mgr' of Deployment 'cc-door-mgr' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cc-door-app.yaml:20-40
────────────────────────────────────────
  20 ┌       - name: cc-door-mgr
  21 │         image: docker.io/cilium/cc-grpc-demo:v3.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - python3
  25 │         args:
  26 │         - /cloudcity/cc_door_server.py
  27 │         ports:
  28 └         - containerPort: 50051
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cc-door-mgr' of Deployment 'cc-door-mgr' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cc-door-app.yaml:20-40
────────────────────────────────────────
  20 ┌       - name: cc-door-mgr
  21 │         image: docker.io/cilium/cc-grpc-demo:v3.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - python3
  25 │         args:
  26 │         - /cloudcity/cc_door_server.py
  27 │         ports:
  28 └         - containerPort: 50051
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cc-door-mgr' of Deployment 'cc-door-mgr' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cc-door-app.yaml:20-40
────────────────────────────────────────
  20 ┌       - name: cc-door-mgr
  21 │         image: docker.io/cilium/cc-grpc-demo:v3.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - python3
  25 │         args:
  26 │         - /cloudcity/cc_door_server.py
  27 │         ports:
  28 └         - containerPort: 50051
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cc-door-app.yaml:20-40
────────────────────────────────────────
  20 ┌       - name: cc-door-mgr
  21 │         image: docker.io/cilium/cc-grpc-demo:v3.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - python3
  25 │         args:
  26 │         - /cloudcity/cc_door_server.py
  27 │         ports:
  28 └         - containerPort: 50051
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cc-door-app.yaml:9-40
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: cc-door-mgr
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: cc-door-mgr
  17 └         zgroup: grpcExample
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cc-door-mgr" of deployment "cc-door-mgr" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cc-door-app.yaml:20-40
────────────────────────────────────────
  20 ┌       - name: cc-door-mgr
  21 │         image: docker.io/cilium/cc-grpc-demo:v3.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - python3
  25 │         args:
  26 │         - /cloudcity/cc_door_server.py
  27 │         ports:
  28 └         - containerPort: 50051
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cc-door-app.yaml:20-40
────────────────────────────────────────
  20 ┌       - name: cc-door-mgr
  21 │         image: docker.io/cilium/cc-grpc-demo:v3.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - python3
  25 │         args:
  26 │         - /cloudcity/cc_door_server.py
  27 │         ports:
  28 └         - containerPort: 50051
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cc-door-mgr in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cc-door-app.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: cc-door-mgr
   6 │     zgroup: grpcExample
   7 └   name: cc-door-mgr
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cc-door-mgr in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cc-door-app.yaml:20-40
────────────────────────────────────────
  20 ┌       - name: cc-door-mgr
  21 │         image: docker.io/cilium/cc-grpc-demo:v3.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - python3
  25 │         args:
  26 │         - /cloudcity/cc_door_server.py
  27 │         ports:
  28 └         - containerPort: 50051
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cc-door-mgr in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cc-door-app.yaml:19-40
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: cc-door-mgr
  21 │         image: docker.io/cilium/cc-grpc-demo:v3.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - python3
  25 │         args:
  26 │         - /cloudcity/cc_door_server.py
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cc-door-mgr in deployment cc-door-mgr (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cc-door-app.yaml:20-40
────────────────────────────────────────
  20 ┌       - name: cc-door-mgr
  21 │         image: docker.io/cilium/cc-grpc-demo:v3.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - python3
  25 │         args:
  26 │         - /cloudcity/cc_door_server.py
  27 │         ports:
  28 └         - containerPort: 50051
  ..   
────────────────────────────────────────



cc-door-app_1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cc-door-app_1.yaml:9-16
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 50051
  11 │     protocol: TCP
  12 │     targetPort: 50051
  13 │   selector:
  14 │     app: cc-door-mgr
  15 │   sessionAffinity: None
  16 └   type: ClusterIP
────────────────────────────────────────



cc-door-app_2.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cc-door-client' of Pod 'terminal-87' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cc-door-app_2.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: cc-door-client
  11 │     image: docker.io/cilium/cc-grpc-demo:v3.0
  12 │     imagePullPolicy: IfNotPresent
  13 │     command:
  14 │     - sleep
  15 │     args:
  16 └     - '300000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cc-door-client' of Pod 'terminal-87' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cc-door-app_2.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: cc-door-client
  11 │     image: docker.io/cilium/cc-grpc-demo:v3.0
  12 │     imagePullPolicy: IfNotPresent
  13 │     command:
  14 │     - sleep
  15 │     args:
  16 └     - '300000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cc-door-client' of 'pod' 'terminal-87' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cc-door-app_2.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: cc-door-client
  11 │     image: docker.io/cilium/cc-grpc-demo:v3.0
  12 │     imagePullPolicy: IfNotPresent
  13 │     command:
  14 │     - sleep
  15 │     args:
  16 └     - '300000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cc-door-client' of Pod 'terminal-87' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cc-door-app_2.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: cc-door-client
  11 │     image: docker.io/cilium/cc-grpc-demo:v3.0
  12 │     imagePullPolicy: IfNotPresent
  13 │     command:
  14 │     - sleep
  15 │     args:
  16 └     - '300000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cc-door-client' of Pod 'terminal-87' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cc-door-app_2.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: cc-door-client
  11 │     image: docker.io/cilium/cc-grpc-demo:v3.0
  12 │     imagePullPolicy: IfNotPresent
  13 │     command:
  14 │     - sleep
  15 │     args:
  16 └     - '300000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cc-door-client' of Pod 'terminal-87' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cc-door-app_2.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: cc-door-client
  11 │     image: docker.io/cilium/cc-grpc-demo:v3.0
  12 │     imagePullPolicy: IfNotPresent
  13 │     command:
  14 │     - sleep
  15 │     args:
  16 └     - '300000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cc-door-client' of Pod 'terminal-87' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cc-door-app_2.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: cc-door-client
  11 │     image: docker.io/cilium/cc-grpc-demo:v3.0
  12 │     imagePullPolicy: IfNotPresent
  13 │     command:
  14 │     - sleep
  15 │     args:
  16 └     - '300000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cc-door-client' of Pod 'terminal-87' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cc-door-app_2.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: cc-door-client
  11 │     image: docker.io/cilium/cc-grpc-demo:v3.0
  12 │     imagePullPolicy: IfNotPresent
  13 │     command:
  14 │     - sleep
  15 │     args:
  16 └     - '300000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cc-door-client' of Pod 'terminal-87' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cc-door-app_2.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: cc-door-client
  11 │     image: docker.io/cilium/cc-grpc-demo:v3.0
  12 │     imagePullPolicy: IfNotPresent
  13 │     command:
  14 │     - sleep
  15 │     args:
  16 └     - '300000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cc-door-client' of Pod 'terminal-87' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cc-door-app_2.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: cc-door-client
  11 │     image: docker.io/cilium/cc-grpc-demo:v3.0
  12 │     imagePullPolicy: IfNotPresent
  13 │     command:
  14 │     - sleep
  15 │     args:
  16 └     - '300000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cc-door-client' of Pod 'terminal-87' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cc-door-app_2.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: cc-door-client
  11 │     image: docker.io/cilium/cc-grpc-demo:v3.0
  12 │     imagePullPolicy: IfNotPresent
  13 │     command:
  14 │     - sleep
  15 │     args:
  16 └     - '300000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cc-door-app_2.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: cc-door-client
  11 │     image: docker.io/cilium/cc-grpc-demo:v3.0
  12 │     imagePullPolicy: IfNotPresent
  13 │     command:
  14 │     - sleep
  15 │     args:
  16 └     - '300000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cc-door-app_2.yaml:9-16
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: cc-door-client
  11 │     image: docker.io/cilium/cc-grpc-demo:v3.0
  12 │     imagePullPolicy: IfNotPresent
  13 │     command:
  14 │     - sleep
  15 │     args:
  16 └     - '300000'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cc-door-client" of pod "terminal-87" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cc-door-app_2.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: cc-door-client
  11 │     image: docker.io/cilium/cc-grpc-demo:v3.0
  12 │     imagePullPolicy: IfNotPresent
  13 │     command:
  14 │     - sleep
  15 │     args:
  16 └     - '300000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cc-door-app_2.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: cc-door-client
  11 │     image: docker.io/cilium/cc-grpc-demo:v3.0
  12 │     imagePullPolicy: IfNotPresent
  13 │     command:
  14 │     - sleep
  15 │     args:
  16 └     - '300000'
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod terminal-87 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cc-door-app_2.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: public-terminal
   6 │     zgroup: grpcExample
   7 └   name: terminal-87
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container terminal-87 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cc-door-app_2.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: cc-door-client
  11 │     image: docker.io/cilium/cc-grpc-demo:v3.0
  12 │     imagePullPolicy: IfNotPresent
  13 │     command:
  14 │     - sleep
  15 │     args:
  16 └     - '300000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod terminal-87 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cc-door-app_2.yaml:9-16
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: cc-door-client
  11 │     image: docker.io/cilium/cc-grpc-demo:v3.0
  12 │     imagePullPolicy: IfNotPresent
  13 │     command:
  14 │     - sleep
  15 │     args:
  16 └     - '300000'
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cc-door-client in pod terminal-87 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cc-door-app_2.yaml:10-16
────────────────────────────────────────
  10 ┌   - name: cc-door-client
  11 │     image: docker.io/cilium/cc-grpc-demo:v3.0
  12 │     imagePullPolicy: IfNotPresent
  13 │     command:
  14 │     - sleep
  15 │     args:
  16 └     - '300000'
────────────────────────────────────────



cc.yaml (kubernetes)
====================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cc.yaml:7-12
────────────────────────────────────────
   7 ┌   type: ClusterIP
   8 │   ports:
   9 │   - port: 8000
  10 │     targetPort: 80
  11 │   selector:
  12 └     app: tethys
────────────────────────────────────────



cc1.yaml (kubernetes)
=====================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cc1.yaml:6-11
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     app: <cc-name>-<cc-version>
   9 │   ports:
  10 │   - port: <cc-port>
  11 └     targetPort: <cc-port>
────────────────────────────────────────



cc1_1.yaml (kubernetes)
=======================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container '<cc-name>-<cc-version>' of Deployment '<cc-name>-<cc-version>' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cc1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: <cc-name>-<cc-version>
  18 │         image: <cr-prefix>/<cc-name>:0.2
  19 │         ports:
  20 │         - containerPort: <cc-port>
  21 │         env:
  22 │         - name: CC_ID
  23 │           value: <package-id>
  24 │         - name: CC_SERVER_ADDRESS
  25 └           value: <cc-name>-<cc-version>-pod:<cc-port>
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container '<cc-name>-<cc-version>' of Deployment '<cc-name>-<cc-version>' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cc1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: <cc-name>-<cc-version>
  18 │         image: <cr-prefix>/<cc-name>:0.2
  19 │         ports:
  20 │         - containerPort: <cc-port>
  21 │         env:
  22 │         - name: CC_ID
  23 │           value: <package-id>
  24 │         - name: CC_SERVER_ADDRESS
  25 └           value: <cc-name>-<cc-version>-pod:<cc-port>
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container '<cc-name>-<cc-version>' of 'deployment' '<cc-name>-<cc-version>' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cc1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: <cc-name>-<cc-version>
  18 │         image: <cr-prefix>/<cc-name>:0.2
  19 │         ports:
  20 │         - containerPort: <cc-port>
  21 │         env:
  22 │         - name: CC_ID
  23 │           value: <package-id>
  24 │         - name: CC_SERVER_ADDRESS
  25 └           value: <cc-name>-<cc-version>-pod:<cc-port>
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container '<cc-name>-<cc-version>' of Deployment '<cc-name>-<cc-version>' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cc1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: <cc-name>-<cc-version>
  18 │         image: <cr-prefix>/<cc-name>:0.2
  19 │         ports:
  20 │         - containerPort: <cc-port>
  21 │         env:
  22 │         - name: CC_ID
  23 │           value: <package-id>
  24 │         - name: CC_SERVER_ADDRESS
  25 └           value: <cc-name>-<cc-version>-pod:<cc-port>
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container '<cc-name>-<cc-version>' of Deployment '<cc-name>-<cc-version>' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cc1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: <cc-name>-<cc-version>
  18 │         image: <cr-prefix>/<cc-name>:0.2
  19 │         ports:
  20 │         - containerPort: <cc-port>
  21 │         env:
  22 │         - name: CC_ID
  23 │           value: <package-id>
  24 │         - name: CC_SERVER_ADDRESS
  25 └           value: <cc-name>-<cc-version>-pod:<cc-port>
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container '<cc-name>-<cc-version>' of Deployment '<cc-name>-<cc-version>' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cc1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: <cc-name>-<cc-version>
  18 │         image: <cr-prefix>/<cc-name>:0.2
  19 │         ports:
  20 │         - containerPort: <cc-port>
  21 │         env:
  22 │         - name: CC_ID
  23 │           value: <package-id>
  24 │         - name: CC_SERVER_ADDRESS
  25 └           value: <cc-name>-<cc-version>-pod:<cc-port>
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container '<cc-name>-<cc-version>' of Deployment '<cc-name>-<cc-version>' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cc1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: <cc-name>-<cc-version>
  18 │         image: <cr-prefix>/<cc-name>:0.2
  19 │         ports:
  20 │         - containerPort: <cc-port>
  21 │         env:
  22 │         - name: CC_ID
  23 │           value: <package-id>
  24 │         - name: CC_SERVER_ADDRESS
  25 └           value: <cc-name>-<cc-version>-pod:<cc-port>
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container '<cc-name>-<cc-version>' of Deployment '<cc-name>-<cc-version>' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cc1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: <cc-name>-<cc-version>
  18 │         image: <cr-prefix>/<cc-name>:0.2
  19 │         ports:
  20 │         - containerPort: <cc-port>
  21 │         env:
  22 │         - name: CC_ID
  23 │           value: <package-id>
  24 │         - name: CC_SERVER_ADDRESS
  25 └           value: <cc-name>-<cc-version>-pod:<cc-port>
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container '<cc-name>-<cc-version>' of Deployment '<cc-name>-<cc-version>' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cc1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: <cc-name>-<cc-version>
  18 │         image: <cr-prefix>/<cc-name>:0.2
  19 │         ports:
  20 │         - containerPort: <cc-port>
  21 │         env:
  22 │         - name: CC_ID
  23 │           value: <package-id>
  24 │         - name: CC_SERVER_ADDRESS
  25 └           value: <cc-name>-<cc-version>-pod:<cc-port>
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container '<cc-name>-<cc-version>' of Deployment '<cc-name>-<cc-version>' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cc1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: <cc-name>-<cc-version>
  18 │         image: <cr-prefix>/<cc-name>:0.2
  19 │         ports:
  20 │         - containerPort: <cc-port>
  21 │         env:
  22 │         - name: CC_ID
  23 │           value: <package-id>
  24 │         - name: CC_SERVER_ADDRESS
  25 └           value: <cc-name>-<cc-version>-pod:<cc-port>
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container '<cc-name>-<cc-version>' of Deployment '<cc-name>-<cc-version>' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cc1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: <cc-name>-<cc-version>
  18 │         image: <cr-prefix>/<cc-name>:0.2
  19 │         ports:
  20 │         - containerPort: <cc-port>
  21 │         env:
  22 │         - name: CC_ID
  23 │           value: <package-id>
  24 │         - name: CC_SERVER_ADDRESS
  25 └           value: <cc-name>-<cc-version>-pod:<cc-port>
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cc1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: <cc-name>-<cc-version>
  18 │         image: <cr-prefix>/<cc-name>:0.2
  19 │         ports:
  20 │         - containerPort: <cc-port>
  21 │         env:
  22 │         - name: CC_ID
  23 │           value: <package-id>
  24 │         - name: CC_SERVER_ADDRESS
  25 └           value: <cc-name>-<cc-version>-pod:<cc-port>
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cc1_1.yaml:6-25
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: <cc-name>-<cc-version>
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: <cc-name>-<cc-version>
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "<cc-name>-<cc-version>" of deployment "<cc-name>-<cc-version>" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cc1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: <cc-name>-<cc-version>
  18 │         image: <cr-prefix>/<cc-name>:0.2
  19 │         ports:
  20 │         - containerPort: <cc-port>
  21 │         env:
  22 │         - name: CC_ID
  23 │           value: <package-id>
  24 │         - name: CC_SERVER_ADDRESS
  25 └           value: <cc-name>-<cc-version>-pod:<cc-port>
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cc1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: <cc-name>-<cc-version>
  18 │         image: <cr-prefix>/<cc-name>:0.2
  19 │         ports:
  20 │         - containerPort: <cc-port>
  21 │         env:
  22 │         - name: CC_ID
  23 │           value: <package-id>
  24 │         - name: CC_SERVER_ADDRESS
  25 └           value: <cc-name>-<cc-version>-pod:<cc-port>
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment <cc-name>-<cc-version> in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cc1_1.yaml:4
────────────────────────────────────────
   4 [   name: <cc-name>-<cc-version>
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container <cc-name>-<cc-version> in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cc1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: <cc-name>-<cc-version>
  18 │         image: <cr-prefix>/<cc-name>:0.2
  19 │         ports:
  20 │         - containerPort: <cc-port>
  21 │         env:
  22 │         - name: CC_ID
  23 │           value: <package-id>
  24 │         - name: CC_SERVER_ADDRESS
  25 └           value: <cc-name>-<cc-version>-pod:<cc-port>
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment <cc-name>-<cc-version> in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cc1_1.yaml:15-25
────────────────────────────────────────
  15 ┌       hostname: <cc-name>-<cc-version>-pod
  16 │       containers:
  17 │       - name: <cc-name>-<cc-version>
  18 │         image: <cr-prefix>/<cc-name>:0.2
  19 │         ports:
  20 │         - containerPort: <cc-port>
  21 │         env:
  22 │         - name: CC_ID
  23 └           value: <package-id>
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container <cc-name>-<cc-version> in deployment <cc-name>-<cc-version> (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cc1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: <cc-name>-<cc-version>
  18 │         image: <cr-prefix>/<cc-name>:0.2
  19 │         ports:
  20 │         - containerPort: <cc-port>
  21 │         env:
  22 │         - name: CC_ID
  23 │           value: <package-id>
  24 │         - name: CC_SERVER_ADDRESS
  25 └           value: <cc-name>-<cc-version>-pod:<cc-port>
────────────────────────────────────────



cc3.yaml (kubernetes)
=====================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cc3.yaml:6-11
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     app: <cc-name>-<cc-version>
   9 │   ports:
  10 │   - port: <cc-port>
  11 └     targetPort: <cc-port>
────────────────────────────────────────



cc3_1.yaml (kubernetes)
=======================
Tests: 116 (SUCCESSES: 100, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container '<cc-name>-<cc-version>' of Deployment '<cc-name>-<cc-version>' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cc3_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: <cc-name>-<cc-version>
  19 │         image: <img-path>:<cc-version>
  20 │         ports:
  21 │         - containerPort: <cc-port>
  22 │         env:
  23 │         - name: CC_ID
  24 │           value: <package-id>
  25 │         - name: CC_SERVER_ADDRESS
  26 └           value: <cc-name>-<cc-version>-pod:<cc-port>
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container '<cc-name>-<cc-version>' of Deployment '<cc-name>-<cc-version>' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cc3_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: <cc-name>-<cc-version>
  19 │         image: <img-path>:<cc-version>
  20 │         ports:
  21 │         - containerPort: <cc-port>
  22 │         env:
  23 │         - name: CC_ID
  24 │           value: <package-id>
  25 │         - name: CC_SERVER_ADDRESS
  26 └           value: <cc-name>-<cc-version>-pod:<cc-port>
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container '<cc-name>-<cc-version>' of 'deployment' '<cc-name>-<cc-version>' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cc3_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: <cc-name>-<cc-version>
  19 │         image: <img-path>:<cc-version>
  20 │         ports:
  21 │         - containerPort: <cc-port>
  22 │         env:
  23 │         - name: CC_ID
  24 │           value: <package-id>
  25 │         - name: CC_SERVER_ADDRESS
  26 └           value: <cc-name>-<cc-version>-pod:<cc-port>
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container '<cc-name>-<cc-version>' of Deployment '<cc-name>-<cc-version>' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cc3_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: <cc-name>-<cc-version>
  19 │         image: <img-path>:<cc-version>
  20 │         ports:
  21 │         - containerPort: <cc-port>
  22 │         env:
  23 │         - name: CC_ID
  24 │           value: <package-id>
  25 │         - name: CC_SERVER_ADDRESS
  26 └           value: <cc-name>-<cc-version>-pod:<cc-port>
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container '<cc-name>-<cc-version>' of Deployment '<cc-name>-<cc-version>' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cc3_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: <cc-name>-<cc-version>
  19 │         image: <img-path>:<cc-version>
  20 │         ports:
  21 │         - containerPort: <cc-port>
  22 │         env:
  23 │         - name: CC_ID
  24 │           value: <package-id>
  25 │         - name: CC_SERVER_ADDRESS
  26 └           value: <cc-name>-<cc-version>-pod:<cc-port>
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container '<cc-name>-<cc-version>' of Deployment '<cc-name>-<cc-version>' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cc3_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: <cc-name>-<cc-version>
  19 │         image: <img-path>:<cc-version>
  20 │         ports:
  21 │         - containerPort: <cc-port>
  22 │         env:
  23 │         - name: CC_ID
  24 │           value: <package-id>
  25 │         - name: CC_SERVER_ADDRESS
  26 └           value: <cc-name>-<cc-version>-pod:<cc-port>
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container '<cc-name>-<cc-version>' of Deployment '<cc-name>-<cc-version>' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cc3_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: <cc-name>-<cc-version>
  19 │         image: <img-path>:<cc-version>
  20 │         ports:
  21 │         - containerPort: <cc-port>
  22 │         env:
  23 │         - name: CC_ID
  24 │           value: <package-id>
  25 │         - name: CC_SERVER_ADDRESS
  26 └           value: <cc-name>-<cc-version>-pod:<cc-port>
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container '<cc-name>-<cc-version>' of Deployment '<cc-name>-<cc-version>' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cc3_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: <cc-name>-<cc-version>
  19 │         image: <img-path>:<cc-version>
  20 │         ports:
  21 │         - containerPort: <cc-port>
  22 │         env:
  23 │         - name: CC_ID
  24 │           value: <package-id>
  25 │         - name: CC_SERVER_ADDRESS
  26 └           value: <cc-name>-<cc-version>-pod:<cc-port>
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container '<cc-name>-<cc-version>' of Deployment '<cc-name>-<cc-version>' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cc3_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: <cc-name>-<cc-version>
  19 │         image: <img-path>:<cc-version>
  20 │         ports:
  21 │         - containerPort: <cc-port>
  22 │         env:
  23 │         - name: CC_ID
  24 │           value: <package-id>
  25 │         - name: CC_SERVER_ADDRESS
  26 └           value: <cc-name>-<cc-version>-pod:<cc-port>
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cc3_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: <cc-name>-<cc-version>
  19 │         image: <img-path>:<cc-version>
  20 │         ports:
  21 │         - containerPort: <cc-port>
  22 │         env:
  23 │         - name: CC_ID
  24 │           value: <package-id>
  25 │         - name: CC_SERVER_ADDRESS
  26 └           value: <cc-name>-<cc-version>-pod:<cc-port>
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cc3_1.yaml:6-32
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: <cc-name>-<cc-version>
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: <cc-name>-<cc-version>
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "<cc-name>-<cc-version>" of deployment "<cc-name>-<cc-version>" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cc3_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: <cc-name>-<cc-version>
  19 │         image: <img-path>:<cc-version>
  20 │         ports:
  21 │         - containerPort: <cc-port>
  22 │         env:
  23 │         - name: CC_ID
  24 │           value: <package-id>
  25 │         - name: CC_SERVER_ADDRESS
  26 └           value: <cc-name>-<cc-version>-pod:<cc-port>
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cc3_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: <cc-name>-<cc-version>
  19 │         image: <img-path>:<cc-version>
  20 │         ports:
  21 │         - containerPort: <cc-port>
  22 │         env:
  23 │         - name: CC_ID
  24 │           value: <package-id>
  25 │         - name: CC_SERVER_ADDRESS
  26 └           value: <cc-name>-<cc-version>-pod:<cc-port>
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment <cc-name>-<cc-version> in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cc3_1.yaml:4
────────────────────────────────────────
   4 [   name: <cc-name>-<cc-version>
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container <cc-name>-<cc-version> in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cc3_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: <cc-name>-<cc-version>
  19 │         image: <img-path>:<cc-version>
  20 │         ports:
  21 │         - containerPort: <cc-port>
  22 │         env:
  23 │         - name: CC_ID
  24 │           value: <package-id>
  25 │         - name: CC_SERVER_ADDRESS
  26 └           value: <cc-name>-<cc-version>-pod:<cc-port>
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment <cc-name>-<cc-version> in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cc3_1.yaml:15-32
────────────────────────────────────────
  15 ┌       hostname: <cc-name>-<cc-version>-pod
  16 │       automountServiceAccountToken: false
  17 │       containers:
  18 │       - name: <cc-name>-<cc-version>
  19 │         image: <img-path>:<cc-version>
  20 │         ports:
  21 │         - containerPort: <cc-port>
  22 │         env:
  23 └         - name: CC_ID
  ..   
────────────────────────────────────────



ccm2.yaml (kubernetes)
======================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 1)

AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 ccm2.yaml:65-70
────────────────────────────────────────
  65 ┌ - apiGroups:
  66 │   - apps
  67 │   resources:
  68 │   - daemonsets
  69 │   verbs:
  70 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'k3s-cloud-controller-manager' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 ccm2.yaml:65-70
────────────────────────────────────────
  65 ┌ - apiGroups:
  66 │   - apps
  67 │   resources:
  68 │   - daemonsets
  69 │   verbs:
  70 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'k3s-cloud-controller-manager' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 ccm2.yaml:44-50
────────────────────────────────────────
  44 ┌ - apiGroups:
  45 │   - ''
  46 │   resources:
  47 │   - services
  48 │   verbs:
  49 │   - patch
  50 └   - update
────────────────────────────────────────



ccm_1.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 111, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'kubelb-ccm' of Deployment 'kubelb-ccm' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ccm_1.yaml:28-60
────────────────────────────────────────
  28 ┌       - name: kubelb-ccm
  29 │         args:
  30 │         - --enable-leader-election
  31 │         - --node-address-type=InternalIP
  32 │         image: controller:latest
  33 │         securityContext:
  34 │           allowPrivilegeEscalation: false
  35 │           runAsUser: 65532
  36 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubelb-ccm' of Deployment 'kubelb-ccm' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ccm_1.yaml:28-60
────────────────────────────────────────
  28 ┌       - name: kubelb-ccm
  29 │         args:
  30 │         - --enable-leader-election
  31 │         - --node-address-type=InternalIP
  32 │         image: controller:latest
  33 │         securityContext:
  34 │           allowPrivilegeEscalation: false
  35 │           runAsUser: 65532
  36 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubelb-ccm' of Deployment 'kubelb-ccm' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ccm_1.yaml:28-60
────────────────────────────────────────
  28 ┌       - name: kubelb-ccm
  29 │         args:
  30 │         - --enable-leader-election
  31 │         - --node-address-type=InternalIP
  32 │         image: controller:latest
  33 │         securityContext:
  34 │           allowPrivilegeEscalation: false
  35 │           runAsUser: 65532
  36 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ccm_1.yaml:12-66
────────────────────────────────────────
  12 ┌   selector:
  13 │     matchLabels:
  14 │       control-plane: kubelb-ccm
  15 │   replicas: 1
  16 │   template:
  17 │     metadata:
  18 │       annotations:
  19 │         kubectl.kubernetes.io/default-container: kubelb-ccm
  20 └       labels:
  ..   
────────────────────────────────────────



ccx-auth-service.service.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ccx-auth-service.service.yaml:9-15
────────────────────────────────────────
   9 ┌   type: ClusterIP
  10 │   selector:
  11 │     app: ccx-auth-service
  12 │   ports:
  13 │     - protocol: TCP
  14 │       port: 5050
  15 └       targetPort: 5050
────────────────────────────────────────



ccx-billing-service.service.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ccx-billing-service.service.yaml:9-15
────────────────────────────────────────
   9 ┌   type: ClusterIP
  10 │   selector:
  11 │     app: ccx-billing-service
  12 │   ports:
  13 │     - protocol: TCP
  14 │       port: 20003
  15 └       targetPort: 20003
────────────────────────────────────────



ccx-hook-service.service.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ccx-hook-service.service.yaml:9-15
────────────────────────────────────────
   9 ┌   type: ClusterIP
  10 │   selector:
  11 │     app: ccx-hook-service
  12 │   ports:
  13 │     - protocol: TCP
  14 │       port: 19785
  15 └       targetPort: 19785
────────────────────────────────────────



ccx-monitor-service.service.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ccx-monitor-service.service.yaml:9-15
────────────────────────────────────────
   9 ┌   type: ClusterIP
  10 │   selector:
  11 │     app: ccx-monitor-service
  12 │   ports:
  13 │     - protocol: TCP
  14 │       port: 18091
  15 └       targetPort: 18091
────────────────────────────────────────



ccx-rest-admin.service.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ccx-rest-admin.service.yaml:9-15
────────────────────────────────────────
   9 ┌   type: ClusterIP
  10 │   selector:
  11 │     app: ccx-rest-admin-service
  12 │   ports:
  13 │     - protocol: TCP
  14 │       port: 20001
  15 └       targetPort: 20001
────────────────────────────────────────



ccx-ui-admin.service.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ccx-ui-admin.service.yaml:9-15
────────────────────────────────────────
   9 ┌   type: ClusterIP
  10 │   selector:
  11 │     app: ccx-ui-admin
  12 │   ports:
  13 │     - protocol: TCP
  14 │       port: 80
  15 └       targetPort: 80
────────────────────────────────────────



ccx-ui-app.service.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ccx-ui-app.service.yaml:9-15
────────────────────────────────────────
   9 ┌   type: ClusterIP
  10 │   selector:
  11 │     app: ccx-ui-app
  12 │   ports:
  13 │     - protocol: TCP
  14 │       port: 8080
  15 └       targetPort: 8080
────────────────────────────────────────



ccx-ui-auth.service.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ccx-ui-auth.service.yaml:9-15
────────────────────────────────────────
   9 ┌   type: ClusterIP
  10 │   selector:
  11 │     app: ccx-ui-auth
  12 │   ports:
  13 │     - protocol: TCP
  14 │       port: 8080
  15 └       targetPort: 8080
────────────────────────────────────────



ccx-user.service.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ccx-user.service.yaml:9-15
────────────────────────────────────────
   9 ┌   type: ClusterIP
  10 │   selector:
  11 │     app: ccx-user
  12 │   ports:
  13 │     - protocol: TCP
  14 │       port: 3030
  15 └       targetPort: 3030
────────────────────────────────────────



cd-clusterrole.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 111, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'continuous-deployment' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cd-clusterrole.yaml:6-28
────────────────────────────────────────
   6 ┌   - apiGroups:
   7 │       - ''
   8 │       - apps
   9 │       - networking.k8s.io
  10 │     resources:
  11 │       - namespaces
  12 │       - deployments
  13 │       - replicasets
  14 └       - ingresses
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'continuous-deployment' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cd-clusterrole.yaml:6-28
────────────────────────────────────────
   6 ┌   - apiGroups:
   7 │       - ''
   8 │       - apps
   9 │       - networking.k8s.io
  10 │     resources:
  11 │       - namespaces
  12 │       - deployments
  13 │       - replicasets
  14 └       - ingresses
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'continuous-deployment' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cd-clusterrole.yaml:6-28
────────────────────────────────────────
   6 ┌   - apiGroups:
   7 │       - ''
   8 │       - apps
   9 │       - networking.k8s.io
  10 │     resources:
  11 │       - namespaces
  12 │       - deployments
  13 │       - replicasets
  14 └       - ingresses
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'continuous-deployment' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cd-clusterrole.yaml:6-28
────────────────────────────────────────
   6 ┌   - apiGroups:
   7 │       - ''
   8 │       - apps
   9 │       - networking.k8s.io
  10 │     resources:
  11 │       - namespaces
  12 │       - deployments
  13 │       - replicasets
  14 └       - ingresses
  ..   
────────────────────────────────────────



cdi-ingress-routes.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cdi-ingress-routes.yaml:15-36
────────────────────────────────────────
  15 ┌   ingressClassName: nginx
  16 │   rules:
  17 │   - host: "cdi-uploadproxy.192.168.56.100.nip.io"
  18 │     http:
  19 │       paths:
  20 │       - path: /
  21 │         pathType: Prefix
  22 │         backend:
  23 └           service:
  ..   
────────────────────────────────────────



cdi-loadbalancer.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cdi-loadbalancer.yaml:9-15
────────────────────────────────────────
   9 ┌   type: LoadBalancer
  10 │   ports:
  11 │     - port: 443
  12 │       targetPort: 8443
  13 │       protocol: TCP
  14 │   selector:
  15 └     cdi.kubevirt.io: cdi-uploadproxy
────────────────────────────────────────



cdi-operator-v1.60.2_2.yaml (kubernetes)
========================================
Tests: 118 (SUCCESSES: 109, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cdi-operator-cluster' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cdi-operator-v1.60.2_2.yaml:324-329
────────────────────────────────────────
 324 ┌ - apiGroups:
 325 │   - ''
 326 │   resources:
 327 │   - secrets
 328 │   verbs:
 329 └   - create
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cdi-operator-cluster' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 cdi-operator-v1.60.2_2.yaml:42-48
────────────────────────────────────────
  42 ┌ - apiGroups:
  43 │   - cdi.kubevirt.io
  44 │   - upload.cdi.kubevirt.io
  45 │   resources:
  46 │   - '*'
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cdi-operator-cluster' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 cdi-operator-v1.60.2_2.yaml:275-280
────────────────────────────────────────
 275 ┌ - apiGroups:
 276 │   - cdi.kubevirt.io
 277 │   resources:
 278 │   - '*'
 279 │   verbs:
 280 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cdi-operator-cluster' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cdi-operator-v1.60.2_2.yaml:233-243
────────────────────────────────────────
 233 ┌ - apiGroups:
 234 │   - ''
 235 │   resources:
 236 │   - pods
 237 │   - services
 238 │   verbs:
 239 │   - get
 240 │   - list
 241 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'cdi-operator-cluster' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cdi-operator-v1.60.2_2.yaml:244-250
────────────────────────────────────────
 244 ┌ - apiGroups:
 245 │   - ''
 246 │   resources:
 247 │   - configmaps
 248 │   verbs:
 249 │   - get
 250 └   - create
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cdi-operator-cluster' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cdi-operator-v1.60.2_2.yaml:233-243
────────────────────────────────────────
 233 ┌ - apiGroups:
 234 │   - ''
 235 │   resources:
 236 │   - pods
 237 │   - services
 238 │   verbs:
 239 │   - get
 240 │   - list
 241 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cdi-operator-cluster' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cdi-operator-v1.60.2_2.yaml:49-57
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - admissionregistration.k8s.io
  51 │   resources:
  52 │   - validatingwebhookconfigurations
  53 │   - mutatingwebhookconfigurations
  54 │   verbs:
  55 │   - create
  56 │   - list
  57 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cdi-operator-cluster' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cdi-operator-v1.60.2_2.yaml:58-71
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - admissionregistration.k8s.io
  60 │   resourceNames:
  61 │   - cdi-api-dataimportcron-validate
  62 │   - cdi-api-populator-validate
  63 │   - cdi-api-datavolume-validate
  64 │   - cdi-api-validate
  65 │   - objecttransfer-api-validate
  66 └   resources:
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cdi-operator-cluster' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cdi-operator-v1.60.2_2.yaml:72-82
────────────────────────────────────────
  72 ┌ - apiGroups:
  73 │   - admissionregistration.k8s.io
  74 │   resourceNames:
  75 │   - cdi-api-datavolume-mutate
  76 │   - cdi-api-pvc-mutate
  77 │   resources:
  78 │   - mutatingwebhookconfigurations
  79 │   verbs:
  80 └   - get
  ..   
────────────────────────────────────────



cdi-operator-v1.60.2_5.yaml (kubernetes)
========================================
Tests: 121 (SUCCESSES: 110, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 0, MEDIUM: 9, HIGH: 1, CRITICAL: 1)

AVD-KSV-0048 (MEDIUM): Role 'cdi-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cdi-operator-v1.60.2_5.yaml:40-51
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - apps
  42 │   resources:
  43 │   - deployments
  44 │   - deployments/finalizers
  45 │   verbs:
  46 │   - get
  47 │   - list
  48 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'cdi-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cdi-operator-v1.60.2_5.yaml:121-131
────────────────────────────────────────
 121 ┌ - apiGroups:
 122 │   - batch
 123 │   resources:
 124 │   - cronjobs
 125 │   verbs:
 126 │   - get
 127 │   - list
 128 │   - watch
 129 └   - create
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'cdi-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cdi-operator-v1.60.2_5.yaml:132-140
────────────────────────────────────────
 132 ┌ - apiGroups:
 133 │   - batch
 134 │   resources:
 135 │   - jobs
 136 │   verbs:
 137 │   - create
 138 │   - deletecollection
 139 │   - list
 140 └   - watch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cdi-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cdi-operator-v1.60.2_5.yaml:24-39
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - serviceaccounts
  28 │   - configmaps
  29 │   - events
  30 │   - secrets
  31 │   - services
  32 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cdi-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cdi-operator-v1.60.2_5.yaml:92-101
────────────────────────────────────────
  92 ┌ - apiGroups:
  93 │   - ''
  94 │   resources:
  95 │   - secrets
  96 │   - configmaps
  97 │   verbs:
  98 │   - get
  99 │   - list
 100 │   - watch
 101 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cdi-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cdi-operator-v1.60.2_5.yaml:102-112
────────────────────────────────────────
 102 ┌ - apiGroups:
 103 │   - ''
 104 │   resources:
 105 │   - configmaps
 106 │   verbs:
 107 │   - get
 108 │   - list
 109 │   - watch
 110 └   - create
 ...   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): Role 'cdi-operator' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 cdi-operator-v1.60.2_5.yaml:12-23
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - rbac.authorization.k8s.io
  14 │   resources:
  15 │   - rolebindings
  16 │   - roles
  17 │   verbs:
  18 │   - get
  19 │   - list
  20 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): Role 'cdi-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cdi-operator-v1.60.2_5.yaml:24-39
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - serviceaccounts
  28 │   - configmaps
  29 │   - events
  30 │   - secrets
  31 │   - services
  32 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cdi-operator' shouldn't have access to manage secrets in namespace 'cdi'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cdi-operator-v1.60.2_5.yaml:24-39
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - serviceaccounts
  28 │   - configmaps
  29 │   - events
  30 │   - secrets
  31 │   - services
  32 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cdi-operator' shouldn't have access to manage secrets in namespace 'cdi'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cdi-operator-v1.60.2_5.yaml:92-101
────────────────────────────────────────
  92 ┌ - apiGroups:
  93 │   - ''
  94 │   resources:
  95 │   - secrets
  96 │   - configmaps
  97 │   verbs:
  98 │   - get
  99 │   - list
 100 │   - watch
 101 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cdi-operator' shouldn't have access to manage secrets in namespace 'cdi'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cdi-operator-v1.60.2_5.yaml:113-120
────────────────────────────────────────
 113 ┌ - apiGroups:
 114 │   - ''
 115 │   resources:
 116 │   - secrets
 117 │   verbs:
 118 │   - get
 119 │   - list
 120 └   - watch
────────────────────────────────────────



cdi-operator-v1.60.2_7.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 108, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cdi-operator-v1.60.2_7.yaml:39-81
────────────────────────────────────────
  39 ┌       - env:
  40 │         - name: DEPLOY_CLUSTER_RESOURCES
  41 │           value: 'true'
  42 │         - name: OPERATOR_VERSION
  43 │           value: v1.60.2
  44 │         - name: CONTROLLER_IMAGE
  45 │           value: quay.io/kubevirt/cdi-controller:v1.60.2
  46 │         - name: IMPORTER_IMAGE
  47 └           value: quay.io/kubevirt/cdi-importer:v1.60.2
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cdi-operator-v1.60.2_7.yaml:39-81
────────────────────────────────────────
  39 ┌       - env:
  40 │         - name: DEPLOY_CLUSTER_RESOURCES
  41 │           value: 'true'
  42 │         - name: OPERATOR_VERSION
  43 │           value: v1.60.2
  44 │         - name: CONTROLLER_IMAGE
  45 │           value: quay.io/kubevirt/cdi-controller:v1.60.2
  46 │         - name: IMPORTER_IMAGE
  47 └           value: quay.io/kubevirt/cdi-importer:v1.60.2
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cdi-operator-v1.60.2_7.yaml:39-81
────────────────────────────────────────
  39 ┌       - env:
  40 │         - name: DEPLOY_CLUSTER_RESOURCES
  41 │           value: 'true'
  42 │         - name: OPERATOR_VERSION
  43 │           value: v1.60.2
  44 │         - name: CONTROLLER_IMAGE
  45 │           value: quay.io/kubevirt/cdi-controller:v1.60.2
  46 │         - name: IMPORTER_IMAGE
  47 └           value: quay.io/kubevirt/cdi-importer:v1.60.2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cdi-operator-v1.60.2_7.yaml:39-81
────────────────────────────────────────
  39 ┌       - env:
  40 │         - name: DEPLOY_CLUSTER_RESOURCES
  41 │           value: 'true'
  42 │         - name: OPERATOR_VERSION
  43 │           value: v1.60.2
  44 │         - name: CONTROLLER_IMAGE
  45 │           value: quay.io/kubevirt/cdi-controller:v1.60.2
  46 │         - name: IMPORTER_IMAGE
  47 └           value: quay.io/kubevirt/cdi-importer:v1.60.2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cdi-operator-v1.60.2_7.yaml:39-81
────────────────────────────────────────
  39 ┌       - env:
  40 │         - name: DEPLOY_CLUSTER_RESOURCES
  41 │           value: 'true'
  42 │         - name: OPERATOR_VERSION
  43 │           value: v1.60.2
  44 │         - name: CONTROLLER_IMAGE
  45 │           value: quay.io/kubevirt/cdi-controller:v1.60.2
  46 │         - name: IMPORTER_IMAGE
  47 └           value: quay.io/kubevirt/cdi-importer:v1.60.2
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cdi-operator-v1.60.2_7.yaml:12-89
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       name: cdi-operator
  16 │       operator.cdi.kubevirt.io: ''
  17 │   strategy: {}
  18 │   template:
  19 │     metadata:
  20 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cdi-operator in deployment cdi-operator (namespace: cdi) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cdi-operator-v1.60.2_7.yaml:39-81
────────────────────────────────────────
  39 ┌       - env:
  40 │         - name: DEPLOY_CLUSTER_RESOURCES
  41 │           value: 'true'
  42 │         - name: OPERATOR_VERSION
  43 │           value: v1.60.2
  44 │         - name: CONTROLLER_IMAGE
  45 │           value: quay.io/kubevirt/cdi-controller:v1.60.2
  46 │         - name: IMPORTER_IMAGE
  47 └           value: quay.io/kubevirt/cdi-importer:v1.60.2
  ..   
────────────────────────────────────────



cdi-operator1_2.yaml (kubernetes)
=================================
Tests: 118 (SUCCESSES: 109, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cdi-operator-cluster' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cdi-operator1_2.yaml:270-275
────────────────────────────────────────
 270 ┌ - apiGroups:
 271 │   - ''
 272 │   resources:
 273 │   - secrets
 274 │   verbs:
 275 └   - create
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cdi-operator-cluster' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 cdi-operator1_2.yaml:42-48
────────────────────────────────────────
  42 ┌ - apiGroups:
  43 │   - cdi.kubevirt.io
  44 │   - upload.cdi.kubevirt.io
  45 │   resources:
  46 │   - '*'
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cdi-operator-cluster' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 cdi-operator1_2.yaml:221-226
────────────────────────────────────────
 221 ┌ - apiGroups:
 222 │   - cdi.kubevirt.io
 223 │   resources:
 224 │   - '*'
 225 │   verbs:
 226 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cdi-operator-cluster' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cdi-operator1_2.yaml:186-196
────────────────────────────────────────
 186 ┌ - apiGroups:
 187 │   - ''
 188 │   resources:
 189 │   - pods
 190 │   - services
 191 │   verbs:
 192 │   - get
 193 │   - list
 194 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'cdi-operator-cluster' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cdi-operator1_2.yaml:197-203
────────────────────────────────────────
 197 ┌ - apiGroups:
 198 │   - ''
 199 │   resources:
 200 │   - configmaps
 201 │   verbs:
 202 │   - get
 203 └   - create
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cdi-operator-cluster' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cdi-operator1_2.yaml:186-196
────────────────────────────────────────
 186 ┌ - apiGroups:
 187 │   - ''
 188 │   resources:
 189 │   - pods
 190 │   - services
 191 │   verbs:
 192 │   - get
 193 │   - list
 194 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cdi-operator-cluster' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cdi-operator1_2.yaml:49-57
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - admissionregistration.k8s.io
  51 │   resources:
  52 │   - validatingwebhookconfigurations
  53 │   - mutatingwebhookconfigurations
  54 │   verbs:
  55 │   - create
  56 │   - list
  57 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cdi-operator-cluster' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cdi-operator1_2.yaml:58-71
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - admissionregistration.k8s.io
  60 │   resourceNames:
  61 │   - cdi-api-dataimportcron-validate
  62 │   - cdi-api-populator-validate
  63 │   - cdi-api-datavolume-validate
  64 │   - cdi-api-validate
  65 │   - objecttransfer-api-validate
  66 └   resources:
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cdi-operator-cluster' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cdi-operator1_2.yaml:72-81
────────────────────────────────────────
  72 ┌ - apiGroups:
  73 │   - admissionregistration.k8s.io
  74 │   resourceNames:
  75 │   - cdi-api-datavolume-mutate
  76 │   resources:
  77 │   - mutatingwebhookconfigurations
  78 │   verbs:
  79 │   - get
  80 │   - update
  81 └   - delete
────────────────────────────────────────



cdi-operator1_5.yaml (kubernetes)
=================================
Tests: 121 (SUCCESSES: 110, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 0, MEDIUM: 9, HIGH: 1, CRITICAL: 1)

AVD-KSV-0048 (MEDIUM): Role 'cdi-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cdi-operator1_5.yaml:39-50
────────────────────────────────────────
  39 ┌ - apiGroups:
  40 │   - apps
  41 │   resources:
  42 │   - deployments
  43 │   - deployments/finalizers
  44 │   verbs:
  45 │   - get
  46 │   - list
  47 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'cdi-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cdi-operator1_5.yaml:120-130
────────────────────────────────────────
 120 ┌ - apiGroups:
 121 │   - batch
 122 │   resources:
 123 │   - cronjobs
 124 │   verbs:
 125 │   - get
 126 │   - list
 127 │   - watch
 128 └   - create
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'cdi-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cdi-operator1_5.yaml:131-139
────────────────────────────────────────
 131 ┌ - apiGroups:
 132 │   - batch
 133 │   resources:
 134 │   - jobs
 135 │   verbs:
 136 │   - create
 137 │   - delete
 138 │   - list
 139 └   - watch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cdi-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cdi-operator1_5.yaml:23-38
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - serviceaccounts
  27 │   - configmaps
  28 │   - events
  29 │   - secrets
  30 │   - services
  31 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cdi-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cdi-operator1_5.yaml:91-100
────────────────────────────────────────
  91 ┌ - apiGroups:
  92 │   - ''
  93 │   resources:
  94 │   - secrets
  95 │   - configmaps
  96 │   verbs:
  97 │   - get
  98 │   - list
  99 │   - watch
 100 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cdi-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cdi-operator1_5.yaml:101-111
────────────────────────────────────────
 101 ┌ - apiGroups:
 102 │   - ''
 103 │   resources:
 104 │   - configmaps
 105 │   verbs:
 106 │   - get
 107 │   - list
 108 │   - watch
 109 └   - create
 ...   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): Role 'cdi-operator' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 cdi-operator1_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - rbac.authorization.k8s.io
  13 │   resources:
  14 │   - rolebindings
  15 │   - roles
  16 │   verbs:
  17 │   - get
  18 │   - list
  19 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): Role 'cdi-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cdi-operator1_5.yaml:23-38
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - serviceaccounts
  27 │   - configmaps
  28 │   - events
  29 │   - secrets
  30 │   - services
  31 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cdi-operator' shouldn't have access to manage secrets in namespace 'cdi'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cdi-operator1_5.yaml:23-38
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - serviceaccounts
  27 │   - configmaps
  28 │   - events
  29 │   - secrets
  30 │   - services
  31 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cdi-operator' shouldn't have access to manage secrets in namespace 'cdi'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cdi-operator1_5.yaml:91-100
────────────────────────────────────────
  91 ┌ - apiGroups:
  92 │   - ''
  93 │   resources:
  94 │   - secrets
  95 │   - configmaps
  96 │   verbs:
  97 │   - get
  98 │   - list
  99 │   - watch
 100 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cdi-operator' shouldn't have access to manage secrets in namespace 'cdi'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cdi-operator1_5.yaml:112-119
────────────────────────────────────────
 112 ┌ - apiGroups:
 113 │   - ''
 114 │   resources:
 115 │   - secrets
 116 │   verbs:
 117 │   - get
 118 │   - list
 119 └   - watch
────────────────────────────────────────



cdi-operator1_7.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 108, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cdi-operator1_7.yaml:25-65
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.58.0
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.58.0
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.58.0
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cdi-operator1_7.yaml:25-65
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.58.0
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.58.0
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.58.0
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cdi-operator1_7.yaml:25-65
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.58.0
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.58.0
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.58.0
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cdi-operator1_7.yaml:25-65
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.58.0
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.58.0
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.58.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cdi-operator1_7.yaml:25-65
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.58.0
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.58.0
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.58.0
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cdi-operator1_7.yaml:11-74
────────────────────────────────────────
  11 ┌   replicas: 1
  12 │   selector:
  13 │     matchLabels:
  14 │       name: cdi-operator
  15 │       operator.cdi.kubevirt.io: ''
  16 │   strategy: {}
  17 │   template:
  18 │     metadata:
  19 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cdi-operator in deployment cdi-operator (namespace: cdi) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cdi-operator1_7.yaml:25-65
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.58.0
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.58.0
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.58.0
  ..   
────────────────────────────────────────



cdi-operator2_2.yaml (kubernetes)
=================================
Tests: 119 (SUCCESSES: 109, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 2, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cdi-operator-cluster' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cdi-operator2_2.yaml:221-226
────────────────────────────────────────
 221 ┌ - apiGroups:
 222 │   - ''
 223 │   resources:
 224 │   - secrets
 225 │   verbs:
 226 └   - create
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 cdi-operator2_2.yaml:8-14
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - rbac.authorization.k8s.io
  10 │   resources:
  11 │   - clusterrolebindings
  12 │   - clusterroles
  13 │   verbs:
  14 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cdi-operator-cluster' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 cdi-operator2_2.yaml:41-47
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - cdi.kubevirt.io
  43 │   - upload.cdi.kubevirt.io
  44 │   resources:
  45 │   - '*'
  46 │   verbs:
  47 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cdi-operator-cluster' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 cdi-operator2_2.yaml:185-190
────────────────────────────────────────
 185 ┌ - apiGroups:
 186 │   - cdi.kubevirt.io
 187 │   resources:
 188 │   - '*'
 189 │   verbs:
 190 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cdi-operator-cluster' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 cdi-operator2_2.yaml:191-196
────────────────────────────────────────
 191 ┌ - apiGroups:
 192 │   - snapshot.storage.k8s.io
 193 │   resources:
 194 │   - '*'
 195 │   verbs:
 196 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cdi-operator-cluster' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cdi-operator2_2.yaml:25-34
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - ''
  27 │   resources:
  28 │   - pods
  29 │   - services
  30 │   verbs:
  31 │   - get
  32 │   - list
  33 │   - watch
  34 └   - delete
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cdi-operator-cluster' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cdi-operator2_2.yaml:135-145
────────────────────────────────────────
 135 ┌ - apiGroups:
 136 │   - ''
 137 │   resources:
 138 │   - pods
 139 │   - services
 140 │   verbs:
 141 │   - get
 142 │   - list
 143 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cdi-operator-cluster' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cdi-operator2_2.yaml:25-34
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - ''
  27 │   resources:
  28 │   - pods
  29 │   - services
  30 │   verbs:
  31 │   - get
  32 │   - list
  33 │   - watch
  34 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cdi-operator-cluster' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cdi-operator2_2.yaml:135-145
────────────────────────────────────────
 135 ┌ - apiGroups:
 136 │   - ''
 137 │   resources:
 138 │   - pods
 139 │   - services
 140 │   verbs:
 141 │   - get
 142 │   - list
 143 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cdi-operator-cluster' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cdi-operator2_2.yaml:48-54
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - admissionregistration.k8s.io
  50 │   resources:
  51 │   - validatingwebhookconfigurations
  52 │   - mutatingwebhookconfigurations
  53 │   verbs:
  54 └   - '*'
────────────────────────────────────────



cdi-operator2_5.yaml (kubernetes)
=================================
Tests: 117 (SUCCESSES: 109, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 4)

AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 cdi-operator2_5.yaml:11-17
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - rbac.authorization.k8s.io
  13 │   resources:
  14 │   - rolebindings
  15 │   - roles
  16 │   verbs:
  17 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 cdi-operator2_5.yaml:18-27
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - serviceaccounts
  22 │   - configmaps
  23 │   - events
  24 │   - secrets
  25 │   - services
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 cdi-operator2_5.yaml:28-34
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - apps
  30 │   resources:
  31 │   - deployments
  32 │   - deployments/finalizers
  33 │   verbs:
  34 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'cdi-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cdi-operator2_5.yaml:28-34
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - apps
  30 │   resources:
  31 │   - deployments
  32 │   - deployments/finalizers
  33 │   verbs:
  34 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cdi-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cdi-operator2_5.yaml:18-27
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - serviceaccounts
  22 │   - configmaps
  23 │   - events
  24 │   - secrets
  25 │   - services
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): Role 'cdi-operator' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 cdi-operator2_5.yaml:11-17
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - rbac.authorization.k8s.io
  13 │   resources:
  14 │   - rolebindings
  15 │   - roles
  16 │   verbs:
  17 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): Role 'cdi-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cdi-operator2_5.yaml:18-27
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - serviceaccounts
  22 │   - configmaps
  23 │   - events
  24 │   - secrets
  25 │   - services
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cdi-operator' shouldn't have access to manage secrets in namespace 'cdi'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cdi-operator2_5.yaml:18-27
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - serviceaccounts
  22 │   - configmaps
  23 │   - events
  24 │   - secrets
  25 │   - services
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────



cdi-operator2_7.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cdi-operator2_7.yaml:25-57
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.48.1
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.48.1
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.48.1
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cdi-operator2_7.yaml:25-57
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.48.1
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.48.1
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.48.1
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cdi-operator' of 'deployment' 'cdi-operator' in 'cdi' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cdi-operator2_7.yaml:25-57
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.48.1
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.48.1
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.48.1
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cdi-operator2_7.yaml:25-57
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.48.1
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.48.1
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.48.1
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cdi-operator2_7.yaml:25-57
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.48.1
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.48.1
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.48.1
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cdi-operator2_7.yaml:25-57
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.48.1
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.48.1
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.48.1
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cdi-operator2_7.yaml:25-57
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.48.1
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.48.1
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.48.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cdi-operator2_7.yaml:25-57
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.48.1
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.48.1
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.48.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cdi-operator2_7.yaml:25-57
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.48.1
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.48.1
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.48.1
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cdi-operator2_7.yaml:11-65
────────────────────────────────────────
  11 ┌   replicas: 1
  12 │   selector:
  13 │     matchLabels:
  14 │       name: cdi-operator
  15 │       operator.cdi.kubevirt.io: ''
  16 │   strategy: {}
  17 │   template:
  18 │     metadata:
  19 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cdi-operator" of deployment "cdi-operator" in "cdi" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cdi-operator2_7.yaml:25-57
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.48.1
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.48.1
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.48.1
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cdi-operator2_7.yaml:25-57
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.48.1
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.48.1
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.48.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cdi-operator in deployment cdi-operator (namespace: cdi) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cdi-operator2_7.yaml:25-57
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.48.1
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.48.1
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.48.1
  ..   
────────────────────────────────────────



cdi-operator3_2.yaml (kubernetes)
=================================
Tests: 118 (SUCCESSES: 109, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cdi-operator-cluster' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cdi-operator3_2.yaml:270-275
────────────────────────────────────────
 270 ┌ - apiGroups:
 271 │   - ''
 272 │   resources:
 273 │   - secrets
 274 │   verbs:
 275 └   - create
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cdi-operator-cluster' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 cdi-operator3_2.yaml:42-48
────────────────────────────────────────
  42 ┌ - apiGroups:
  43 │   - cdi.kubevirt.io
  44 │   - upload.cdi.kubevirt.io
  45 │   resources:
  46 │   - '*'
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cdi-operator-cluster' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 cdi-operator3_2.yaml:221-226
────────────────────────────────────────
 221 ┌ - apiGroups:
 222 │   - cdi.kubevirt.io
 223 │   resources:
 224 │   - '*'
 225 │   verbs:
 226 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cdi-operator-cluster' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cdi-operator3_2.yaml:186-196
────────────────────────────────────────
 186 ┌ - apiGroups:
 187 │   - ''
 188 │   resources:
 189 │   - pods
 190 │   - services
 191 │   verbs:
 192 │   - get
 193 │   - list
 194 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'cdi-operator-cluster' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cdi-operator3_2.yaml:197-203
────────────────────────────────────────
 197 ┌ - apiGroups:
 198 │   - ''
 199 │   resources:
 200 │   - configmaps
 201 │   verbs:
 202 │   - get
 203 └   - create
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cdi-operator-cluster' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cdi-operator3_2.yaml:186-196
────────────────────────────────────────
 186 ┌ - apiGroups:
 187 │   - ''
 188 │   resources:
 189 │   - pods
 190 │   - services
 191 │   verbs:
 192 │   - get
 193 │   - list
 194 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cdi-operator-cluster' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cdi-operator3_2.yaml:49-57
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - admissionregistration.k8s.io
  51 │   resources:
  52 │   - validatingwebhookconfigurations
  53 │   - mutatingwebhookconfigurations
  54 │   verbs:
  55 │   - create
  56 │   - list
  57 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cdi-operator-cluster' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cdi-operator3_2.yaml:58-71
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - admissionregistration.k8s.io
  60 │   resourceNames:
  61 │   - cdi-api-dataimportcron-validate
  62 │   - cdi-api-populator-validate
  63 │   - cdi-api-datavolume-validate
  64 │   - cdi-api-validate
  65 │   - objecttransfer-api-validate
  66 └   resources:
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cdi-operator-cluster' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cdi-operator3_2.yaml:72-81
────────────────────────────────────────
  72 ┌ - apiGroups:
  73 │   - admissionregistration.k8s.io
  74 │   resourceNames:
  75 │   - cdi-api-datavolume-mutate
  76 │   resources:
  77 │   - mutatingwebhookconfigurations
  78 │   verbs:
  79 │   - get
  80 │   - update
  81 └   - delete
────────────────────────────────────────



cdi-operator3_5.yaml (kubernetes)
=================================
Tests: 121 (SUCCESSES: 110, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 0, MEDIUM: 9, HIGH: 1, CRITICAL: 1)

AVD-KSV-0048 (MEDIUM): Role 'cdi-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cdi-operator3_5.yaml:39-50
────────────────────────────────────────
  39 ┌ - apiGroups:
  40 │   - apps
  41 │   resources:
  42 │   - deployments
  43 │   - deployments/finalizers
  44 │   verbs:
  45 │   - get
  46 │   - list
  47 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'cdi-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cdi-operator3_5.yaml:120-130
────────────────────────────────────────
 120 ┌ - apiGroups:
 121 │   - batch
 122 │   resources:
 123 │   - cronjobs
 124 │   verbs:
 125 │   - get
 126 │   - list
 127 │   - watch
 128 └   - create
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'cdi-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cdi-operator3_5.yaml:131-139
────────────────────────────────────────
 131 ┌ - apiGroups:
 132 │   - batch
 133 │   resources:
 134 │   - jobs
 135 │   verbs:
 136 │   - create
 137 │   - delete
 138 │   - list
 139 └   - watch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cdi-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cdi-operator3_5.yaml:23-38
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - serviceaccounts
  27 │   - configmaps
  28 │   - events
  29 │   - secrets
  30 │   - services
  31 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cdi-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cdi-operator3_5.yaml:91-100
────────────────────────────────────────
  91 ┌ - apiGroups:
  92 │   - ''
  93 │   resources:
  94 │   - secrets
  95 │   - configmaps
  96 │   verbs:
  97 │   - get
  98 │   - list
  99 │   - watch
 100 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cdi-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cdi-operator3_5.yaml:101-111
────────────────────────────────────────
 101 ┌ - apiGroups:
 102 │   - ''
 103 │   resources:
 104 │   - configmaps
 105 │   verbs:
 106 │   - get
 107 │   - list
 108 │   - watch
 109 └   - create
 ...   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): Role 'cdi-operator' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 cdi-operator3_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - rbac.authorization.k8s.io
  13 │   resources:
  14 │   - rolebindings
  15 │   - roles
  16 │   verbs:
  17 │   - get
  18 │   - list
  19 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): Role 'cdi-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cdi-operator3_5.yaml:23-38
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - serviceaccounts
  27 │   - configmaps
  28 │   - events
  29 │   - secrets
  30 │   - services
  31 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cdi-operator' shouldn't have access to manage secrets in namespace 'cdi'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cdi-operator3_5.yaml:23-38
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - serviceaccounts
  27 │   - configmaps
  28 │   - events
  29 │   - secrets
  30 │   - services
  31 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cdi-operator' shouldn't have access to manage secrets in namespace 'cdi'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cdi-operator3_5.yaml:91-100
────────────────────────────────────────
  91 ┌ - apiGroups:
  92 │   - ''
  93 │   resources:
  94 │   - secrets
  95 │   - configmaps
  96 │   verbs:
  97 │   - get
  98 │   - list
  99 │   - watch
 100 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cdi-operator' shouldn't have access to manage secrets in namespace 'cdi'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cdi-operator3_5.yaml:112-119
────────────────────────────────────────
 112 ┌ - apiGroups:
 113 │   - ''
 114 │   resources:
 115 │   - secrets
 116 │   verbs:
 117 │   - get
 118 │   - list
 119 └   - watch
────────────────────────────────────────



cdi-operator3_7.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 108, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cdi-operator3_7.yaml:25-65
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.58.0
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.58.0
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.58.0
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cdi-operator3_7.yaml:25-65
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.58.0
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.58.0
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.58.0
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cdi-operator3_7.yaml:25-65
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.58.0
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.58.0
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.58.0
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cdi-operator3_7.yaml:25-65
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.58.0
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.58.0
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.58.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cdi-operator3_7.yaml:25-65
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.58.0
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.58.0
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.58.0
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cdi-operator3_7.yaml:11-74
────────────────────────────────────────
  11 ┌   replicas: 1
  12 │   selector:
  13 │     matchLabels:
  14 │       name: cdi-operator
  15 │       operator.cdi.kubevirt.io: ''
  16 │   strategy: {}
  17 │   template:
  18 │     metadata:
  19 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cdi-operator in deployment cdi-operator (namespace: cdi) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cdi-operator3_7.yaml:25-65
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.58.0
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.58.0
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.58.0
  ..   
────────────────────────────────────────



cdi-operator4_2.yaml (kubernetes)
=================================
Tests: 118 (SUCCESSES: 109, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cdi-operator-cluster' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cdi-operator4_2.yaml:270-275
────────────────────────────────────────
 270 ┌ - apiGroups:
 271 │   - ''
 272 │   resources:
 273 │   - secrets
 274 │   verbs:
 275 └   - create
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cdi-operator-cluster' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 cdi-operator4_2.yaml:42-48
────────────────────────────────────────
  42 ┌ - apiGroups:
  43 │   - cdi.kubevirt.io
  44 │   - upload.cdi.kubevirt.io
  45 │   resources:
  46 │   - '*'
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cdi-operator-cluster' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 cdi-operator4_2.yaml:221-226
────────────────────────────────────────
 221 ┌ - apiGroups:
 222 │   - cdi.kubevirt.io
 223 │   resources:
 224 │   - '*'
 225 │   verbs:
 226 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cdi-operator-cluster' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cdi-operator4_2.yaml:186-196
────────────────────────────────────────
 186 ┌ - apiGroups:
 187 │   - ''
 188 │   resources:
 189 │   - pods
 190 │   - services
 191 │   verbs:
 192 │   - get
 193 │   - list
 194 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'cdi-operator-cluster' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cdi-operator4_2.yaml:197-203
────────────────────────────────────────
 197 ┌ - apiGroups:
 198 │   - ''
 199 │   resources:
 200 │   - configmaps
 201 │   verbs:
 202 │   - get
 203 └   - create
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cdi-operator-cluster' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cdi-operator4_2.yaml:186-196
────────────────────────────────────────
 186 ┌ - apiGroups:
 187 │   - ''
 188 │   resources:
 189 │   - pods
 190 │   - services
 191 │   verbs:
 192 │   - get
 193 │   - list
 194 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cdi-operator-cluster' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cdi-operator4_2.yaml:49-57
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - admissionregistration.k8s.io
  51 │   resources:
  52 │   - validatingwebhookconfigurations
  53 │   - mutatingwebhookconfigurations
  54 │   verbs:
  55 │   - create
  56 │   - list
  57 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cdi-operator-cluster' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cdi-operator4_2.yaml:58-71
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - admissionregistration.k8s.io
  60 │   resourceNames:
  61 │   - cdi-api-dataimportcron-validate
  62 │   - cdi-api-populator-validate
  63 │   - cdi-api-datavolume-validate
  64 │   - cdi-api-validate
  65 │   - objecttransfer-api-validate
  66 └   resources:
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cdi-operator-cluster' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cdi-operator4_2.yaml:72-81
────────────────────────────────────────
  72 ┌ - apiGroups:
  73 │   - admissionregistration.k8s.io
  74 │   resourceNames:
  75 │   - cdi-api-datavolume-mutate
  76 │   resources:
  77 │   - mutatingwebhookconfigurations
  78 │   verbs:
  79 │   - get
  80 │   - update
  81 └   - delete
────────────────────────────────────────



cdi-operator4_5.yaml (kubernetes)
=================================
Tests: 121 (SUCCESSES: 110, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 0, MEDIUM: 9, HIGH: 1, CRITICAL: 1)

AVD-KSV-0048 (MEDIUM): Role 'cdi-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cdi-operator4_5.yaml:39-50
────────────────────────────────────────
  39 ┌ - apiGroups:
  40 │   - apps
  41 │   resources:
  42 │   - deployments
  43 │   - deployments/finalizers
  44 │   verbs:
  45 │   - get
  46 │   - list
  47 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'cdi-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cdi-operator4_5.yaml:120-130
────────────────────────────────────────
 120 ┌ - apiGroups:
 121 │   - batch
 122 │   resources:
 123 │   - cronjobs
 124 │   verbs:
 125 │   - get
 126 │   - list
 127 │   - watch
 128 └   - create
 ...   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'cdi-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cdi-operator4_5.yaml:131-139
────────────────────────────────────────
 131 ┌ - apiGroups:
 132 │   - batch
 133 │   resources:
 134 │   - jobs
 135 │   verbs:
 136 │   - create
 137 │   - delete
 138 │   - list
 139 └   - watch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cdi-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cdi-operator4_5.yaml:23-38
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - serviceaccounts
  27 │   - configmaps
  28 │   - events
  29 │   - secrets
  30 │   - services
  31 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cdi-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cdi-operator4_5.yaml:91-100
────────────────────────────────────────
  91 ┌ - apiGroups:
  92 │   - ''
  93 │   resources:
  94 │   - secrets
  95 │   - configmaps
  96 │   verbs:
  97 │   - get
  98 │   - list
  99 │   - watch
 100 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cdi-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cdi-operator4_5.yaml:101-111
────────────────────────────────────────
 101 ┌ - apiGroups:
 102 │   - ''
 103 │   resources:
 104 │   - configmaps
 105 │   verbs:
 106 │   - get
 107 │   - list
 108 │   - watch
 109 └   - create
 ...   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): Role 'cdi-operator' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 cdi-operator4_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - rbac.authorization.k8s.io
  13 │   resources:
  14 │   - rolebindings
  15 │   - roles
  16 │   verbs:
  17 │   - get
  18 │   - list
  19 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): Role 'cdi-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cdi-operator4_5.yaml:23-38
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - serviceaccounts
  27 │   - configmaps
  28 │   - events
  29 │   - secrets
  30 │   - services
  31 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cdi-operator' shouldn't have access to manage secrets in namespace 'cdi'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cdi-operator4_5.yaml:23-38
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - serviceaccounts
  27 │   - configmaps
  28 │   - events
  29 │   - secrets
  30 │   - services
  31 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cdi-operator' shouldn't have access to manage secrets in namespace 'cdi'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cdi-operator4_5.yaml:91-100
────────────────────────────────────────
  91 ┌ - apiGroups:
  92 │   - ''
  93 │   resources:
  94 │   - secrets
  95 │   - configmaps
  96 │   verbs:
  97 │   - get
  98 │   - list
  99 │   - watch
 100 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cdi-operator' shouldn't have access to manage secrets in namespace 'cdi'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cdi-operator4_5.yaml:112-119
────────────────────────────────────────
 112 ┌ - apiGroups:
 113 │   - ''
 114 │   resources:
 115 │   - secrets
 116 │   verbs:
 117 │   - get
 118 │   - list
 119 └   - watch
────────────────────────────────────────



cdi-operator4_7.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 108, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cdi-operator4_7.yaml:25-65
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.58.0
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.58.0
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.58.0
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cdi-operator4_7.yaml:25-65
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.58.0
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.58.0
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.58.0
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cdi-operator4_7.yaml:25-65
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.58.0
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.58.0
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.58.0
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cdi-operator4_7.yaml:25-65
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.58.0
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.58.0
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.58.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cdi-operator4_7.yaml:25-65
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.58.0
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.58.0
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.58.0
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cdi-operator4_7.yaml:11-73
────────────────────────────────────────
  11 ┌   replicas: 1
  12 │   selector:
  13 │     matchLabels:
  14 │       name: cdi-operator
  15 │       operator.cdi.kubevirt.io: ''
  16 │   strategy: {}
  17 │   template:
  18 │     metadata:
  19 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cdi-operator in deployment cdi-operator (namespace: cdi) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cdi-operator4_7.yaml:25-65
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.58.0
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.58.0
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.58.0
  ..   
────────────────────────────────────────



cdi-operator_2.yaml (kubernetes)
================================
Tests: 119 (SUCCESSES: 109, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 2, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cdi-operator-cluster' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cdi-operator_2.yaml:221-226
────────────────────────────────────────
 221 ┌ - apiGroups:
 222 │   - ''
 223 │   resources:
 224 │   - secrets
 225 │   verbs:
 226 └   - create
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 cdi-operator_2.yaml:8-14
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - rbac.authorization.k8s.io
  10 │   resources:
  11 │   - clusterrolebindings
  12 │   - clusterroles
  13 │   verbs:
  14 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cdi-operator-cluster' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 cdi-operator_2.yaml:41-47
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - cdi.kubevirt.io
  43 │   - upload.cdi.kubevirt.io
  44 │   resources:
  45 │   - '*'
  46 │   verbs:
  47 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cdi-operator-cluster' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 cdi-operator_2.yaml:185-190
────────────────────────────────────────
 185 ┌ - apiGroups:
 186 │   - cdi.kubevirt.io
 187 │   resources:
 188 │   - '*'
 189 │   verbs:
 190 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'cdi-operator-cluster' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 cdi-operator_2.yaml:191-196
────────────────────────────────────────
 191 ┌ - apiGroups:
 192 │   - snapshot.storage.k8s.io
 193 │   resources:
 194 │   - '*'
 195 │   verbs:
 196 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cdi-operator-cluster' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cdi-operator_2.yaml:25-34
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - ''
  27 │   resources:
  28 │   - pods
  29 │   - services
  30 │   verbs:
  31 │   - get
  32 │   - list
  33 │   - watch
  34 └   - delete
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cdi-operator-cluster' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cdi-operator_2.yaml:135-145
────────────────────────────────────────
 135 ┌ - apiGroups:
 136 │   - ''
 137 │   resources:
 138 │   - pods
 139 │   - services
 140 │   verbs:
 141 │   - get
 142 │   - list
 143 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cdi-operator-cluster' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cdi-operator_2.yaml:25-34
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - ''
  27 │   resources:
  28 │   - pods
  29 │   - services
  30 │   verbs:
  31 │   - get
  32 │   - list
  33 │   - watch
  34 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cdi-operator-cluster' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cdi-operator_2.yaml:135-145
────────────────────────────────────────
 135 ┌ - apiGroups:
 136 │   - ''
 137 │   resources:
 138 │   - pods
 139 │   - services
 140 │   verbs:
 141 │   - get
 142 │   - list
 143 └   - watch
 ...   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cdi-operator-cluster' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cdi-operator_2.yaml:48-54
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - admissionregistration.k8s.io
  50 │   resources:
  51 │   - validatingwebhookconfigurations
  52 │   - mutatingwebhookconfigurations
  53 │   verbs:
  54 └   - '*'
────────────────────────────────────────



cdi-operator_5.yaml (kubernetes)
================================
Tests: 117 (SUCCESSES: 109, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 4)

AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 cdi-operator_5.yaml:11-17
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - rbac.authorization.k8s.io
  13 │   resources:
  14 │   - rolebindings
  15 │   - roles
  16 │   verbs:
  17 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 cdi-operator_5.yaml:18-27
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - serviceaccounts
  22 │   - configmaps
  23 │   - events
  24 │   - secrets
  25 │   - services
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 cdi-operator_5.yaml:28-34
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - apps
  30 │   resources:
  31 │   - deployments
  32 │   - deployments/finalizers
  33 │   verbs:
  34 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'cdi-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cdi-operator_5.yaml:28-34
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - apps
  30 │   resources:
  31 │   - deployments
  32 │   - deployments/finalizers
  33 │   verbs:
  34 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cdi-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cdi-operator_5.yaml:18-27
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - serviceaccounts
  22 │   - configmaps
  23 │   - events
  24 │   - secrets
  25 │   - services
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): Role 'cdi-operator' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 cdi-operator_5.yaml:11-17
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - rbac.authorization.k8s.io
  13 │   resources:
  14 │   - rolebindings
  15 │   - roles
  16 │   verbs:
  17 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): Role 'cdi-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cdi-operator_5.yaml:18-27
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - serviceaccounts
  22 │   - configmaps
  23 │   - events
  24 │   - secrets
  25 │   - services
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cdi-operator' shouldn't have access to manage secrets in namespace 'cdi'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cdi-operator_5.yaml:18-27
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - serviceaccounts
  22 │   - configmaps
  23 │   - events
  24 │   - secrets
  25 │   - services
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────



cdi-operator_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cdi-operator_7.yaml:25-57
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.48.1
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.48.1
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.48.1
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cdi-operator_7.yaml:25-57
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.48.1
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.48.1
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.48.1
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cdi-operator' of 'deployment' 'cdi-operator' in 'cdi' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cdi-operator_7.yaml:25-57
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.48.1
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.48.1
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.48.1
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cdi-operator_7.yaml:25-57
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.48.1
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.48.1
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.48.1
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cdi-operator_7.yaml:25-57
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.48.1
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.48.1
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.48.1
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cdi-operator_7.yaml:25-57
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.48.1
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.48.1
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.48.1
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cdi-operator_7.yaml:25-57
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.48.1
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.48.1
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.48.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cdi-operator' of Deployment 'cdi-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cdi-operator_7.yaml:25-57
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.48.1
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.48.1
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.48.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cdi-operator_7.yaml:25-57
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.48.1
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.48.1
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.48.1
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cdi-operator_7.yaml:11-65
────────────────────────────────────────
  11 ┌   replicas: 1
  12 │   selector:
  13 │     matchLabels:
  14 │       name: cdi-operator
  15 │       operator.cdi.kubevirt.io: ''
  16 │   strategy: {}
  17 │   template:
  18 │     metadata:
  19 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cdi-operator" of deployment "cdi-operator" in "cdi" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cdi-operator_7.yaml:25-57
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.48.1
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.48.1
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.48.1
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cdi-operator_7.yaml:25-57
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.48.1
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.48.1
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.48.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cdi-operator in deployment cdi-operator (namespace: cdi) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cdi-operator_7.yaml:25-57
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: DEPLOY_CLUSTER_RESOURCES
  27 │           value: 'true'
  28 │         - name: OPERATOR_VERSION
  29 │           value: v1.48.1
  30 │         - name: CONTROLLER_IMAGE
  31 │           value: quay.io/kubevirt/cdi-controller:v1.48.1
  32 │         - name: IMPORTER_IMAGE
  33 └           value: quay.io/kubevirt/cdi-importer:v1.48.1
  ..   
────────────────────────────────────────



cdi-uploadproxy.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cdi-uploadproxy.yaml:9-22
────────────────────────────────────────
   9 ┌   externalTrafficPolicy: Cluster
  10 │   internalTrafficPolicy: Cluster
  11 │   ipFamilies:
  12 │   - IPv4
  13 │   ipFamilyPolicy: SingleStack
  14 │   ports:
  15 │   - nodePort: 31001
  16 │     port: 443
  17 └     protocol: TCP
  ..   
────────────────────────────────────────



cdi-uploadproxy1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cdi-uploadproxy1.yaml:9-22
────────────────────────────────────────
   9 ┌   externalTrafficPolicy: Cluster
  10 │   internalTrafficPolicy: Cluster
  11 │   ipFamilies:
  12 │   - IPv4
  13 │   ipFamilyPolicy: SingleStack
  14 │   ports:
  15 │   - nodePort: 31001
  16 │     port: 443
  17 └     protocol: TCP
  ..   
────────────────────────────────────────



ce-backend-deployment.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'learners-api' of Deployment 'learners-api' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ce-backend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-api
  17 │         image: shenukacj/learners-api:1.0.6
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - mountPath: /var
  22 └           name: data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'learners-api' of Deployment 'learners-api' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ce-backend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-api
  17 │         image: shenukacj/learners-api:1.0.6
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - mountPath: /var
  22 └           name: data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'learners-api' of 'deployment' 'learners-api' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ce-backend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-api
  17 │         image: shenukacj/learners-api:1.0.6
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - mountPath: /var
  22 └           name: data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'learners-api' of Deployment 'learners-api' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ce-backend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-api
  17 │         image: shenukacj/learners-api:1.0.6
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - mountPath: /var
  22 └           name: data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'learners-api' of Deployment 'learners-api' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ce-backend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-api
  17 │         image: shenukacj/learners-api:1.0.6
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - mountPath: /var
  22 └           name: data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'learners-api' of Deployment 'learners-api' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ce-backend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-api
  17 │         image: shenukacj/learners-api:1.0.6
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - mountPath: /var
  22 └           name: data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'learners-api' of Deployment 'learners-api' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ce-backend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-api
  17 │         image: shenukacj/learners-api:1.0.6
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - mountPath: /var
  22 └           name: data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'learners-api' of Deployment 'learners-api' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ce-backend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-api
  17 │         image: shenukacj/learners-api:1.0.6
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - mountPath: /var
  22 └           name: data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'learners-api' of Deployment 'learners-api' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ce-backend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-api
  17 │         image: shenukacj/learners-api:1.0.6
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - mountPath: /var
  22 └           name: data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'learners-api' of Deployment 'learners-api' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ce-backend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-api
  17 │         image: shenukacj/learners-api:1.0.6
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - mountPath: /var
  22 └           name: data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'learners-api' of Deployment 'learners-api' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ce-backend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-api
  17 │         image: shenukacj/learners-api:1.0.6
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - mountPath: /var
  22 └           name: data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ce-backend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-api
  17 │         image: shenukacj/learners-api:1.0.6
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - mountPath: /var
  22 └           name: data
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ce-backend-deployment.yaml:6-26
────────────────────────────────────────
   6 ┌   replicas: 2
   7 │   selector:
   8 │     matchLabels:
   9 │       app: learners-api
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: learners-api
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "learners-api" of deployment "learners-api" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ce-backend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-api
  17 │         image: shenukacj/learners-api:1.0.6
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - mountPath: /var
  22 └           name: data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ce-backend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-api
  17 │         image: shenukacj/learners-api:1.0.6
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - mountPath: /var
  22 └           name: data
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment learners-api in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ce-backend-deployment.yaml:4
────────────────────────────────────────
   4 [   name: learners-api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container learners-api in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ce-backend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-api
  17 │         image: shenukacj/learners-api:1.0.6
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - mountPath: /var
  22 └           name: data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment learners-api in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ce-backend-deployment.yaml:15-26
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: learners-api
  17 │         image: shenukacj/learners-api:1.0.6
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - mountPath: /var
  22 │           name: data
  23 └       volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container learners-api in deployment learners-api (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ce-backend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-api
  17 │         image: shenukacj/learners-api:1.0.6
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - mountPath: /var
  22 └           name: data
────────────────────────────────────────



ce-backend-service.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ce-backend-service.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: learners-api
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 8080
  11 │     targetPort: 8080
  12 └   type: ClusterIP
────────────────────────────────────────



ce-frontend-deployment.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'learners-frontend' of Deployment 'learners-frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ce-frontend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-frontend
  17 │         image: shenukacj/learners-frontend:1.0.3
  18 │         # env:
  19 │         # - name: VITE_API_BASE_URL
  20 │         #   value: http://localhost:8080
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'learners-frontend' of Deployment 'learners-frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ce-frontend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-frontend
  17 │         image: shenukacj/learners-frontend:1.0.3
  18 │         # env:
  19 │         # - name: VITE_API_BASE_URL
  20 │         #   value: http://localhost:8080
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'learners-frontend' of 'deployment' 'learners-frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ce-frontend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-frontend
  17 │         image: shenukacj/learners-frontend:1.0.3
  18 │         # env:
  19 │         # - name: VITE_API_BASE_URL
  20 │         #   value: http://localhost:8080
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'learners-frontend' of Deployment 'learners-frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ce-frontend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-frontend
  17 │         image: shenukacj/learners-frontend:1.0.3
  18 │         # env:
  19 │         # - name: VITE_API_BASE_URL
  20 │         #   value: http://localhost:8080
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'learners-frontend' of Deployment 'learners-frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ce-frontend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-frontend
  17 │         image: shenukacj/learners-frontend:1.0.3
  18 │         # env:
  19 │         # - name: VITE_API_BASE_URL
  20 │         #   value: http://localhost:8080
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'learners-frontend' of Deployment 'learners-frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ce-frontend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-frontend
  17 │         image: shenukacj/learners-frontend:1.0.3
  18 │         # env:
  19 │         # - name: VITE_API_BASE_URL
  20 │         #   value: http://localhost:8080
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'learners-frontend' of Deployment 'learners-frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ce-frontend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-frontend
  17 │         image: shenukacj/learners-frontend:1.0.3
  18 │         # env:
  19 │         # - name: VITE_API_BASE_URL
  20 │         #   value: http://localhost:8080
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'learners-frontend' of Deployment 'learners-frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ce-frontend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-frontend
  17 │         image: shenukacj/learners-frontend:1.0.3
  18 │         # env:
  19 │         # - name: VITE_API_BASE_URL
  20 │         #   value: http://localhost:8080
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'learners-frontend' of Deployment 'learners-frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ce-frontend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-frontend
  17 │         image: shenukacj/learners-frontend:1.0.3
  18 │         # env:
  19 │         # - name: VITE_API_BASE_URL
  20 │         #   value: http://localhost:8080
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'learners-frontend' of Deployment 'learners-frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ce-frontend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-frontend
  17 │         image: shenukacj/learners-frontend:1.0.3
  18 │         # env:
  19 │         # - name: VITE_API_BASE_URL
  20 │         #   value: http://localhost:8080
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'learners-frontend' of Deployment 'learners-frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ce-frontend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-frontend
  17 │         image: shenukacj/learners-frontend:1.0.3
  18 │         # env:
  19 │         # - name: VITE_API_BASE_URL
  20 │         #   value: http://localhost:8080
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ce-frontend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-frontend
  17 │         image: shenukacj/learners-frontend:1.0.3
  18 │         # env:
  19 │         # - name: VITE_API_BASE_URL
  20 │         #   value: http://localhost:8080
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ce-frontend-deployment.yaml:6-22
────────────────────────────────────────
   6 ┌   replicas: 2
   7 │   selector:
   8 │     matchLabels:
   9 │       app: learners-frontend
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: learners-frontend
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "learners-frontend" of deployment "learners-frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ce-frontend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-frontend
  17 │         image: shenukacj/learners-frontend:1.0.3
  18 │         # env:
  19 │         # - name: VITE_API_BASE_URL
  20 │         #   value: http://localhost:8080
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ce-frontend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-frontend
  17 │         image: shenukacj/learners-frontend:1.0.3
  18 │         # env:
  19 │         # - name: VITE_API_BASE_URL
  20 │         #   value: http://localhost:8080
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment learners-frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ce-frontend-deployment.yaml:4
────────────────────────────────────────
   4 [   name: learners-frontend
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment learners-frontend in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container learners-frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ce-frontend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-frontend
  17 │         image: shenukacj/learners-frontend:1.0.3
  18 │         # env:
  19 │         # - name: VITE_API_BASE_URL
  20 │         #   value: http://localhost:8080
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment learners-frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ce-frontend-deployment.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: learners-frontend
  17 │         image: shenukacj/learners-frontend:1.0.3
  18 │         # env:
  19 │         # - name: VITE_API_BASE_URL
  20 │         #   value: http://localhost:8080
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container learners-frontend in deployment learners-frontend (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ce-frontend-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: learners-frontend
  17 │         image: shenukacj/learners-frontend:1.0.3
  18 │         # env:
  19 │         # - name: VITE_API_BASE_URL
  20 │         #   value: http://localhost:8080
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────



ce-frontend-service.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ce-frontend-service.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: learners-frontend
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 3000
  11 │     targetPort: 80
  12 └   type: ClusterIP
────────────────────────────────────────



celery-beat-deployment.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rengine-celery-beat' of Deployment 'rengine-celery-beat' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 celery-beat-deployment.yaml:25-61
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rengine-celery-beat' of Deployment 'rengine-celery-beat' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 celery-beat-deployment.yaml:25-61
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rengine-celery-beat' of 'deployment' 'rengine-celery-beat' in '<ns>' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 celery-beat-deployment.yaml:25-61
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rengine-celery-beat' of Deployment 'rengine-celery-beat' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 celery-beat-deployment.yaml:25-61
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rengine-celery-beat' of Deployment 'rengine-celery-beat' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 celery-beat-deployment.yaml:25-61
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rengine-celery-beat' of Deployment 'rengine-celery-beat' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 celery-beat-deployment.yaml:25-61
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rengine-celery-beat' of Deployment 'rengine-celery-beat' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 celery-beat-deployment.yaml:25-61
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rengine-celery-beat' of Deployment 'rengine-celery-beat' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 celery-beat-deployment.yaml:25-61
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rengine-celery-beat' of Deployment 'rengine-celery-beat' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 celery-beat-deployment.yaml:25-61
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rengine-celery-beat' of Deployment 'rengine-celery-beat' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 celery-beat-deployment.yaml:25-61
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rengine-celery-beat' of Deployment 'rengine-celery-beat' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 celery-beat-deployment.yaml:25-61
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 celery-beat-deployment.yaml:25-61
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 celery-beat-deployment.yaml:11-64
────────────────────────────────────────
  11 ┌   replicas: 1
  12 │   selector:
  13 │     matchLabels:
  14 │       app: rengine-celery-beat
  15 │   strategy:
  16 │     type: Recreate
  17 │   template:
  18 │     metadata:
  19 └       creationTimestamp: null
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rengine-celery-beat" of deployment "rengine-celery-beat" in "<ns>" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 celery-beat-deployment.yaml:25-61
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 celery-beat-deployment.yaml:25-61
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rengine-celery-beat in <ns> namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 celery-beat-deployment.yaml:25-61
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment rengine-celery-beat in <ns> namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 celery-beat-deployment.yaml:24-64
────────────────────────────────────────
  24 ┌       containers:
  25 │       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 └         - name: MIN_CONCURRENCY
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rengine-celery-beat in deployment rengine-celery-beat (namespace: <ns>) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 celery-beat-deployment.yaml:25-61
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────



celery-claim0-persistentvolumeclaim.yaml (kubernetes)
=====================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 celery-claim0-persistentvolumeclaim.yaml:8-12
────────────────────────────────────────
   8 ┌   accessModes:
   9 │     - ReadWriteOnce
  10 │   resources:
  11 │     requests:
  12 └       storage: 100Mi
────────────────────────────────────────



celery-claim1-persistentvolumeclaim.yaml (kubernetes)
=====================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 celery-claim1-persistentvolumeclaim.yaml:8-12
────────────────────────────────────────
   8 ┌   accessModes:
   9 │     - ReadWriteOnce
  10 │   resources:
  11 │     requests:
  12 └       storage: 100Mi
────────────────────────────────────────



celery-deployment.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'celery' of Deployment 'celery' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 celery-deployment.yaml:27-66
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: CELERY_BROKER_URL
  29 │               valueFrom:
  30 │                 configMapKeyRef:
  31 │                   key: CELERY_BROKER_URL
  32 │                   name: env
  33 │             - name: CELERY_RESULT_BACKEND
  34 │               value: redis://redis:6379/0
  35 └             - name: DB_URI
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'celery' of Deployment 'celery' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 celery-deployment.yaml:27-66
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: CELERY_BROKER_URL
  29 │               valueFrom:
  30 │                 configMapKeyRef:
  31 │                   key: CELERY_BROKER_URL
  32 │                   name: env
  33 │             - name: CELERY_RESULT_BACKEND
  34 │               value: redis://redis:6379/0
  35 └             - name: DB_URI
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'celery' of 'deployment' 'celery' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 celery-deployment.yaml:27-66
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: CELERY_BROKER_URL
  29 │               valueFrom:
  30 │                 configMapKeyRef:
  31 │                   key: CELERY_BROKER_URL
  32 │                   name: env
  33 │             - name: CELERY_RESULT_BACKEND
  34 │               value: redis://redis:6379/0
  35 └             - name: DB_URI
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'celery' of Deployment 'celery' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 celery-deployment.yaml:27-66
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: CELERY_BROKER_URL
  29 │               valueFrom:
  30 │                 configMapKeyRef:
  31 │                   key: CELERY_BROKER_URL
  32 │                   name: env
  33 │             - name: CELERY_RESULT_BACKEND
  34 │               value: redis://redis:6379/0
  35 └             - name: DB_URI
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'celery' of Deployment 'celery' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 celery-deployment.yaml:27-66
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: CELERY_BROKER_URL
  29 │               valueFrom:
  30 │                 configMapKeyRef:
  31 │                   key: CELERY_BROKER_URL
  32 │                   name: env
  33 │             - name: CELERY_RESULT_BACKEND
  34 │               value: redis://redis:6379/0
  35 └             - name: DB_URI
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'celery' of Deployment 'celery' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 celery-deployment.yaml:27-66
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: CELERY_BROKER_URL
  29 │               valueFrom:
  30 │                 configMapKeyRef:
  31 │                   key: CELERY_BROKER_URL
  32 │                   name: env
  33 │             - name: CELERY_RESULT_BACKEND
  34 │               value: redis://redis:6379/0
  35 └             - name: DB_URI
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'celery' of Deployment 'celery' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 celery-deployment.yaml:27-66
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: CELERY_BROKER_URL
  29 │               valueFrom:
  30 │                 configMapKeyRef:
  31 │                   key: CELERY_BROKER_URL
  32 │                   name: env
  33 │             - name: CELERY_RESULT_BACKEND
  34 │               value: redis://redis:6379/0
  35 └             - name: DB_URI
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'celery' of Deployment 'celery' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 celery-deployment.yaml:27-66
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: CELERY_BROKER_URL
  29 │               valueFrom:
  30 │                 configMapKeyRef:
  31 │                   key: CELERY_BROKER_URL
  32 │                   name: env
  33 │             - name: CELERY_RESULT_BACKEND
  34 │               value: redis://redis:6379/0
  35 └             - name: DB_URI
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'celery' of Deployment 'celery' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 celery-deployment.yaml:27-66
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: CELERY_BROKER_URL
  29 │               valueFrom:
  30 │                 configMapKeyRef:
  31 │                   key: CELERY_BROKER_URL
  32 │                   name: env
  33 │             - name: CELERY_RESULT_BACKEND
  34 │               value: redis://redis:6379/0
  35 └             - name: DB_URI
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'celery' of Deployment 'celery' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 celery-deployment.yaml:27-66
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: CELERY_BROKER_URL
  29 │               valueFrom:
  30 │                 configMapKeyRef:
  31 │                   key: CELERY_BROKER_URL
  32 │                   name: env
  33 │             - name: CELERY_RESULT_BACKEND
  34 │               value: redis://redis:6379/0
  35 └             - name: DB_URI
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'celery' of Deployment 'celery' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 celery-deployment.yaml:27-66
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: CELERY_BROKER_URL
  29 │               valueFrom:
  30 │                 configMapKeyRef:
  31 │                   key: CELERY_BROKER_URL
  32 │                   name: env
  33 │             - name: CELERY_RESULT_BACKEND
  34 │               value: redis://redis:6379/0
  35 └             - name: DB_URI
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'celery' of Deployment 'celery' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 celery-deployment.yaml:27-66
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: CELERY_BROKER_URL
  29 │               valueFrom:
  30 │                 configMapKeyRef:
  31 │                   key: CELERY_BROKER_URL
  32 │                   name: env
  33 │             - name: CELERY_RESULT_BACKEND
  34 │               value: redis://redis:6379/0
  35 └             - name: DB_URI
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 celery-deployment.yaml:27-66
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: CELERY_BROKER_URL
  29 │               valueFrom:
  30 │                 configMapKeyRef:
  31 │                   key: CELERY_BROKER_URL
  32 │                   name: env
  33 │             - name: CELERY_RESULT_BACKEND
  34 │               value: redis://redis:6379/0
  35 └             - name: DB_URI
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 celery-deployment.yaml:11-74
────────────────────────────────────────
  11 ┌   replicas: 1
  12 │   selector:
  13 │     matchLabels:
  14 │       io.kompose.service: celery
  15 │   strategy:
  16 │     type: Recreate
  17 │   template:
  18 │     metadata:
  19 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "celery" of deployment "celery" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 celery-deployment.yaml:27-66
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: CELERY_BROKER_URL
  29 │               valueFrom:
  30 │                 configMapKeyRef:
  31 │                   key: CELERY_BROKER_URL
  32 │                   name: env
  33 │             - name: CELERY_RESULT_BACKEND
  34 │               value: redis://redis:6379/0
  35 └             - name: DB_URI
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 celery-deployment.yaml:27-66
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: CELERY_BROKER_URL
  29 │               valueFrom:
  30 │                 configMapKeyRef:
  31 │                   key: CELERY_BROKER_URL
  32 │                   name: env
  33 │             - name: CELERY_RESULT_BACKEND
  34 │               value: redis://redis:6379/0
  35 └             - name: DB_URI
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment celery in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 celery-deployment.yaml:4-9
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert
   6 │     kompose.version: 1.32.0 (HEAD)
   7 │   labels:
   8 │     io.kompose.service: celery
   9 └   name: celery
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container celery in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 celery-deployment.yaml:27-66
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: CELERY_BROKER_URL
  29 │               valueFrom:
  30 │                 configMapKeyRef:
  31 │                   key: CELERY_BROKER_URL
  32 │                   name: env
  33 │             - name: CELERY_RESULT_BACKEND
  34 │               value: redis://redis:6379/0
  35 └             - name: DB_URI
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment celery in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 celery-deployment.yaml:26-74
────────────────────────────────────────
  26 ┌       containers:
  27 │         - env:
  28 │             - name: CELERY_BROKER_URL
  29 │               valueFrom:
  30 │                 configMapKeyRef:
  31 │                   key: CELERY_BROKER_URL
  32 │                   name: env
  33 │             - name: CELERY_RESULT_BACKEND
  34 └               value: redis://redis:6379/0
  ..   
────────────────────────────────────────



celery-worker-deployment.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rengine-celery-worker' of Deployment 'rengine-celery-worker' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 celery-worker-deployment.yaml:25-60
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rengine-celery-worker' of Deployment 'rengine-celery-worker' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 celery-worker-deployment.yaml:25-60
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rengine-celery-worker' of 'deployment' 'rengine-celery-worker' in '<ns>' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 celery-worker-deployment.yaml:25-60
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rengine-celery-worker' of Deployment 'rengine-celery-worker' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 celery-worker-deployment.yaml:25-60
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rengine-celery-worker' of Deployment 'rengine-celery-worker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 celery-worker-deployment.yaml:25-60
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rengine-celery-worker' of Deployment 'rengine-celery-worker' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 celery-worker-deployment.yaml:25-60
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rengine-celery-worker' of Deployment 'rengine-celery-worker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 celery-worker-deployment.yaml:25-60
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rengine-celery-worker' of Deployment 'rengine-celery-worker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 celery-worker-deployment.yaml:25-60
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rengine-celery-worker' of Deployment 'rengine-celery-worker' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 celery-worker-deployment.yaml:25-60
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rengine-celery-worker' of Deployment 'rengine-celery-worker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 celery-worker-deployment.yaml:25-60
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rengine-celery-worker' of Deployment 'rengine-celery-worker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 celery-worker-deployment.yaml:25-60
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 celery-worker-deployment.yaml:25-60
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 celery-worker-deployment.yaml:11-63
────────────────────────────────────────
  11 ┌   replicas: 1
  12 │   selector:
  13 │     matchLabels:
  14 │       app: rengine-celery-worker
  15 │   strategy:
  16 │     type: Recreate
  17 │   template:
  18 │     metadata:
  19 └       creationTimestamp: null
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rengine-celery-worker" of deployment "rengine-celery-worker" in "<ns>" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 celery-worker-deployment.yaml:25-60
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 celery-worker-deployment.yaml:25-60
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rengine-celery-worker in <ns> namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 celery-worker-deployment.yaml:25-60
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment rengine-celery-worker in <ns> namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 celery-worker-deployment.yaml:24-63
────────────────────────────────────────
  24 ┌       containers:
  25 │       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 └         - name: MIN_CONCURRENCY
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rengine-celery-worker in deployment rengine-celery-worker (namespace: <ns>) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 celery-worker-deployment.yaml:25-60
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: CELERY_BROKER
  27 │           value: redis://rengine-redis-cache:6379/0
  28 │         - name: CELERY_BACKEND
  29 │           value: redis://rengine-redis-cache:6379/0
  30 │         - name: MAX_CONCURRENCY
  31 │           value: '80'
  32 │         - name: MIN_CONCURRENCY
  33 └           value: '1'
  ..   
────────────────────────────────────────



celsius-deployment.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'celsiusapp' of Deployment 'api' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 celsius-deployment.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: celsiusapp
  17 │         image: kubedevio/api-conversao:v1-machine-name
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'celsiusapp' of Deployment 'api' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 celsius-deployment.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: celsiusapp
  17 │         image: kubedevio/api-conversao:v1-machine-name
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'celsiusapp' of 'deployment' 'api' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 celsius-deployment.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: celsiusapp
  17 │         image: kubedevio/api-conversao:v1-machine-name
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'celsiusapp' of Deployment 'api' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 celsius-deployment.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: celsiusapp
  17 │         image: kubedevio/api-conversao:v1-machine-name
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'celsiusapp' of Deployment 'api' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 celsius-deployment.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: celsiusapp
  17 │         image: kubedevio/api-conversao:v1-machine-name
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'celsiusapp' of Deployment 'api' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 celsius-deployment.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: celsiusapp
  17 │         image: kubedevio/api-conversao:v1-machine-name
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'celsiusapp' of Deployment 'api' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 celsius-deployment.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: celsiusapp
  17 │         image: kubedevio/api-conversao:v1-machine-name
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'celsiusapp' of Deployment 'api' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 celsius-deployment.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: celsiusapp
  17 │         image: kubedevio/api-conversao:v1-machine-name
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'celsiusapp' of Deployment 'api' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 celsius-deployment.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: celsiusapp
  17 │         image: kubedevio/api-conversao:v1-machine-name
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 celsius-deployment.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: celsiusapp
  17 │         image: kubedevio/api-conversao:v1-machine-name
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 celsius-deployment.yaml:6-21
────────────────────────────────────────
   6 ┌   replicas: 3
   7 │   selector:
   8 │     matchLabels:
   9 │       app: Celsius
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: Celsius
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "celsiusapp" of deployment "api" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 celsius-deployment.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: celsiusapp
  17 │         image: kubedevio/api-conversao:v1-machine-name
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 celsius-deployment.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: celsiusapp
  17 │         image: kubedevio/api-conversao:v1-machine-name
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment api in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 celsius-deployment.yaml:4
────────────────────────────────────────
   4 [   name: api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container api in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 celsius-deployment.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: celsiusapp
  17 │         image: kubedevio/api-conversao:v1-machine-name
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment api in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 celsius-deployment.yaml:15-21
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: celsiusapp
  17 │         image: kubedevio/api-conversao:v1-machine-name
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container celsiusapp in deployment api (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 celsius-deployment.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: celsiusapp
  17 │         image: kubedevio/api-conversao:v1-machine-name
  18 │         resources:
  19 │           limits:
  20 │             memory: 128Mi
  21 └             cpu: 500m
────────────────────────────────────────



celsius-deployment_1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 celsius-deployment_1.yaml:6-10
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: Celsius
   8 │   ports:
   9 │   - port: 80
  10 └     targetPort: 8080
────────────────────────────────────────



celsius-deployment_2.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 celsius-deployment_2.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: Celsius
   8 │   ports:
   9 │   - port: 80
  10 │     targetPort: 8080
  11 └   type: NodePort
────────────────────────────────────────



centos-deployment.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'centos' of Deployment 'centos' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 centos-deployment.yaml:20-26
────────────────────────────────────────
  20 ┌       - image: docker.io/library/centos:7
  21 │         imagePullPolicy: Always
  22 │         name: centos
  23 │         command:
  24 │         - sleep
  25 │         args:
  26 └         - infinity
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'centos' of Deployment 'centos' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 centos-deployment.yaml:20-26
────────────────────────────────────────
  20 ┌       - image: docker.io/library/centos:7
  21 │         imagePullPolicy: Always
  22 │         name: centos
  23 │         command:
  24 │         - sleep
  25 │         args:
  26 └         - infinity
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'centos' of 'deployment' 'centos' in 'services' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 centos-deployment.yaml:20-26
────────────────────────────────────────
  20 ┌       - image: docker.io/library/centos:7
  21 │         imagePullPolicy: Always
  22 │         name: centos
  23 │         command:
  24 │         - sleep
  25 │         args:
  26 └         - infinity
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'centos' of Deployment 'centos' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 centos-deployment.yaml:20-26
────────────────────────────────────────
  20 ┌       - image: docker.io/library/centos:7
  21 │         imagePullPolicy: Always
  22 │         name: centos
  23 │         command:
  24 │         - sleep
  25 │         args:
  26 └         - infinity
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'centos' of Deployment 'centos' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 centos-deployment.yaml:20-26
────────────────────────────────────────
  20 ┌       - image: docker.io/library/centos:7
  21 │         imagePullPolicy: Always
  22 │         name: centos
  23 │         command:
  24 │         - sleep
  25 │         args:
  26 └         - infinity
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'centos' of Deployment 'centos' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 centos-deployment.yaml:20-26
────────────────────────────────────────
  20 ┌       - image: docker.io/library/centos:7
  21 │         imagePullPolicy: Always
  22 │         name: centos
  23 │         command:
  24 │         - sleep
  25 │         args:
  26 └         - infinity
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'centos' of Deployment 'centos' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 centos-deployment.yaml:20-26
────────────────────────────────────────
  20 ┌       - image: docker.io/library/centos:7
  21 │         imagePullPolicy: Always
  22 │         name: centos
  23 │         command:
  24 │         - sleep
  25 │         args:
  26 └         - infinity
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'centos' of Deployment 'centos' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 centos-deployment.yaml:20-26
────────────────────────────────────────
  20 ┌       - image: docker.io/library/centos:7
  21 │         imagePullPolicy: Always
  22 │         name: centos
  23 │         command:
  24 │         - sleep
  25 │         args:
  26 └         - infinity
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'centos' of Deployment 'centos' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 centos-deployment.yaml:20-26
────────────────────────────────────────
  20 ┌       - image: docker.io/library/centos:7
  21 │         imagePullPolicy: Always
  22 │         name: centos
  23 │         command:
  24 │         - sleep
  25 │         args:
  26 └         - infinity
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'centos' of Deployment 'centos' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 centos-deployment.yaml:20-26
────────────────────────────────────────
  20 ┌       - image: docker.io/library/centos:7
  21 │         imagePullPolicy: Always
  22 │         name: centos
  23 │         command:
  24 │         - sleep
  25 │         args:
  26 └         - infinity
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'centos' of Deployment 'centos' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 centos-deployment.yaml:20-26
────────────────────────────────────────
  20 ┌       - image: docker.io/library/centos:7
  21 │         imagePullPolicy: Always
  22 │         name: centos
  23 │         command:
  24 │         - sleep
  25 │         args:
  26 └         - infinity
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 centos-deployment.yaml:20-26
────────────────────────────────────────
  20 ┌       - image: docker.io/library/centos:7
  21 │         imagePullPolicy: Always
  22 │         name: centos
  23 │         command:
  24 │         - sleep
  25 │         args:
  26 └         - infinity
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 centos-deployment.yaml:9-27
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       app.kubernetes.io/name: centos
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app.kubernetes.io/name: centos
  16 │     spec:
  17 └       imagePullSecrets:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "centos" of deployment "centos" in "services" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 centos-deployment.yaml:20-26
────────────────────────────────────────
  20 ┌       - image: docker.io/library/centos:7
  21 │         imagePullPolicy: Always
  22 │         name: centos
  23 │         command:
  24 │         - sleep
  25 │         args:
  26 └         - infinity
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 centos-deployment.yaml:20-26
────────────────────────────────────────
  20 ┌       - image: docker.io/library/centos:7
  21 │         imagePullPolicy: Always
  22 │         name: centos
  23 │         command:
  24 │         - sleep
  25 │         args:
  26 └         - infinity
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container centos in services namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 centos-deployment.yaml:20-26
────────────────────────────────────────
  20 ┌       - image: docker.io/library/centos:7
  21 │         imagePullPolicy: Always
  22 │         name: centos
  23 │         command:
  24 │         - sleep
  25 │         args:
  26 └         - infinity
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment centos in services namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 centos-deployment.yaml:17-27
────────────────────────────────────────
  17 ┌       imagePullSecrets:
  18 │       - name: docker-io
  19 │       containers:
  20 │       - image: docker.io/library/centos:7
  21 │         imagePullPolicy: Always
  22 │         name: centos
  23 │         command:
  24 │         - sleep
  25 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container centos in deployment centos (namespace: services) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 centos-deployment.yaml:20-26
────────────────────────────────────────
  20 ┌       - image: docker.io/library/centos:7
  21 │         imagePullPolicy: Always
  22 │         name: centos
  23 │         command:
  24 │         - sleep
  25 │         args:
  26 └         - infinity
────────────────────────────────────────



centos8-deployment.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'centos' of Deployment 'centos8' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 centos8-deployment.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: centos
  25 │         image: centos:centos8
  26 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'centos' of Deployment 'centos8' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 centos8-deployment.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: centos
  25 │         image: centos:centos8
  26 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'centos' of 'deployment' 'centos8' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 centos8-deployment.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: centos
  25 │         image: centos:centos8
  26 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'centos' of Deployment 'centos8' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 centos8-deployment.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: centos
  25 │         image: centos:centos8
  26 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'centos' of Deployment 'centos8' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 centos8-deployment.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: centos
  25 │         image: centos:centos8
  26 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'centos' of Deployment 'centos8' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 centos8-deployment.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: centos
  25 │         image: centos:centos8
  26 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'centos' of Deployment 'centos8' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 centos8-deployment.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: centos
  25 │         image: centos:centos8
  26 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'centos' of Deployment 'centos8' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 centos8-deployment.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: centos
  25 │         image: centos:centos8
  26 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'centos' of Deployment 'centos8' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 centos8-deployment.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: centos
  25 │         image: centos:centos8
  26 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'centos' of Deployment 'centos8' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 centos8-deployment.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: centos
  25 │         image: centos:centos8
  26 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'centos' of Deployment 'centos8' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 centos8-deployment.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: centos
  25 │         image: centos:centos8
  26 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 centos8-deployment.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: centos
  25 │         image: centos:centos8
  26 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 centos8-deployment.yaml:14-26
────────────────────────────────────────
  14 ┌   replicas: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       name: centos8
  18 │   template:
  19 │     metadata:
  20 │       labels:
  21 │         name: centos8
  22 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "centos" of deployment "centos8" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 centos8-deployment.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: centos
  25 │         image: centos:centos8
  26 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 centos8-deployment.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: centos
  25 │         image: centos:centos8
  26 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment centos8 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 centos8-deployment.yaml:10-12
────────────────────────────────────────
  10 ┌   name: centos8
  11 │   labels:
  12 └     name: centos8
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container centos8 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 centos8-deployment.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: centos
  25 │         image: centos:centos8
  26 └         command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment centos8 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 centos8-deployment.yaml:23-26
────────────────────────────────────────
  23 ┌       containers:
  24 │       - name: centos
  25 │         image: centos:centos8
  26 └         command: ["sleep", "infinity"]
────────────────────────────────────────



central-db-config.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'central-db-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"POSTGRES_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'central-db-config' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



central-db-pv-pvc.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 central-db-pv-pvc.yaml:6-13
────────────────────────────────────────
   6 ┌   capacity:
   7 │     storage: 1Gi
   8 │   volumeMode: Filesystem
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   storageClassName: manual
  12 │   hostPath:
  13 └     path: /mnt/central-db/data
────────────────────────────────────────



central-db-pv-pvc_1.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 central-db-pv-pvc_1.yaml:6-11
────────────────────────────────────────
   6 ┌   resources:
   7 │     requests:
   8 │       storage: 1Gi
   9 │   storageClassName: manual
  10 │   accessModes:
  11 └   - ReadWriteOnce
────────────────────────────────────────



central-lib-service.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 central-lib-service.yaml:6-11
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: central-lib
   9 │   ports:
  10 │   - port: 80
  11 └     targetPort: 80
────────────────────────────────────────



central-lib.yaml (kubernetes)
=============================
Tests: 131 (SUCCESSES: 95, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 22, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'central' of Deployment 'central-lib' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 central-lib.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: central
  16 │         image: fstefanov/cc-projekat:central
  17 │         imagePullPolicy: Always
  18 │         env: 
  19 │         - name: DB_HOST
  20 │           value: "localhost"
  21 │         ports:  
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'central-db' of Deployment 'central-lib' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 central-lib.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: central-db
  25 │         image: postgres
  26 │         ports:
  27 │           - containerPort: 5432
  28 │         envFrom:
  29 │           - configMapRef:
  30 │               name: central-db-config
  31 │         volumeMounts: 
  32 │           - mountPath: /var/lib/postgresql/data
  33 └             name: central-db-vol
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'central' of Deployment 'central-lib' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 central-lib.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: central
  16 │         image: fstefanov/cc-projekat:central
  17 │         imagePullPolicy: Always
  18 │         env: 
  19 │         - name: DB_HOST
  20 │           value: "localhost"
  21 │         ports:  
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'central-db' of Deployment 'central-lib' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 central-lib.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: central-db
  25 │         image: postgres
  26 │         ports:
  27 │           - containerPort: 5432
  28 │         envFrom:
  29 │           - configMapRef:
  30 │               name: central-db-config
  31 │         volumeMounts: 
  32 │           - mountPath: /var/lib/postgresql/data
  33 └             name: central-db-vol
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'central' of 'deployment' 'central-lib' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 central-lib.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: central
  16 │         image: fstefanov/cc-projekat:central
  17 │         imagePullPolicy: Always
  18 │         env: 
  19 │         - name: DB_HOST
  20 │           value: "localhost"
  21 │         ports:  
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'central-db' of 'deployment' 'central-lib' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 central-lib.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: central-db
  25 │         image: postgres
  26 │         ports:
  27 │           - containerPort: 5432
  28 │         envFrom:
  29 │           - configMapRef:
  30 │               name: central-db-config
  31 │         volumeMounts: 
  32 │           - mountPath: /var/lib/postgresql/data
  33 └             name: central-db-vol
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'central' of Deployment 'central-lib' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 central-lib.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: central
  16 │         image: fstefanov/cc-projekat:central
  17 │         imagePullPolicy: Always
  18 │         env: 
  19 │         - name: DB_HOST
  20 │           value: "localhost"
  21 │         ports:  
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'central-db' of Deployment 'central-lib' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 central-lib.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: central-db
  25 │         image: postgres
  26 │         ports:
  27 │           - containerPort: 5432
  28 │         envFrom:
  29 │           - configMapRef:
  30 │               name: central-db-config
  31 │         volumeMounts: 
  32 │           - mountPath: /var/lib/postgresql/data
  33 └             name: central-db-vol
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'central' of Deployment 'central-lib' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 central-lib.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: central
  16 │         image: fstefanov/cc-projekat:central
  17 │         imagePullPolicy: Always
  18 │         env: 
  19 │         - name: DB_HOST
  20 │           value: "localhost"
  21 │         ports:  
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'central-db' of Deployment 'central-lib' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 central-lib.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: central-db
  25 │         image: postgres
  26 │         ports:
  27 │           - containerPort: 5432
  28 │         envFrom:
  29 │           - configMapRef:
  30 │               name: central-db-config
  31 │         volumeMounts: 
  32 │           - mountPath: /var/lib/postgresql/data
  33 └             name: central-db-vol
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'central-db' of Deployment 'central-lib' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 central-lib.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: central-db
  25 │         image: postgres
  26 │         ports:
  27 │           - containerPort: 5432
  28 │         envFrom:
  29 │           - configMapRef:
  30 │               name: central-db-config
  31 │         volumeMounts: 
  32 │           - mountPath: /var/lib/postgresql/data
  33 └             name: central-db-vol
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'central' of Deployment 'central-lib' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 central-lib.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: central
  16 │         image: fstefanov/cc-projekat:central
  17 │         imagePullPolicy: Always
  18 │         env: 
  19 │         - name: DB_HOST
  20 │           value: "localhost"
  21 │         ports:  
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'central-db' of Deployment 'central-lib' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 central-lib.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: central-db
  25 │         image: postgres
  26 │         ports:
  27 │           - containerPort: 5432
  28 │         envFrom:
  29 │           - configMapRef:
  30 │               name: central-db-config
  31 │         volumeMounts: 
  32 │           - mountPath: /var/lib/postgresql/data
  33 └             name: central-db-vol
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'central' of Deployment 'central-lib' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 central-lib.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: central
  16 │         image: fstefanov/cc-projekat:central
  17 │         imagePullPolicy: Always
  18 │         env: 
  19 │         - name: DB_HOST
  20 │           value: "localhost"
  21 │         ports:  
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'central-db' of Deployment 'central-lib' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 central-lib.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: central-db
  25 │         image: postgres
  26 │         ports:
  27 │           - containerPort: 5432
  28 │         envFrom:
  29 │           - configMapRef:
  30 │               name: central-db-config
  31 │         volumeMounts: 
  32 │           - mountPath: /var/lib/postgresql/data
  33 └             name: central-db-vol
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'central' of Deployment 'central-lib' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 central-lib.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: central
  16 │         image: fstefanov/cc-projekat:central
  17 │         imagePullPolicy: Always
  18 │         env: 
  19 │         - name: DB_HOST
  20 │           value: "localhost"
  21 │         ports:  
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'central-db' of Deployment 'central-lib' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 central-lib.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: central-db
  25 │         image: postgres
  26 │         ports:
  27 │           - containerPort: 5432
  28 │         envFrom:
  29 │           - configMapRef:
  30 │               name: central-db-config
  31 │         volumeMounts: 
  32 │           - mountPath: /var/lib/postgresql/data
  33 └             name: central-db-vol
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'central' of Deployment 'central-lib' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 central-lib.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: central
  16 │         image: fstefanov/cc-projekat:central
  17 │         imagePullPolicy: Always
  18 │         env: 
  19 │         - name: DB_HOST
  20 │           value: "localhost"
  21 │         ports:  
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'central-db' of Deployment 'central-lib' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 central-lib.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: central-db
  25 │         image: postgres
  26 │         ports:
  27 │           - containerPort: 5432
  28 │         envFrom:
  29 │           - configMapRef:
  30 │               name: central-db-config
  31 │         volumeMounts: 
  32 │           - mountPath: /var/lib/postgresql/data
  33 └             name: central-db-vol
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'central' of Deployment 'central-lib' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 central-lib.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: central
  16 │         image: fstefanov/cc-projekat:central
  17 │         imagePullPolicy: Always
  18 │         env: 
  19 │         - name: DB_HOST
  20 │           value: "localhost"
  21 │         ports:  
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'central-db' of Deployment 'central-lib' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 central-lib.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: central-db
  25 │         image: postgres
  26 │         ports:
  27 │           - containerPort: 5432
  28 │         envFrom:
  29 │           - configMapRef:
  30 │               name: central-db-config
  31 │         volumeMounts: 
  32 │           - mountPath: /var/lib/postgresql/data
  33 └             name: central-db-vol
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'central' of Deployment 'central-lib' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 central-lib.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: central
  16 │         image: fstefanov/cc-projekat:central
  17 │         imagePullPolicy: Always
  18 │         env: 
  19 │         - name: DB_HOST
  20 │           value: "localhost"
  21 │         ports:  
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'central-db' of Deployment 'central-lib' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 central-lib.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: central-db
  25 │         image: postgres
  26 │         ports:
  27 │           - containerPort: 5432
  28 │         envFrom:
  29 │           - configMapRef:
  30 │               name: central-db-config
  31 │         volumeMounts: 
  32 │           - mountPath: /var/lib/postgresql/data
  33 └             name: central-db-vol
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 central-lib.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: central-db
  25 │         image: postgres
  26 │         ports:
  27 │           - containerPort: 5432
  28 │         envFrom:
  29 │           - configMapRef:
  30 │               name: central-db-config
  31 │         volumeMounts: 
  32 │           - mountPath: /var/lib/postgresql/data
  33 └             name: central-db-vol
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 central-lib.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: central
  16 │         image: fstefanov/cc-projekat:central
  17 │         imagePullPolicy: Always
  18 │         env: 
  19 │         - name: DB_HOST
  20 │           value: "localhost"
  21 │         ports:  
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 central-lib.yaml:6-38
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: central-lib
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: central-lib
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "central" of deployment "central-lib" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 central-lib.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: central
  16 │         image: fstefanov/cc-projekat:central
  17 │         imagePullPolicy: Always
  18 │         env: 
  19 │         - name: DB_HOST
  20 │           value: "localhost"
  21 │         ports:  
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "central-db" of deployment "central-lib" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 central-lib.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: central-db
  25 │         image: postgres
  26 │         ports:
  27 │           - containerPort: 5432
  28 │         envFrom:
  29 │           - configMapRef:
  30 │               name: central-db-config
  31 │         volumeMounts: 
  32 │           - mountPath: /var/lib/postgresql/data
  33 └             name: central-db-vol
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 central-lib.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: central-db
  25 │         image: postgres
  26 │         ports:
  27 │           - containerPort: 5432
  28 │         envFrom:
  29 │           - configMapRef:
  30 │               name: central-db-config
  31 │         volumeMounts: 
  32 │           - mountPath: /var/lib/postgresql/data
  33 └             name: central-db-vol
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 central-lib.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: central
  16 │         image: fstefanov/cc-projekat:central
  17 │         imagePullPolicy: Always
  18 │         env: 
  19 │         - name: DB_HOST
  20 │           value: "localhost"
  21 │         ports:  
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment central-lib in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 central-lib.yaml:4
────────────────────────────────────────
   4 [   name: central-lib
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment central-lib in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container central-lib in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 central-lib.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: central
  16 │         image: fstefanov/cc-projekat:central
  17 │         imagePullPolicy: Always
  18 │         env: 
  19 │         - name: DB_HOST
  20 │           value: "localhost"
  21 │         ports:  
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container central-lib in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 central-lib.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: central-db
  25 │         image: postgres
  26 │         ports:
  27 │           - containerPort: 5432
  28 │         envFrom:
  29 │           - configMapRef:
  30 │               name: central-db-config
  31 │         volumeMounts: 
  32 │           - mountPath: /var/lib/postgresql/data
  33 └             name: central-db-vol
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment central-lib in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 central-lib.yaml:14-38
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: central
  16 │         image: fstefanov/cc-projekat:central
  17 │         imagePullPolicy: Always
  18 │         env: 
  19 │         - name: DB_HOST
  20 │           value: "localhost"
  21 │         ports:  
  22 └           - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container central in deployment central-lib (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 central-lib.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: central
  16 │         image: fstefanov/cc-projekat:central
  17 │         imagePullPolicy: Always
  18 │         env: 
  19 │         - name: DB_HOST
  20 │           value: "localhost"
  21 │         ports:  
  22 └           - containerPort: 80
────────────────────────────────────────



ceph-provisionar1_1.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ceph-provisionar1_1.yaml:6-10
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 └       storage: 2Gi
────────────────────────────────────────



ceph-provisionar1_2.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ceph-provisionar1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ceph-provisionar1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ceph-busybox' of 'pod' 'ceph-pod1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ceph-provisionar1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ceph-provisionar1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ceph-provisionar1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ceph-busybox' of Pod 'ceph-pod1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ceph-provisionar1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ceph-provisionar1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ceph-provisionar1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ceph-provisionar1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ceph-provisionar1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ceph-provisionar1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ceph-provisionar1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ceph-provisionar1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ceph-provisionar1_2.yaml:6-19
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 └       mountPath: /usr/share/busybox
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ceph-busybox" of pod "ceph-pod1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ceph-provisionar1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ceph-provisionar1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod ceph-pod1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ceph-provisionar1_2.yaml:4
────────────────────────────────────────
   4 [   name: ceph-pod1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ceph-pod1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ceph-provisionar1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod ceph-pod1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ceph-provisionar1_2.yaml:6-19
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 └       mountPath: /usr/share/busybox
  ..   
────────────────────────────────────────



ceph-provisionar2_1.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ceph-provisionar2_1.yaml:6-10
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 └       storage: 2Gi
────────────────────────────────────────



ceph-provisionar2_2.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ceph-provisionar2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ceph-provisionar2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ceph-busybox' of 'pod' 'ceph-pod1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ceph-provisionar2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ceph-provisionar2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ceph-provisionar2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ceph-busybox' of Pod 'ceph-pod1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ceph-provisionar2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ceph-provisionar2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ceph-provisionar2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ceph-provisionar2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ceph-provisionar2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ceph-provisionar2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ceph-provisionar2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ceph-provisionar2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ceph-provisionar2_2.yaml:6-19
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 └       mountPath: /usr/share/busybox
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ceph-busybox" of pod "ceph-pod1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ceph-provisionar2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ceph-provisionar2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod ceph-pod1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ceph-provisionar2_2.yaml:4
────────────────────────────────────────
   4 [   name: ceph-pod1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ceph-pod1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ceph-provisionar2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod ceph-pod1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ceph-provisionar2_2.yaml:6-19
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 └       mountPath: /usr/share/busybox
  ..   
────────────────────────────────────────



ceph-provisionar3_1.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ceph-provisionar3_1.yaml:6-10
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 └       storage: 2Gi
────────────────────────────────────────



ceph-provisionar3_2.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ceph-provisionar3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ceph-provisionar3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ceph-busybox' of 'pod' 'ceph-pod1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ceph-provisionar3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ceph-provisionar3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ceph-provisionar3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ceph-busybox' of Pod 'ceph-pod1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ceph-provisionar3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ceph-provisionar3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ceph-provisionar3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ceph-provisionar3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ceph-provisionar3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ceph-provisionar3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ceph-provisionar3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ceph-provisionar3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ceph-provisionar3_2.yaml:6-19
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 └       mountPath: /usr/share/busybox
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ceph-busybox" of pod "ceph-pod1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ceph-provisionar3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ceph-provisionar3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod ceph-pod1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ceph-provisionar3_2.yaml:4
────────────────────────────────────────
   4 [   name: ceph-pod1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ceph-pod1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ceph-provisionar3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod ceph-pod1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ceph-provisionar3_2.yaml:6-19
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 └       mountPath: /usr/share/busybox
  ..   
────────────────────────────────────────



ceph-provisionar_1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ceph-provisionar_1.yaml:6-10
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 └       storage: 2Gi
────────────────────────────────────────



ceph-provisionar_2.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ceph-provisionar_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ceph-provisionar_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ceph-busybox' of 'pod' 'ceph-pod1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ceph-provisionar_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ceph-provisionar_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ceph-provisionar_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ceph-busybox' of Pod 'ceph-pod1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ceph-provisionar_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ceph-provisionar_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ceph-provisionar_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ceph-provisionar_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ceph-provisionar_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ceph-provisionar_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ceph-busybox' of Pod 'ceph-pod1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ceph-provisionar_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ceph-provisionar_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ceph-provisionar_2.yaml:6-19
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 └       mountPath: /usr/share/busybox
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ceph-busybox" of pod "ceph-pod1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ceph-provisionar_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ceph-provisionar_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod ceph-pod1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ceph-provisionar_2.yaml:4
────────────────────────────────────────
   4 [   name: ceph-pod1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ceph-pod1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ceph-provisionar_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 │       mountPath: /usr/share/busybox
  15 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod ceph-pod1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ceph-provisionar_2.yaml:6-19
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: ceph-busybox
   8 │     image: busybox
   9 │     command:
  10 │     - sleep
  11 │     - '60000'
  12 │     volumeMounts:
  13 │     - name: ceph-vol1
  14 └       mountPath: /usr/share/busybox
  ..   
────────────────────────────────────────



ceph-sc.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ceph-sc.yaml:13-18
────────────────────────────────────────
  13 ┌   accessModes:
  14 │     - ReadWriteOnce
  15 │   resources:
  16 │     requests:
  17 │       storage: "8Gi" # Specify desired size, e.g., "10Gi"
  18 └   storageClassName: rook-ceph-block
────────────────────────────────────────



ceph.test-sc-block-rwo_1.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ceph.test-sc-block-rwo_1.yaml:7-13
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   volumeMode: Filesystem
  10 │   resources:
  11 │     requests:
  12 │       storage: 1Gi
  13 └   storageClassName: rook-ceph-block
────────────────────────────────────────



ceph.yaml (kubernetes)
======================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ceph.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteMany
   8 │   resources:
   9 │     requests:
  10 │       storage: 50Gi
  11 └   storageClassName: rook-cephfs
────────────────────────────────────────



ceph1.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ceph1.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │     - ReadWriteMany
   8 │   resources:
   9 │     requests:
  10 │       storage: 5Gi
  11 └   storageClassName: rook-cephfs 
────────────────────────────────────────



ceph10.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ceph10.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │     - ReadWriteMany
   8 │   resources:
   9 │     requests:
  10 │       storage: 5Gi
  11 └   storageClassName: rook-cephfs 
────────────────────────────────────────



ceph11.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ceph11.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │     - ReadWriteMany
   8 │   resources:
   9 │     requests:
  10 │       storage: 300Gi
  11 └   storageClassName: rook-cephfs 
────────────────────────────────────────



ceph12.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ceph12.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │     - ReadWriteMany
   8 │   resources:
   9 │     requests:
  10 │       storage: 10Gi
  11 └   storageClassName: rook-cephfs 
────────────────────────────────────────



ceph2.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ceph2.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │     - ReadWriteMany
   8 │   resources:
   9 │     requests:
  10 │       storage: 5Gi
  11 └   storageClassName: rook-cephfs 
────────────────────────────────────────



ceph3.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ceph3.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │     - ReadWriteMany
   8 │   resources:
   9 │     requests:
  10 │       storage: 20Gi
  11 └   storageClassName: rook-cephfs 
────────────────────────────────────────



ceph4.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ceph4.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │     - ReadWriteMany
   8 │   resources:
   9 │     requests:
  10 │       storage: 5Gi
  11 └   storageClassName: rook-cephfs 
────────────────────────────────────────



ceph5.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ceph5.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │     - ReadWriteMany
   8 │   resources:
   9 │     requests:
  10 │       storage: 5Gi
  11 └   storageClassName: rook-cephfs 
────────────────────────────────────────



ceph6.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ceph6.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │     - ReadWriteMany
   8 │   resources:
   9 │     requests:
  10 │       storage: 5Gi
  11 └   storageClassName: rook-cephfs 
────────────────────────────────────────



ceph7.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ceph7.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │     - ReadWriteMany
   8 │   resources:
   9 │     requests:
  10 │       storage: 5Gi
  11 └   storageClassName: rook-cephfs 
────────────────────────────────────────



ceph8.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ceph8.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │     - ReadWriteMany
   8 │   resources:
   9 │     requests:
  10 │       storage: 5Gi
  11 └   storageClassName: rook-cephfs 
────────────────────────────────────────



ceph9.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ceph9.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │     - ReadWriteMany
   8 │   resources:
   9 │     requests:
  10 │       storage: 5Gi
  11 └   storageClassName: rook-cephfs 
────────────────────────────────────────



ceph_1.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ceph_1.yaml:6-11
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteMany
   8 │   resources:
   9 │     requests:
  10 │       storage: 50Gi
  11 └   storageClassName: rook-cephfs
────────────────────────────────────────



cephfs-pvc.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cephfs-pvc.yaml:6-12
────────────────────────────────────────
   6 ┌   resources:
   7 │     requests:
   8 │       storage: 5Gi
   9 │   accessModes:
  10 │     - ReadWriteMany
  11 │   storageClassName: rook-cephfs
  12 └   volumeMode: Filesystem
────────────────────────────────────────



cephfs-with-secret.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cephfs-rw' of Pod 'cephfs2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cephfs-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cephfs-rw' of Pod 'cephfs2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cephfs-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cephfs-rw' of 'pod' 'cephfs2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cephfs-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cephfs-rw' of Pod 'cephfs2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cephfs-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cephfs-rw' of Pod 'cephfs2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cephfs-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cephfs-rw' of Pod 'cephfs2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cephfs-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cephfs-rw' of Pod 'cephfs2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cephfs-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cephfs-rw' of Pod 'cephfs2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cephfs-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cephfs-rw' of Pod 'cephfs2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cephfs-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cephfs-rw' of Pod 'cephfs2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cephfs-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cephfs-rw' of Pod 'cephfs2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cephfs-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cephfs-rw' of Pod 'cephfs2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cephfs-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cephfs-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cephfs-with-secret.yaml:6-22
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 │       name: cephfs
  12 │   volumes:
  13 │   - name: cephfs
  14 └     cephfs:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cephfs-rw" of pod "cephfs2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cephfs-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cephfs-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cephfs2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cephfs-with-secret.yaml:4
────────────────────────────────────────
   4 [   name: cephfs2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cephfs2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cephfs-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cephfs2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cephfs-with-secret.yaml:6-22
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 │       name: cephfs
  12 │   volumes:
  13 │   - name: cephfs
  14 └     cephfs:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cephfs-rw in pod cephfs2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cephfs-with-secret.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────



cephfs-with-secret1.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cephfs-rw' of Pod 'cephfs2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cephfs-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cephfs-rw' of Pod 'cephfs2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cephfs-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cephfs-rw' of 'pod' 'cephfs2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cephfs-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cephfs-rw' of Pod 'cephfs2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cephfs-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cephfs-rw' of Pod 'cephfs2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cephfs-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cephfs-rw' of Pod 'cephfs2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cephfs-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cephfs-rw' of Pod 'cephfs2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cephfs-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cephfs-rw' of Pod 'cephfs2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cephfs-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cephfs-rw' of Pod 'cephfs2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cephfs-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cephfs-rw' of Pod 'cephfs2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cephfs-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cephfs-rw' of Pod 'cephfs2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cephfs-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cephfs-rw' of Pod 'cephfs2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cephfs-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cephfs-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cephfs-with-secret1.yaml:6-22
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 │       name: cephfs
  12 │   volumes:
  13 │   - name: cephfs
  14 └     cephfs:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cephfs-rw" of pod "cephfs2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cephfs-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cephfs-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cephfs2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cephfs-with-secret1.yaml:4
────────────────────────────────────────
   4 [   name: cephfs2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cephfs2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cephfs-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cephfs2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cephfs-with-secret1.yaml:6-22
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 │       name: cephfs
  12 │   volumes:
  13 │   - name: cephfs
  14 └     cephfs:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cephfs-rw in pod cephfs2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cephfs-with-secret1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────



cephfs-with-secret2.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cephfs-rw' of Pod 'cephfs2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cephfs-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cephfs-rw' of Pod 'cephfs2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cephfs-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cephfs-rw' of 'pod' 'cephfs2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cephfs-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cephfs-rw' of Pod 'cephfs2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cephfs-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cephfs-rw' of Pod 'cephfs2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cephfs-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cephfs-rw' of Pod 'cephfs2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cephfs-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cephfs-rw' of Pod 'cephfs2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cephfs-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cephfs-rw' of Pod 'cephfs2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cephfs-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cephfs-rw' of Pod 'cephfs2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cephfs-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cephfs-rw' of Pod 'cephfs2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cephfs-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cephfs-rw' of Pod 'cephfs2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cephfs-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cephfs-rw' of Pod 'cephfs2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cephfs-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cephfs-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cephfs-with-secret2.yaml:6-22
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 │       name: cephfs
  12 │   volumes:
  13 │   - name: cephfs
  14 └     cephfs:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cephfs-rw" of pod "cephfs2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cephfs-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cephfs-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cephfs2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cephfs-with-secret2.yaml:4
────────────────────────────────────────
   4 [   name: cephfs2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cephfs2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cephfs-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cephfs2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cephfs-with-secret2.yaml:6-22
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 │       name: cephfs
  12 │   volumes:
  13 │   - name: cephfs
  14 └     cephfs:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cephfs-rw in pod cephfs2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cephfs-with-secret2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────



cephfs.yaml (kubernetes)
========================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cephfs-rw' of Pod 'cephfs' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cephfs.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cephfs-rw' of Pod 'cephfs' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cephfs.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cephfs-rw' of 'pod' 'cephfs' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cephfs.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cephfs-rw' of Pod 'cephfs' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cephfs.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cephfs-rw' of Pod 'cephfs' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cephfs.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cephfs-rw' of Pod 'cephfs' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cephfs.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cephfs-rw' of Pod 'cephfs' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cephfs.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cephfs-rw' of Pod 'cephfs' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cephfs.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cephfs-rw' of Pod 'cephfs' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cephfs.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cephfs-rw' of Pod 'cephfs' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cephfs.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cephfs-rw' of Pod 'cephfs' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cephfs.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cephfs-rw' of Pod 'cephfs' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cephfs.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cephfs.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cephfs.yaml:6-23
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 │       name: cephfs
  12 │   volumes:
  13 │   - name: cephfs
  14 └     cephfs:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cephfs-rw" of pod "cephfs" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cephfs.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cephfs.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cephfs in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cephfs.yaml:4
────────────────────────────────────────
   4 [   name: cephfs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cephfs in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cephfs.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cephfs in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cephfs.yaml:6-23
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 │       name: cephfs
  12 │   volumes:
  13 │   - name: cephfs
  14 └     cephfs:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cephfs-rw in pod cephfs (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cephfs.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────



cephfs1.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cephfs-rw' of Pod 'cephfs' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cephfs1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cephfs-rw' of Pod 'cephfs' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cephfs1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cephfs-rw' of 'pod' 'cephfs' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cephfs1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cephfs-rw' of Pod 'cephfs' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cephfs1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cephfs-rw' of Pod 'cephfs' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cephfs1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cephfs-rw' of Pod 'cephfs' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cephfs1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cephfs-rw' of Pod 'cephfs' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cephfs1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cephfs-rw' of Pod 'cephfs' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cephfs1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cephfs-rw' of Pod 'cephfs' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cephfs1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cephfs-rw' of Pod 'cephfs' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cephfs1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cephfs-rw' of Pod 'cephfs' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cephfs1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cephfs-rw' of Pod 'cephfs' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cephfs1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cephfs1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cephfs1.yaml:6-23
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 │       name: cephfs
  12 │   volumes:
  13 │   - name: cephfs
  14 └     cephfs:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cephfs-rw" of pod "cephfs" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cephfs1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cephfs1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cephfs in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cephfs1.yaml:4
────────────────────────────────────────
   4 [   name: cephfs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cephfs in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cephfs1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cephfs in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cephfs1.yaml:6-23
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 │       name: cephfs
  12 │   volumes:
  13 │   - name: cephfs
  14 └     cephfs:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cephfs-rw in pod cephfs (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cephfs1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────



cephfs2.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cephfs-rw' of Pod 'cephfs' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cephfs2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cephfs-rw' of Pod 'cephfs' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cephfs2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cephfs-rw' of 'pod' 'cephfs' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cephfs2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cephfs-rw' of Pod 'cephfs' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cephfs2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cephfs-rw' of Pod 'cephfs' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cephfs2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cephfs-rw' of Pod 'cephfs' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cephfs2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cephfs-rw' of Pod 'cephfs' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cephfs2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cephfs-rw' of Pod 'cephfs' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cephfs2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cephfs-rw' of Pod 'cephfs' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cephfs2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cephfs-rw' of Pod 'cephfs' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cephfs2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cephfs-rw' of Pod 'cephfs' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cephfs2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cephfs-rw' of Pod 'cephfs' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cephfs2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cephfs2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cephfs2.yaml:6-23
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 │       name: cephfs
  12 │   volumes:
  13 │   - name: cephfs
  14 └     cephfs:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cephfs-rw" of pod "cephfs" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cephfs2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cephfs2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cephfs in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cephfs2.yaml:4
────────────────────────────────────────
   4 [   name: cephfs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cephfs in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cephfs2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cephfs in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cephfs2.yaml:6-23
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 │       name: cephfs
  12 │   volumes:
  13 │   - name: cephfs
  14 └     cephfs:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cephfs-rw in pod cephfs (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cephfs2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: cephfs-rw
   8 │     image: kubernetes/pause
   9 │     volumeMounts:
  10 │     - mountPath: "/mnt/cephfs"
  11 └       name: cephfs
────────────────────────────────────────



cephfs_ctrlplugin_cluster_role.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cephfs-ctrlplugin-cr' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cephfs_ctrlplugin_cluster_role.yaml:6-8
────────────────────────────────────────
   6 ┌   - apiGroups: [""]
   7 │     resources: ["secrets"]
   8 └     verbs: ["get", "list"]
────────────────────────────────────────



cephfs_nodeplugin_cluster_role.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cephfs-nodeplugin-cr' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cephfs_nodeplugin_cluster_role.yaml:10-12
────────────────────────────────────────
  10 ┌ - apiGroups: [""]
  11 │   resources: ["secrets"]
  12 └   verbs: ["get"]
────────────────────────────────────────



cerebral-simulator.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rag-on-edge-simulator' of Deployment 'rag-on-edge-simulator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cerebral-simulator.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rag-on-edge-simulator' of Deployment 'rag-on-edge-simulator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cerebral-simulator.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rag-on-edge-simulator' of 'deployment' 'rag-on-edge-simulator' in 'cerebral' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cerebral-simulator.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rag-on-edge-simulator' of Deployment 'rag-on-edge-simulator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cerebral-simulator.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rag-on-edge-simulator' of Deployment 'rag-on-edge-simulator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cerebral-simulator.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rag-on-edge-simulator' of Deployment 'rag-on-edge-simulator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cerebral-simulator.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rag-on-edge-simulator' of Deployment 'rag-on-edge-simulator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cerebral-simulator.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rag-on-edge-simulator' of Deployment 'rag-on-edge-simulator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cerebral-simulator.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rag-on-edge-simulator' of Deployment 'rag-on-edge-simulator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cerebral-simulator.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rag-on-edge-simulator' of Deployment 'rag-on-edge-simulator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cerebral-simulator.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rag-on-edge-simulator' of Deployment 'rag-on-edge-simulator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cerebral-simulator.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cerebral-simulator.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cerebral-simulator.yaml:7-31
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: rag-on-edge-simulator
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: rag-on-edge-simulator
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rag-on-edge-simulator" of deployment "rag-on-edge-simulator" in "cerebral" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cerebral-simulator.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cerebral-simulator.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rag-on-edge-simulator in cerebral namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cerebral-simulator.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment rag-on-edge-simulator in cerebral namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cerebral-simulator.yaml:16-31
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 └         - name: INFLUXDB_TOKEN
  ..   
────────────────────────────────────────



cerebral-simulator1.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rag-on-edge-simulator' of Deployment 'rag-on-edge-simulator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cerebral-simulator1.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rag-on-edge-simulator' of Deployment 'rag-on-edge-simulator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cerebral-simulator1.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rag-on-edge-simulator' of 'deployment' 'rag-on-edge-simulator' in 'cerebral' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cerebral-simulator1.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rag-on-edge-simulator' of Deployment 'rag-on-edge-simulator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cerebral-simulator1.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rag-on-edge-simulator' of Deployment 'rag-on-edge-simulator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cerebral-simulator1.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rag-on-edge-simulator' of Deployment 'rag-on-edge-simulator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cerebral-simulator1.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rag-on-edge-simulator' of Deployment 'rag-on-edge-simulator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cerebral-simulator1.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rag-on-edge-simulator' of Deployment 'rag-on-edge-simulator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cerebral-simulator1.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rag-on-edge-simulator' of Deployment 'rag-on-edge-simulator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cerebral-simulator1.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rag-on-edge-simulator' of Deployment 'rag-on-edge-simulator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cerebral-simulator1.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rag-on-edge-simulator' of Deployment 'rag-on-edge-simulator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cerebral-simulator1.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cerebral-simulator1.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cerebral-simulator1.yaml:7-31
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: rag-on-edge-simulator
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: rag-on-edge-simulator
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rag-on-edge-simulator" of deployment "rag-on-edge-simulator" in "cerebral" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cerebral-simulator1.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cerebral-simulator1.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rag-on-edge-simulator in cerebral namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cerebral-simulator1.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 │         - name: INFLUXDB_TOKEN
  25 └           value: "secret-token"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment rag-on-edge-simulator in cerebral namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cerebral-simulator1.yaml:16-31
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: rag-on-edge-simulator
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-simulator:1.2
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: INFLUXDB_URL
  23 │           value: "http://influxdb.cerebral.svc.cluster.local:8086"
  24 └         - name: INFLUXDB_TOKEN
  ..   
────────────────────────────────────────



cerebral.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rag-on-edge-cerebral' of Deployment 'rag-on-edge-cerebral' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cerebral.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rag-on-edge-cerebral' of Deployment 'rag-on-edge-cerebral' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cerebral.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rag-on-edge-cerebral' of 'deployment' 'rag-on-edge-cerebral' in 'cerebral' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cerebral.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rag-on-edge-cerebral' of Deployment 'rag-on-edge-cerebral' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cerebral.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rag-on-edge-cerebral' of Deployment 'rag-on-edge-cerebral' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cerebral.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rag-on-edge-cerebral' of Deployment 'rag-on-edge-cerebral' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cerebral.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rag-on-edge-cerebral' of Deployment 'rag-on-edge-cerebral' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cerebral.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rag-on-edge-cerebral' of Deployment 'rag-on-edge-cerebral' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cerebral.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rag-on-edge-cerebral' of Deployment 'rag-on-edge-cerebral' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cerebral.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rag-on-edge-cerebral' of Deployment 'rag-on-edge-cerebral' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cerebral.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rag-on-edge-cerebral' of Deployment 'rag-on-edge-cerebral' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cerebral.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cerebral.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cerebral.yaml:7-39
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: rag-on-edge-cerebral
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: rag-on-edge-cerebral
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rag-on-edge-cerebral" of deployment "rag-on-edge-cerebral" in "cerebral" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cerebral.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cerebral.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rag-on-edge-cerebral in cerebral namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cerebral.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment rag-on-edge-cerebral in cerebral namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cerebral.yaml:16-39
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 └         - name: CHATGPT_MODEL
  ..   
────────────────────────────────────────



cerebral1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rag-on-edge-cerebral' of Deployment 'rag-on-edge-cerebral' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cerebral1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rag-on-edge-cerebral' of Deployment 'rag-on-edge-cerebral' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cerebral1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rag-on-edge-cerebral' of 'deployment' 'rag-on-edge-cerebral' in 'cerebral' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cerebral1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rag-on-edge-cerebral' of Deployment 'rag-on-edge-cerebral' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cerebral1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rag-on-edge-cerebral' of Deployment 'rag-on-edge-cerebral' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cerebral1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rag-on-edge-cerebral' of Deployment 'rag-on-edge-cerebral' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cerebral1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rag-on-edge-cerebral' of Deployment 'rag-on-edge-cerebral' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cerebral1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rag-on-edge-cerebral' of Deployment 'rag-on-edge-cerebral' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cerebral1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rag-on-edge-cerebral' of Deployment 'rag-on-edge-cerebral' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cerebral1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rag-on-edge-cerebral' of Deployment 'rag-on-edge-cerebral' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cerebral1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rag-on-edge-cerebral' of Deployment 'rag-on-edge-cerebral' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cerebral1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cerebral1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cerebral1.yaml:7-39
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: rag-on-edge-cerebral
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: rag-on-edge-cerebral
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rag-on-edge-cerebral" of deployment "rag-on-edge-cerebral" in "cerebral" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cerebral1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cerebral1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rag-on-edge-cerebral in cerebral namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cerebral1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 │         - name: CHATGPT_MODEL
  25 └           value: gpt-35-turbo
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment rag-on-edge-cerebral in cerebral namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cerebral1.yaml:16-39
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: rag-on-edge-cerebral
  18 │         image: agoraarmbladev.azurecr.io/rag-on-edge-cerebral:1.6
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         env:
  22 │         - name: AZURE_OPENAI_API_KEY
  23 │           value: <YOUR_OPENAI>
  24 └         - name: CHATGPT_MODEL
  ..   
────────────────────────────────────────



cerebral1_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cerebral1_1.yaml:7-13
────────────────────────────────────────
   7 ┌   type: LoadBalancer
   8 │   ports:
   9 │   - port: 5000
  10 │     targetPort: 5000
  11 │     protocol: TCP
  12 │   selector:
  13 └     app: rag-on-edge-cerebral
────────────────────────────────────────



cerebral_1.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cerebral_1.yaml:7-13
────────────────────────────────────────
   7 ┌   type: LoadBalancer
   8 │   ports:
   9 │   - port: 5000
  10 │     targetPort: 5000
  11 │     protocol: TCP
  12 │   selector:
  13 └     app: rag-on-edge-cerebral
────────────────────────────────────────



cert-00-whoami.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'whoami' of Deployment 'whoami' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cert-00-whoami.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: whoami
  17 │         image: traefik/whoami:v1.9.0
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'whoami' of Deployment 'whoami' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-00-whoami.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: whoami
  17 │         image: traefik/whoami:v1.9.0
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'whoami' of 'deployment' 'whoami' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-00-whoami.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: whoami
  17 │         image: traefik/whoami:v1.9.0
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'whoami' of Deployment 'whoami' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-00-whoami.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: whoami
  17 │         image: traefik/whoami:v1.9.0
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'whoami' of Deployment 'whoami' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cert-00-whoami.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: whoami
  17 │         image: traefik/whoami:v1.9.0
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'whoami' of Deployment 'whoami' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-00-whoami.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: whoami
  17 │         image: traefik/whoami:v1.9.0
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'whoami' of Deployment 'whoami' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-00-whoami.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: whoami
  17 │         image: traefik/whoami:v1.9.0
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'whoami' of Deployment 'whoami' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-00-whoami.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: whoami
  17 │         image: traefik/whoami:v1.9.0
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'whoami' of Deployment 'whoami' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-00-whoami.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: whoami
  17 │         image: traefik/whoami:v1.9.0
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'whoami' of Deployment 'whoami' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-00-whoami.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: whoami
  17 │         image: traefik/whoami:v1.9.0
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'whoami' of Deployment 'whoami' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-00-whoami.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: whoami
  17 │         image: traefik/whoami:v1.9.0
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-00-whoami.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: whoami
  17 │         image: traefik/whoami:v1.9.0
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-00-whoami.yaml:6-19
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: whoami
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: whoami
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "whoami" of deployment "whoami" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-00-whoami.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: whoami
  17 │         image: traefik/whoami:v1.9.0
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-00-whoami.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: whoami
  17 │         image: traefik/whoami:v1.9.0
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment whoami in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cert-00-whoami.yaml:4
────────────────────────────────────────
   4 [   name: whoami
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment whoami in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container whoami in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-00-whoami.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: whoami
  17 │         image: traefik/whoami:v1.9.0
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment whoami in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-00-whoami.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: whoami
  17 │         image: traefik/whoami:v1.9.0
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container whoami in deployment whoami (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-00-whoami.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: whoami
  17 │         image: traefik/whoami:v1.9.0
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



cert-00-whoami_1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-00-whoami_1.yaml:6-11
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   ports:
   8 │   - port: 5678
   9 │     targetPort: 80
  10 │   selector:
  11 └     app: whoami
────────────────────────────────────────



cert-00-whoami_2.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-00-whoami_2.yaml:6-22
────────────────────────────────────────
   6 ┌   rules:
   7 │   - http:
   8 │       paths:
   9 │       - path: /bar
  10 │         pathType: Prefix
  11 │         backend:
  12 │           service:
  13 │             name: whoami
  14 └             port:
  ..   
────────────────────────────────────────



cert-03-whoami.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-03-whoami.yaml:9-24
────────────────────────────────────────
   9 ┌   rules:
  10 │     - host: whoami.marks.dev
  11 │       http:
  12 │         paths:
  13 │           - path: /
  14 │             pathType: Prefix
  15 │             backend:
  16 │               service:
  17 └                 name: whoami
  ..   
────────────────────────────────────────



cert-controller-deployment.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-controller-deployment.yaml:9-59
────────────────────────────────────────
   9 ┌   replicas: dynamic_parameters
  10 │   revisionHistoryLimit: dynamic_parameters
  11 │   selector:
  12 │     matchLabels: null
  13 │   template:
  14 │     metadata:
  15 │       annotations: null
  16 │       labels: null
  17 └     spec:
  ..   
────────────────────────────────────────



cert-controller-deployment1.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-controller-deployment1.yaml:9-59
────────────────────────────────────────
   9 ┌   replicas: dynamic_parameters
  10 │   revisionHistoryLimit: dynamic_parameters
  11 │   selector:
  12 │     matchLabels: null
  13 │   template:
  14 │     metadata:
  15 │       annotations: null
  16 │       labels: null
  17 └     spec:
  ..   
────────────────────────────────────────



cert-controller-rbac.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'my-release-external-secrets-cert-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-controller-rbac.yaml:47-56
────────────────────────────────────────
  47 ┌ - apiGroups:
  48 │   - ''
  49 │   resources:
  50 │   - secrets
  51 │   verbs:
  52 │   - get
  53 │   - list
  54 │   - watch
  55 │   - update
  56 └   - patch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'my-release-external-secrets-cert-controller' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-controller-rbac.yaml:22-31
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - admissionregistration.k8s.io
  24 │   resources:
  25 │   - validatingwebhookconfigurations
  26 │   verbs:
  27 │   - get
  28 │   - list
  29 │   - watch
  30 │   - update
  31 └   - patch
────────────────────────────────────────



cert-generator.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cert-generator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-generator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-generator' of 'deployment' 'cert-generator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-generator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-generator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cert-generator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cert-generator' of Deployment 'cert-generator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cert-generator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-generator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-generator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-generator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-generator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-generator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-generator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-generator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-generator.yaml:8-18
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: cert-generator
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: cert-generator
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-generator" of deployment "cert-generator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-generator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-generator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cert-generator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cert-generator.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cert-generator
   5 │   labels:
   6 └     kiamol: ch15
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cert-generator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-generator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cert-generator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-generator.yaml:16-18
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-generator in deployment cert-generator (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-generator.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────



cert-generator1.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cert-generator1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-generator1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-generator' of 'deployment' 'cert-generator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-generator1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-generator1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cert-generator1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cert-generator' of Deployment 'cert-generator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cert-generator1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-generator1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-generator1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-generator1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-generator1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-generator1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-generator1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-generator1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-generator1.yaml:8-27
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: cert-generator
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: cert-generator
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-generator" of deployment "cert-generator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-generator1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-generator1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cert-generator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cert-generator1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cert-generator
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cert-generator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-generator1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cert-generator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-generator1.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 └             - name: CREATE_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-generator in deployment cert-generator (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-generator1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────



cert-generator2.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cert-generator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-generator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-generator' of 'deployment' 'cert-generator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-generator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-generator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cert-generator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cert-generator' of Deployment 'cert-generator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cert-generator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-generator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-generator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-generator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-generator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-generator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-generator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-generator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-generator2.yaml:8-18
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: cert-generator
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: cert-generator
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-generator" of deployment "cert-generator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-generator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-generator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cert-generator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cert-generator2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cert-generator
   5 │   labels:
   6 └     kiamol: ch15
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cert-generator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-generator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cert-generator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-generator2.yaml:16-18
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-generator in deployment cert-generator (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-generator2.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────



cert-generator3.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cert-generator3.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-generator3.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-generator' of 'deployment' 'cert-generator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-generator3.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-generator3.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cert-generator3.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cert-generator' of Deployment 'cert-generator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cert-generator3.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-generator3.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-generator3.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-generator3.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-generator3.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-generator3.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-generator3.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-generator3.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-generator3.yaml:8-27
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: cert-generator
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: cert-generator
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-generator" of deployment "cert-generator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-generator3.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-generator3.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cert-generator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cert-generator3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cert-generator
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cert-generator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-generator3.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cert-generator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-generator3.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 └             - name: CREATE_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-generator in deployment cert-generator (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-generator3.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────



cert-generator4.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Pod 'tls-cert-generator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cert-generator4.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: app
  10 │       image: kiamol/ch15-cert-generator
  11 │       env:
  12 │         - name: HOST_NAME
  13 │           value: default.local
  14 │         - name: SAN
  15 └           value: DNS:pi.local,DNS:whoami.local,DNS:configurable.local
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Pod 'tls-cert-generator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-generator4.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: app
  10 │       image: kiamol/ch15-cert-generator
  11 │       env:
  12 │         - name: HOST_NAME
  13 │           value: default.local
  14 │         - name: SAN
  15 └           value: DNS:pi.local,DNS:whoami.local,DNS:configurable.local
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'pod' 'tls-cert-generator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-generator4.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: app
  10 │       image: kiamol/ch15-cert-generator
  11 │       env:
  12 │         - name: HOST_NAME
  13 │           value: default.local
  14 │         - name: SAN
  15 └           value: DNS:pi.local,DNS:whoami.local,DNS:configurable.local
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Pod 'tls-cert-generator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-generator4.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: app
  10 │       image: kiamol/ch15-cert-generator
  11 │       env:
  12 │         - name: HOST_NAME
  13 │           value: default.local
  14 │         - name: SAN
  15 └           value: DNS:pi.local,DNS:whoami.local,DNS:configurable.local
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Pod 'tls-cert-generator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cert-generator4.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: app
  10 │       image: kiamol/ch15-cert-generator
  11 │       env:
  12 │         - name: HOST_NAME
  13 │           value: default.local
  14 │         - name: SAN
  15 └           value: DNS:pi.local,DNS:whoami.local,DNS:configurable.local
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app' of Pod 'tls-cert-generator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cert-generator4.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: app
  10 │       image: kiamol/ch15-cert-generator
  11 │       env:
  12 │         - name: HOST_NAME
  13 │           value: default.local
  14 │         - name: SAN
  15 └           value: DNS:pi.local,DNS:whoami.local,DNS:configurable.local
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Pod 'tls-cert-generator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-generator4.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: app
  10 │       image: kiamol/ch15-cert-generator
  11 │       env:
  12 │         - name: HOST_NAME
  13 │           value: default.local
  14 │         - name: SAN
  15 └           value: DNS:pi.local,DNS:whoami.local,DNS:configurable.local
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Pod 'tls-cert-generator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-generator4.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: app
  10 │       image: kiamol/ch15-cert-generator
  11 │       env:
  12 │         - name: HOST_NAME
  13 │           value: default.local
  14 │         - name: SAN
  15 └           value: DNS:pi.local,DNS:whoami.local,DNS:configurable.local
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Pod 'tls-cert-generator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-generator4.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: app
  10 │       image: kiamol/ch15-cert-generator
  11 │       env:
  12 │         - name: HOST_NAME
  13 │           value: default.local
  14 │         - name: SAN
  15 └           value: DNS:pi.local,DNS:whoami.local,DNS:configurable.local
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Pod 'tls-cert-generator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-generator4.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: app
  10 │       image: kiamol/ch15-cert-generator
  11 │       env:
  12 │         - name: HOST_NAME
  13 │           value: default.local
  14 │         - name: SAN
  15 └           value: DNS:pi.local,DNS:whoami.local,DNS:configurable.local
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Pod 'tls-cert-generator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-generator4.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: app
  10 │       image: kiamol/ch15-cert-generator
  11 │       env:
  12 │         - name: HOST_NAME
  13 │           value: default.local
  14 │         - name: SAN
  15 └           value: DNS:pi.local,DNS:whoami.local,DNS:configurable.local
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Pod 'tls-cert-generator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-generator4.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: app
  10 │       image: kiamol/ch15-cert-generator
  11 │       env:
  12 │         - name: HOST_NAME
  13 │           value: default.local
  14 │         - name: SAN
  15 └           value: DNS:pi.local,DNS:whoami.local,DNS:configurable.local
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-generator4.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: app
  10 │       image: kiamol/ch15-cert-generator
  11 │       env:
  12 │         - name: HOST_NAME
  13 │           value: default.local
  14 │         - name: SAN
  15 └           value: DNS:pi.local,DNS:whoami.local,DNS:configurable.local
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-generator4.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: app
  10 │       image: kiamol/ch15-cert-generator
  11 │       env:
  12 │         - name: HOST_NAME
  13 │           value: default.local
  14 │         - name: SAN
  15 └           value: DNS:pi.local,DNS:whoami.local,DNS:configurable.local
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of pod "tls-cert-generator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-generator4.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: app
  10 │       image: kiamol/ch15-cert-generator
  11 │       env:
  12 │         - name: HOST_NAME
  13 │           value: default.local
  14 │         - name: SAN
  15 └           value: DNS:pi.local,DNS:whoami.local,DNS:configurable.local
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-generator4.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: app
  10 │       image: kiamol/ch15-cert-generator
  11 │       env:
  12 │         - name: HOST_NAME
  13 │           value: default.local
  14 │         - name: SAN
  15 └           value: DNS:pi.local,DNS:whoami.local,DNS:configurable.local
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod tls-cert-generator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cert-generator4.yaml:4-6
────────────────────────────────────────
   4 ┌   name: tls-cert-generator
   5 │   labels:
   6 └     kubernetes.courselabs.co: ingress
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container tls-cert-generator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-generator4.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: app
  10 │       image: kiamol/ch15-cert-generator
  11 │       env:
  12 │         - name: HOST_NAME
  13 │           value: default.local
  14 │         - name: SAN
  15 └           value: DNS:pi.local,DNS:whoami.local,DNS:configurable.local
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod tls-cert-generator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-generator4.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: app
  10 │       image: kiamol/ch15-cert-generator
  11 │       env:
  12 │         - name: HOST_NAME
  13 │           value: default.local
  14 │         - name: SAN
  15 └           value: DNS:pi.local,DNS:whoami.local,DNS:configurable.local
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container app in pod tls-cert-generator (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-generator4.yaml:9-15
────────────────────────────────────────
   9 ┌     - name: app
  10 │       image: kiamol/ch15-cert-generator
  11 │       env:
  12 │         - name: HOST_NAME
  13 │           value: default.local
  14 │         - name: SAN
  15 └           value: DNS:pi.local,DNS:whoami.local,DNS:configurable.local
────────────────────────────────────────



cert-generator5.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cert-generator5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-generator5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-generator' of 'deployment' 'cert-generator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-generator5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-generator5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cert-generator5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cert-generator' of Deployment 'cert-generator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cert-generator5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-generator5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-generator5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-generator5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-generator5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-generator5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-generator5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-generator5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-generator5.yaml:8-18
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: cert-generator
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: cert-generator
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-generator" of deployment "cert-generator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-generator5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-generator5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cert-generator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cert-generator5.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cert-generator
   5 │   labels:
   6 └     kiamol: ch15
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cert-generator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-generator5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cert-generator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-generator5.yaml:16-18
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-generator in deployment cert-generator (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-generator5.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────



cert-generator6.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cert-generator6.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-generator6.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-generator' of 'deployment' 'cert-generator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-generator6.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-generator6.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cert-generator6.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cert-generator' of Deployment 'cert-generator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cert-generator6.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-generator6.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-generator6.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-generator6.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-generator6.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-generator6.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-generator6.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-generator6.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-generator6.yaml:8-27
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: cert-generator
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: cert-generator
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-generator" of deployment "cert-generator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-generator6.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-generator6.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cert-generator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cert-generator6.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cert-generator
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cert-generator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-generator6.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cert-generator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-generator6.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 └             - name: CREATE_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-generator in deployment cert-generator (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-generator6.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────



cert-generator7.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cert-generator7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-generator7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-generator' of 'deployment' 'cert-generator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-generator7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-generator7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cert-generator7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cert-generator' of Deployment 'cert-generator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cert-generator7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-generator7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-generator7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-generator7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-generator7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-generator7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-generator7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-generator7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-generator7.yaml:8-18
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: cert-generator
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: cert-generator
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-generator" of deployment "cert-generator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-generator7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-generator7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cert-generator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cert-generator7.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cert-generator
   5 │   labels:
   6 └     kiamol: ch15
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cert-generator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-generator7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cert-generator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-generator7.yaml:16-18
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-generator in deployment cert-generator (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-generator7.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 └           image: kiamol/ch15-cert-generator
────────────────────────────────────────



cert-generator8.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cert-generator8.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-generator8.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-generator' of 'deployment' 'cert-generator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-generator8.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-generator8.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cert-generator8.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cert-generator' of Deployment 'cert-generator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cert-generator8.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-generator8.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-generator8.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-generator8.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-generator8.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-generator8.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-generator' of Deployment 'cert-generator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-generator8.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-generator8.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-generator8.yaml:8-27
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: cert-generator
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: cert-generator
  15 │     spec:
  16 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-generator" of deployment "cert-generator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-generator8.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-generator8.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cert-generator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cert-generator8.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cert-generator
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cert-generator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-generator8.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cert-generator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-generator8.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 └             - name: CREATE_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-generator in deployment cert-generator (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-generator8.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: cert-generator
  18 │           image: kiamol/ch15-cert-generator
  19 │           env:
  20 │             - name: HOST_NAME
  21 │               value: admission-webhook.default.svc
  22 │             - name: SAN
  23 │               value: DNS:admission-webhook.default.svc
  24 │             - name: CREATE_SECRET
  25 └               value: admission-webhook-secret
  ..   
────────────────────────────────────────



cert-manager-1.0.41_10.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.0.41_10.yaml:19-26
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - secrets
  23 │   verbs:
  24 │   - get
  25 │   - list
  26 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager-1.0.41_10.yaml:36-45
────────────────────────────────────────
  36 ┌ - apiGroups:
  37 │   - admissionregistration.k8s.io
  38 │   resources:
  39 │   - validatingwebhookconfigurations
  40 │   - mutatingwebhookconfigurations
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 │   - watch
  45 └   - update
────────────────────────────────────────



cert-manager-1.0.41_11.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.0.41_11.yaml:26-36
────────────────────────────────────────
  26 ┌ - apiGroups:
  27 │   - ''
  28 │   resources:
  29 │   - secrets
  30 │   verbs:
  31 │   - get
  32 │   - list
  33 │   - watch
  34 └   - create
  ..   
────────────────────────────────────────



cert-manager-1.0.41_12.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.0.41_12.yaml:26-36
────────────────────────────────────────
  26 ┌ - apiGroups:
  27 │   - ''
  28 │   resources:
  29 │   - secrets
  30 │   verbs:
  31 │   - get
  32 │   - list
  33 │   - watch
  34 └   - create
  ..   
────────────────────────────────────────



cert-manager-1.0.41_13.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.0.41_13.yaml:48-58
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   resources:
  51 │   - secrets
  52 │   verbs:
  53 │   - get
  54 │   - list
  55 │   - watch
  56 └   - create
  ..   
────────────────────────────────────────



cert-manager-1.0.41_14.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.0.41_14.yaml:49-56
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - ''
  51 │   resources:
  52 │   - secrets
  53 │   verbs:
  54 │   - get
  55 │   - list
  56 └   - watch
────────────────────────────────────────



cert-manager-1.0.41_15.yaml (kubernetes)
========================================
Tests: 117 (SUCCESSES: 112, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.0.41_15.yaml:35-42
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - secrets
  39 │   verbs:
  40 │   - get
  41 │   - list
  42 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.0.41_15.yaml:84-91
────────────────────────────────────────
  84 ┌ - apiGroups:
  85 │   - ''
  86 │   resources:
  87 │   - secrets
  88 │   verbs:
  89 │   - get
  90 │   - list
  91 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager-1.0.41_15.yaml:50-60
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - pods
  54 │   - services
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager-1.0.41_15.yaml:50-60
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - pods
  54 │   - services
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager-1.0.41_15.yaml:61-71
────────────────────────────────────────
  61 ┌ - apiGroups:
  62 │   - extensions
  63 │   resources:
  64 │   - ingresses
  65 │   verbs:
  66 │   - get
  67 │   - list
  68 │   - watch
  69 └   - create
  ..   
────────────────────────────────────────



cert-manager-1.0.41_26.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cert-manager-cainjector:leaderelection' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cert-manager-1.0.41_26.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resourceNames:
  15 │   - cert-manager-cainjector-leader-election
  16 │   - cert-manager-cainjector-leader-election-core
  17 │   resources:
  18 │   - configmaps
  19 │   verbs:
  20 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cert-manager-cainjector:leaderelection' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cert-manager-1.0.41_26.yaml:23-28
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - configmaps
  27 │   verbs:
  28 └   - create
────────────────────────────────────────



cert-manager-1.0.41_27.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cert-manager:leaderelection' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cert-manager-1.0.41_27.yaml:12-21
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resourceNames:
  15 │   - cert-manager-controller
  16 │   resources:
  17 │   - configmaps
  18 │   verbs:
  19 │   - get
  20 │   - update
  21 └   - patch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cert-manager:leaderelection' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cert-manager-1.0.41_27.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - ''
  24 │   resources:
  25 │   - configmaps
  26 │   verbs:
  27 └   - create
────────────────────────────────────────



cert-manager-1.0.41_28.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager-1.0.41_28.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resourceNames:
  15 │   - cert-manager-webhook-ca
  16 │   resources:
  17 │   - secrets
  18 │   verbs:
  19 │   - get
  20 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager-1.0.41_28.yaml:23-28
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - secrets
  27 │   verbs:
  28 └   - create
────────────────────────────────────────



cert-manager-1.0.41_32.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-1.0.41_32.yaml:12-20
────────────────────────────────────────
  12 ┌   ports:
  13 │   - port: 9402
  14 │     protocol: TCP
  15 │     targetPort: 9402
  16 │   selector:
  17 │     app.kubernetes.io/component: controller
  18 │     app.kubernetes.io/instance: cert-manager
  19 │     app.kubernetes.io/name: cert-manager
  20 └   type: ClusterIP
────────────────────────────────────────



cert-manager-1.0.41_33.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-1.0.41_33.yaml:12-20
────────────────────────────────────────
  12 ┌   ports:
  13 │   - name: https
  14 │     port: 443
  15 │     targetPort: 10250
  16 │   selector:
  17 │     app.kubernetes.io/component: webhook
  18 │     app.kubernetes.io/instance: cert-manager
  19 │     app.kubernetes.io/name: webhook
  20 └   type: ClusterIP
────────────────────────────────────────



cert-manager-1.0.41_34.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cert-manager-1.0.41_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager-1.0.41_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager-cainjector' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager-1.0.41_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager-1.0.41_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cert-manager-1.0.41_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager-1.0.41_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager-1.0.41_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager-1.0.41_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager-1.0.41_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager-1.0.41_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager-1.0.41_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager-1.0.41_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-1.0.41_34.yaml:12-39
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       app.kubernetes.io/component: cainjector
  16 │       app.kubernetes.io/instance: cert-manager
  17 │       app.kubernetes.io/name: cainjector
  18 │   template:
  19 │     metadata:
  20 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager-cainjector" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager-1.0.41_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager-1.0.41_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cert-manager-cainjector in cert-manager namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-manager-1.0.41_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cert-manager-cainjector in cert-manager namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-manager-1.0.41_34.yaml:26-39
────────────────────────────────────────
  26 ┌       containers:
  27 │       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager-1.0.41_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────



cert-manager-1.0.41_35.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cert-manager-1.0.41_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager-1.0.41_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager-1.0.41_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager-1.0.41_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cert-manager-1.0.41_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager-1.0.41_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager-1.0.41_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager-1.0.41_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager-1.0.41_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager-1.0.41_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager-1.0.41_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager-1.0.41_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-1.0.41_35.yaml:12-47
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       app.kubernetes.io/component: controller
  16 │       app.kubernetes.io/instance: cert-manager
  17 │       app.kubernetes.io/name: cert-manager
  18 │   template:
  19 │     metadata:
  20 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager-1.0.41_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager-1.0.41_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cert-manager in cert-manager namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-manager-1.0.41_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cert-manager in cert-manager namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-manager-1.0.41_35.yaml:30-47
────────────────────────────────────────
  30 ┌       containers:
  31 │       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager-1.0.41_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────



cert-manager-1.0.41_36.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cert-manager-1.0.41_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager-1.0.41_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager-webhook' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager-1.0.41_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager-1.0.41_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cert-manager-1.0.41_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager-1.0.41_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager-1.0.41_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager-1.0.41_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager-1.0.41_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager-1.0.41_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager-1.0.41_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager-1.0.41_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-1.0.41_36.yaml:12-65
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       app.kubernetes.io/component: webhook
  16 │       app.kubernetes.io/instance: cert-manager
  17 │       app.kubernetes.io/name: webhook
  18 │   template:
  19 │     metadata:
  20 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager-webhook" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager-1.0.41_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager-1.0.41_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cert-manager-webhook in cert-manager namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-manager-1.0.41_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cert-manager-webhook in cert-manager namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-manager-1.0.41_36.yaml:26-65
────────────────────────────────────────
  26 ┌       containers:
  27 │       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager-1.0.41_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────



cert-manager-1.0.4_10.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.0.4_10.yaml:19-26
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - secrets
  23 │   verbs:
  24 │   - get
  25 │   - list
  26 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager-1.0.4_10.yaml:36-45
────────────────────────────────────────
  36 ┌ - apiGroups:
  37 │   - admissionregistration.k8s.io
  38 │   resources:
  39 │   - validatingwebhookconfigurations
  40 │   - mutatingwebhookconfigurations
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 │   - watch
  45 └   - update
────────────────────────────────────────



cert-manager-1.0.4_11.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.0.4_11.yaml:26-36
────────────────────────────────────────
  26 ┌ - apiGroups:
  27 │   - ''
  28 │   resources:
  29 │   - secrets
  30 │   verbs:
  31 │   - get
  32 │   - list
  33 │   - watch
  34 └   - create
  ..   
────────────────────────────────────────



cert-manager-1.0.4_12.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.0.4_12.yaml:26-36
────────────────────────────────────────
  26 ┌ - apiGroups:
  27 │   - ''
  28 │   resources:
  29 │   - secrets
  30 │   verbs:
  31 │   - get
  32 │   - list
  33 │   - watch
  34 └   - create
  ..   
────────────────────────────────────────



cert-manager-1.0.4_13.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.0.4_13.yaml:48-58
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   resources:
  51 │   - secrets
  52 │   verbs:
  53 │   - get
  54 │   - list
  55 │   - watch
  56 └   - create
  ..   
────────────────────────────────────────



cert-manager-1.0.4_14.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.0.4_14.yaml:49-56
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - ''
  51 │   resources:
  52 │   - secrets
  53 │   verbs:
  54 │   - get
  55 │   - list
  56 └   - watch
────────────────────────────────────────



cert-manager-1.0.4_15.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 112, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.0.4_15.yaml:35-42
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - secrets
  39 │   verbs:
  40 │   - get
  41 │   - list
  42 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.0.4_15.yaml:84-91
────────────────────────────────────────
  84 ┌ - apiGroups:
  85 │   - ''
  86 │   resources:
  87 │   - secrets
  88 │   verbs:
  89 │   - get
  90 │   - list
  91 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager-1.0.4_15.yaml:50-60
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - pods
  54 │   - services
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager-1.0.4_15.yaml:50-60
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - pods
  54 │   - services
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager-1.0.4_15.yaml:61-71
────────────────────────────────────────
  61 ┌ - apiGroups:
  62 │   - extensions
  63 │   resources:
  64 │   - ingresses
  65 │   verbs:
  66 │   - get
  67 │   - list
  68 │   - watch
  69 └   - create
  ..   
────────────────────────────────────────



cert-manager-1.0.4_26.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cert-manager-cainjector:leaderelection' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cert-manager-1.0.4_26.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resourceNames:
  15 │   - cert-manager-cainjector-leader-election
  16 │   - cert-manager-cainjector-leader-election-core
  17 │   resources:
  18 │   - configmaps
  19 │   verbs:
  20 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cert-manager-cainjector:leaderelection' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cert-manager-1.0.4_26.yaml:23-28
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - configmaps
  27 │   verbs:
  28 └   - create
────────────────────────────────────────



cert-manager-1.0.4_27.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cert-manager:leaderelection' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cert-manager-1.0.4_27.yaml:12-21
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resourceNames:
  15 │   - cert-manager-controller
  16 │   resources:
  17 │   - configmaps
  18 │   verbs:
  19 │   - get
  20 │   - update
  21 └   - patch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cert-manager:leaderelection' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 cert-manager-1.0.4_27.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - ''
  24 │   resources:
  25 │   - configmaps
  26 │   verbs:
  27 └   - create
────────────────────────────────────────



cert-manager-1.0.4_28.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager-1.0.4_28.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resourceNames:
  15 │   - cert-manager-webhook-ca
  16 │   resources:
  17 │   - secrets
  18 │   verbs:
  19 │   - get
  20 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager-1.0.4_28.yaml:23-28
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - secrets
  27 │   verbs:
  28 └   - create
────────────────────────────────────────



cert-manager-1.0.4_32.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-1.0.4_32.yaml:12-20
────────────────────────────────────────
  12 ┌   ports:
  13 │   - port: 9402
  14 │     protocol: TCP
  15 │     targetPort: 9402
  16 │   selector:
  17 │     app.kubernetes.io/component: controller
  18 │     app.kubernetes.io/instance: cert-manager
  19 │     app.kubernetes.io/name: cert-manager
  20 └   type: ClusterIP
────────────────────────────────────────



cert-manager-1.0.4_33.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-1.0.4_33.yaml:12-20
────────────────────────────────────────
  12 ┌   ports:
  13 │   - name: https
  14 │     port: 443
  15 │     targetPort: 10250
  16 │   selector:
  17 │     app.kubernetes.io/component: webhook
  18 │     app.kubernetes.io/instance: cert-manager
  19 │     app.kubernetes.io/name: webhook
  20 └   type: ClusterIP
────────────────────────────────────────



cert-manager-1.0.4_34.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cert-manager-1.0.4_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager-1.0.4_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager-cainjector' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager-1.0.4_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager-1.0.4_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cert-manager-1.0.4_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager-1.0.4_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager-1.0.4_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager-1.0.4_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager-1.0.4_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager-1.0.4_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager-1.0.4_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager-1.0.4_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-1.0.4_34.yaml:12-39
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       app.kubernetes.io/component: cainjector
  16 │       app.kubernetes.io/instance: cert-manager
  17 │       app.kubernetes.io/name: cainjector
  18 │   template:
  19 │     metadata:
  20 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager-cainjector" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager-1.0.4_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager-1.0.4_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cert-manager-cainjector in cert-manager namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-manager-1.0.4_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cert-manager-cainjector in cert-manager namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-manager-1.0.4_34.yaml:26-39
────────────────────────────────────────
  26 ┌       containers:
  27 │       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager-1.0.4_34.yaml:27-38
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --leader-election-namespace=kube-system
  30 │         env:
  31 │         - name: POD_NAMESPACE
  32 │           valueFrom:
  33 │             fieldRef:
  34 │               fieldPath: metadata.namespace
  35 └         image: quay.io/jetstack/cert-manager-cainjector:v1.0.4
  ..   
────────────────────────────────────────



cert-manager-1.0.4_35.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cert-manager-1.0.4_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager-1.0.4_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager-1.0.4_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager-1.0.4_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cert-manager-1.0.4_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager-1.0.4_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager-1.0.4_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager-1.0.4_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager-1.0.4_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager-1.0.4_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager-1.0.4_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager-1.0.4_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-1.0.4_35.yaml:12-47
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       app.kubernetes.io/component: controller
  16 │       app.kubernetes.io/instance: cert-manager
  17 │       app.kubernetes.io/name: cert-manager
  18 │   template:
  19 │     metadata:
  20 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager-1.0.4_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager-1.0.4_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cert-manager in cert-manager namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-manager-1.0.4_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cert-manager in cert-manager namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-manager-1.0.4_35.yaml:30-47
────────────────────────────────────────
  30 ┌       containers:
  31 │       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager-1.0.4_35.yaml:31-46
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=2
  33 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  34 │         - --leader-election-namespace=kube-system
  35 │         env:
  36 │         - name: POD_NAMESPACE
  37 │           valueFrom:
  38 │             fieldRef:
  39 └               fieldPath: metadata.namespace
  ..   
────────────────────────────────────────



cert-manager-1.0.4_36.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cert-manager-1.0.4_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cert-manager-1.0.4_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cert-manager' of 'deployment' 'cert-manager-webhook' in 'cert-manager' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cert-manager-1.0.4_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager-1.0.4_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cert-manager-1.0.4_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager-1.0.4_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager-1.0.4_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager-1.0.4_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager-1.0.4_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager-1.0.4_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager-1.0.4_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cert-manager-1.0.4_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-1.0.4_36.yaml:12-65
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       app.kubernetes.io/component: webhook
  16 │       app.kubernetes.io/instance: cert-manager
  17 │       app.kubernetes.io/name: webhook
  18 │   template:
  19 │     metadata:
  20 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cert-manager" of deployment "cert-manager-webhook" in "cert-manager" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cert-manager-1.0.4_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cert-manager-1.0.4_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cert-manager-webhook in cert-manager namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-manager-1.0.4_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cert-manager-webhook in cert-manager namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cert-manager-1.0.4_36.yaml:26-65
────────────────────────────────────────
  26 ┌       containers:
  27 │       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager-1.0.4_36.yaml:27-64
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --v=2
  29 │         - --secure-port=10250
  30 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  31 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  32 │         - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
  33 │         env:
  34 │         - name: POD_NAMESPACE
  35 └           valueFrom:
  ..   
────────────────────────────────────────



cert-manager-1.13.1_12.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.13.1_12.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager-1.13.1_12.yaml:37-47
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 └   - watch
  ..   
────────────────────────────────────────



cert-manager-1.13.1_13.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.13.1_13.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager-1.13.1_14.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.13.1_14.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager-1.13.1_15.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.13.1_15.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



cert-manager-1.13.1_16.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.13.1_16.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



cert-manager-1.13.1_17.yaml (kubernetes)
========================================
Tests: 117 (SUCCESSES: 112, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.13.1_17.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.13.1_17.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager-1.13.1_17.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager-1.13.1_17.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager-1.13.1_17.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────



cert-manager-1.13.1_37.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager-1.13.1_37.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   resourceNames:
  18 │   - cert-manager-webhook-ca
  19 │   verbs:
  20 │   - get
  21 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager-1.13.1_37.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - secrets
  28 │   verbs:
  29 └   - create
────────────────────────────────────────



cert-manager-1.13.1_41.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-1.13.1_41.yaml:13-22
────────────────────────────────────────
  13 ┌   type: ClusterIP
  14 │   ports:
  15 │   - protocol: TCP
  16 │     port: 9402
  17 │     name: tcp-prometheus-servicemonitor
  18 │     targetPort: 9402
  19 │   selector:
  20 │     app.kubernetes.io/name: cert-manager
  21 │     app.kubernetes.io/instance: cert-manager
  22 └     app.kubernetes.io/component: controller
────────────────────────────────────────



cert-manager-1.13.1_42.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-1.13.1_42.yaml:13-22
────────────────────────────────────────
  13 ┌   type: ClusterIP
  14 │   ports:
  15 │   - name: https
  16 │     port: 443
  17 │     protocol: TCP
  18 │     targetPort: https
  19 │   selector:
  20 │     app.kubernetes.io/name: webhook
  21 │     app.kubernetes.io/instance: cert-manager
  22 └     app.kubernetes.io/component: webhook
────────────────────────────────────────



cert-manager-1.13.1_43.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager-1.13.1_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager-1.13.1_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager-1.13.1_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager-1.13.1_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager-1.13.1_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager-1.13.1_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager-1.13.1_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-1.13.1_43.yaml:13-52
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: cainjector
  17 │       app.kubernetes.io/instance: cert-manager
  18 │       app.kubernetes.io/component: cainjector
  19 │   template:
  20 │     metadata:
  21 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-cainjector in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager-1.13.1_43.yaml:35-50
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.13.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────



cert-manager-1.13.1_44.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager-1.13.1_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.1
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.1
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager-1.13.1_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.1
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.1
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager-1.13.1_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.1
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.1
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager-1.13.1_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.1
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.1
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager-1.13.1_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.1
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.1
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager-1.13.1_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.1
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.1
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager-1.13.1_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.1
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.1
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-1.13.1_44.yaml:13-66
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: cert-manager
  17 │       app.kubernetes.io/instance: cert-manager
  18 │       app.kubernetes.io/component: controller
  19 │   template:
  20 │     metadata:
  21 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-controller in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager-1.13.1_44.yaml:39-64
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.13.1
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.1
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────



cert-manager-1.13.1_45.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager-1.13.1_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager-1.13.1_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager-1.13.1_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager-1.13.1_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager-1.13.1_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager-1.13.1_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager-1.13.1_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-1.13.1_45.yaml:13-84
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: webhook
  17 │       app.kubernetes.io/instance: cert-manager
  18 │       app.kubernetes.io/component: webhook
  19 │   template:
  20 │     metadata:
  21 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-webhook in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager-1.13.1_45.yaml:35-82
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.13.1
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────



cert-manager-1.14.4_10.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.14.4_10.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager-1.14.4_10.yaml:37-47
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 └   - watch
  ..   
────────────────────────────────────────



cert-manager-1.14.4_11.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.14.4_11.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager-1.14.4_12.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.14.4_12.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager-1.14.4_13.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.14.4_13.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



cert-manager-1.14.4_14.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.14.4_14.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



cert-manager-1.14.4_15.yaml (kubernetes)
========================================
Tests: 117 (SUCCESSES: 112, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.14.4_15.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-1.14.4_15.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager-1.14.4_15.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager-1.14.4_15.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager-1.14.4_15.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────



cert-manager-1.14.4_35.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager-1.14.4_35.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   resourceNames:
  18 │   - cert-manager-webhook-ca
  19 │   verbs:
  20 │   - get
  21 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager-1.14.4_35.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - secrets
  28 │   verbs:
  29 └   - create
────────────────────────────────────────



cert-manager-1.14.4_39.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-1.14.4_39.yaml:13-22
────────────────────────────────────────
  13 ┌   type: ClusterIP
  14 │   ports:
  15 │   - protocol: TCP
  16 │     port: 9402
  17 │     name: tcp-prometheus-servicemonitor
  18 │     targetPort: 9402
  19 │   selector:
  20 │     app.kubernetes.io/name: cert-manager
  21 │     app.kubernetes.io/instance: cert-manager
  22 └     app.kubernetes.io/component: controller
────────────────────────────────────────



cert-manager-1.14.4_40.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-1.14.4_40.yaml:13-22
────────────────────────────────────────
  13 ┌   type: ClusterIP
  14 │   ports:
  15 │   - name: https
  16 │     port: 443
  17 │     protocol: TCP
  18 │     targetPort: https
  19 │   selector:
  20 │     app.kubernetes.io/name: webhook
  21 │     app.kubernetes.io/instance: cert-manager
  22 └     app.kubernetes.io/component: webhook
────────────────────────────────────────



cert-manager-1.14.4_41.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager-1.14.4_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager-1.14.4_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager-1.14.4_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager-1.14.4_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager-1.14.4_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager-1.14.4_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-1.14.4_41.yaml:13-53
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: cainjector
  17 │       app.kubernetes.io/instance: cert-manager
  18 │       app.kubernetes.io/component: cainjector
  19 │   template:
  20 │     metadata:
  21 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-cainjector in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager-1.14.4_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────



cert-manager-1.14.4_42.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager-1.14.4_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.4
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager-1.14.4_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.4
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager-1.14.4_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.4
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager-1.14.4_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.4
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager-1.14.4_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.4
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager-1.14.4_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.4
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-1.14.4_42.yaml:13-77
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: cert-manager
  17 │       app.kubernetes.io/instance: cert-manager
  18 │       app.kubernetes.io/component: controller
  19 │   template:
  20 │     metadata:
  21 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-controller in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager-1.14.4_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.4
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────



cert-manager-1.14.4_43.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager-1.14.4_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager-1.14.4_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager-1.14.4_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager-1.14.4_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager-1.14.4_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager-1.14.4_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-1.14.4_43.yaml:13-85
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: webhook
  17 │       app.kubernetes.io/instance: cert-manager
  18 │       app.kubernetes.io/component: webhook
  19 │   template:
  20 │     metadata:
  21 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-webhook in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager-1.14.4_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.4
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────



cert-manager-v1.14.2_10.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-v1.14.2_10.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager-v1.14.2_10.yaml:37-47
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 └   - watch
  ..   
────────────────────────────────────────



cert-manager-v1.14.2_11.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-v1.14.2_11.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager-v1.14.2_12.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-v1.14.2_12.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager-v1.14.2_13.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-v1.14.2_13.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



cert-manager-v1.14.2_14.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-v1.14.2_14.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



cert-manager-v1.14.2_15.yaml (kubernetes)
=========================================
Tests: 117 (SUCCESSES: 112, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-v1.14.2_15.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager-v1.14.2_15.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager-v1.14.2_15.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager-v1.14.2_15.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager-v1.14.2_15.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────



cert-manager-v1.14.2_35.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager-v1.14.2_35.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   resourceNames:
  18 │   - cert-manager-webhook-ca
  19 │   verbs:
  20 │   - get
  21 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager-v1.14.2_35.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - secrets
  28 │   verbs:
  29 └   - create
────────────────────────────────────────



cert-manager-v1.14.2_39.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-v1.14.2_39.yaml:13-22
────────────────────────────────────────
  13 ┌   type: ClusterIP
  14 │   ports:
  15 │   - protocol: TCP
  16 │     port: 9402
  17 │     name: tcp-prometheus-servicemonitor
  18 │     targetPort: 9402
  19 │   selector:
  20 │     app.kubernetes.io/name: cert-manager
  21 │     app.kubernetes.io/instance: cert-manager
  22 └     app.kubernetes.io/component: controller
────────────────────────────────────────



cert-manager-v1.14.2_40.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-v1.14.2_40.yaml:13-22
────────────────────────────────────────
  13 ┌   type: ClusterIP
  14 │   ports:
  15 │   - name: https
  16 │     port: 443
  17 │     protocol: TCP
  18 │     targetPort: https
  19 │   selector:
  20 │     app.kubernetes.io/name: webhook
  21 │     app.kubernetes.io/instance: cert-manager
  22 └     app.kubernetes.io/component: webhook
────────────────────────────────────────



cert-manager-v1.14.2_41.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager-v1.14.2_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager-v1.14.2_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager-v1.14.2_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager-v1.14.2_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager-v1.14.2_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager-v1.14.2_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-v1.14.2_41.yaml:13-53
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: cainjector
  17 │       app.kubernetes.io/instance: cert-manager
  18 │       app.kubernetes.io/component: cainjector
  19 │   template:
  20 │     metadata:
  21 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-cainjector in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager-v1.14.2_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────



cert-manager-v1.14.2_42.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager-v1.14.2_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.2
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.2
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager-v1.14.2_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.2
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.2
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager-v1.14.2_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.2
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.2
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager-v1.14.2_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.2
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.2
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager-v1.14.2_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.2
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.2
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager-v1.14.2_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.2
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.2
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-v1.14.2_42.yaml:13-77
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: cert-manager
  17 │       app.kubernetes.io/instance: cert-manager
  18 │       app.kubernetes.io/component: controller
  19 │   template:
  20 │     metadata:
  21 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-controller in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager-v1.14.2_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.2
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.2
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────



cert-manager-v1.14.2_43.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager-v1.14.2_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager-v1.14.2_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager-v1.14.2_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager-v1.14.2_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager-v1.14.2_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager-v1.14.2_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-v1.14.2_43.yaml:13-85
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: webhook
  17 │       app.kubernetes.io/instance: cert-manager
  18 │       app.kubernetes.io/component: webhook
  19 │   template:
  20 │     metadata:
  21 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-webhook in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager-v1.14.2_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.2
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────



cert-manager-workload.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 8, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager-workload.yaml:38-58
────────────────────────────────────────
  38 ┌       - name: cert-manager-cainjector
  39 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --leader-election-namespace=cert-manager
  43 │         ports:
  44 │         - containerPort: 9402
  45 │           name: http-metrics
  46 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager-workload.yaml:38-58
────────────────────────────────────────
  38 ┌       - name: cert-manager-cainjector
  39 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --leader-election-namespace=cert-manager
  43 │         ports:
  44 │         - containerPort: 9402
  45 │           name: http-metrics
  46 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager-workload.yaml:38-58
────────────────────────────────────────
  38 ┌       - name: cert-manager-cainjector
  39 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --leader-election-namespace=cert-manager
  43 │         ports:
  44 │         - containerPort: 9402
  45 │           name: http-metrics
  46 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager-workload.yaml:38-58
────────────────────────────────────────
  38 ┌       - name: cert-manager-cainjector
  39 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --leader-election-namespace=cert-manager
  43 │         ports:
  44 │         - containerPort: 9402
  45 │           name: http-metrics
  46 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager-workload.yaml:38-58
────────────────────────────────────────
  38 ┌       - name: cert-manager-cainjector
  39 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --leader-election-namespace=cert-manager
  43 │         ports:
  44 │         - containerPort: 9402
  45 │           name: http-metrics
  46 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager-workload.yaml:38-58
────────────────────────────────────────
  38 ┌       - name: cert-manager-cainjector
  39 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --leader-election-namespace=cert-manager
  43 │         ports:
  44 │         - containerPort: 9402
  45 │           name: http-metrics
  46 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-workload.yaml:12-60
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       app.kubernetes.io/name: cainjector
  16 │       app.kubernetes.io/instance: cert-manager
  17 │       app.kubernetes.io/component: cainjector
  18 │   template:
  19 │     metadata:
  20 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cert-manager-cainjector in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cert-manager-workload.yaml:4-10
────────────────────────────────────────
   4 ┌   name: cert-manager-cainjector
   5 │   labels:
   6 │     app: cainjector
   7 │     app.kubernetes.io/name: cainjector
   8 │     app.kubernetes.io/instance: cert-manager
   9 │     app.kubernetes.io/component: cainjector
  10 └     app.kubernetes.io/version: v1.16.4
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-cainjector in deployment cert-manager-cainjector (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager-workload.yaml:38-58
────────────────────────────────────────
  38 ┌       - name: cert-manager-cainjector
  39 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --leader-election-namespace=cert-manager
  43 │         ports:
  44 │         - containerPort: 9402
  45 │           name: http-metrics
  46 └           protocol: TCP
  ..   
────────────────────────────────────────



cert-manager-workload1.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 8, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager-workload1.yaml:38-58
────────────────────────────────────────
  38 ┌       - name: cert-manager-cainjector
  39 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --leader-election-namespace=cert-manager
  43 │         ports:
  44 │         - containerPort: 9402
  45 │           name: http-metrics
  46 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager-workload1.yaml:38-58
────────────────────────────────────────
  38 ┌       - name: cert-manager-cainjector
  39 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --leader-election-namespace=cert-manager
  43 │         ports:
  44 │         - containerPort: 9402
  45 │           name: http-metrics
  46 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager-workload1.yaml:38-58
────────────────────────────────────────
  38 ┌       - name: cert-manager-cainjector
  39 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --leader-election-namespace=cert-manager
  43 │         ports:
  44 │         - containerPort: 9402
  45 │           name: http-metrics
  46 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager-workload1.yaml:38-58
────────────────────────────────────────
  38 ┌       - name: cert-manager-cainjector
  39 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --leader-election-namespace=cert-manager
  43 │         ports:
  44 │         - containerPort: 9402
  45 │           name: http-metrics
  46 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager-workload1.yaml:38-58
────────────────────────────────────────
  38 ┌       - name: cert-manager-cainjector
  39 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --leader-election-namespace=cert-manager
  43 │         ports:
  44 │         - containerPort: 9402
  45 │           name: http-metrics
  46 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager-workload1.yaml:38-58
────────────────────────────────────────
  38 ┌       - name: cert-manager-cainjector
  39 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --leader-election-namespace=cert-manager
  43 │         ports:
  44 │         - containerPort: 9402
  45 │           name: http-metrics
  46 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-workload1.yaml:12-60
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       app.kubernetes.io/name: cainjector
  16 │       app.kubernetes.io/instance: cert-manager
  17 │       app.kubernetes.io/component: cainjector
  18 │   template:
  19 │     metadata:
  20 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cert-manager-cainjector in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cert-manager-workload1.yaml:4-10
────────────────────────────────────────
   4 ┌   name: cert-manager-cainjector
   5 │   labels:
   6 │     app: cainjector
   7 │     app.kubernetes.io/name: cainjector
   8 │     app.kubernetes.io/instance: cert-manager
   9 │     app.kubernetes.io/component: cainjector
  10 └     app.kubernetes.io/version: v1.16.4
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-cainjector in deployment cert-manager-cainjector (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager-workload1.yaml:38-58
────────────────────────────────────────
  38 ┌       - name: cert-manager-cainjector
  39 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --leader-election-namespace=cert-manager
  43 │         ports:
  44 │         - containerPort: 9402
  45 │           name: http-metrics
  46 └           protocol: TCP
  ..   
────────────────────────────────────────



cert-manager-workload1_1.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 8, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager-workload1_1.yaml:38-74
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  43 │         - --leader-election-namespace=cert-manager
  44 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.16.4
  45 │         - --max-concurrent-challenges=60
  46 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager-workload1_1.yaml:38-74
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  43 │         - --leader-election-namespace=cert-manager
  44 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.16.4
  45 │         - --max-concurrent-challenges=60
  46 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager-workload1_1.yaml:38-74
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  43 │         - --leader-election-namespace=cert-manager
  44 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.16.4
  45 │         - --max-concurrent-challenges=60
  46 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager-workload1_1.yaml:38-74
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  43 │         - --leader-election-namespace=cert-manager
  44 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.16.4
  45 │         - --max-concurrent-challenges=60
  46 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager-workload1_1.yaml:38-74
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  43 │         - --leader-election-namespace=cert-manager
  44 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.16.4
  45 │         - --max-concurrent-challenges=60
  46 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager-workload1_1.yaml:38-74
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  43 │         - --leader-election-namespace=cert-manager
  44 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.16.4
  45 │         - --max-concurrent-challenges=60
  46 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-workload1_1.yaml:12-76
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       app.kubernetes.io/name: cert-manager
  16 │       app.kubernetes.io/instance: cert-manager
  17 │       app.kubernetes.io/component: controller
  18 │   template:
  19 │     metadata:
  20 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cert-manager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cert-manager-workload1_1.yaml:4-10
────────────────────────────────────────
   4 ┌   name: cert-manager
   5 │   labels:
   6 │     app: cert-manager
   7 │     app.kubernetes.io/name: cert-manager
   8 │     app.kubernetes.io/instance: cert-manager
   9 │     app.kubernetes.io/component: controller
  10 └     app.kubernetes.io/version: v1.16.4
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-controller in deployment cert-manager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager-workload1_1.yaml:38-74
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  43 │         - --leader-election-namespace=cert-manager
  44 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.16.4
  45 │         - --max-concurrent-challenges=60
  46 └         ports:
  ..   
────────────────────────────────────────



cert-manager-workload1_2.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 8, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager-workload1_2.yaml:38-89
────────────────────────────────────────
  38 ┌       - name: cert-manager-webhook
  39 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --secure-port=10250
  43 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  44 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  45 │         - --dynamic-serving-dns-names=cert-manager-webhook
  46 └         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager-workload1_2.yaml:38-89
────────────────────────────────────────
  38 ┌       - name: cert-manager-webhook
  39 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --secure-port=10250
  43 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  44 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  45 │         - --dynamic-serving-dns-names=cert-manager-webhook
  46 └         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager-workload1_2.yaml:38-89
────────────────────────────────────────
  38 ┌       - name: cert-manager-webhook
  39 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --secure-port=10250
  43 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  44 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  45 │         - --dynamic-serving-dns-names=cert-manager-webhook
  46 └         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager-workload1_2.yaml:38-89
────────────────────────────────────────
  38 ┌       - name: cert-manager-webhook
  39 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --secure-port=10250
  43 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  44 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  45 │         - --dynamic-serving-dns-names=cert-manager-webhook
  46 └         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager-workload1_2.yaml:38-89
────────────────────────────────────────
  38 ┌       - name: cert-manager-webhook
  39 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --secure-port=10250
  43 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  44 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  45 │         - --dynamic-serving-dns-names=cert-manager-webhook
  46 └         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager-workload1_2.yaml:38-89
────────────────────────────────────────
  38 ┌       - name: cert-manager-webhook
  39 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --secure-port=10250
  43 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  44 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  45 │         - --dynamic-serving-dns-names=cert-manager-webhook
  46 └         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-workload1_2.yaml:12-91
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       app.kubernetes.io/name: webhook
  16 │       app.kubernetes.io/instance: cert-manager
  17 │       app.kubernetes.io/component: webhook
  18 │   template:
  19 │     metadata:
  20 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cert-manager-webhook in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cert-manager-workload1_2.yaml:4-10
────────────────────────────────────────
   4 ┌   name: cert-manager-webhook
   5 │   labels:
   6 │     app: webhook
   7 │     app.kubernetes.io/name: webhook
   8 │     app.kubernetes.io/instance: cert-manager
   9 │     app.kubernetes.io/component: webhook
  10 └     app.kubernetes.io/version: v1.16.4
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-webhook in deployment cert-manager-webhook (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager-workload1_2.yaml:38-89
────────────────────────────────────────
  38 ┌       - name: cert-manager-webhook
  39 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --secure-port=10250
  43 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  44 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  45 │         - --dynamic-serving-dns-names=cert-manager-webhook
  46 └         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
  ..   
────────────────────────────────────────



cert-manager-workload_1.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 8, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager-workload_1.yaml:38-74
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  43 │         - --leader-election-namespace=cert-manager
  44 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.16.4
  45 │         - --max-concurrent-challenges=60
  46 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager-workload_1.yaml:38-74
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  43 │         - --leader-election-namespace=cert-manager
  44 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.16.4
  45 │         - --max-concurrent-challenges=60
  46 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager-workload_1.yaml:38-74
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  43 │         - --leader-election-namespace=cert-manager
  44 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.16.4
  45 │         - --max-concurrent-challenges=60
  46 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager-workload_1.yaml:38-74
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  43 │         - --leader-election-namespace=cert-manager
  44 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.16.4
  45 │         - --max-concurrent-challenges=60
  46 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager-workload_1.yaml:38-74
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  43 │         - --leader-election-namespace=cert-manager
  44 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.16.4
  45 │         - --max-concurrent-challenges=60
  46 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager-workload_1.yaml:38-74
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  43 │         - --leader-election-namespace=cert-manager
  44 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.16.4
  45 │         - --max-concurrent-challenges=60
  46 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-workload_1.yaml:12-76
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       app.kubernetes.io/name: cert-manager
  16 │       app.kubernetes.io/instance: cert-manager
  17 │       app.kubernetes.io/component: controller
  18 │   template:
  19 │     metadata:
  20 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cert-manager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cert-manager-workload_1.yaml:4-10
────────────────────────────────────────
   4 ┌   name: cert-manager
   5 │   labels:
   6 │     app: cert-manager
   7 │     app.kubernetes.io/name: cert-manager
   8 │     app.kubernetes.io/instance: cert-manager
   9 │     app.kubernetes.io/component: controller
  10 └     app.kubernetes.io/version: v1.16.4
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-controller in deployment cert-manager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager-workload_1.yaml:38-74
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  43 │         - --leader-election-namespace=cert-manager
  44 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.16.4
  45 │         - --max-concurrent-challenges=60
  46 └         ports:
  ..   
────────────────────────────────────────



cert-manager-workload_2.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 8, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager-workload_2.yaml:38-89
────────────────────────────────────────
  38 ┌       - name: cert-manager-webhook
  39 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --secure-port=10250
  43 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  44 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  45 │         - --dynamic-serving-dns-names=cert-manager-webhook
  46 └         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager-workload_2.yaml:38-89
────────────────────────────────────────
  38 ┌       - name: cert-manager-webhook
  39 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --secure-port=10250
  43 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  44 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  45 │         - --dynamic-serving-dns-names=cert-manager-webhook
  46 └         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager-workload_2.yaml:38-89
────────────────────────────────────────
  38 ┌       - name: cert-manager-webhook
  39 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --secure-port=10250
  43 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  44 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  45 │         - --dynamic-serving-dns-names=cert-manager-webhook
  46 └         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager-workload_2.yaml:38-89
────────────────────────────────────────
  38 ┌       - name: cert-manager-webhook
  39 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --secure-port=10250
  43 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  44 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  45 │         - --dynamic-serving-dns-names=cert-manager-webhook
  46 └         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager-workload_2.yaml:38-89
────────────────────────────────────────
  38 ┌       - name: cert-manager-webhook
  39 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --secure-port=10250
  43 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  44 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  45 │         - --dynamic-serving-dns-names=cert-manager-webhook
  46 └         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager-workload_2.yaml:38-89
────────────────────────────────────────
  38 ┌       - name: cert-manager-webhook
  39 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --secure-port=10250
  43 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  44 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  45 │         - --dynamic-serving-dns-names=cert-manager-webhook
  46 └         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager-workload_2.yaml:12-91
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       app.kubernetes.io/name: webhook
  16 │       app.kubernetes.io/instance: cert-manager
  17 │       app.kubernetes.io/component: webhook
  18 │   template:
  19 │     metadata:
  20 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cert-manager-webhook in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cert-manager-workload_2.yaml:4-10
────────────────────────────────────────
   4 ┌   name: cert-manager-webhook
   5 │   labels:
   6 │     app: webhook
   7 │     app.kubernetes.io/name: webhook
   8 │     app.kubernetes.io/instance: cert-manager
   9 │     app.kubernetes.io/component: webhook
  10 └     app.kubernetes.io/version: v1.16.4
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-webhook in deployment cert-manager-webhook (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager-workload_2.yaml:38-89
────────────────────────────────────────
  38 ┌       - name: cert-manager-webhook
  39 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.4
  40 │         args:
  41 │         - --v=2
  42 │         - --secure-port=10250
  43 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  44 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  45 │         - --dynamic-serving-dns-names=cert-manager-webhook
  46 └         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
  ..   
────────────────────────────────────────



cert-manager101_10.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager101_10.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager101_10.yaml:37-47
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 └   - watch
  ..   
────────────────────────────────────────



cert-manager101_11.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager101_11.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager101_12.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager101_12.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager101_13.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager101_13.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



cert-manager101_14.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager101_14.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



cert-manager101_15.yaml (kubernetes)
====================================
Tests: 117 (SUCCESSES: 112, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager101_15.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager101_15.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager101_15.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager101_15.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager101_15.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────



cert-manager101_35.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager101_35.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   resourceNames:
  18 │   - cert-manager-webhook-ca
  19 │   verbs:
  20 │   - get
  21 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager101_35.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - secrets
  28 │   verbs:
  29 └   - create
────────────────────────────────────────



cert-manager101_39.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager101_39.yaml:13-22
────────────────────────────────────────
  13 ┌   type: ClusterIP
  14 │   ports:
  15 │   - protocol: TCP
  16 │     port: 9402
  17 │     name: tcp-prometheus-servicemonitor
  18 │     targetPort: 9402
  19 │   selector:
  20 │     app.kubernetes.io/name: cert-manager
  21 │     app.kubernetes.io/instance: cert-manager
  22 └     app.kubernetes.io/component: controller
────────────────────────────────────────



cert-manager101_40.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager101_40.yaml:13-22
────────────────────────────────────────
  13 ┌   type: ClusterIP
  14 │   ports:
  15 │   - name: https
  16 │     port: 443
  17 │     protocol: TCP
  18 │     targetPort: https
  19 │   selector:
  20 │     app.kubernetes.io/name: webhook
  21 │     app.kubernetes.io/instance: cert-manager
  22 └     app.kubernetes.io/component: webhook
────────────────────────────────────────



cert-manager101_41.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager101_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.5
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager101_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.5
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager101_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.5
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager101_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.5
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager101_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.5
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager101_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.5
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager101_41.yaml:13-53
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: cainjector
  17 │       app.kubernetes.io/instance: cert-manager
  18 │       app.kubernetes.io/component: cainjector
  19 │   template:
  20 │     metadata:
  21 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-cainjector in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager101_41.yaml:35-51
────────────────────────────────────────
  35 ┌       - name: cert-manager-cainjector
  36 │         image: quay.io/jetstack/cert-manager-cainjector:v1.14.5
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --leader-election-namespace=kube-system
  41 │         env:
  42 │         - name: POD_NAMESPACE
  43 └           valueFrom:
  ..   
────────────────────────────────────────



cert-manager101_42.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager101_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.5
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.5
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager101_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.5
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.5
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager101_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.5
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.5
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager101_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.5
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.5
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager101_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.5
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.5
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager101_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.5
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.5
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager101_42.yaml:13-77
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: cert-manager
  17 │       app.kubernetes.io/instance: cert-manager
  18 │       app.kubernetes.io/component: controller
  19 │   template:
  20 │     metadata:
  21 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-controller in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager101_42.yaml:39-75
────────────────────────────────────────
  39 ┌       - name: cert-manager-controller
  40 │         image: quay.io/jetstack/cert-manager-controller:v1.14.5
  41 │         imagePullPolicy: IfNotPresent
  42 │         args:
  43 │         - --v=2
  44 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  45 │         - --leader-election-namespace=kube-system
  46 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.5
  47 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────



cert-manager101_43.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager101_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.5
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager101_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.5
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager101_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.5
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager101_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.5
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager101_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.5
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager101_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.5
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager101_43.yaml:13-85
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: webhook
  17 │       app.kubernetes.io/instance: cert-manager
  18 │       app.kubernetes.io/component: webhook
  19 │   template:
  20 │     metadata:
  21 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-webhook in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager101_43.yaml:35-83
────────────────────────────────────────
  35 ┌       - name: cert-manager-webhook
  36 │         image: quay.io/jetstack/cert-manager-webhook:v1.14.5
  37 │         imagePullPolicy: IfNotPresent
  38 │         args:
  39 │         - --v=2
  40 │         - --secure-port=10250
  41 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  42 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  43 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────



cert-manager103_11.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager103_11.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager103_11.yaml:37-46
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 │   - watch
  46 └   - update
────────────────────────────────────────



cert-manager103_12.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager103_12.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager103_13.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager103_13.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager103_14.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager103_14.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



cert-manager103_15.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager103_15.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



cert-manager103_16.yaml (kubernetes)
====================================
Tests: 117 (SUCCESSES: 112, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager103_16.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager103_16.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager103_16.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager103_16.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager103_16.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────



cert-manager103_35.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager103_35.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   resourceNames:
  18 │   - cert-manager-webhook-ca
  19 │   verbs:
  20 │   - get
  21 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 cert-manager103_35.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - secrets
  28 │   verbs:
  29 └   - create
────────────────────────────────────────



cert-manager103_39.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager103_39.yaml:13-22
────────────────────────────────────────
  13 ┌   type: ClusterIP
  14 │   ports:
  15 │   - protocol: TCP
  16 │     port: 9402
  17 │     name: tcp-prometheus-servicemonitor
  18 │     targetPort: 9402
  19 │   selector:
  20 │     app.kubernetes.io/name: cert-manager
  21 │     app.kubernetes.io/instance: cert-manager
  22 └     app.kubernetes.io/component: controller
────────────────────────────────────────



cert-manager103_40.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager103_40.yaml:13-22
────────────────────────────────────────
  13 ┌   type: ClusterIP
  14 │   ports:
  15 │   - name: https
  16 │     port: 443
  17 │     protocol: TCP
  18 │     targetPort: https
  19 │   selector:
  20 │     app.kubernetes.io/name: webhook
  21 │     app.kubernetes.io/instance: cert-manager
  22 └     app.kubernetes.io/component: webhook
────────────────────────────────────────



cert-manager103_41.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager103_41.yaml:34-49
────────────────────────────────────────
  34 ┌       - name: cert-manager-cainjector
  35 │         image: quay.io/jetstack/cert-manager-cainjector:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --leader-election-namespace=kube-system
  40 │         env:
  41 │         - name: POD_NAMESPACE
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager103_41.yaml:34-49
────────────────────────────────────────
  34 ┌       - name: cert-manager-cainjector
  35 │         image: quay.io/jetstack/cert-manager-cainjector:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --leader-election-namespace=kube-system
  40 │         env:
  41 │         - name: POD_NAMESPACE
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager103_41.yaml:34-49
────────────────────────────────────────
  34 ┌       - name: cert-manager-cainjector
  35 │         image: quay.io/jetstack/cert-manager-cainjector:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --leader-election-namespace=kube-system
  40 │         env:
  41 │         - name: POD_NAMESPACE
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager103_41.yaml:34-49
────────────────────────────────────────
  34 ┌       - name: cert-manager-cainjector
  35 │         image: quay.io/jetstack/cert-manager-cainjector:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --leader-election-namespace=kube-system
  40 │         env:
  41 │         - name: POD_NAMESPACE
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager103_41.yaml:34-49
────────────────────────────────────────
  34 ┌       - name: cert-manager-cainjector
  35 │         image: quay.io/jetstack/cert-manager-cainjector:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --leader-election-namespace=kube-system
  40 │         env:
  41 │         - name: POD_NAMESPACE
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager103_41.yaml:34-49
────────────────────────────────────────
  34 ┌       - name: cert-manager-cainjector
  35 │         image: quay.io/jetstack/cert-manager-cainjector:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --leader-election-namespace=kube-system
  40 │         env:
  41 │         - name: POD_NAMESPACE
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager103_41.yaml:34-49
────────────────────────────────────────
  34 ┌       - name: cert-manager-cainjector
  35 │         image: quay.io/jetstack/cert-manager-cainjector:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --leader-election-namespace=kube-system
  40 │         env:
  41 │         - name: POD_NAMESPACE
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager103_41.yaml:13-51
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: cainjector
  17 │       app.kubernetes.io/instance: cert-manager
  18 │       app.kubernetes.io/component: cainjector
  19 │   template:
  20 │     metadata:
  21 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-cainjector in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager103_41.yaml:34-49
────────────────────────────────────────
  34 ┌       - name: cert-manager-cainjector
  35 │         image: quay.io/jetstack/cert-manager-cainjector:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --leader-election-namespace=kube-system
  40 │         env:
  41 │         - name: POD_NAMESPACE
  42 └           valueFrom:
  ..   
────────────────────────────────────────



cert-manager103_42.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager103_42.yaml:38-59
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.10.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         args:
  42 │         - --v=2
  43 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  44 │         - --leader-election-namespace=kube-system
  45 │         - --feature-gates=ExperimentalGatewayAPISupport=true
  46 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager103_42.yaml:38-59
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.10.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         args:
  42 │         - --v=2
  43 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  44 │         - --leader-election-namespace=kube-system
  45 │         - --feature-gates=ExperimentalGatewayAPISupport=true
  46 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager103_42.yaml:38-59
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.10.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         args:
  42 │         - --v=2
  43 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  44 │         - --leader-election-namespace=kube-system
  45 │         - --feature-gates=ExperimentalGatewayAPISupport=true
  46 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager103_42.yaml:38-59
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.10.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         args:
  42 │         - --v=2
  43 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  44 │         - --leader-election-namespace=kube-system
  45 │         - --feature-gates=ExperimentalGatewayAPISupport=true
  46 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager103_42.yaml:38-59
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.10.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         args:
  42 │         - --v=2
  43 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  44 │         - --leader-election-namespace=kube-system
  45 │         - --feature-gates=ExperimentalGatewayAPISupport=true
  46 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager103_42.yaml:38-59
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.10.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         args:
  42 │         - --v=2
  43 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  44 │         - --leader-election-namespace=kube-system
  45 │         - --feature-gates=ExperimentalGatewayAPISupport=true
  46 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager103_42.yaml:38-59
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.10.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         args:
  42 │         - --v=2
  43 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  44 │         - --leader-election-namespace=kube-system
  45 │         - --feature-gates=ExperimentalGatewayAPISupport=true
  46 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager103_42.yaml:13-61
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: cert-manager
  17 │       app.kubernetes.io/instance: cert-manager
  18 │       app.kubernetes.io/component: controller
  19 │   template:
  20 │     metadata:
  21 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-controller in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager103_42.yaml:38-59
────────────────────────────────────────
  38 ┌       - name: cert-manager-controller
  39 │         image: quay.io/jetstack/cert-manager-controller:v1.10.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         args:
  42 │         - --v=2
  43 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  44 │         - --leader-election-namespace=kube-system
  45 │         - --feature-gates=ExperimentalGatewayAPISupport=true
  46 └         ports:
  ..   
────────────────────────────────────────



cert-manager103_43.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 106, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cert-manager103_43.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: cert-manager-webhook
  35 │         image: quay.io/jetstack/cert-manager-webhook:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --secure-port=10250
  40 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  41 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  42 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cert-manager103_43.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: cert-manager-webhook
  35 │         image: quay.io/jetstack/cert-manager-webhook:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --secure-port=10250
  40 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  41 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  42 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cert-manager103_43.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: cert-manager-webhook
  35 │         image: quay.io/jetstack/cert-manager-webhook:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --secure-port=10250
  40 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  41 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  42 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cert-manager103_43.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: cert-manager-webhook
  35 │         image: quay.io/jetstack/cert-manager-webhook:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --secure-port=10250
  40 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  41 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  42 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cert-manager103_43.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: cert-manager-webhook
  35 │         image: quay.io/jetstack/cert-manager-webhook:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --secure-port=10250
  40 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  41 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  42 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cert-manager103_43.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: cert-manager-webhook
  35 │         image: quay.io/jetstack/cert-manager-webhook:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --secure-port=10250
  40 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  41 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  42 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cert-manager103_43.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: cert-manager-webhook
  35 │         image: quay.io/jetstack/cert-manager-webhook:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --secure-port=10250
  40 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  41 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  42 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cert-manager103_43.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: webhook
  17 │       app.kubernetes.io/instance: cert-manager
  18 │       app.kubernetes.io/component: webhook
  19 │   template:
  20 │     metadata:
  21 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-webhook in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cert-manager103_43.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: cert-manager-webhook
  35 │         image: quay.io/jetstack/cert-manager-webhook:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         args:
  38 │         - --v=2
  39 │         - --secure-port=10250
  40 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  41 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  42 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────



cert-manager104_11.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager104_11.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 cert-manager104_11.yaml:37-46
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 │   - watch
  46 └   - update
────────────────────────────────────────



cert-manager104_12.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager104_12.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager104_13.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager104_13.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



cert-manager104_14.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager104_14.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



cert-manager104_15.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager104_15.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



cert-manager104_16.yaml (kubernetes)
====================================
Tests: 117 (SUCCESSES: 112, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager104_16.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cert-manager104_16.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cert-manager104_16.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager104_16.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 cert-manager104_16.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────


