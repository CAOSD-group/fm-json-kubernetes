
Report Summary

┌──────────────────────────────────────────────┬────────────┬───────────────────┐
│                    Target                    │    Type    │ Misconfigurations │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PHP-Nginx-Deployment-ConfMap-Service.yaml    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PHP-Nginx-Deployment-ConfMap-Service_1.yaml  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PHP-Nginx-Deployment-ConfMap-Service_2.yaml  │ kubernetes │        27         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolume.manual-kind.yaml            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolume.manual-kind_1.yaml          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolume107.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolume110.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolume20.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolume21.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolume210.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolume36.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolume37.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolume38.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolume41.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolume52.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolume52_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolume53.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolume53_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolume65.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolume67.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolume68.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolume69.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolume70.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolume77.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolume78.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolume82.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaim-shiori.yaml            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaim-traefik.yaml           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaim.dynamic-pv-civo.yaml   │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaim.dynamic-pv-gke.yaml    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaim.dynamic-pv-kind.yaml   │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaim.manual-pv-kind.yaml    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaim110.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaim132.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaim17.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaim210.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaim29.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaim35.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaim36.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaim37.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaim41.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaim5.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaim59.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaim85.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaim88.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaim91.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaim97.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaim_1.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaim_2.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaim_3.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaims.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumeClaims1.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PersistentVolumentClaim.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PiHole-Deployment1.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PiHole-Deployment1_1.yaml                    │ kubernetes │        36         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ PiHole-Deployment1_2.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pers_1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume111.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume13.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume14.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume16.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume23.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume23_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume24.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume24_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume25.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume25_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume26.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume26_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume27.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume27_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume28.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume3.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume31.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume32.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume33.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume34.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume4.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume43.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume48.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume48_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume49.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume57.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume6.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume63.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolume63_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolumeClaim111.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolumeClaim135.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolumeClaim32.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolumeClaim33.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolumeClaim42.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolumeClaim51.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolumeClaim51_1.yaml               │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolumeClaim55.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolumeClaim58.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolumeClaim58_1.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolumeClaim86.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolumeClaim94.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentVolumeCreate.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent_volume.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent_volume1.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent_volume10.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent_volume11.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent_volume13.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent_volume13_1.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent_volume13_2.yaml                   │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent_volume15.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent_volume3.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent_volume4.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent_volume5.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent_volume6.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent_volume7.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent_volume8.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent_volume9.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent_volume9_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent_volume_claim.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent_volume_claim1.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent_volume_claim3.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent_volume_claim4.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent_volume_claim5.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent_volume_claim6.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent_volume_claim6_1.yaml              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistent_volume_claim7.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume1.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume100.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume102.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume104.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume106.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume108.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume109.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume11.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume12.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume15.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume17.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume18.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume19.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume2.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume22.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume29.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume30.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume35.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume40.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume42.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume44.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume46.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume47.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume5.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume50.yaml                      │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume50_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume50_2.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume51.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume54.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume55.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume59.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume59_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume60.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume60_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume61.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume61_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume61_2.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume61_3.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume62.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume64.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume66.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume7.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume71.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume71_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume71_2.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume72.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume72_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume72_2.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume73.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume74.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume76.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume8.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume81.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume84.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume85.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume86.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume87.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume88.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume89.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume9.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume90.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume91.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume92.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume93.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume94.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume95.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume96.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume97.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume98.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume99.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume_hashgen.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume_hostpath_manifest.yaml      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolume_nfs_manifest.yaml           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim-db.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim-db1.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim-db10.yaml              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim-db12.yaml              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim-db13.yaml              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim-db13_1.yaml            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim-db14.yaml              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim-db14_1.yaml            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim-db2.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim-db3.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim-db4.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim-db5.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim-db7.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim-db9.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim-nfs.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim-nfs_1.yaml             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim-nfs_2.yaml             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim-nfs_3.yaml             │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim-ping.yaml              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim-ping1.yaml             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim-ping2.yaml             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim1.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim10.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim100.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim101.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim102.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim103.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim104.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim105.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim106.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim107.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim108.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim109.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim112.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim113.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim114.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim115.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim116.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim117.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim118.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim119.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim120.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim121.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim122.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim123.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim124.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim125.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim126.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim127.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim128.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim129.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim129_1.yaml              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim13.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim130.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim130_1.yaml              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim131.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim133.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim134.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim14.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim15.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim16.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim18.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim19.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim2.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim20.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim21.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim22.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim24.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim25.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim26.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim27.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim28.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim3.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim31.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim34.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim39.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim4.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim43.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim52.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim53.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim54.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim56.yaml                 │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim56_1.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim57.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim6.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim60.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim61.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim63.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim63_1.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim64.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim64_1.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim65.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim66.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim67.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim68.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim69.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim7.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim70.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim71.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim73.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim74.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim74_1.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim75.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim75_1.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim76.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim77.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim78.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim79.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim8.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim80.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim81.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim83.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim87.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim89.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim9.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim93.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim96.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim98.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim99.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim_hashgen.yaml           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim_hashgen1.yaml          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim_hashgen2.yaml          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistentvolumeclaim_manifest.yaml          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persistvol.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persitent-volume.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persitent-volume_1.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persitent_volume_claim.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persitent_volume_claim1.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persitent_volume_claim2.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persitent_volume_claim3.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persitent_volume_claim4.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ persitent_volume_claim5.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pervolume.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pet_editor_role.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pet_editor_role1.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pet_viewer_role.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pet_viewer_role1.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ petclinic-deployment.yaml                    │ kubernetes │        16         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ petclinic-deployment1.yaml                   │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ petclinic-hpa.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ petclinic-ingress.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ petclinic-service.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ petclinic.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ petclinic_1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ petclinic_2.yaml                             │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ petstore-app.yaml                            │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ petstore-app_1.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ petstore-app_2.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ petstore_v1alpha1_pet.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ petstore_v1alpha1_pet1.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ petstore_v1alpha1_pet1_1.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ petstore_v1alpha1_pet_1.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-claim.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-cm.yaml                                   │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-config.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-config1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-config1_1.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-config_1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-configmap.yaml                            │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-configmap1.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-configmap2.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-configmap3.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-data-persistentvolumeclaim.yaml           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-data-persistentvolumeclaim1.yaml          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-deploy.yaml                               │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-deploy1.yaml                              │ kubernetes │        13         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-deployment.yaml                           │ kubernetes │        13         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-deployment1.yaml                          │ kubernetes │        16         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-deployment2.yaml                          │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-deployment3.yaml                          │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-deployment4.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-deployment4_1.yaml                        │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-deployment4_2.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-exporter.yaml                             │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-hba-config-map.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-pods.yaml                                 │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-pv-pvc.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-pv-pvc_1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-pv.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-pvc.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-pvc1.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-pvc2.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-secret.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-service.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-service1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-service2.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-service3.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-svc-checker.yaml                          │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-svc.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-svc1.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-svc2.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-svc3.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-volume.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg-volume1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg1.yaml                                     │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg1_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg1_2.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg1_3.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_2.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_3.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_4.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_5.yaml                                    │ kubernetes │        32         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_6.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_combined_deployment.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_combined_deployment_1.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_combined_deployment_2.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_combined_deployment_3.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_combined_deployment_4.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_combined_deployment_5.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_combined_deployment_6.yaml                │ kubernetes │        16         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_config.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_headless_service.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_migrate.yaml                              │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_migrate1.yaml                             │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_pv.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_pv1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_pv2.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_pvc.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_pvc1.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_pvc2.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_secrets.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_service.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pg_stateful_set.yaml                         │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-configmap.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-configmap1.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-configmap2.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-data-persistentvolumeclaim.yaml      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-data-persistentvolumeclaim1.yaml     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-deploy.yaml                          │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-deployment.yaml                      │ kubernetes │        20         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-deployment1.yaml                     │ kubernetes │        20         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-deployment10.yaml                    │ kubernetes │        20         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-deployment11.yaml                    │ kubernetes │        20         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-deployment11_1.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-deployment13.yaml                    │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-deployment14.yaml                    │ kubernetes │        20         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-deployment15.yaml                    │ kubernetes │        20         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-deployment16.yaml                    │ kubernetes │        35         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-deployment2.yaml                     │ kubernetes │        20         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-deployment2_1.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-deployment3.yaml                     │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-deployment3_1.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-deployment4.yaml                     │ kubernetes │        20         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-deployment5.yaml                     │ kubernetes │        20         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-deployment6.yaml                     │ kubernetes │        21         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-deployment6_1.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-deployment7.yaml                     │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-deployment8.yaml                     │ kubernetes │        21         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-dpl.yaml                             │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-ingress.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-ingress1.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-ingress2.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-pv.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-pvc1.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-secret.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-secret2.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-service.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-service1.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-service10.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-service11.yaml                       │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-service12.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-service13.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-service2.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-service3.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-service4.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-service5.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-service6.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-service7.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-service9.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-statefulset.yaml                     │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin-svc.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin.yaml                                 │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin10.yaml                               │ kubernetes │        20         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin11.yaml                               │ kubernetes │        20         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin16.yaml                               │ kubernetes │        20         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin16_1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin2.yaml                                │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin2_1.yaml                              │ kubernetes │        20         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin5.yaml                                │ kubernetes │        20         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin5_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin6.yaml                                │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin6_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin7.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin7_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin7_2.yaml                              │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin7_3.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin8.yaml                                │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin8_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin_1.yaml                               │ kubernetes │        20         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgadmin_deploy1.yaml                         │ kubernetes │        20         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgbouncer-configmap.yaml                     │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgbouncer-deployment-spec.yaml               │ kubernetes │        14         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgbouncer-secrets.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgbouncer-service.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgbouncer.yaml                               │ kubernetes │        13         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgdata2-persistentvolumeclaim.yaml           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgpool-deployment.yaml                       │ kubernetes │        12         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgpool-secret.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgpool-svc-nodeport.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgpool-svc.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgsql-cm.yaml                                │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgsql-deployment.yaml                        │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgsql-ext-cfg.yaml                           │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgsql-ext-sec.yaml                           │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgsql-secret-2.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgsql-secret.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgsql-set.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgsql-set_1.yaml                             │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgsql.yaml                                   │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgsql2.yaml                                  │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgsql2_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgsql2_2.yaml                                │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgsql_deployment.yaml                        │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgsql_deployment1.yaml                       │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgsqlgule-classic.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgsqlgule-classic_1.yaml                     │ kubernetes │         9         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgsqlgule-uri.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgsqlgule-uri_1.yaml                         │ kubernetes │         9         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgvector-deployment.yaml                     │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgvector-deployment1.yaml                    │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgvector-deployment1_1.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgvector-deployment1_2.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgvector-deployment1_3.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgvector-deployment2.yaml                    │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgvector-deployment2_1.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgvector-deployment2_2.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgvector-deployment2_3.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgvector-deployment3.yaml                    │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgvector-deployment3_1.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgvector-deployment3_2.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgvector-deployment3_3.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgvector-deployment_1.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgvector-deployment_2.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgvector-deployment_3.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgweb.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pgweb_1.yaml                                 │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ photosmngservice.-dpl.yaml                   │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ photosmngservice.-dpl_1.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache-deployment.yaml                   │ kubernetes │        15         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache-deployment1.yaml                  │ kubernetes │        15         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache-deployment2.yaml                  │ kubernetes │        15         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache-hpa.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache-hpa1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache-hpa2.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache-hpa3.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache-service-node-port.yaml            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache-service-node-port1.yaml           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache-service-node-port2.yaml           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache10.yaml                            │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache10_1.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache11.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache11_1.yaml                          │ kubernetes │        14         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache12.yaml                            │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache12_1.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache13.yaml                            │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache13_1.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache14.yaml                            │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache14_1.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache16.yaml                            │ kubernetes │        15         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache17.yaml                            │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache17_1.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache18.yaml                            │ kubernetes │        15         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache18_1.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache3.yaml                             │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache3_1.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache4.yaml                             │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache4_1.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache5.yaml                             │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache5_1.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache8.yaml                             │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache8_1.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache9.yaml                             │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-apache9_1.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-app-deployment.yaml                      │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-app-deployment_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-backend-service.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-config-configmap.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-configmap.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-deploy.yaml                              │ kubernetes │        32         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-deployment.yaml                          │ kubernetes │        34         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-deployment1.yaml                         │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-deployment2.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-deployment2_1.yaml                       │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-deployment3.yaml                         │ kubernetes │        34         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-deployment3_1.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-deployment4.yaml                         │ kubernetes │        34         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-deployment4_1.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-deployment5.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-deployment5_1.yaml                       │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-deployment6.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-deployment6_1.yaml                       │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-fpm-config.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-fpm-deployment.yaml                      │ kubernetes │        36         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-fpm-service.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-fpm.yaml                                 │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-fpm1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-ldap-client-deployment.yaml              │ kubernetes │        48         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-ldap-client-service.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-onepage.yaml                             │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-onepage_1.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-page-sec.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-page-sec1.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-page-sec1_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-page-sec1_2.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-page-sec1_3.yaml                         │ kubernetes │        12         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-page-sec_1.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-page-sec_2.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-page-sec_3.yaml                          │ kubernetes │        12         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-page.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-page1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-page1_1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-page1_2.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-page1_3.yaml                             │ kubernetes │        14         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-page_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-page_2.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-page_3.yaml                              │ kubernetes │        14         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-pvc.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-service.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php-service1.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php_deployment.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php_deployment1.yaml                         │ kubernetes │        20         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php_deployment_1.yaml                        │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php_deployment_2.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ php_service.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmmyadmin-deploy.yaml                      │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmmyadmin-deploy_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-claim0-persistentvolumeclaim.yaml │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-configmap.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-deploy.yaml                       │ kubernetes │        14         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-deploy1.yaml                      │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-deploy1_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-deployment-group.yaml             │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-deployment.yaml                   │ kubernetes │        21         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-deployment1.yaml                  │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-deployment2_2.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-deployment3.yaml                  │ kubernetes │        20         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-deployment4.yaml                  │ kubernetes │        20         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-deployment5.yaml                  │ kubernetes │        20         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-deployment6.yaml                  │ kubernetes │        20         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-deployment7.yaml                  │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-ingress.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-ingress1.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-ingress2.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-mysql8.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-mysql8_1.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-mysql8_2.yaml                     │ kubernetes │        15         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-service-group.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-service.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-service1.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-service2.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-service3.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-service4.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-service5.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-service6.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin-svc.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin.yaml                              │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin1.yaml                             │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin1_1.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin2.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin2_1.yaml                           │ kubernetes │        20         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin3.yaml                             │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin3_1.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin4.yaml                             │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin4_1.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ phpmyadmin_1.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ physical-user.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ physical-user1.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi-controller-job.yaml                       │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi-https.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi-job-500dp.yaml                            │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi-job-50dp.yaml                             │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi-job-random.yaml                           │ kubernetes │        36         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi-job-random1.yaml                          │ kubernetes │        36         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi-job-random2.yaml                          │ kubernetes │        36         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi-job-random3.yaml                          │ kubernetes │        36         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi-job-random4.yaml                          │ kubernetes │        36         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi-job-restart.yaml                          │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi-job.yaml                                  │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi-job1.yaml                                 │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi-job2.yaml                                 │ kubernetes │        16         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi-job3.yaml                                 │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi-job4.yaml                                 │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi-job5.yaml                                 │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi-job6.yaml                                 │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi-led-api-deploy.yaml                       │ kubernetes │        15         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi-led-api-ingress.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi-led-api-svc.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi-nonroot.yaml                              │ kubernetes │        16         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi1.yaml                                     │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi10.yaml                                    │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi2.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi2_1.yaml                                   │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi3.yaml                                     │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi5.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi5_1.yaml                                   │ kubernetes │        20         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi6.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi6_1.yaml                                   │ kubernetes │        20         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi7.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi7_1.yaml                                   │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi8.yaml                                     │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi9.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi9_1.yaml                                   │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi_1.yaml                                    │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pi_jobs.yaml                                 │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ picture-gallery-deployment.yaml              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ picture-gallery-deployment_1.yaml            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ picture-gallery-deployment_2.yaml            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ picture-gallery-deployment_3.yaml            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ picture-gallery-deployment_4.yaml            │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ piehole.yaml                                 │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ piehole_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pihole-claim0-persistentvolumeclaim.yaml     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pihole-claim1-persistentvolumeclaim.yaml     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pihole-deployment.yaml                       │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pihole-ftl-configmap.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pihole-ingress-admin-redirect.yaml           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pihole-ingress.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pihole-pvc.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pihole-pvc1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pihole-pvc2.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pihole.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pihole1.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pihole1_3.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pihole1_4.yaml                               │ kubernetes │        36         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pihole1_5.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pihole5.yaml                                 │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pihole5_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pihole5_2.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pihole7.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pihole7_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pihole7_2.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pihole_3.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pihole_4.yaml                                │ kubernetes │        36         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pihole_5.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pihole_configMap.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pilot_disable_tracing.golden.yaml            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pilot_k8s_settings.golden.yaml               │ kubernetes │         8         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pilot_k8s_settings.golden_1.yaml             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pilot_merge_meshconfig.golden.yaml           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pilot_override_kubernetes.golden.yaml        │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pilot_override_kubernetes.golden_1.yaml      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pilot_override_kubernetes.golden_2.yaml      │ kubernetes │        15         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pilot_override_kubernetes.golden_3.yaml      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pilot_override_values.golden.yaml            │ kubernetes │         8         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pilot_override_values.golden_1.yaml          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-deployment.yaml                         │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-deployment1.yaml                        │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-deployment1_1.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-deployment2.yaml                        │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-deployment2_1.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-deployment3.yaml                        │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-deployment3_1.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-deployment4.yaml                        │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-deployment4_1.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-deployment5.yaml                        │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-deployment5_1.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-deployment6.yaml                        │ kubernetes │        15         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-deployment6_1.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-deployment_1.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-pang-service.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-pong-deployment.yaml                    │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-pong-deployment1.yaml                   │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-pong-deployment2.yaml                   │ kubernetes │        14         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-pong-deployment3.yaml                   │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-pong-lb-service.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-pong-service.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-pong-service1.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-pong-service2.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-pong-service3.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ping-service.yaml                            │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pingpong-autoscaler.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pinkapp-anamespace.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pinkapp-deploy.yaml                          │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pinkapp-service.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pinkapp.yaml                                 │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pinkservice.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pinnwand-deployment.yaml                     │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ piped-ingress.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ piped-ingress_2.yaml                         │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ piped-ingress_4.yaml                         │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pipeline-run.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pipeline.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pipeline3.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pipeline3_1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pipeline3_5.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pipeline_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pipeline_5.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pipelines-info-cm.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pixelfed-env-configmap.yaml                  │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pixelfed-env-configmap1.yaml                 │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pixoserviceaccount_editor_role.yaml          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pixoserviceaccount_viewer_role.yaml          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pizza.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pizza1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pizza1_1.yaml                                │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ pizza_1.yaml                                 │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ placeholder-deploy.yaml                      │ kubernetes │        16         │
└──────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


PHP-Nginx-Deployment-ConfMap-Service_2.yaml (kubernetes)
========================================================
Tests: 120 (SUCCESSES: 93, FAILURES: 27)
Failures: 27 (UNKNOWN: 0, LOW: 14, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'php-fpm-nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:54-90
────────────────────────────────────────
  54 ┌       - name: nginx
  55 │         image: nginx
  56 │         imagePullPolicy: IfNotPresent
  57 │         livenessProbe:
  58 │           initialDelaySeconds: 5
  59 │           periodSeconds: 10
  60 │           httpGet:
  61 │             path: /
  62 └             port: 80
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'php-fpm' of Deployment 'php-fpm-nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:16-53
────────────────────────────────────────
  16 ┌       - name: php-fpm
  17 │         image: php:7.4.29-fpm
  18 │         imagePullPolicy: IfNotPresent
  19 │         livenessProbe:
  20 │           initialDelaySeconds: 5
  21 │           periodSeconds: 10
  22 │           tcpSocket:
  23 │             port: 9000
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'php-fpm-nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:54-90
────────────────────────────────────────
  54 ┌       - name: nginx
  55 │         image: nginx
  56 │         imagePullPolicy: IfNotPresent
  57 │         livenessProbe:
  58 │           initialDelaySeconds: 5
  59 │           periodSeconds: 10
  60 │           httpGet:
  61 │             path: /
  62 └             port: 80
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-fpm' of Deployment 'php-fpm-nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:16-53
────────────────────────────────────────
  16 ┌       - name: php-fpm
  17 │         image: php:7.4.29-fpm
  18 │         imagePullPolicy: IfNotPresent
  19 │         livenessProbe:
  20 │           initialDelaySeconds: 5
  21 │           periodSeconds: 10
  22 │           tcpSocket:
  23 │             port: 9000
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'php-fpm-nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:54-90
────────────────────────────────────────
  54 ┌       - name: nginx
  55 │         image: nginx
  56 │         imagePullPolicy: IfNotPresent
  57 │         livenessProbe:
  58 │           initialDelaySeconds: 5
  59 │           periodSeconds: 10
  60 │           httpGet:
  61 │             path: /
  62 └             port: 80
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-fpm' of 'deployment' 'php-fpm-nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:16-53
────────────────────────────────────────
  16 ┌       - name: php-fpm
  17 │         image: php:7.4.29-fpm
  18 │         imagePullPolicy: IfNotPresent
  19 │         livenessProbe:
  20 │           initialDelaySeconds: 5
  21 │           periodSeconds: 10
  22 │           tcpSocket:
  23 │             port: 9000
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'php-fpm-nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:54-90
────────────────────────────────────────
  54 ┌       - name: nginx
  55 │         image: nginx
  56 │         imagePullPolicy: IfNotPresent
  57 │         livenessProbe:
  58 │           initialDelaySeconds: 5
  59 │           periodSeconds: 10
  60 │           httpGet:
  61 │             path: /
  62 └             port: 80
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-fpm' of Deployment 'php-fpm-nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:16-53
────────────────────────────────────────
  16 ┌       - name: php-fpm
  17 │         image: php:7.4.29-fpm
  18 │         imagePullPolicy: IfNotPresent
  19 │         livenessProbe:
  20 │           initialDelaySeconds: 5
  21 │           periodSeconds: 10
  22 │           tcpSocket:
  23 │             port: 9000
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'php-fpm-nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:54-90
────────────────────────────────────────
  54 ┌       - name: nginx
  55 │         image: nginx
  56 │         imagePullPolicy: IfNotPresent
  57 │         livenessProbe:
  58 │           initialDelaySeconds: 5
  59 │           periodSeconds: 10
  60 │           httpGet:
  61 │             path: /
  62 └             port: 80
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'php-fpm-nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:54-90
────────────────────────────────────────
  54 ┌       - name: nginx
  55 │         image: nginx
  56 │         imagePullPolicy: IfNotPresent
  57 │         livenessProbe:
  58 │           initialDelaySeconds: 5
  59 │           periodSeconds: 10
  60 │           httpGet:
  61 │             path: /
  62 └             port: 80
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-fpm' of Deployment 'php-fpm-nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:16-53
────────────────────────────────────────
  16 ┌       - name: php-fpm
  17 │         image: php:7.4.29-fpm
  18 │         imagePullPolicy: IfNotPresent
  19 │         livenessProbe:
  20 │           initialDelaySeconds: 5
  21 │           periodSeconds: 10
  22 │           tcpSocket:
  23 │             port: 9000
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'php-fpm-nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:54-90
────────────────────────────────────────
  54 ┌       - name: nginx
  55 │         image: nginx
  56 │         imagePullPolicy: IfNotPresent
  57 │         livenessProbe:
  58 │           initialDelaySeconds: 5
  59 │           periodSeconds: 10
  60 │           httpGet:
  61 │             path: /
  62 └             port: 80
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-fpm' of Deployment 'php-fpm-nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:16-53
────────────────────────────────────────
  16 ┌       - name: php-fpm
  17 │         image: php:7.4.29-fpm
  18 │         imagePullPolicy: IfNotPresent
  19 │         livenessProbe:
  20 │           initialDelaySeconds: 5
  21 │           periodSeconds: 10
  22 │           tcpSocket:
  23 │             port: 9000
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'php-fpm-nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:54-90
────────────────────────────────────────
  54 ┌       - name: nginx
  55 │         image: nginx
  56 │         imagePullPolicy: IfNotPresent
  57 │         livenessProbe:
  58 │           initialDelaySeconds: 5
  59 │           periodSeconds: 10
  60 │           httpGet:
  61 │             path: /
  62 └             port: 80
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-fpm' of Deployment 'php-fpm-nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:16-53
────────────────────────────────────────
  16 ┌       - name: php-fpm
  17 │         image: php:7.4.29-fpm
  18 │         imagePullPolicy: IfNotPresent
  19 │         livenessProbe:
  20 │           initialDelaySeconds: 5
  21 │           periodSeconds: 10
  22 │           tcpSocket:
  23 │             port: 9000
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0028 (LOW): Deployment 'php-fpm-nginx' should set 'spec.volumes[*]' to an allowed volume type
════════════════════════════════════════
According to pod security standard 'Volume types', non-core volume types must not be used.

See https://avd.aquasec.com/misconfig/ksv028
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:6-98
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: php-fpm-nginx
   9 │   replicas: 3
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: php-fpm-nginx
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:54-90
────────────────────────────────────────
  54 ┌       - name: nginx
  55 │         image: nginx
  56 │         imagePullPolicy: IfNotPresent
  57 │         livenessProbe:
  58 │           initialDelaySeconds: 5
  59 │           periodSeconds: 10
  60 │           httpGet:
  61 │             path: /
  62 └             port: 80
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:16-53
────────────────────────────────────────
  16 ┌       - name: php-fpm
  17 │         image: php:7.4.29-fpm
  18 │         imagePullPolicy: IfNotPresent
  19 │         livenessProbe:
  20 │           initialDelaySeconds: 5
  21 │           periodSeconds: 10
  22 │           tcpSocket:
  23 │             port: 9000
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "php-fpm-nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:54-90
────────────────────────────────────────
  54 ┌       - name: nginx
  55 │         image: nginx
  56 │         imagePullPolicy: IfNotPresent
  57 │         livenessProbe:
  58 │           initialDelaySeconds: 5
  59 │           periodSeconds: 10
  60 │           httpGet:
  61 │             path: /
  62 └             port: 80
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-fpm" of deployment "php-fpm-nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:16-53
────────────────────────────────────────
  16 ┌       - name: php-fpm
  17 │         image: php:7.4.29-fpm
  18 │         imagePullPolicy: IfNotPresent
  19 │         livenessProbe:
  20 │           initialDelaySeconds: 5
  21 │           periodSeconds: 10
  22 │           tcpSocket:
  23 │             port: 9000
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:16-53
────────────────────────────────────────
  16 ┌       - name: php-fpm
  17 │         image: php:7.4.29-fpm
  18 │         imagePullPolicy: IfNotPresent
  19 │         livenessProbe:
  20 │           initialDelaySeconds: 5
  21 │           periodSeconds: 10
  22 │           tcpSocket:
  23 │             port: 9000
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:54-90
────────────────────────────────────────
  54 ┌       - name: nginx
  55 │         image: nginx
  56 │         imagePullPolicy: IfNotPresent
  57 │         livenessProbe:
  58 │           initialDelaySeconds: 5
  59 │           periodSeconds: 10
  60 │           httpGet:
  61 │             path: /
  62 └             port: 80
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment php-fpm-nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:4
────────────────────────────────────────
   4 [   name: php-fpm-nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment php-fpm-nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-fpm-nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:16-53
────────────────────────────────────────
  16 ┌       - name: php-fpm
  17 │         image: php:7.4.29-fpm
  18 │         imagePullPolicy: IfNotPresent
  19 │         livenessProbe:
  20 │           initialDelaySeconds: 5
  21 │           periodSeconds: 10
  22 │           tcpSocket:
  23 │             port: 9000
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-fpm-nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:54-90
────────────────────────────────────────
  54 ┌       - name: nginx
  55 │         image: nginx
  56 │         imagePullPolicy: IfNotPresent
  57 │         livenessProbe:
  58 │           initialDelaySeconds: 5
  59 │           periodSeconds: 10
  60 │           httpGet:
  61 │             path: /
  62 └             port: 80
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-fpm-nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 PHP-Nginx-Deployment-ConfMap-Service_2.yaml:15-98
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: php-fpm
  17 │         image: php:7.4.29-fpm
  18 │         imagePullPolicy: IfNotPresent
  19 │         livenessProbe:
  20 │           initialDelaySeconds: 5
  21 │           periodSeconds: 10
  22 │           tcpSocket:
  23 └             port: 9000
  ..   
────────────────────────────────────────



PiHole-Deployment1_1.yaml (kubernetes)
======================================
Tests: 125 (SUCCESSES: 89, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 20, MEDIUM: 12, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cloudflared' of Deployment 'pihole' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'pihole' of Deployment 'pihole' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: Europe/London
  38 │         - name: WEBPASSWORD
  39 │           value: password
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cloudflared' of Deployment 'pihole' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pihole' of Deployment 'pihole' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: Europe/London
  38 │         - name: WEBPASSWORD
  39 │           value: password
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cloudflared' of 'deployment' 'pihole' in 'pihole' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pihole' of 'deployment' 'pihole' in 'pihole' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: Europe/London
  38 │         - name: WEBPASSWORD
  39 │           value: password
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cloudflared' of Deployment 'pihole' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pihole' of Deployment 'pihole' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: Europe/London
  38 │         - name: WEBPASSWORD
  39 │           value: password
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cloudflared' of Deployment 'pihole' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pihole' of Deployment 'pihole' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: Europe/London
  38 │         - name: WEBPASSWORD
  39 │           value: password
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cloudflared' of Deployment 'pihole' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pihole' of Deployment 'pihole' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: Europe/London
  38 │         - name: WEBPASSWORD
  39 │           value: password
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cloudflared' of Deployment 'pihole' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pihole' of Deployment 'pihole' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: Europe/London
  38 │         - name: WEBPASSWORD
  39 │           value: password
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cloudflared' of Deployment 'pihole' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pihole' of Deployment 'pihole' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: Europe/London
  38 │         - name: WEBPASSWORD
  39 │           value: password
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cloudflared' of Deployment 'pihole' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pihole' of Deployment 'pihole' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: Europe/London
  38 │         - name: WEBPASSWORD
  39 │           value: password
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cloudflared' of Deployment 'pihole' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pihole' of Deployment 'pihole' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: Europe/London
  38 │         - name: WEBPASSWORD
  39 │           value: password
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cloudflared' of Deployment 'pihole' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pihole' of Deployment 'pihole' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: Europe/London
  38 │         - name: WEBPASSWORD
  39 │           value: password
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cloudflared' of Deployment 'pihole' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pihole' of Deployment 'pihole' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: Europe/London
  38 │         - name: WEBPASSWORD
  39 │           value: password
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'pihole' of Deployment 'pihole' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: Europe/London
  38 │         - name: WEBPASSWORD
  39 │           value: password
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: Europe/London
  38 │         - name: WEBPASSWORD
  39 │           value: password
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cloudflared" of deployment "pihole" in "pihole" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pihole" of deployment "pihole" in "pihole" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: Europe/London
  38 │         - name: WEBPASSWORD
  39 │           value: password
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: Europe/London
  38 │         - name: WEBPASSWORD
  39 │           value: password
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pihole in pihole namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pihole in pihole namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pihole in pihole namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:19-74
────────────────────────────────────────
  19 ┌       nodeSelector:
  20 │         worker: 'true'
  21 │       containers:
  22 │       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 └           name: dns
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cloudflared in deployment pihole (namespace: pihole) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pihole in deployment pihole (namespace: pihole) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 PiHole-Deployment1_1.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: Europe/London
  38 │         - name: WEBPASSWORD
  39 │           value: password
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────



persistentVolumeClaim51_1.yaml (kubernetes)
===========================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-pvc-pod' of Pod 'nginx-pvc-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistentVolumeClaim51_1.yaml:13-20
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: nginx-pvc-pod
  15 │     ports:
  16 │     - containerPort: 80
  17 │       name: webserver
  18 │     volumeMounts:
  19 │     - mountPath: /usr/share/nginx/html
  20 └       name: site-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-pvc-pod' of Pod 'nginx-pvc-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistentVolumeClaim51_1.yaml:13-20
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: nginx-pvc-pod
  15 │     ports:
  16 │     - containerPort: 80
  17 │       name: webserver
  18 │     volumeMounts:
  19 │     - mountPath: /usr/share/nginx/html
  20 └       name: site-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-pvc-pod' of 'pod' 'nginx-pvc-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistentVolumeClaim51_1.yaml:13-20
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: nginx-pvc-pod
  15 │     ports:
  16 │     - containerPort: 80
  17 │       name: webserver
  18 │     volumeMounts:
  19 │     - mountPath: /usr/share/nginx/html
  20 └       name: site-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-pvc-pod' of Pod 'nginx-pvc-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistentVolumeClaim51_1.yaml:13-20
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: nginx-pvc-pod
  15 │     ports:
  16 │     - containerPort: 80
  17 │       name: webserver
  18 │     volumeMounts:
  19 │     - mountPath: /usr/share/nginx/html
  20 └       name: site-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-pvc-pod' of Pod 'nginx-pvc-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistentVolumeClaim51_1.yaml:13-20
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: nginx-pvc-pod
  15 │     ports:
  16 │     - containerPort: 80
  17 │       name: webserver
  18 │     volumeMounts:
  19 │     - mountPath: /usr/share/nginx/html
  20 └       name: site-storage
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-pvc-pod' of Pod 'nginx-pvc-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 persistentVolumeClaim51_1.yaml:13-20
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: nginx-pvc-pod
  15 │     ports:
  16 │     - containerPort: 80
  17 │       name: webserver
  18 │     volumeMounts:
  19 │     - mountPath: /usr/share/nginx/html
  20 └       name: site-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-pvc-pod' of Pod 'nginx-pvc-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistentVolumeClaim51_1.yaml:13-20
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: nginx-pvc-pod
  15 │     ports:
  16 │     - containerPort: 80
  17 │       name: webserver
  18 │     volumeMounts:
  19 │     - mountPath: /usr/share/nginx/html
  20 └       name: site-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-pvc-pod' of Pod 'nginx-pvc-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistentVolumeClaim51_1.yaml:13-20
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: nginx-pvc-pod
  15 │     ports:
  16 │     - containerPort: 80
  17 │       name: webserver
  18 │     volumeMounts:
  19 │     - mountPath: /usr/share/nginx/html
  20 └       name: site-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-pvc-pod' of Pod 'nginx-pvc-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistentVolumeClaim51_1.yaml:13-20
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: nginx-pvc-pod
  15 │     ports:
  16 │     - containerPort: 80
  17 │       name: webserver
  18 │     volumeMounts:
  19 │     - mountPath: /usr/share/nginx/html
  20 └       name: site-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-pvc-pod' of Pod 'nginx-pvc-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistentVolumeClaim51_1.yaml:13-20
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: nginx-pvc-pod
  15 │     ports:
  16 │     - containerPort: 80
  17 │       name: webserver
  18 │     volumeMounts:
  19 │     - mountPath: /usr/share/nginx/html
  20 └       name: site-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-pvc-pod' of Pod 'nginx-pvc-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistentVolumeClaim51_1.yaml:13-20
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: nginx-pvc-pod
  15 │     ports:
  16 │     - containerPort: 80
  17 │       name: webserver
  18 │     volumeMounts:
  19 │     - mountPath: /usr/share/nginx/html
  20 └       name: site-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-pvc-pod' of Pod 'nginx-pvc-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistentVolumeClaim51_1.yaml:13-20
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: nginx-pvc-pod
  15 │     ports:
  16 │     - containerPort: 80
  17 │       name: webserver
  18 │     volumeMounts:
  19 │     - mountPath: /usr/share/nginx/html
  20 └       name: site-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistentVolumeClaim51_1.yaml:13-20
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: nginx-pvc-pod
  15 │     ports:
  16 │     - containerPort: 80
  17 │       name: webserver
  18 │     volumeMounts:
  19 │     - mountPath: /usr/share/nginx/html
  20 └       name: site-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-pvc-pod" of pod "nginx-pvc-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistentVolumeClaim51_1.yaml:13-20
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: nginx-pvc-pod
  15 │     ports:
  16 │     - containerPort: 80
  17 │       name: webserver
  18 │     volumeMounts:
  19 │     - mountPath: /usr/share/nginx/html
  20 └       name: site-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistentVolumeClaim51_1.yaml:13-20
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: nginx-pvc-pod
  15 │     ports:
  16 │     - containerPort: 80
  17 │       name: webserver
  18 │     volumeMounts:
  19 │     - mountPath: /usr/share/nginx/html
  20 └       name: site-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx-pvc-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistentVolumeClaim51_1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: nginx-pvc-pod
   6 └   name: nginx-pvc-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx-pvc-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-pvc-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistentVolumeClaim51_1.yaml:13-20
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: nginx-pvc-pod
  15 │     ports:
  16 │     - containerPort: 80
  17 │       name: webserver
  18 │     volumeMounts:
  19 │     - mountPath: /usr/share/nginx/html
  20 └       name: site-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx-pvc-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistentVolumeClaim51_1.yaml:8-20
────────────────────────────────────────
   8 ┌   volumes:
   9 │   - name: site-storage
  10 │     persistentVolumeClaim:
  11 │       claimName: nginx-pvc
  12 │   containers:
  13 │   - image: nginx
  14 │     name: nginx-pvc-pod
  15 │     ports:
  16 └     - containerPort: 80
  ..   
────────────────────────────────────────



persistent_volume13_2.yaml (kubernetes)
=======================================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'shell' of Deployment 'pvdeploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistent_volume13_2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command:
  19 │         - bin/bash
  20 │         - -c
  21 │         - sleep 10000
  22 │         volumeMounts:
  23 │         - name: mypd
  24 └           mountPath: /tmp/persistent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'shell' of Deployment 'pvdeploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistent_volume13_2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command:
  19 │         - bin/bash
  20 │         - -c
  21 │         - sleep 10000
  22 │         volumeMounts:
  23 │         - name: mypd
  24 └           mountPath: /tmp/persistent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'shell' of 'deployment' 'pvdeploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistent_volume13_2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command:
  19 │         - bin/bash
  20 │         - -c
  21 │         - sleep 10000
  22 │         volumeMounts:
  23 │         - name: mypd
  24 └           mountPath: /tmp/persistent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'shell' of Deployment 'pvdeploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistent_volume13_2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command:
  19 │         - bin/bash
  20 │         - -c
  21 │         - sleep 10000
  22 │         volumeMounts:
  23 │         - name: mypd
  24 └           mountPath: /tmp/persistent
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'shell' of Deployment 'pvdeploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistent_volume13_2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command:
  19 │         - bin/bash
  20 │         - -c
  21 │         - sleep 10000
  22 │         volumeMounts:
  23 │         - name: mypd
  24 └           mountPath: /tmp/persistent
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'shell' of Deployment 'pvdeploy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 persistent_volume13_2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command:
  19 │         - bin/bash
  20 │         - -c
  21 │         - sleep 10000
  22 │         volumeMounts:
  23 │         - name: mypd
  24 └           mountPath: /tmp/persistent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'shell' of Deployment 'pvdeploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistent_volume13_2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command:
  19 │         - bin/bash
  20 │         - -c
  21 │         - sleep 10000
  22 │         volumeMounts:
  23 │         - name: mypd
  24 └           mountPath: /tmp/persistent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'shell' of Deployment 'pvdeploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistent_volume13_2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command:
  19 │         - bin/bash
  20 │         - -c
  21 │         - sleep 10000
  22 │         volumeMounts:
  23 │         - name: mypd
  24 └           mountPath: /tmp/persistent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'shell' of Deployment 'pvdeploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistent_volume13_2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command:
  19 │         - bin/bash
  20 │         - -c
  21 │         - sleep 10000
  22 │         volumeMounts:
  23 │         - name: mypd
  24 └           mountPath: /tmp/persistent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'shell' of Deployment 'pvdeploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistent_volume13_2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command:
  19 │         - bin/bash
  20 │         - -c
  21 │         - sleep 10000
  22 │         volumeMounts:
  23 │         - name: mypd
  24 └           mountPath: /tmp/persistent
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'shell' of Deployment 'pvdeploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistent_volume13_2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command:
  19 │         - bin/bash
  20 │         - -c
  21 │         - sleep 10000
  22 │         volumeMounts:
  23 │         - name: mypd
  24 └           mountPath: /tmp/persistent
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'shell' of Deployment 'pvdeploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistent_volume13_2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command:
  19 │         - bin/bash
  20 │         - -c
  21 │         - sleep 10000
  22 │         volumeMounts:
  23 │         - name: mypd
  24 └           mountPath: /tmp/persistent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistent_volume13_2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command:
  19 │         - bin/bash
  20 │         - -c
  21 │         - sleep 10000
  22 │         volumeMounts:
  23 │         - name: mypd
  24 └           mountPath: /tmp/persistent
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "shell" of deployment "pvdeploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistent_volume13_2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command:
  19 │         - bin/bash
  20 │         - -c
  21 │         - sleep 10000
  22 │         volumeMounts:
  23 │         - name: mypd
  24 └           mountPath: /tmp/persistent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistent_volume13_2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command:
  19 │         - bin/bash
  20 │         - -c
  21 │         - sleep 10000
  22 │         volumeMounts:
  23 │         - name: mypd
  24 └           mountPath: /tmp/persistent
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pvdeploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistent_volume13_2.yaml:4
────────────────────────────────────────
   4 [   name: pvdeploy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pvdeploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent_volume13_2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: shell
  17 │         image: centos
  18 │         command:
  19 │         - bin/bash
  20 │         - -c
  21 │         - sleep 10000
  22 │         volumeMounts:
  23 │         - name: mypd
  24 └           mountPath: /tmp/persistent
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pvdeploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistent_volume13_2.yaml:15-28
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: shell
  17 │         image: centos
  18 │         command:
  19 │         - bin/bash
  20 │         - -c
  21 │         - sleep 10000
  22 │         volumeMounts:
  23 └         - name: mypd
  ..   
────────────────────────────────────────



persistentvolume50.yaml (kubernetes)
====================================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Pod 'mypod-withpv' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistentvolume50.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Pod 'mypod-withpv' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistentvolume50.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'pod' 'mypod-withpv' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistentvolume50.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'main' of Pod 'mypod-withpv' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistentvolume50.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Pod 'mypod-withpv' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistentvolume50.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'main' of Pod 'mypod-withpv' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 persistentvolume50.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Pod 'mypod-withpv' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistentvolume50.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'main' of Pod 'mypod-withpv' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistentvolume50.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'main' of Pod 'mypod-withpv' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistentvolume50.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'main' of Pod 'mypod-withpv' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistentvolume50.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Pod 'mypod-withpv' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistentvolume50.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Pod 'mypod-withpv' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistentvolume50.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistentvolume50.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of pod "mypod-withpv" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistentvolume50.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistentvolume50.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mypod-withpv in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistentvolume50.yaml:4
────────────────────────────────────────
   4 [   name: mypod-withpv
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mypod-withpv in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistentvolume50.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mypod-withpv in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistentvolume50.yaml:6-18
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
  ..   
────────────────────────────────────────



persistentvolumeclaim-nfs_3.yaml (kubernetes)
=============================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistentvolumeclaim-nfs_3.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: {}
  15 │     volumeMounts:
  16 │     - name: meu-pvc
  17 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistentvolumeclaim-nfs_3.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: {}
  15 │     volumeMounts:
  16 │     - name: meu-pvc
  17 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistentvolumeclaim-nfs_3.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: {}
  15 │     volumeMounts:
  16 │     - name: meu-pvc
  17 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistentvolumeclaim-nfs_3.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: {}
  15 │     volumeMounts:
  16 │     - name: meu-pvc
  17 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistentvolumeclaim-nfs_3.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: {}
  15 │     volumeMounts:
  16 │     - name: meu-pvc
  17 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 persistentvolumeclaim-nfs_3.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: {}
  15 │     volumeMounts:
  16 │     - name: meu-pvc
  17 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistentvolumeclaim-nfs_3.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: {}
  15 │     volumeMounts:
  16 │     - name: meu-pvc
  17 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistentvolumeclaim-nfs_3.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: {}
  15 │     volumeMounts:
  16 │     - name: meu-pvc
  17 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistentvolumeclaim-nfs_3.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: {}
  15 │     volumeMounts:
  16 │     - name: meu-pvc
  17 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistentvolumeclaim-nfs_3.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: {}
  15 │     volumeMounts:
  16 │     - name: meu-pvc
  17 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistentvolumeclaim-nfs_3.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: {}
  15 │     volumeMounts:
  16 │     - name: meu-pvc
  17 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistentvolumeclaim-nfs_3.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: {}
  15 │     volumeMounts:
  16 │     - name: meu-pvc
  17 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistentvolumeclaim-nfs_3.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: {}
  15 │     volumeMounts:
  16 │     - name: meu-pvc
  17 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistentvolumeclaim-nfs_3.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: {}
  15 │     volumeMounts:
  16 │     - name: meu-pvc
  17 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistentvolumeclaim-nfs_3.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: {}
  15 │     volumeMounts:
  16 │     - name: meu-pvc
  17 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistentvolumeclaim-nfs_3.yaml:4-7
────────────────────────────────────────
   4 ┌   name: nginx
   5 │   labels:
   6 │     run: nginx
   7 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistentvolumeclaim-nfs_3.yaml:10-17
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: {}
  15 │     volumeMounts:
  16 │     - name: meu-pvc
  17 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistentvolumeclaim-nfs_3.yaml:9-21
────────────────────────────────────────
   9 ┌   containers:
  10 │   - image: nginx
  11 │     name: nginx
  12 │     ports:
  13 │     - containerPort: 80
  14 │     resources: {}
  15 │     volumeMounts:
  16 │     - name: meu-pvc
  17 └       mountPath: /usr/share/nginx/html
  ..   
────────────────────────────────────────



persistentvolumeclaim56.yaml (kubernetes)
=========================================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Pod 'mypod-withpvc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 persistentvolumeclaim56.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Pod 'mypod-withpvc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 persistentvolumeclaim56.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'pod' 'mypod-withpvc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 persistentvolumeclaim56.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'main' of Pod 'mypod-withpvc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 persistentvolumeclaim56.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Pod 'mypod-withpvc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 persistentvolumeclaim56.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'main' of Pod 'mypod-withpvc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 persistentvolumeclaim56.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Pod 'mypod-withpvc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 persistentvolumeclaim56.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'main' of Pod 'mypod-withpvc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 persistentvolumeclaim56.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'main' of Pod 'mypod-withpvc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 persistentvolumeclaim56.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'main' of Pod 'mypod-withpvc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 persistentvolumeclaim56.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Pod 'mypod-withpvc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 persistentvolumeclaim56.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Pod 'mypod-withpvc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 persistentvolumeclaim56.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 persistentvolumeclaim56.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of pod "mypod-withpvc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 persistentvolumeclaim56.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 persistentvolumeclaim56.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mypod-withpvc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 persistentvolumeclaim56.yaml:4
────────────────────────────────────────
   4 [   name: mypod-withpvc
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mypod-withpvc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistentvolumeclaim56.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mypod-withpvc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 persistentvolumeclaim56.yaml:6-18
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: main
   8 │     image: mongo
   9 │     volumeMounts:
  10 │     - name: myvol
  11 │       mountPath: /data/db
  12 │     ports:
  13 │     - containerPort: 27017
  14 └       protocol: TCP
  ..   
────────────────────────────────────────



petclinic-deployment.yaml (kubernetes)
======================================
Tests: 109 (SUCCESSES: 93, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'petclinic' of Deployment 'petclinic-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 petclinic-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: petclinic
  20 │         image: chetraseng/spring-petclinic:latest
  21 │         resources:
  22 │           limits:
  23 │             memory: 1000Mi
  24 │             cpu: 250m
  25 │         ports:
  26 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'petclinic' of Deployment 'petclinic-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 petclinic-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: petclinic
  20 │         image: chetraseng/spring-petclinic:latest
  21 │         resources:
  22 │           limits:
  23 │             memory: 1000Mi
  24 │             cpu: 250m
  25 │         ports:
  26 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'petclinic' of 'deployment' 'petclinic-deployment' in 'petclinic' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 petclinic-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: petclinic
  20 │         image: chetraseng/spring-petclinic:latest
  21 │         resources:
  22 │           limits:
  23 │             memory: 1000Mi
  24 │             cpu: 250m
  25 │         ports:
  26 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'petclinic' of Deployment 'petclinic-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 petclinic-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: petclinic
  20 │         image: chetraseng/spring-petclinic:latest
  21 │         resources:
  22 │           limits:
  23 │             memory: 1000Mi
  24 │             cpu: 250m
  25 │         ports:
  26 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'petclinic' of Deployment 'petclinic-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 petclinic-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: petclinic
  20 │         image: chetraseng/spring-petclinic:latest
  21 │         resources:
  22 │           limits:
  23 │             memory: 1000Mi
  24 │             cpu: 250m
  25 │         ports:
  26 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'petclinic' of Deployment 'petclinic-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 petclinic-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: petclinic
  20 │         image: chetraseng/spring-petclinic:latest
  21 │         resources:
  22 │           limits:
  23 │             memory: 1000Mi
  24 │             cpu: 250m
  25 │         ports:
  26 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'petclinic' of Deployment 'petclinic-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 petclinic-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: petclinic
  20 │         image: chetraseng/spring-petclinic:latest
  21 │         resources:
  22 │           limits:
  23 │             memory: 1000Mi
  24 │             cpu: 250m
  25 │         ports:
  26 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'petclinic' of Deployment 'petclinic-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 petclinic-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: petclinic
  20 │         image: chetraseng/spring-petclinic:latest
  21 │         resources:
  22 │           limits:
  23 │             memory: 1000Mi
  24 │             cpu: 250m
  25 │         ports:
  26 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'petclinic' of Deployment 'petclinic-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 petclinic-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: petclinic
  20 │         image: chetraseng/spring-petclinic:latest
  21 │         resources:
  22 │           limits:
  23 │             memory: 1000Mi
  24 │             cpu: 250m
  25 │         ports:
  26 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'petclinic' of Deployment 'petclinic-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 petclinic-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: petclinic
  20 │         image: chetraseng/spring-petclinic:latest
  21 │         resources:
  22 │           limits:
  23 │             memory: 1000Mi
  24 │             cpu: 250m
  25 │         ports:
  26 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 petclinic-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: petclinic
  20 │         image: chetraseng/spring-petclinic:latest
  21 │         resources:
  22 │           limits:
  23 │             memory: 1000Mi
  24 │             cpu: 250m
  25 │         ports:
  26 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "petclinic" of deployment "petclinic-deployment" in "petclinic" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 petclinic-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: petclinic
  20 │         image: chetraseng/spring-petclinic:latest
  21 │         resources:
  22 │           limits:
  23 │             memory: 1000Mi
  24 │             cpu: 250m
  25 │         ports:
  26 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 petclinic-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: petclinic
  20 │         image: chetraseng/spring-petclinic:latest
  21 │         resources:
  22 │           limits:
  23 │             memory: 1000Mi
  24 │             cpu: 250m
  25 │         ports:
  26 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container petclinic-deployment in petclinic namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 petclinic-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: petclinic
  20 │         image: chetraseng/spring-petclinic:latest
  21 │         resources:
  22 │           limits:
  23 │             memory: 1000Mi
  24 │             cpu: 250m
  25 │         ports:
  26 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment petclinic-deployment in petclinic namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 petclinic-deployment.yaml:18-26
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: petclinic
  20 │         image: chetraseng/spring-petclinic:latest
  21 │         resources:
  22 │           limits:
  23 │             memory: 1000Mi
  24 │             cpu: 250m
  25 │         ports:
  26 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container petclinic in deployment petclinic-deployment (namespace: petclinic) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 petclinic-deployment.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: petclinic
  20 │         image: chetraseng/spring-petclinic:latest
  21 │         resources:
  22 │           limits:
  23 │             memory: 1000Mi
  24 │             cpu: 250m
  25 │         ports:
  26 └         - containerPort: 8080
────────────────────────────────────────



petclinic-deployment1.yaml (kubernetes)
=======================================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'spring-petclinic' of Deployment 'spring-petclinic' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 petclinic-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: spring-petclinic
  17 │         image: spring-petclinic:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'spring-petclinic' of Deployment 'spring-petclinic' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 petclinic-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: spring-petclinic
  17 │         image: spring-petclinic:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'spring-petclinic' of 'deployment' 'spring-petclinic' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 petclinic-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: spring-petclinic
  17 │         image: spring-petclinic:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'spring-petclinic' of Deployment 'spring-petclinic' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 petclinic-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: spring-petclinic
  17 │         image: spring-petclinic:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'spring-petclinic' of Deployment 'spring-petclinic' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 petclinic-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: spring-petclinic
  17 │         image: spring-petclinic:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'spring-petclinic' of Deployment 'spring-petclinic' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 petclinic-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: spring-petclinic
  17 │         image: spring-petclinic:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'spring-petclinic' of Deployment 'spring-petclinic' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 petclinic-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: spring-petclinic
  17 │         image: spring-petclinic:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'spring-petclinic' of Deployment 'spring-petclinic' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 petclinic-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: spring-petclinic
  17 │         image: spring-petclinic:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'spring-petclinic' of Deployment 'spring-petclinic' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 petclinic-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: spring-petclinic
  17 │         image: spring-petclinic:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'spring-petclinic' of Deployment 'spring-petclinic' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 petclinic-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: spring-petclinic
  17 │         image: spring-petclinic:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'spring-petclinic' of Deployment 'spring-petclinic' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 petclinic-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: spring-petclinic
  17 │         image: spring-petclinic:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'spring-petclinic' of Deployment 'spring-petclinic' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 petclinic-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: spring-petclinic
  17 │         image: spring-petclinic:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 petclinic-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: spring-petclinic
  17 │         image: spring-petclinic:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "spring-petclinic" of deployment "spring-petclinic" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 petclinic-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: spring-petclinic
  17 │         image: spring-petclinic:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 petclinic-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: spring-petclinic
  17 │         image: spring-petclinic:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment spring-petclinic in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 petclinic-deployment1.yaml:4
────────────────────────────────────────
   4 [   name: spring-petclinic
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container spring-petclinic in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 petclinic-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: spring-petclinic
  17 │         image: spring-petclinic:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment spring-petclinic in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 petclinic-deployment1.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: spring-petclinic
  17 │         image: spring-petclinic:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────



petclinic_2.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Deployment 'petclinic' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 petclinic_2.yaml:22-23
────────────────────────────────────────
  22 ┌       - name: app
  23 └         image: ghcr.io/pavolloffay/spring-petclinic:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Deployment 'petclinic' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 petclinic_2.yaml:22-23
────────────────────────────────────────
  22 ┌       - name: app
  23 └         image: ghcr.io/pavolloffay/spring-petclinic:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'deployment' 'petclinic' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 petclinic_2.yaml:22-23
────────────────────────────────────────
  22 ┌       - name: app
  23 └         image: ghcr.io/pavolloffay/spring-petclinic:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Deployment 'petclinic' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 petclinic_2.yaml:22-23
────────────────────────────────────────
  22 ┌       - name: app
  23 └         image: ghcr.io/pavolloffay/spring-petclinic:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Deployment 'petclinic' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 petclinic_2.yaml:22-23
────────────────────────────────────────
  22 ┌       - name: app
  23 └         image: ghcr.io/pavolloffay/spring-petclinic:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app' of Deployment 'petclinic' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 petclinic_2.yaml:22-23
────────────────────────────────────────
  22 ┌       - name: app
  23 └         image: ghcr.io/pavolloffay/spring-petclinic:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Deployment 'petclinic' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 petclinic_2.yaml:22-23
────────────────────────────────────────
  22 ┌       - name: app
  23 └         image: ghcr.io/pavolloffay/spring-petclinic:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Deployment 'petclinic' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 petclinic_2.yaml:22-23
────────────────────────────────────────
  22 ┌       - name: app
  23 └         image: ghcr.io/pavolloffay/spring-petclinic:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Deployment 'petclinic' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 petclinic_2.yaml:22-23
────────────────────────────────────────
  22 ┌       - name: app
  23 └         image: ghcr.io/pavolloffay/spring-petclinic:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Deployment 'petclinic' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 petclinic_2.yaml:22-23
────────────────────────────────────────
  22 ┌       - name: app
  23 └         image: ghcr.io/pavolloffay/spring-petclinic:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Deployment 'petclinic' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 petclinic_2.yaml:22-23
────────────────────────────────────────
  22 ┌       - name: app
  23 └         image: ghcr.io/pavolloffay/spring-petclinic:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Deployment 'petclinic' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 petclinic_2.yaml:22-23
────────────────────────────────────────
  22 ┌       - name: app
  23 └         image: ghcr.io/pavolloffay/spring-petclinic:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 petclinic_2.yaml:22-23
────────────────────────────────────────
  22 ┌       - name: app
  23 └         image: ghcr.io/pavolloffay/spring-petclinic:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of deployment "petclinic" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 petclinic_2.yaml:22-23
────────────────────────────────────────
  22 ┌       - name: app
  23 └         image: ghcr.io/pavolloffay/spring-petclinic:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 petclinic_2.yaml:22-23
────────────────────────────────────────
  22 ┌       - name: app
  23 └         image: ghcr.io/pavolloffay/spring-petclinic:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment petclinic in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 petclinic_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: petclinic
   5 │   labels:
   6 └     backstage.io/kubernetes-id: petclinic
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container petclinic in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 petclinic_2.yaml:22-23
────────────────────────────────────────
  22 ┌       - name: app
  23 └         image: ghcr.io/pavolloffay/spring-petclinic:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment petclinic in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 petclinic_2.yaml:21-23
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: app
  23 └         image: ghcr.io/pavolloffay/spring-petclinic:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container app in deployment petclinic (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 petclinic_2.yaml:22-23
────────────────────────────────────────
  22 ┌       - name: app
  23 └         image: ghcr.io/pavolloffay/spring-petclinic:latest
────────────────────────────────────────



petstore-app.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'petstore-webapp' of Deployment 'petstore-webapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 petstore-app.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'petstore-webapp' of Deployment 'petstore-webapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 petstore-app.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'petstore-webapp' of 'deployment' 'petstore-webapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 petstore-app.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'petstore-webapp' of Deployment 'petstore-webapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 petstore-app.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'petstore-webapp' of Deployment 'petstore-webapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 petstore-app.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'petstore-webapp' of Deployment 'petstore-webapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 petstore-app.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'petstore-webapp' of Deployment 'petstore-webapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 petstore-app.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'petstore-webapp' of Deployment 'petstore-webapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 petstore-app.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'petstore-webapp' of Deployment 'petstore-webapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 petstore-app.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'petstore-webapp' of Deployment 'petstore-webapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 petstore-app.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'petstore-webapp' of Deployment 'petstore-webapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 petstore-app.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 petstore-app.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "petstore-webapp" of deployment "petstore-webapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 petstore-app.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 petstore-app.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment petstore-webapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 petstore-app.yaml:4-6
────────────────────────────────────────
   4 ┌   name: petstore-webapp
   5 │   labels:
   6 └     app: petstore-webapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container petstore-webapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 petstore-app.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment petstore-webapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 petstore-app.yaml:17-29
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 └         - name: SPRING_APPLICATION_JSON
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container petstore-webapp in deployment petstore-webapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 petstore-app.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────



pg-cm.yaml (kubernetes)
=======================
Tests: 108 (SUCCESSES: 107, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'postgres-secret' in 'iceberg-catalog' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



pg-configmap.yaml (kubernetes)
==============================
Tests: 108 (SUCCESSES: 107, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'postgres-config' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



pg-configmap1.yaml (kubernetes)
===============================
Tests: 108 (SUCCESSES: 107, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'postgres-config' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



pg-configmap2.yaml (kubernetes)
===============================
Tests: 108 (SUCCESSES: 107, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'postgres-db-config' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



pg-configmap3.yaml (kubernetes)
===============================
Tests: 108 (SUCCESSES: 107, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'pg-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



pg-deploy.yaml (kubernetes)
===========================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pg-deploy' of Deployment 'pg' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pg-deploy.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pg-deploy
  22 │           image: postgres:14
  23 │           imagePullPolicy: IfNotPresent
  24 │           ports:
  25 │             - containerPort: 5432
  26 │               name: pg
  27 │           env:
  28 │             - name: POSTGRES_USER
  29 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pg-deploy' of Deployment 'pg' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pg-deploy.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pg-deploy
  22 │           image: postgres:14
  23 │           imagePullPolicy: IfNotPresent
  24 │           ports:
  25 │             - containerPort: 5432
  26 │               name: pg
  27 │           env:
  28 │             - name: POSTGRES_USER
  29 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pg-deploy' of 'deployment' 'pg' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pg-deploy.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pg-deploy
  22 │           image: postgres:14
  23 │           imagePullPolicy: IfNotPresent
  24 │           ports:
  25 │             - containerPort: 5432
  26 │               name: pg
  27 │           env:
  28 │             - name: POSTGRES_USER
  29 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pg-deploy' of Deployment 'pg' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pg-deploy.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pg-deploy
  22 │           image: postgres:14
  23 │           imagePullPolicy: IfNotPresent
  24 │           ports:
  25 │             - containerPort: 5432
  26 │               name: pg
  27 │           env:
  28 │             - name: POSTGRES_USER
  29 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pg-deploy' of Deployment 'pg' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pg-deploy.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pg-deploy
  22 │           image: postgres:14
  23 │           imagePullPolicy: IfNotPresent
  24 │           ports:
  25 │             - containerPort: 5432
  26 │               name: pg
  27 │           env:
  28 │             - name: POSTGRES_USER
  29 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pg-deploy' of Deployment 'pg' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pg-deploy.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pg-deploy
  22 │           image: postgres:14
  23 │           imagePullPolicy: IfNotPresent
  24 │           ports:
  25 │             - containerPort: 5432
  26 │               name: pg
  27 │           env:
  28 │             - name: POSTGRES_USER
  29 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pg-deploy' of Deployment 'pg' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pg-deploy.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pg-deploy
  22 │           image: postgres:14
  23 │           imagePullPolicy: IfNotPresent
  24 │           ports:
  25 │             - containerPort: 5432
  26 │               name: pg
  27 │           env:
  28 │             - name: POSTGRES_USER
  29 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pg-deploy' of Deployment 'pg' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pg-deploy.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pg-deploy
  22 │           image: postgres:14
  23 │           imagePullPolicy: IfNotPresent
  24 │           ports:
  25 │             - containerPort: 5432
  26 │               name: pg
  27 │           env:
  28 │             - name: POSTGRES_USER
  29 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pg-deploy' of Deployment 'pg' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pg-deploy.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pg-deploy
  22 │           image: postgres:14
  23 │           imagePullPolicy: IfNotPresent
  24 │           ports:
  25 │             - containerPort: 5432
  26 │               name: pg
  27 │           env:
  28 │             - name: POSTGRES_USER
  29 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pg-deploy' of Deployment 'pg' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pg-deploy.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pg-deploy
  22 │           image: postgres:14
  23 │           imagePullPolicy: IfNotPresent
  24 │           ports:
  25 │             - containerPort: 5432
  26 │               name: pg
  27 │           env:
  28 │             - name: POSTGRES_USER
  29 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pg-deploy' of Deployment 'pg' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pg-deploy.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pg-deploy
  22 │           image: postgres:14
  23 │           imagePullPolicy: IfNotPresent
  24 │           ports:
  25 │             - containerPort: 5432
  26 │               name: pg
  27 │           env:
  28 │             - name: POSTGRES_USER
  29 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pg-deploy.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pg-deploy
  22 │           image: postgres:14
  23 │           imagePullPolicy: IfNotPresent
  24 │           ports:
  25 │             - containerPort: 5432
  26 │               name: pg
  27 │           env:
  28 │             - name: POSTGRES_USER
  29 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pg-deploy" of deployment "pg" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pg-deploy.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pg-deploy
  22 │           image: postgres:14
  23 │           imagePullPolicy: IfNotPresent
  24 │           ports:
  25 │             - containerPort: 5432
  26 │               name: pg
  27 │           env:
  28 │             - name: POSTGRES_USER
  29 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pg-deploy.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pg-deploy
  22 │           image: postgres:14
  23 │           imagePullPolicy: IfNotPresent
  24 │           ports:
  25 │             - containerPort: 5432
  26 │               name: pg
  27 │           env:
  28 │             - name: POSTGRES_USER
  29 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pg in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pg-deploy.yaml:4-7
────────────────────────────────────────
   4 ┌   name: pg
   5 │   labels:
   6 │     app.kubernetes.io/name: appdjango
   7 └     app.kubernetes.io/component: pg
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pg in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg-deploy.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pg-deploy
  22 │           image: postgres:14
  23 │           imagePullPolicy: IfNotPresent
  24 │           ports:
  25 │             - containerPort: 5432
  26 │               name: pg
  27 │           env:
  28 │             - name: POSTGRES_USER
  29 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pg in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg-deploy.yaml:20-42
────────────────────────────────────────
  20 ┌       containers:
  21 │         - name: pg-deploy
  22 │           image: postgres:14
  23 │           imagePullPolicy: IfNotPresent
  24 │           ports:
  25 │             - containerPort: 5432
  26 │               name: pg
  27 │           env:
  28 └             - name: POSTGRES_USER
  ..   
────────────────────────────────────────



pg-deploy1.yaml (kubernetes)
============================
Tests: 109 (SUCCESSES: 96, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pg-deploy1.yaml:17-37
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:12-alpine
  19 │           imagePullPolicy: 'IfNotPresent'
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           env:
  23 │             - name: PGDATA
  24 │               value: '/data/pgdata'
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pg-deploy1.yaml:17-37
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:12-alpine
  19 │           imagePullPolicy: 'IfNotPresent'
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           env:
  23 │             - name: PGDATA
  24 │               value: '/data/pgdata'
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pg-deploy1.yaml:17-37
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:12-alpine
  19 │           imagePullPolicy: 'IfNotPresent'
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           env:
  23 │             - name: PGDATA
  24 │               value: '/data/pgdata'
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pg-deploy1.yaml:17-37
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:12-alpine
  19 │           imagePullPolicy: 'IfNotPresent'
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           env:
  23 │             - name: PGDATA
  24 │               value: '/data/pgdata'
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pg-deploy1.yaml:17-37
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:12-alpine
  19 │           imagePullPolicy: 'IfNotPresent'
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           env:
  23 │             - name: PGDATA
  24 │               value: '/data/pgdata'
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pg-deploy1.yaml:17-37
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:12-alpine
  19 │           imagePullPolicy: 'IfNotPresent'
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           env:
  23 │             - name: PGDATA
  24 │               value: '/data/pgdata'
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pg-deploy1.yaml:17-37
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:12-alpine
  19 │           imagePullPolicy: 'IfNotPresent'
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           env:
  23 │             - name: PGDATA
  24 │               value: '/data/pgdata'
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pg-deploy1.yaml:17-37
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:12-alpine
  19 │           imagePullPolicy: 'IfNotPresent'
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           env:
  23 │             - name: PGDATA
  24 │               value: '/data/pgdata'
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pg-deploy1.yaml:17-37
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:12-alpine
  19 │           imagePullPolicy: 'IfNotPresent'
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           env:
  23 │             - name: PGDATA
  24 │               value: '/data/pgdata'
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pg-deploy1.yaml:17-37
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:12-alpine
  19 │           imagePullPolicy: 'IfNotPresent'
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           env:
  23 │             - name: PGDATA
  24 │               value: '/data/pgdata'
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment postgres in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pg-deploy1.yaml:5
────────────────────────────────────────
   5 [   name: postgres
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg-deploy1.yaml:17-37
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:12-alpine
  19 │           imagePullPolicy: 'IfNotPresent'
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           env:
  23 │             - name: PGDATA
  24 │               value: '/data/pgdata'
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg-deploy1.yaml:16-41
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: postgres
  18 │           image: postgres:12-alpine
  19 │           imagePullPolicy: 'IfNotPresent'
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           env:
  23 │             - name: PGDATA
  24 └               value: '/data/pgdata'
  ..   
────────────────────────────────────────



pg-deployment.yaml (kubernetes)
===============================
Tests: 109 (SUCCESSES: 96, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'pg' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pg-deployment.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: pgpw_TP28zugpVyXxs3E4OMZd
  21 │         - name: POSTGRES_USER
  22 │           value: pgadminuser
  23 │         ports:
  24 └         - containerPort: 5432
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'pg' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pg-deployment.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: pgpw_TP28zugpVyXxs3E4OMZd
  21 │         - name: POSTGRES_USER
  22 │           value: pgadminuser
  23 │         ports:
  24 └         - containerPort: 5432
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'pg' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pg-deployment.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: pgpw_TP28zugpVyXxs3E4OMZd
  21 │         - name: POSTGRES_USER
  22 │           value: pgadminuser
  23 │         ports:
  24 └         - containerPort: 5432
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'pg' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pg-deployment.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: pgpw_TP28zugpVyXxs3E4OMZd
  21 │         - name: POSTGRES_USER
  22 │           value: pgadminuser
  23 │         ports:
  24 └         - containerPort: 5432
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'pg' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pg-deployment.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: pgpw_TP28zugpVyXxs3E4OMZd
  21 │         - name: POSTGRES_USER
  22 │           value: pgadminuser
  23 │         ports:
  24 └         - containerPort: 5432
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'pg' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pg-deployment.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: pgpw_TP28zugpVyXxs3E4OMZd
  21 │         - name: POSTGRES_USER
  22 │           value: pgadminuser
  23 │         ports:
  24 └         - containerPort: 5432
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'pg' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pg-deployment.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: pgpw_TP28zugpVyXxs3E4OMZd
  21 │         - name: POSTGRES_USER
  22 │           value: pgadminuser
  23 │         ports:
  24 └         - containerPort: 5432
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pg-deployment.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: pgpw_TP28zugpVyXxs3E4OMZd
  21 │         - name: POSTGRES_USER
  22 │           value: pgadminuser
  23 │         ports:
  24 └         - containerPort: 5432
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "pg" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pg-deployment.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: pgpw_TP28zugpVyXxs3E4OMZd
  21 │         - name: POSTGRES_USER
  22 │           value: pgadminuser
  23 │         ports:
  24 └         - containerPort: 5432
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pg-deployment.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: pgpw_TP28zugpVyXxs3E4OMZd
  21 │         - name: POSTGRES_USER
  22 │           value: pgadminuser
  23 │         ports:
  24 └         - containerPort: 5432
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pg in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pg-deployment.yaml:4
────────────────────────────────────────
   4 [   name: pg
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pg in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg-deployment.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: pgpw_TP28zugpVyXxs3E4OMZd
  21 │         - name: POSTGRES_USER
  22 │           value: pgadminuser
  23 │         ports:
  24 └         - containerPort: 5432
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pg in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg-deployment.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: pgpw_TP28zugpVyXxs3E4OMZd
  21 │         - name: POSTGRES_USER
  22 │           value: pgadminuser
  23 └         ports:
  ..   
────────────────────────────────────────



pg-deployment1.yaml (kubernetes)
================================
Tests: 109 (SUCCESSES: 93, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pg-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:14'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-secret
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pg-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:14'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-secret
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres' in 'iceberg-catalog' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pg-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:14'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-secret
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pg-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:14'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-secret
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pg-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:14'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-secret
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pg-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:14'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-secret
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pg-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:14'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-secret
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pg-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:14'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-secret
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pg-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:14'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-secret
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pg-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:14'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-secret
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pg-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:14'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-secret
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pg-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:14'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-secret
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres" in "iceberg-catalog" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pg-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:14'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-secret
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pg-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:14'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-secret
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in iceberg-catalog namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: 'postgres:14'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 │                 name: postgres-secret
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres in iceberg-catalog namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg-deployment1.yaml:16-31
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: postgres
  18 │           image: 'postgres:14'
  19 │           imagePullPolicy: IfNotPresent
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           envFrom:
  23 │             - configMapRef:
  24 └                 name: postgres-secret
  ..   
────────────────────────────────────────



pg-deployment2.yaml (kubernetes)
================================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgresql-db' of StatefulSet 'postgresql-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pg-deployment2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: postgresql-db
  18 │           image: postgres:latest
  19 │           volumeMounts:
  20 │             - name: postgresql-db-disk
  21 │               mountPath: /data
  22 │           envFrom:
  23 │           - configMapRef: 
  24 └               name: postgres-db-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgresql-db' of StatefulSet 'postgresql-db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pg-deployment2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: postgresql-db
  18 │           image: postgres:latest
  19 │           volumeMounts:
  20 │             - name: postgresql-db-disk
  21 │               mountPath: /data
  22 │           envFrom:
  23 │           - configMapRef: 
  24 └               name: postgres-db-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgresql-db' of 'statefulset' 'postgresql-db' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pg-deployment2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: postgresql-db
  18 │           image: postgres:latest
  19 │           volumeMounts:
  20 │             - name: postgresql-db-disk
  21 │               mountPath: /data
  22 │           envFrom:
  23 │           - configMapRef: 
  24 └               name: postgres-db-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgresql-db' of StatefulSet 'postgresql-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pg-deployment2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: postgresql-db
  18 │           image: postgres:latest
  19 │           volumeMounts:
  20 │             - name: postgresql-db-disk
  21 │               mountPath: /data
  22 │           envFrom:
  23 │           - configMapRef: 
  24 └               name: postgres-db-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgresql-db' of StatefulSet 'postgresql-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pg-deployment2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: postgresql-db
  18 │           image: postgres:latest
  19 │           volumeMounts:
  20 │             - name: postgresql-db-disk
  21 │               mountPath: /data
  22 │           envFrom:
  23 │           - configMapRef: 
  24 └               name: postgres-db-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'postgresql-db' of StatefulSet 'postgresql-db' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pg-deployment2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: postgresql-db
  18 │           image: postgres:latest
  19 │           volumeMounts:
  20 │             - name: postgresql-db-disk
  21 │               mountPath: /data
  22 │           envFrom:
  23 │           - configMapRef: 
  24 └               name: postgres-db-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgresql-db' of StatefulSet 'postgresql-db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pg-deployment2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: postgresql-db
  18 │           image: postgres:latest
  19 │           volumeMounts:
  20 │             - name: postgresql-db-disk
  21 │               mountPath: /data
  22 │           envFrom:
  23 │           - configMapRef: 
  24 └               name: postgres-db-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgresql-db' of StatefulSet 'postgresql-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pg-deployment2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: postgresql-db
  18 │           image: postgres:latest
  19 │           volumeMounts:
  20 │             - name: postgresql-db-disk
  21 │               mountPath: /data
  22 │           envFrom:
  23 │           - configMapRef: 
  24 └               name: postgres-db-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgresql-db' of StatefulSet 'postgresql-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pg-deployment2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: postgresql-db
  18 │           image: postgres:latest
  19 │           volumeMounts:
  20 │             - name: postgresql-db-disk
  21 │               mountPath: /data
  22 │           envFrom:
  23 │           - configMapRef: 
  24 └               name: postgres-db-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgresql-db' of StatefulSet 'postgresql-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pg-deployment2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: postgresql-db
  18 │           image: postgres:latest
  19 │           volumeMounts:
  20 │             - name: postgresql-db-disk
  21 │               mountPath: /data
  22 │           envFrom:
  23 │           - configMapRef: 
  24 └               name: postgres-db-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgresql-db' of StatefulSet 'postgresql-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pg-deployment2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: postgresql-db
  18 │           image: postgres:latest
  19 │           volumeMounts:
  20 │             - name: postgresql-db-disk
  21 │               mountPath: /data
  22 │           envFrom:
  23 │           - configMapRef: 
  24 └               name: postgres-db-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgresql-db' of StatefulSet 'postgresql-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pg-deployment2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: postgresql-db
  18 │           image: postgres:latest
  19 │           volumeMounts:
  20 │             - name: postgresql-db-disk
  21 │               mountPath: /data
  22 │           envFrom:
  23 │           - configMapRef: 
  24 └               name: postgres-db-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pg-deployment2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: postgresql-db
  18 │           image: postgres:latest
  19 │           volumeMounts:
  20 │             - name: postgresql-db-disk
  21 │               mountPath: /data
  22 │           envFrom:
  23 │           - configMapRef: 
  24 └               name: postgres-db-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgresql-db" of statefulset "postgresql-db" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pg-deployment2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: postgresql-db
  18 │           image: postgres:latest
  19 │           volumeMounts:
  20 │             - name: postgresql-db-disk
  21 │               mountPath: /data
  22 │           envFrom:
  23 │           - configMapRef: 
  24 └               name: postgres-db-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pg-deployment2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: postgresql-db
  18 │           image: postgres:latest
  19 │           volumeMounts:
  20 │             - name: postgresql-db-disk
  21 │               mountPath: /data
  22 │           envFrom:
  23 │           - configMapRef: 
  24 └               name: postgres-db-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset postgresql-db in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pg-deployment2.yaml:4
────────────────────────────────────────
   4 [   name: postgresql-db
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgresql-db in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg-deployment2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: postgresql-db
  18 │           image: postgres:latest
  19 │           volumeMounts:
  20 │             - name: postgresql-db-disk
  21 │               mountPath: /data
  22 │           envFrom:
  23 │           - configMapRef: 
  24 └               name: postgres-db-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset postgresql-db in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg-deployment2.yaml:16-24
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: postgresql-db
  18 │           image: postgres:latest
  19 │           volumeMounts:
  20 │             - name: postgresql-db-disk
  21 │               mountPath: /data
  22 │           envFrom:
  23 │           - configMapRef: 
  24 └               name: postgres-db-config
────────────────────────────────────────



pg-deployment3.yaml (kubernetes)
================================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pg-deployment' of Deployment 'pg-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pg-deployment3.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: pg-deployment
  18 │           image: postgres:latest
  19 │           imagePullPolicy: "IfNotPresent"
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           volumeMounts:
  23 │             - mountPath: /data/pgdb
  24 │               name: postgresdb
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pg-deployment' of Deployment 'pg-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pg-deployment3.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: pg-deployment
  18 │           image: postgres:latest
  19 │           imagePullPolicy: "IfNotPresent"
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           volumeMounts:
  23 │             - mountPath: /data/pgdb
  24 │               name: postgresdb
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pg-deployment' of 'deployment' 'pg-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pg-deployment3.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: pg-deployment
  18 │           image: postgres:latest
  19 │           imagePullPolicy: "IfNotPresent"
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           volumeMounts:
  23 │             - mountPath: /data/pgdb
  24 │               name: postgresdb
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pg-deployment' of Deployment 'pg-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pg-deployment3.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: pg-deployment
  18 │           image: postgres:latest
  19 │           imagePullPolicy: "IfNotPresent"
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           volumeMounts:
  23 │             - mountPath: /data/pgdb
  24 │               name: postgresdb
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pg-deployment' of Deployment 'pg-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pg-deployment3.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: pg-deployment
  18 │           image: postgres:latest
  19 │           imagePullPolicy: "IfNotPresent"
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           volumeMounts:
  23 │             - mountPath: /data/pgdb
  24 │               name: postgresdb
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pg-deployment' of Deployment 'pg-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pg-deployment3.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: pg-deployment
  18 │           image: postgres:latest
  19 │           imagePullPolicy: "IfNotPresent"
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           volumeMounts:
  23 │             - mountPath: /data/pgdb
  24 │               name: postgresdb
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pg-deployment' of Deployment 'pg-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pg-deployment3.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: pg-deployment
  18 │           image: postgres:latest
  19 │           imagePullPolicy: "IfNotPresent"
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           volumeMounts:
  23 │             - mountPath: /data/pgdb
  24 │               name: postgresdb
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pg-deployment' of Deployment 'pg-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pg-deployment3.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: pg-deployment
  18 │           image: postgres:latest
  19 │           imagePullPolicy: "IfNotPresent"
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           volumeMounts:
  23 │             - mountPath: /data/pgdb
  24 │               name: postgresdb
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pg-deployment' of Deployment 'pg-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pg-deployment3.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: pg-deployment
  18 │           image: postgres:latest
  19 │           imagePullPolicy: "IfNotPresent"
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           volumeMounts:
  23 │             - mountPath: /data/pgdb
  24 │               name: postgresdb
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pg-deployment' of Deployment 'pg-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pg-deployment3.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: pg-deployment
  18 │           image: postgres:latest
  19 │           imagePullPolicy: "IfNotPresent"
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           volumeMounts:
  23 │             - mountPath: /data/pgdb
  24 │               name: postgresdb
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pg-deployment' of Deployment 'pg-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pg-deployment3.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: pg-deployment
  18 │           image: postgres:latest
  19 │           imagePullPolicy: "IfNotPresent"
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           volumeMounts:
  23 │             - mountPath: /data/pgdb
  24 │               name: postgresdb
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pg-deployment3.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: pg-deployment
  18 │           image: postgres:latest
  19 │           imagePullPolicy: "IfNotPresent"
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           volumeMounts:
  23 │             - mountPath: /data/pgdb
  24 │               name: postgresdb
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pg-deployment" of deployment "pg-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pg-deployment3.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: pg-deployment
  18 │           image: postgres:latest
  19 │           imagePullPolicy: "IfNotPresent"
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           volumeMounts:
  23 │             - mountPath: /data/pgdb
  24 │               name: postgresdb
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pg-deployment3.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: pg-deployment
  18 │           image: postgres:latest
  19 │           imagePullPolicy: "IfNotPresent"
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           volumeMounts:
  23 │             - mountPath: /data/pgdb
  24 │               name: postgresdb
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pg-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pg-deployment3.yaml:4
────────────────────────────────────────
   4 [   name: pg-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pg-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg-deployment3.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: pg-deployment
  18 │           image: postgres:latest
  19 │           imagePullPolicy: "IfNotPresent"
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           volumeMounts:
  23 │             - mountPath: /data/pgdb
  24 │               name: postgresdb
  25 └           envFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pg-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg-deployment3.yaml:16-34
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: pg-deployment
  18 │           image: postgres:latest
  19 │           imagePullPolicy: "IfNotPresent"
  20 │           ports:
  21 │             - containerPort: 5432
  22 │           volumeMounts:
  23 │             - mountPath: /data/pgdb
  24 └               name: postgresdb
  ..   
────────────────────────────────────────



pg-deployment4_1.yaml (kubernetes)
==================================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pg-deployment4_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:11.5
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: mydb
  24 │         - name: POSTGRES_USER
  25 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pg-deployment4_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:11.5
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: mydb
  24 │         - name: POSTGRES_USER
  25 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pg-deployment4_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:11.5
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: mydb
  24 │         - name: POSTGRES_USER
  25 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pg-deployment4_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:11.5
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: mydb
  24 │         - name: POSTGRES_USER
  25 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pg-deployment4_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:11.5
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: mydb
  24 │         - name: POSTGRES_USER
  25 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pg-deployment4_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:11.5
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: mydb
  24 │         - name: POSTGRES_USER
  25 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pg-deployment4_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:11.5
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: mydb
  24 │         - name: POSTGRES_USER
  25 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pg-deployment4_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:11.5
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: mydb
  24 │         - name: POSTGRES_USER
  25 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pg-deployment4_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:11.5
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: mydb
  24 │         - name: POSTGRES_USER
  25 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pg-deployment4_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:11.5
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: mydb
  24 │         - name: POSTGRES_USER
  25 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pg-deployment4_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:11.5
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: mydb
  24 │         - name: POSTGRES_USER
  25 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pg-deployment4_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:11.5
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: mydb
  24 │         - name: POSTGRES_USER
  25 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pg-deployment4_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:11.5
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: mydb
  24 │         - name: POSTGRES_USER
  25 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pg-deployment4_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:11.5
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: mydb
  24 │         - name: POSTGRES_USER
  25 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment postgres in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pg-deployment4_1.yaml:4
────────────────────────────────────────
   4 [   name: postgres
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg-deployment4_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres:11.5
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: mydb
  24 │         - name: POSTGRES_USER
  25 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg-deployment4_1.yaml:16-38
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: postgres
  18 │         image: postgres:11.5
  19 │         ports:
  20 │         - containerPort: 5432
  21 │         env:
  22 │         - name: POSTGRES_DB
  23 │           value: mydb
  24 └         - name: POSTGRES_USER
  ..   
────────────────────────────────────────



pg-exporter.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres-exporter' of Deployment 'postgres-exporter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pg-exporter.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: postgres-exporter
  17 │           image: bitnami/postgres-exporter:latest
  18 │           ports:
  19 │             - containerPort: 9187
  20 │           env:
  21 │             - name: DATA_SOURCE_URI
  22 └               value: "postgresql://postgres:postgres@postgres.default:5432/postgres"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres-exporter' of Deployment 'postgres-exporter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pg-exporter.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: postgres-exporter
  17 │           image: bitnami/postgres-exporter:latest
  18 │           ports:
  19 │             - containerPort: 9187
  20 │           env:
  21 │             - name: DATA_SOURCE_URI
  22 └               value: "postgresql://postgres:postgres@postgres.default:5432/postgres"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres-exporter' of 'deployment' 'postgres-exporter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pg-exporter.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: postgres-exporter
  17 │           image: bitnami/postgres-exporter:latest
  18 │           ports:
  19 │             - containerPort: 9187
  20 │           env:
  21 │             - name: DATA_SOURCE_URI
  22 └               value: "postgresql://postgres:postgres@postgres.default:5432/postgres"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres-exporter' of Deployment 'postgres-exporter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pg-exporter.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: postgres-exporter
  17 │           image: bitnami/postgres-exporter:latest
  18 │           ports:
  19 │             - containerPort: 9187
  20 │           env:
  21 │             - name: DATA_SOURCE_URI
  22 └               value: "postgresql://postgres:postgres@postgres.default:5432/postgres"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres-exporter' of Deployment 'postgres-exporter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pg-exporter.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: postgres-exporter
  17 │           image: bitnami/postgres-exporter:latest
  18 │           ports:
  19 │             - containerPort: 9187
  20 │           env:
  21 │             - name: DATA_SOURCE_URI
  22 └               value: "postgresql://postgres:postgres@postgres.default:5432/postgres"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'postgres-exporter' of Deployment 'postgres-exporter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pg-exporter.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: postgres-exporter
  17 │           image: bitnami/postgres-exporter:latest
  18 │           ports:
  19 │             - containerPort: 9187
  20 │           env:
  21 │             - name: DATA_SOURCE_URI
  22 └               value: "postgresql://postgres:postgres@postgres.default:5432/postgres"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres-exporter' of Deployment 'postgres-exporter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pg-exporter.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: postgres-exporter
  17 │           image: bitnami/postgres-exporter:latest
  18 │           ports:
  19 │             - containerPort: 9187
  20 │           env:
  21 │             - name: DATA_SOURCE_URI
  22 └               value: "postgresql://postgres:postgres@postgres.default:5432/postgres"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres-exporter' of Deployment 'postgres-exporter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pg-exporter.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: postgres-exporter
  17 │           image: bitnami/postgres-exporter:latest
  18 │           ports:
  19 │             - containerPort: 9187
  20 │           env:
  21 │             - name: DATA_SOURCE_URI
  22 └               value: "postgresql://postgres:postgres@postgres.default:5432/postgres"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres-exporter' of Deployment 'postgres-exporter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pg-exporter.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: postgres-exporter
  17 │           image: bitnami/postgres-exporter:latest
  18 │           ports:
  19 │             - containerPort: 9187
  20 │           env:
  21 │             - name: DATA_SOURCE_URI
  22 └               value: "postgresql://postgres:postgres@postgres.default:5432/postgres"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres-exporter' of Deployment 'postgres-exporter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pg-exporter.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: postgres-exporter
  17 │           image: bitnami/postgres-exporter:latest
  18 │           ports:
  19 │             - containerPort: 9187
  20 │           env:
  21 │             - name: DATA_SOURCE_URI
  22 └               value: "postgresql://postgres:postgres@postgres.default:5432/postgres"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres-exporter' of Deployment 'postgres-exporter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pg-exporter.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: postgres-exporter
  17 │           image: bitnami/postgres-exporter:latest
  18 │           ports:
  19 │             - containerPort: 9187
  20 │           env:
  21 │             - name: DATA_SOURCE_URI
  22 └               value: "postgresql://postgres:postgres@postgres.default:5432/postgres"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres-exporter' of Deployment 'postgres-exporter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pg-exporter.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: postgres-exporter
  17 │           image: bitnami/postgres-exporter:latest
  18 │           ports:
  19 │             - containerPort: 9187
  20 │           env:
  21 │             - name: DATA_SOURCE_URI
  22 └               value: "postgresql://postgres:postgres@postgres.default:5432/postgres"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pg-exporter.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: postgres-exporter
  17 │           image: bitnami/postgres-exporter:latest
  18 │           ports:
  19 │             - containerPort: 9187
  20 │           env:
  21 │             - name: DATA_SOURCE_URI
  22 └               value: "postgresql://postgres:postgres@postgres.default:5432/postgres"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres-exporter" of deployment "postgres-exporter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pg-exporter.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: postgres-exporter
  17 │           image: bitnami/postgres-exporter:latest
  18 │           ports:
  19 │             - containerPort: 9187
  20 │           env:
  21 │             - name: DATA_SOURCE_URI
  22 └               value: "postgresql://postgres:postgres@postgres.default:5432/postgres"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pg-exporter.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: postgres-exporter
  17 │           image: bitnami/postgres-exporter:latest
  18 │           ports:
  19 │             - containerPort: 9187
  20 │           env:
  21 │             - name: DATA_SOURCE_URI
  22 └               value: "postgresql://postgres:postgres@postgres.default:5432/postgres"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment postgres-exporter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pg-exporter.yaml:4
────────────────────────────────────────
   4 [   name: postgres-exporter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres-exporter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg-exporter.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: postgres-exporter
  17 │           image: bitnami/postgres-exporter:latest
  18 │           ports:
  19 │             - containerPort: 9187
  20 │           env:
  21 │             - name: DATA_SOURCE_URI
  22 └               value: "postgresql://postgres:postgres@postgres.default:5432/postgres"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres-exporter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg-exporter.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: postgres-exporter
  17 │           image: bitnami/postgres-exporter:latest
  18 │           ports:
  19 │             - containerPort: 9187
  20 │           env:
  21 │             - name: DATA_SOURCE_URI
  22 └               value: "postgresql://postgres:postgres@postgres.default:5432/postgres"
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container postgres-exporter in deployment postgres-exporter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pg-exporter.yaml:16-22
────────────────────────────────────────
  16 ┌         - name: postgres-exporter
  17 │           image: bitnami/postgres-exporter:latest
  18 │           ports:
  19 │             - containerPort: 9187
  20 │           env:
  21 │             - name: DATA_SOURCE_URI
  22 └               value: "postgresql://postgres:postgres@postgres.default:5432/postgres"
────────────────────────────────────────



pg-pods.yaml (kubernetes)
=========================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pg-pod' of Pod 'pg' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pg-pods.yaml:7-28
────────────────────────────────────────
   7 ┌     - name: pg-pod
   8 │       image: postgres:14
   9 │       imagePullPolicy: IfNotPresent
  10 │       ports:
  11 │         - containerPort: 5432
  12 │           name: pg
  13 │       env:
  14 │         - name: POSTGRES_USER
  15 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pg-pod' of Pod 'pg' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pg-pods.yaml:7-28
────────────────────────────────────────
   7 ┌     - name: pg-pod
   8 │       image: postgres:14
   9 │       imagePullPolicy: IfNotPresent
  10 │       ports:
  11 │         - containerPort: 5432
  12 │           name: pg
  13 │       env:
  14 │         - name: POSTGRES_USER
  15 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pg-pod' of 'pod' 'pg' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pg-pods.yaml:7-28
────────────────────────────────────────
   7 ┌     - name: pg-pod
   8 │       image: postgres:14
   9 │       imagePullPolicy: IfNotPresent
  10 │       ports:
  11 │         - containerPort: 5432
  12 │           name: pg
  13 │       env:
  14 │         - name: POSTGRES_USER
  15 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pg-pod' of Pod 'pg' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pg-pods.yaml:7-28
────────────────────────────────────────
   7 ┌     - name: pg-pod
   8 │       image: postgres:14
   9 │       imagePullPolicy: IfNotPresent
  10 │       ports:
  11 │         - containerPort: 5432
  12 │           name: pg
  13 │       env:
  14 │         - name: POSTGRES_USER
  15 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pg-pod' of Pod 'pg' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pg-pods.yaml:7-28
────────────────────────────────────────
   7 ┌     - name: pg-pod
   8 │       image: postgres:14
   9 │       imagePullPolicy: IfNotPresent
  10 │       ports:
  11 │         - containerPort: 5432
  12 │           name: pg
  13 │       env:
  14 │         - name: POSTGRES_USER
  15 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pg-pod' of Pod 'pg' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pg-pods.yaml:7-28
────────────────────────────────────────
   7 ┌     - name: pg-pod
   8 │       image: postgres:14
   9 │       imagePullPolicy: IfNotPresent
  10 │       ports:
  11 │         - containerPort: 5432
  12 │           name: pg
  13 │       env:
  14 │         - name: POSTGRES_USER
  15 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pg-pod' of Pod 'pg' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pg-pods.yaml:7-28
────────────────────────────────────────
   7 ┌     - name: pg-pod
   8 │       image: postgres:14
   9 │       imagePullPolicy: IfNotPresent
  10 │       ports:
  11 │         - containerPort: 5432
  12 │           name: pg
  13 │       env:
  14 │         - name: POSTGRES_USER
  15 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pg-pod' of Pod 'pg' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pg-pods.yaml:7-28
────────────────────────────────────────
   7 ┌     - name: pg-pod
   8 │       image: postgres:14
   9 │       imagePullPolicy: IfNotPresent
  10 │       ports:
  11 │         - containerPort: 5432
  12 │           name: pg
  13 │       env:
  14 │         - name: POSTGRES_USER
  15 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pg-pod' of Pod 'pg' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pg-pods.yaml:7-28
────────────────────────────────────────
   7 ┌     - name: pg-pod
   8 │       image: postgres:14
   9 │       imagePullPolicy: IfNotPresent
  10 │       ports:
  11 │         - containerPort: 5432
  12 │           name: pg
  13 │       env:
  14 │         - name: POSTGRES_USER
  15 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pg-pod' of Pod 'pg' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pg-pods.yaml:7-28
────────────────────────────────────────
   7 ┌     - name: pg-pod
   8 │       image: postgres:14
   9 │       imagePullPolicy: IfNotPresent
  10 │       ports:
  11 │         - containerPort: 5432
  12 │           name: pg
  13 │       env:
  14 │         - name: POSTGRES_USER
  15 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pg-pod' of Pod 'pg' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pg-pods.yaml:7-28
────────────────────────────────────────
   7 ┌     - name: pg-pod
   8 │       image: postgres:14
   9 │       imagePullPolicy: IfNotPresent
  10 │       ports:
  11 │         - containerPort: 5432
  12 │           name: pg
  13 │       env:
  14 │         - name: POSTGRES_USER
  15 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pg-pods.yaml:7-28
────────────────────────────────────────
   7 ┌     - name: pg-pod
   8 │       image: postgres:14
   9 │       imagePullPolicy: IfNotPresent
  10 │       ports:
  11 │         - containerPort: 5432
  12 │           name: pg
  13 │       env:
  14 │         - name: POSTGRES_USER
  15 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pg-pod" of pod "pg" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pg-pods.yaml:7-28
────────────────────────────────────────
   7 ┌     - name: pg-pod
   8 │       image: postgres:14
   9 │       imagePullPolicy: IfNotPresent
  10 │       ports:
  11 │         - containerPort: 5432
  12 │           name: pg
  13 │       env:
  14 │         - name: POSTGRES_USER
  15 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pg-pods.yaml:7-28
────────────────────────────────────────
   7 ┌     - name: pg-pod
   8 │       image: postgres:14
   9 │       imagePullPolicy: IfNotPresent
  10 │       ports:
  11 │         - containerPort: 5432
  12 │           name: pg
  13 │       env:
  14 │         - name: POSTGRES_USER
  15 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pg in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pg-pods.yaml:4
────────────────────────────────────────
   4 [   name: pg
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pg in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg-pods.yaml:7-28
────────────────────────────────────────
   7 ┌     - name: pg-pod
   8 │       image: postgres:14
   9 │       imagePullPolicy: IfNotPresent
  10 │       ports:
  11 │         - containerPort: 5432
  12 │           name: pg
  13 │       env:
  14 │         - name: POSTGRES_USER
  15 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pg in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg-pods.yaml:6-28
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: pg-pod
   8 │       image: postgres:14
   9 │       imagePullPolicy: IfNotPresent
  10 │       ports:
  11 │         - containerPort: 5432
  12 │           name: pg
  13 │       env:
  14 └         - name: POSTGRES_USER
  ..   
────────────────────────────────────────



pg-svc-checker.yaml (kubernetes)
================================
Tests: 108 (SUCCESSES: 107, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'svcchecker' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"SVC_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



pg1.yaml (kubernetes)
=====================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres16' of Deployment 'pg16' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pg1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: postgres:16-alpine
  19 │         name: postgres16
  20 │         envFrom:
  21 │         - configMapRef:
  22 │             name: app-settings
  23 │         - secretRef:
  24 │             name: app-credentials
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /var/lib/postgresql/data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres16' of Deployment 'pg16' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pg1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: postgres:16-alpine
  19 │         name: postgres16
  20 │         envFrom:
  21 │         - configMapRef:
  22 │             name: app-settings
  23 │         - secretRef:
  24 │             name: app-credentials
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /var/lib/postgresql/data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres16' of 'deployment' 'pg16' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pg1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: postgres:16-alpine
  19 │         name: postgres16
  20 │         envFrom:
  21 │         - configMapRef:
  22 │             name: app-settings
  23 │         - secretRef:
  24 │             name: app-credentials
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /var/lib/postgresql/data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres16' of Deployment 'pg16' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pg1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: postgres:16-alpine
  19 │         name: postgres16
  20 │         envFrom:
  21 │         - configMapRef:
  22 │             name: app-settings
  23 │         - secretRef:
  24 │             name: app-credentials
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /var/lib/postgresql/data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres16' of Deployment 'pg16' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pg1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: postgres:16-alpine
  19 │         name: postgres16
  20 │         envFrom:
  21 │         - configMapRef:
  22 │             name: app-settings
  23 │         - secretRef:
  24 │             name: app-credentials
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /var/lib/postgresql/data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres16' of Deployment 'pg16' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pg1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: postgres:16-alpine
  19 │         name: postgres16
  20 │         envFrom:
  21 │         - configMapRef:
  22 │             name: app-settings
  23 │         - secretRef:
  24 │             name: app-credentials
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /var/lib/postgresql/data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres16' of Deployment 'pg16' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pg1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: postgres:16-alpine
  19 │         name: postgres16
  20 │         envFrom:
  21 │         - configMapRef:
  22 │             name: app-settings
  23 │         - secretRef:
  24 │             name: app-credentials
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /var/lib/postgresql/data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres16' of Deployment 'pg16' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pg1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: postgres:16-alpine
  19 │         name: postgres16
  20 │         envFrom:
  21 │         - configMapRef:
  22 │             name: app-settings
  23 │         - secretRef:
  24 │             name: app-credentials
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /var/lib/postgresql/data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres16' of Deployment 'pg16' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pg1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: postgres:16-alpine
  19 │         name: postgres16
  20 │         envFrom:
  21 │         - configMapRef:
  22 │             name: app-settings
  23 │         - secretRef:
  24 │             name: app-credentials
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /var/lib/postgresql/data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres16' of Deployment 'pg16' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pg1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: postgres:16-alpine
  19 │         name: postgres16
  20 │         envFrom:
  21 │         - configMapRef:
  22 │             name: app-settings
  23 │         - secretRef:
  24 │             name: app-credentials
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /var/lib/postgresql/data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres16' of Deployment 'pg16' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pg1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: postgres:16-alpine
  19 │         name: postgres16
  20 │         envFrom:
  21 │         - configMapRef:
  22 │             name: app-settings
  23 │         - secretRef:
  24 │             name: app-credentials
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /var/lib/postgresql/data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pg1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: postgres:16-alpine
  19 │         name: postgres16
  20 │         envFrom:
  21 │         - configMapRef:
  22 │             name: app-settings
  23 │         - secretRef:
  24 │             name: app-credentials
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /var/lib/postgresql/data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres16" of deployment "pg16" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pg1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: postgres:16-alpine
  19 │         name: postgres16
  20 │         envFrom:
  21 │         - configMapRef:
  22 │             name: app-settings
  23 │         - secretRef:
  24 │             name: app-credentials
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /var/lib/postgresql/data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pg1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: postgres:16-alpine
  19 │         name: postgres16
  20 │         envFrom:
  21 │         - configMapRef:
  22 │             name: app-settings
  23 │         - secretRef:
  24 │             name: app-credentials
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /var/lib/postgresql/data
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pg16 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pg1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pg16
   5 │   labels:
   6 └     app: pg16
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pg16 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: postgres:16-alpine
  19 │         name: postgres16
  20 │         envFrom:
  21 │         - configMapRef:
  22 │             name: app-settings
  23 │         - secretRef:
  24 │             name: app-credentials
  25 │         volumeMounts:
  26 │         - name: data
  27 └           mountPath: /var/lib/postgresql/data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pg16 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg1.yaml:17-31
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: postgres:16-alpine
  19 │         name: postgres16
  20 │         envFrom:
  21 │         - configMapRef:
  22 │             name: app-settings
  23 │         - secretRef:
  24 │             name: app-credentials
  25 └         volumeMounts:
  ..   
────────────────────────────────────────



pg_5.yaml (kubernetes)
======================
Tests: 124 (SUCCESSES: 92, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 20, MEDIUM: 7, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pg_5.yaml:28-46
────────────────────────────────────────
  28 ┌       - name: postgres
  29 │         image: postgres:15
  30 │         envFrom:
  31 │         - configMapRef:
  32 │             name: postgres-config
  33 │         env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           valueFrom:
  36 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'volume-permissions' of StatefulSet 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pg_5.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: volume-permissions
  19 │         image: busybox
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - chown -R 10001:0 /var/lib/postgresql
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/postgresql
  26 └           name: postgres-pv-claim
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of StatefulSet 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pg_5.yaml:28-46
────────────────────────────────────────
  28 ┌       - name: postgres
  29 │         image: postgres:15
  30 │         envFrom:
  31 │         - configMapRef:
  32 │             name: postgres-config
  33 │         env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           valueFrom:
  36 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'volume-permissions' of StatefulSet 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pg_5.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: volume-permissions
  19 │         image: busybox
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - chown -R 10001:0 /var/lib/postgresql
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/postgresql
  26 └           name: postgres-pv-claim
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'statefulset' 'postgres' in 'postgres-dev' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pg_5.yaml:28-46
────────────────────────────────────────
  28 ┌       - name: postgres
  29 │         image: postgres:15
  30 │         envFrom:
  31 │         - configMapRef:
  32 │             name: postgres-config
  33 │         env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           valueFrom:
  36 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'volume-permissions' of 'statefulset' 'postgres' in 'postgres-dev' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pg_5.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: volume-permissions
  19 │         image: busybox
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - chown -R 10001:0 /var/lib/postgresql
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/postgresql
  26 └           name: postgres-pv-claim
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pg_5.yaml:28-46
────────────────────────────────────────
  28 ┌       - name: postgres
  29 │         image: postgres:15
  30 │         envFrom:
  31 │         - configMapRef:
  32 │             name: postgres-config
  33 │         env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           valueFrom:
  36 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'volume-permissions' of StatefulSet 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pg_5.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: volume-permissions
  19 │         image: busybox
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - chown -R 10001:0 /var/lib/postgresql
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/postgresql
  26 └           name: postgres-pv-claim
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pg_5.yaml:28-46
────────────────────────────────────────
  28 ┌       - name: postgres
  29 │         image: postgres:15
  30 │         envFrom:
  31 │         - configMapRef:
  32 │             name: postgres-config
  33 │         env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           valueFrom:
  36 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'volume-permissions' of StatefulSet 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pg_5.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: volume-permissions
  19 │         image: busybox
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - chown -R 10001:0 /var/lib/postgresql
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/postgresql
  26 └           name: postgres-pv-claim
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'volume-permissions' of StatefulSet 'postgres' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pg_5.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: volume-permissions
  19 │         image: busybox
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - chown -R 10001:0 /var/lib/postgresql
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/postgresql
  26 └           name: postgres-pv-claim
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pg_5.yaml:28-46
────────────────────────────────────────
  28 ┌       - name: postgres
  29 │         image: postgres:15
  30 │         envFrom:
  31 │         - configMapRef:
  32 │             name: postgres-config
  33 │         env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           valueFrom:
  36 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'volume-permissions' of StatefulSet 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pg_5.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: volume-permissions
  19 │         image: busybox
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - chown -R 10001:0 /var/lib/postgresql
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/postgresql
  26 └           name: postgres-pv-claim
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pg_5.yaml:28-46
────────────────────────────────────────
  28 ┌       - name: postgres
  29 │         image: postgres:15
  30 │         envFrom:
  31 │         - configMapRef:
  32 │             name: postgres-config
  33 │         env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           valueFrom:
  36 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'volume-permissions' of StatefulSet 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pg_5.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: volume-permissions
  19 │         image: busybox
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - chown -R 10001:0 /var/lib/postgresql
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/postgresql
  26 └           name: postgres-pv-claim
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pg_5.yaml:28-46
────────────────────────────────────────
  28 ┌       - name: postgres
  29 │         image: postgres:15
  30 │         envFrom:
  31 │         - configMapRef:
  32 │             name: postgres-config
  33 │         env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           valueFrom:
  36 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'volume-permissions' of StatefulSet 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pg_5.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: volume-permissions
  19 │         image: busybox
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - chown -R 10001:0 /var/lib/postgresql
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/postgresql
  26 └           name: postgres-pv-claim
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pg_5.yaml:28-46
────────────────────────────────────────
  28 ┌       - name: postgres
  29 │         image: postgres:15
  30 │         envFrom:
  31 │         - configMapRef:
  32 │             name: postgres-config
  33 │         env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           valueFrom:
  36 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'volume-permissions' of StatefulSet 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pg_5.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: volume-permissions
  19 │         image: busybox
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - chown -R 10001:0 /var/lib/postgresql
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/postgresql
  26 └           name: postgres-pv-claim
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pg_5.yaml:28-46
────────────────────────────────────────
  28 ┌       - name: postgres
  29 │         image: postgres:15
  30 │         envFrom:
  31 │         - configMapRef:
  32 │             name: postgres-config
  33 │         env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           valueFrom:
  36 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'volume-permissions' of StatefulSet 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pg_5.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: volume-permissions
  19 │         image: busybox
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - chown -R 10001:0 /var/lib/postgresql
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/postgresql
  26 └           name: postgres-pv-claim
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pg_5.yaml:28-46
────────────────────────────────────────
  28 ┌       - name: postgres
  29 │         image: postgres:15
  30 │         envFrom:
  31 │         - configMapRef:
  32 │             name: postgres-config
  33 │         env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           valueFrom:
  36 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'volume-permissions' of StatefulSet 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pg_5.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: volume-permissions
  19 │         image: busybox
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - chown -R 10001:0 /var/lib/postgresql
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/postgresql
  26 └           name: postgres-pv-claim
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pg_5.yaml:28-46
────────────────────────────────────────
  28 ┌       - name: postgres
  29 │         image: postgres:15
  30 │         envFrom:
  31 │         - configMapRef:
  32 │             name: postgres-config
  33 │         env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           valueFrom:
  36 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pg_5.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: volume-permissions
  19 │         image: busybox
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - chown -R 10001:0 /var/lib/postgresql
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/postgresql
  26 └           name: postgres-pv-claim
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of statefulset "postgres" in "postgres-dev" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pg_5.yaml:28-46
────────────────────────────────────────
  28 ┌       - name: postgres
  29 │         image: postgres:15
  30 │         envFrom:
  31 │         - configMapRef:
  32 │             name: postgres-config
  33 │         env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           valueFrom:
  36 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "volume-permissions" of statefulset "postgres" in "postgres-dev" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pg_5.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: volume-permissions
  19 │         image: busybox
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - chown -R 10001:0 /var/lib/postgresql
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/postgresql
  26 └           name: postgres-pv-claim
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pg_5.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: volume-permissions
  19 │         image: busybox
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - chown -R 10001:0 /var/lib/postgresql
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/postgresql
  26 └           name: postgres-pv-claim
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pg_5.yaml:28-46
────────────────────────────────────────
  28 ┌       - name: postgres
  29 │         image: postgres:15
  30 │         envFrom:
  31 │         - configMapRef:
  32 │             name: postgres-config
  33 │         env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           valueFrom:
  36 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in postgres-dev namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg_5.yaml:28-46
────────────────────────────────────────
  28 ┌       - name: postgres
  29 │         image: postgres:15
  30 │         envFrom:
  31 │         - configMapRef:
  32 │             name: postgres-config
  33 │         env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           valueFrom:
  36 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in postgres-dev namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg_5.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: volume-permissions
  19 │         image: busybox
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - chown -R 10001:0 /var/lib/postgresql
  24 │         volumeMounts:
  25 │         - mountPath: /var/lib/postgresql
  26 └           name: postgres-pv-claim
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset postgres in postgres-dev namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg_5.yaml:17-46
────────────────────────────────────────
  17 ┌       initContainers:
  18 │       - name: volume-permissions
  19 │         image: busybox
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - chown -R 10001:0 /var/lib/postgresql
  24 │         volumeMounts:
  25 └         - mountPath: /var/lib/postgresql
  ..   
────────────────────────────────────────



pg_combined_deployment_6.yaml (kubernetes)
==========================================
Tests: 109 (SUCCESSES: 93, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pg_combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of StatefulSet 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pg_combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'statefulset' 'postgres' in 'development' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pg_combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pg_combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pg_combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pg_combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pg_combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pg_combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pg_combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pg_combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pg_combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pg_combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of statefulset "postgres" in "development" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pg_combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pg_combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in development namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg_combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset postgres in development namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg_combined_deployment_6.yaml:17-40
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 └             configMapKeyRef:
  ..   
────────────────────────────────────────



pg_migrate.yaml (kubernetes)
============================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'migrate' of Job 'db-migration' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pg_migrate.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'migrate' of Job 'db-migration' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pg_migrate.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'migrate' of 'job' 'db-migration' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pg_migrate.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'migrate' of Job 'db-migration' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pg_migrate.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'migrate' of Job 'db-migration' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pg_migrate.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'migrate' of Job 'db-migration' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pg_migrate.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'migrate' of Job 'db-migration' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pg_migrate.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'migrate' of Job 'db-migration' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pg_migrate.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'migrate' of Job 'db-migration' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pg_migrate.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'migrate' of Job 'db-migration' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pg_migrate.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'migrate' of Job 'db-migration' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pg_migrate.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pg_migrate.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "migrate" of job "db-migration" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pg_migrate.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pg_migrate.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0110 (LOW): job db-migration in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pg_migrate.yaml:4
────────────────────────────────────────
   4 [   name: db-migration
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container db-migration in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg_migrate.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job db-migration in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg_migrate.yaml:8-15
────────────────────────────────────────
   8 ┌       containers:
   9 │       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 │         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
  15 └       restartPolicy: OnFailure
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container migrate in job db-migration (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pg_migrate.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────



pg_migrate1.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'migrate' of Job 'db-migration' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pg_migrate1.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'migrate' of Job 'db-migration' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pg_migrate1.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'migrate' of 'job' 'db-migration' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pg_migrate1.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'migrate' of Job 'db-migration' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pg_migrate1.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'migrate' of Job 'db-migration' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pg_migrate1.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'migrate' of Job 'db-migration' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pg_migrate1.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'migrate' of Job 'db-migration' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pg_migrate1.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'migrate' of Job 'db-migration' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pg_migrate1.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'migrate' of Job 'db-migration' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pg_migrate1.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'migrate' of Job 'db-migration' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pg_migrate1.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'migrate' of Job 'db-migration' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pg_migrate1.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pg_migrate1.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "migrate" of job "db-migration" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pg_migrate1.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pg_migrate1.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0110 (LOW): job db-migration in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pg_migrate1.yaml:4
────────────────────────────────────────
   4 [   name: db-migration
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container db-migration in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg_migrate1.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job db-migration in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg_migrate1.yaml:8-15
────────────────────────────────────────
   8 ┌       containers:
   9 │       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 │         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
  15 └       restartPolicy: OnFailure
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container migrate in job db-migration (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pg_migrate1.yaml:9-14
────────────────────────────────────────
   9 ┌       - name: migrate
  10 │         image: docker-registry:5000/postgres
  11 │         env:
  12 │         - name: PGPASSWORD 
  13 │           value: mypass
  14 └         command: ['sh', '-c', 'psql -h db-service -U postgres  -c "CREATE TABLE IF NOT EXISTS fortunes (ID SERIAL PRIMARY KEY, Description TEXT NOT NULL);" && psql -h db-service -U postgres -c "INSERT INTO fortunes (Description) VALUES (''Fortune favors the brave.'');"']
────────────────────────────────────────



pg_stateful_set.yaml (kubernetes)
=================================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pg_stateful_set.yaml:17-39
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:13
  19 │           ports:
  20 │             - containerPort: 5432
  21 │           env:
  22 │             - name: POSTGRES_DB
  23 │               valueFrom:
  24 │                 configMapKeyRef:
  25 └                   name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of StatefulSet 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pg_stateful_set.yaml:17-39
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:13
  19 │           ports:
  20 │             - containerPort: 5432
  21 │           env:
  22 │             - name: POSTGRES_DB
  23 │               valueFrom:
  24 │                 configMapKeyRef:
  25 └                   name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'statefulset' 'postgres' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pg_stateful_set.yaml:17-39
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:13
  19 │           ports:
  20 │             - containerPort: 5432
  21 │           env:
  22 │             - name: POSTGRES_DB
  23 │               valueFrom:
  24 │                 configMapKeyRef:
  25 └                   name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pg_stateful_set.yaml:17-39
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:13
  19 │           ports:
  20 │             - containerPort: 5432
  21 │           env:
  22 │             - name: POSTGRES_DB
  23 │               valueFrom:
  24 │                 configMapKeyRef:
  25 └                   name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pg_stateful_set.yaml:17-39
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:13
  19 │           ports:
  20 │             - containerPort: 5432
  21 │           env:
  22 │             - name: POSTGRES_DB
  23 │               valueFrom:
  24 │                 configMapKeyRef:
  25 └                   name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pg_stateful_set.yaml:17-39
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:13
  19 │           ports:
  20 │             - containerPort: 5432
  21 │           env:
  22 │             - name: POSTGRES_DB
  23 │               valueFrom:
  24 │                 configMapKeyRef:
  25 └                   name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pg_stateful_set.yaml:17-39
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:13
  19 │           ports:
  20 │             - containerPort: 5432
  21 │           env:
  22 │             - name: POSTGRES_DB
  23 │               valueFrom:
  24 │                 configMapKeyRef:
  25 └                   name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pg_stateful_set.yaml:17-39
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:13
  19 │           ports:
  20 │             - containerPort: 5432
  21 │           env:
  22 │             - name: POSTGRES_DB
  23 │               valueFrom:
  24 │                 configMapKeyRef:
  25 └                   name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pg_stateful_set.yaml:17-39
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:13
  19 │           ports:
  20 │             - containerPort: 5432
  21 │           env:
  22 │             - name: POSTGRES_DB
  23 │               valueFrom:
  24 │                 configMapKeyRef:
  25 └                   name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pg_stateful_set.yaml:17-39
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:13
  19 │           ports:
  20 │             - containerPort: 5432
  21 │           env:
  22 │             - name: POSTGRES_DB
  23 │               valueFrom:
  24 │                 configMapKeyRef:
  25 └                   name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pg_stateful_set.yaml:17-39
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:13
  19 │           ports:
  20 │             - containerPort: 5432
  21 │           env:
  22 │             - name: POSTGRES_DB
  23 │               valueFrom:
  24 │                 configMapKeyRef:
  25 └                   name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pg_stateful_set.yaml:17-39
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:13
  19 │           ports:
  20 │             - containerPort: 5432
  21 │           env:
  22 │             - name: POSTGRES_DB
  23 │               valueFrom:
  24 │                 configMapKeyRef:
  25 └                   name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of statefulset "postgres" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pg_stateful_set.yaml:17-39
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:13
  19 │           ports:
  20 │             - containerPort: 5432
  21 │           env:
  22 │             - name: POSTGRES_DB
  23 │               valueFrom:
  24 │                 configMapKeyRef:
  25 └                   name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pg_stateful_set.yaml:17-39
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:13
  19 │           ports:
  20 │             - containerPort: 5432
  21 │           env:
  22 │             - name: POSTGRES_DB
  23 │               valueFrom:
  24 │                 configMapKeyRef:
  25 └                   name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset postgres in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pg_stateful_set.yaml:4
────────────────────────────────────────
   4 [   name: postgres
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg_stateful_set.yaml:17-39
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:13
  19 │           ports:
  20 │             - containerPort: 5432
  21 │           env:
  22 │             - name: POSTGRES_DB
  23 │               valueFrom:
  24 │                 configMapKeyRef:
  25 └                   name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset postgres in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pg_stateful_set.yaml:16-39
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: postgres
  18 │           image: postgres:13
  19 │           ports:
  20 │             - containerPort: 5432
  21 │           env:
  22 │             - name: POSTGRES_DB
  23 │               valueFrom:
  24 └                 configMapKeyRef:
  ..   
────────────────────────────────────────



pgadmin-deploy.yaml (kubernetes)
================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin-deploy.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: pgadmin
  18 │           image: dpage/pgadmin4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: PGADMIN_DEFAULT_EMAIL
  23 │               valueFrom:
  24 │                 secretKeyRef:
  25 └                   name: pgadmin-secret
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin-deploy.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: pgadmin
  18 │           image: dpage/pgadmin4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: PGADMIN_DEFAULT_EMAIL
  23 │               valueFrom:
  24 │                 secretKeyRef:
  25 └                   name: pgadmin-secret
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin' of 'deployment' 'pgadmin' in 'postgres-dev' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin-deploy.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: pgadmin
  18 │           image: dpage/pgadmin4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: PGADMIN_DEFAULT_EMAIL
  23 │               valueFrom:
  24 │                 secretKeyRef:
  25 └                   name: pgadmin-secret
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin-deploy.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: pgadmin
  18 │           image: dpage/pgadmin4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: PGADMIN_DEFAULT_EMAIL
  23 │               valueFrom:
  24 │                 secretKeyRef:
  25 └                   name: pgadmin-secret
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin-deploy.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: pgadmin
  18 │           image: dpage/pgadmin4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: PGADMIN_DEFAULT_EMAIL
  23 │               valueFrom:
  24 │                 secretKeyRef:
  25 └                   name: pgadmin-secret
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin-deploy.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: pgadmin
  18 │           image: dpage/pgadmin4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: PGADMIN_DEFAULT_EMAIL
  23 │               valueFrom:
  24 │                 secretKeyRef:
  25 └                   name: pgadmin-secret
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin-deploy.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: pgadmin
  18 │           image: dpage/pgadmin4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: PGADMIN_DEFAULT_EMAIL
  23 │               valueFrom:
  24 │                 secretKeyRef:
  25 └                   name: pgadmin-secret
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin-deploy.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: pgadmin
  18 │           image: dpage/pgadmin4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: PGADMIN_DEFAULT_EMAIL
  23 │               valueFrom:
  24 │                 secretKeyRef:
  25 └                   name: pgadmin-secret
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin-deploy.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: pgadmin
  18 │           image: dpage/pgadmin4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: PGADMIN_DEFAULT_EMAIL
  23 │               valueFrom:
  24 │                 secretKeyRef:
  25 └                   name: pgadmin-secret
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin-deploy.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: pgadmin
  18 │           image: dpage/pgadmin4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: PGADMIN_DEFAULT_EMAIL
  23 │               valueFrom:
  24 │                 secretKeyRef:
  25 └                   name: pgadmin-secret
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin-deploy.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: pgadmin
  18 │           image: dpage/pgadmin4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: PGADMIN_DEFAULT_EMAIL
  23 │               valueFrom:
  24 │                 secretKeyRef:
  25 └                   name: pgadmin-secret
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin-deploy.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: pgadmin
  18 │           image: dpage/pgadmin4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: PGADMIN_DEFAULT_EMAIL
  23 │               valueFrom:
  24 │                 secretKeyRef:
  25 └                   name: pgadmin-secret
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin-deploy.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: pgadmin
  18 │           image: dpage/pgadmin4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: PGADMIN_DEFAULT_EMAIL
  23 │               valueFrom:
  24 │                 secretKeyRef:
  25 └                   name: pgadmin-secret
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin" of deployment "pgadmin" in "postgres-dev" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin-deploy.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: pgadmin
  18 │           image: dpage/pgadmin4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: PGADMIN_DEFAULT_EMAIL
  23 │               valueFrom:
  24 │                 secretKeyRef:
  25 └                   name: pgadmin-secret
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin-deploy.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: pgadmin
  18 │           image: dpage/pgadmin4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: PGADMIN_DEFAULT_EMAIL
  23 │               valueFrom:
  24 │                 secretKeyRef:
  25 └                   name: pgadmin-secret
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pgadmin in postgres-dev namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin in postgres-dev namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deploy.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: pgadmin
  18 │           image: dpage/pgadmin4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: PGADMIN_DEFAULT_EMAIL
  23 │               valueFrom:
  24 │                 secretKeyRef:
  25 └                   name: pgadmin-secret
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgadmin in postgres-dev namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deploy.yaml:16-31
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: pgadmin
  18 │           image: dpage/pgadmin4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: PGADMIN_DEFAULT_EMAIL
  23 │               valueFrom:
  24 └                 secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin in deployment pgadmin (namespace: postgres-dev) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin-deploy.yaml:17-31
────────────────────────────────────────
  17 ┌         - name: pgadmin
  18 │           image: dpage/pgadmin4
  19 │           ports:
  20 │             - containerPort: 80
  21 │           env:
  22 │             - name: PGADMIN_DEFAULT_EMAIL
  23 │               valueFrom:
  24 │                 secretKeyRef:
  25 └                   name: pgadmin-secret
  ..   
────────────────────────────────────────



pgadmin-deployment.yaml (kubernetes)
====================================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin4' of Deployment 'pgadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin-deployment.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin4' of Deployment 'pgadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin-deployment.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin4' of 'deployment' 'pgadmin' in 'common-utils' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin-deployment.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin4' of Deployment 'pgadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin-deployment.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin4' of Deployment 'pgadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin-deployment.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin4' of Deployment 'pgadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin-deployment.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin4' of Deployment 'pgadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin-deployment.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin4' of Deployment 'pgadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin-deployment.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin4' of Deployment 'pgadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin-deployment.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin4' of Deployment 'pgadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin-deployment.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin4' of Deployment 'pgadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin-deployment.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin4' of Deployment 'pgadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin-deployment.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'pgadmin4' of Deployment 'pgadmin' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 pgadmin-deployment.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin-deployment.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin4" of deployment "pgadmin" in "common-utils" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin-deployment.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin-deployment.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pgadmin in common-utils namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin in common-utils namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgadmin in common-utils namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment.yaml:30-50
────────────────────────────────────────
  30 ┌       containers:
  31 │         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin4 in deployment pgadmin (namespace: common-utils) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin-deployment.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────



pgadmin-deployment1.yaml (kubernetes)
=====================================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin4' of Deployment 'pgadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin-deployment1.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin4' of Deployment 'pgadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin-deployment1.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin4' of 'deployment' 'pgadmin' in 'common-utils' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin-deployment1.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin4' of Deployment 'pgadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin-deployment1.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin4' of Deployment 'pgadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin-deployment1.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin4' of Deployment 'pgadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin-deployment1.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin4' of Deployment 'pgadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin-deployment1.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin4' of Deployment 'pgadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin-deployment1.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin4' of Deployment 'pgadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin-deployment1.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin4' of Deployment 'pgadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin-deployment1.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin4' of Deployment 'pgadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin-deployment1.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin4' of Deployment 'pgadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin-deployment1.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'pgadmin4' of Deployment 'pgadmin' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 pgadmin-deployment1.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin-deployment1.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin4" of deployment "pgadmin" in "common-utils" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin-deployment1.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin-deployment1.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pgadmin in common-utils namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin in common-utils namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment1.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgadmin in common-utils namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment1.yaml:30-50
────────────────────────────────────────
  30 ┌       containers:
  31 │         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin4 in deployment pgadmin (namespace: common-utils) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin-deployment1.yaml:31-45
────────────────────────────────────────
  31 ┌         - env:
  32 │             - name: PGADMIN_DEFAULT_EMAIL
  33 │               value: admin@admin.com
  34 │             - name: PGADMIN_DEFAULT_PASSWORD
  35 │               value: S3cret
  36 │           image: dpage/pgadmin4
  37 │           name: pgadmin4
  38 │           ports:
  39 └             - containerPort: 80
  ..   
────────────────────────────────────────



pgadmin-deployment10.yaml (kubernetes)
======================================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin-deployment10.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: "admin@admin.com"
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin-deployment10.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: "admin@admin.com"
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin' of 'deployment' 'pgadmin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin-deployment10.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: "admin@admin.com"
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin-deployment10.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: "admin@admin.com"
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin-deployment10.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: "admin@admin.com"
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin-deployment10.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: "admin@admin.com"
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin-deployment10.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: "admin@admin.com"
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin-deployment10.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: "admin@admin.com"
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin-deployment10.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: "admin@admin.com"
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin-deployment10.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: "admin@admin.com"
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin-deployment10.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: "admin@admin.com"
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin-deployment10.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: "admin@admin.com"
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin-deployment10.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: "admin@admin.com"
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin" of deployment "pgadmin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin-deployment10.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: "admin@admin.com"
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin-deployment10.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: "admin@admin.com"
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pgadmin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgadmin-deployment10.yaml:4
────────────────────────────────────────
   4 [   name: pgadmin
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pgadmin in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment10.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: "admin@admin.com"
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgadmin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment10.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: "admin@admin.com"
  23 └         - name: PGADMIN_DEFAULT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin in deployment pgadmin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin-deployment10.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: "admin@admin.com"
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────



pgadmin-deployment11.yaml (kubernetes)
======================================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin-deployment11.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin-deployment11.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin' of 'deployment' 'pgadmin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin-deployment11.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin-deployment11.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin-deployment11.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin-deployment11.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin-deployment11.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin-deployment11.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin-deployment11.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin-deployment11.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin-deployment11.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin-deployment11.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin-deployment11.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin" of deployment "pgadmin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin-deployment11.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin-deployment11.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pgadmin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgadmin-deployment11.yaml:4
────────────────────────────────────────
   4 [   name: pgadmin
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pgadmin in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment11.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgadmin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment11.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 └         - name: PGADMIN_DEFAULT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin in deployment pgadmin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin-deployment11.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────



pgadmin-deployment13.yaml (kubernetes)
======================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin-deployment13.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nest-kubernetes-app-config
  24 │         - secretRef:
  25 └             name: nest-kubernetes-app-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin-deployment13.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nest-kubernetes-app-config
  24 │         - secretRef:
  25 └             name: nest-kubernetes-app-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin' of 'deployment' 'pgadmin' in 'nest-kubernetes-app' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin-deployment13.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nest-kubernetes-app-config
  24 │         - secretRef:
  25 └             name: nest-kubernetes-app-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin-deployment13.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nest-kubernetes-app-config
  24 │         - secretRef:
  25 └             name: nest-kubernetes-app-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin-deployment13.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nest-kubernetes-app-config
  24 │         - secretRef:
  25 └             name: nest-kubernetes-app-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin-deployment13.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nest-kubernetes-app-config
  24 │         - secretRef:
  25 └             name: nest-kubernetes-app-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin-deployment13.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nest-kubernetes-app-config
  24 │         - secretRef:
  25 └             name: nest-kubernetes-app-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin-deployment13.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nest-kubernetes-app-config
  24 │         - secretRef:
  25 └             name: nest-kubernetes-app-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin-deployment13.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nest-kubernetes-app-config
  24 │         - secretRef:
  25 └             name: nest-kubernetes-app-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin-deployment13.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nest-kubernetes-app-config
  24 │         - secretRef:
  25 └             name: nest-kubernetes-app-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin-deployment13.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nest-kubernetes-app-config
  24 │         - secretRef:
  25 └             name: nest-kubernetes-app-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin-deployment13.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nest-kubernetes-app-config
  24 │         - secretRef:
  25 └             name: nest-kubernetes-app-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin-deployment13.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nest-kubernetes-app-config
  24 │         - secretRef:
  25 └             name: nest-kubernetes-app-secret
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin" of deployment "pgadmin" in "nest-kubernetes-app" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin-deployment13.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nest-kubernetes-app-config
  24 │         - secretRef:
  25 └             name: nest-kubernetes-app-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin-deployment13.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nest-kubernetes-app-config
  24 │         - secretRef:
  25 └             name: nest-kubernetes-app-secret
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pgadmin in nest-kubernetes-app namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin in nest-kubernetes-app namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment13.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nest-kubernetes-app-config
  24 │         - secretRef:
  25 └             name: nest-kubernetes-app-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgadmin in nest-kubernetes-app namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment13.yaml:16-25
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nest-kubernetes-app-config
  24 │         - secretRef:
  25 └             name: nest-kubernetes-app-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin in deployment pgadmin (namespace: nest-kubernetes-app) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin-deployment13.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nest-kubernetes-app-config
  24 │         - secretRef:
  25 └             name: nest-kubernetes-app-secret
────────────────────────────────────────



pgadmin-deployment14.yaml (kubernetes)
======================================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 10, MEDIUM: 7, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin-deployment14.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PGADMIN_DEFAULT_EMAIL
  23 │           value: "admin@example.com"
  24 │         - name: PGADMIN_DEFAULT_PASSWORD
  25 └           value: "admin"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin-deployment14.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PGADMIN_DEFAULT_EMAIL
  23 │           value: "admin@example.com"
  24 │         - name: PGADMIN_DEFAULT_PASSWORD
  25 └           value: "admin"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin' of 'deployment' 'pgadmin-deployment' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin-deployment14.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PGADMIN_DEFAULT_EMAIL
  23 │           value: "admin@example.com"
  24 │         - name: PGADMIN_DEFAULT_PASSWORD
  25 └           value: "admin"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin-deployment14.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PGADMIN_DEFAULT_EMAIL
  23 │           value: "admin@example.com"
  24 │         - name: PGADMIN_DEFAULT_PASSWORD
  25 └           value: "admin"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin-deployment14.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PGADMIN_DEFAULT_EMAIL
  23 │           value: "admin@example.com"
  24 │         - name: PGADMIN_DEFAULT_PASSWORD
  25 └           value: "admin"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin-deployment14.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PGADMIN_DEFAULT_EMAIL
  23 │           value: "admin@example.com"
  24 │         - name: PGADMIN_DEFAULT_PASSWORD
  25 └           value: "admin"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin-deployment14.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PGADMIN_DEFAULT_EMAIL
  23 │           value: "admin@example.com"
  24 │         - name: PGADMIN_DEFAULT_PASSWORD
  25 └           value: "admin"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin-deployment14.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PGADMIN_DEFAULT_EMAIL
  23 │           value: "admin@example.com"
  24 │         - name: PGADMIN_DEFAULT_PASSWORD
  25 └           value: "admin"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin-deployment14.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PGADMIN_DEFAULT_EMAIL
  23 │           value: "admin@example.com"
  24 │         - name: PGADMIN_DEFAULT_PASSWORD
  25 └           value: "admin"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin-deployment14.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PGADMIN_DEFAULT_EMAIL
  23 │           value: "admin@example.com"
  24 │         - name: PGADMIN_DEFAULT_PASSWORD
  25 └           value: "admin"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin-deployment14.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PGADMIN_DEFAULT_EMAIL
  23 │           value: "admin@example.com"
  24 │         - name: PGADMIN_DEFAULT_PASSWORD
  25 └           value: "admin"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin-deployment14.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PGADMIN_DEFAULT_EMAIL
  23 │           value: "admin@example.com"
  24 │         - name: PGADMIN_DEFAULT_PASSWORD
  25 └           value: "admin"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin-deployment14.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PGADMIN_DEFAULT_EMAIL
  23 │           value: "admin@example.com"
  24 │         - name: PGADMIN_DEFAULT_PASSWORD
  25 └           value: "admin"
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'pgadmin-deployment' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 pgadmin-deployment14.yaml:7-25
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: pgadmin
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: pgadmin
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin" of deployment "pgadmin-deployment" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin-deployment14.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PGADMIN_DEFAULT_EMAIL
  23 │           value: "admin@example.com"
  24 │         - name: PGADMIN_DEFAULT_PASSWORD
  25 └           value: "admin"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin-deployment14.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PGADMIN_DEFAULT_EMAIL
  23 │           value: "admin@example.com"
  24 │         - name: PGADMIN_DEFAULT_PASSWORD
  25 └           value: "admin"
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pgadmin-deployment in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin-deployment in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment14.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PGADMIN_DEFAULT_EMAIL
  23 │           value: "admin@example.com"
  24 │         - name: PGADMIN_DEFAULT_PASSWORD
  25 └           value: "admin"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgadmin-deployment in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment14.yaml:16-25
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PGADMIN_DEFAULT_EMAIL
  23 │           value: "admin@example.com"
  24 │         - name: PGADMIN_DEFAULT_PASSWORD
  25 └           value: "admin"
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin in deployment pgadmin-deployment (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin-deployment14.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4:latest
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PGADMIN_DEFAULT_EMAIL
  23 │           value: "admin@example.com"
  24 │         - name: PGADMIN_DEFAULT_PASSWORD
  25 └           value: "admin"
────────────────────────────────────────



pgadmin-deployment15.yaml (kubernetes)
======================================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin-deployment15.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │           - name: PGADMIN_DEFAULT_EMAIL
  20 │             value: a@email.com
  21 │           - name: PGADMIN_DEFAULT_PASSWORD
  22 │             value: pass123
  23 │         ports:
  24 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin-deployment15.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │           - name: PGADMIN_DEFAULT_EMAIL
  20 │             value: a@email.com
  21 │           - name: PGADMIN_DEFAULT_PASSWORD
  22 │             value: pass123
  23 │         ports:
  24 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin' of 'deployment' 'pgadmin-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin-deployment15.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │           - name: PGADMIN_DEFAULT_EMAIL
  20 │             value: a@email.com
  21 │           - name: PGADMIN_DEFAULT_PASSWORD
  22 │             value: pass123
  23 │         ports:
  24 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin-deployment15.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │           - name: PGADMIN_DEFAULT_EMAIL
  20 │             value: a@email.com
  21 │           - name: PGADMIN_DEFAULT_PASSWORD
  22 │             value: pass123
  23 │         ports:
  24 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin-deployment15.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │           - name: PGADMIN_DEFAULT_EMAIL
  20 │             value: a@email.com
  21 │           - name: PGADMIN_DEFAULT_PASSWORD
  22 │             value: pass123
  23 │         ports:
  24 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin-deployment15.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │           - name: PGADMIN_DEFAULT_EMAIL
  20 │             value: a@email.com
  21 │           - name: PGADMIN_DEFAULT_PASSWORD
  22 │             value: pass123
  23 │         ports:
  24 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin-deployment15.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │           - name: PGADMIN_DEFAULT_EMAIL
  20 │             value: a@email.com
  21 │           - name: PGADMIN_DEFAULT_PASSWORD
  22 │             value: pass123
  23 │         ports:
  24 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin-deployment15.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │           - name: PGADMIN_DEFAULT_EMAIL
  20 │             value: a@email.com
  21 │           - name: PGADMIN_DEFAULT_PASSWORD
  22 │             value: pass123
  23 │         ports:
  24 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin-deployment15.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │           - name: PGADMIN_DEFAULT_EMAIL
  20 │             value: a@email.com
  21 │           - name: PGADMIN_DEFAULT_PASSWORD
  22 │             value: pass123
  23 │         ports:
  24 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin-deployment15.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │           - name: PGADMIN_DEFAULT_EMAIL
  20 │             value: a@email.com
  21 │           - name: PGADMIN_DEFAULT_PASSWORD
  22 │             value: pass123
  23 │         ports:
  24 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin-deployment15.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │           - name: PGADMIN_DEFAULT_EMAIL
  20 │             value: a@email.com
  21 │           - name: PGADMIN_DEFAULT_PASSWORD
  22 │             value: pass123
  23 │         ports:
  24 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin-deployment15.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │           - name: PGADMIN_DEFAULT_EMAIL
  20 │             value: a@email.com
  21 │           - name: PGADMIN_DEFAULT_PASSWORD
  22 │             value: pass123
  23 │         ports:
  24 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin-deployment15.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │           - name: PGADMIN_DEFAULT_EMAIL
  20 │             value: a@email.com
  21 │           - name: PGADMIN_DEFAULT_PASSWORD
  22 │             value: pass123
  23 │         ports:
  24 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin" of deployment "pgadmin-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin-deployment15.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │           - name: PGADMIN_DEFAULT_EMAIL
  20 │             value: a@email.com
  21 │           - name: PGADMIN_DEFAULT_PASSWORD
  22 │             value: pass123
  23 │         ports:
  24 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin-deployment15.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │           - name: PGADMIN_DEFAULT_EMAIL
  20 │             value: a@email.com
  21 │           - name: PGADMIN_DEFAULT_PASSWORD
  22 │             value: pass123
  23 │         ports:
  24 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pgadmin-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgadmin-deployment15.yaml:4
────────────────────────────────────────
   4 [   name: pgadmin-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pgadmin-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment15.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │           - name: PGADMIN_DEFAULT_EMAIL
  20 │             value: a@email.com
  21 │           - name: PGADMIN_DEFAULT_PASSWORD
  22 │             value: pass123
  23 │         ports:
  24 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgadmin-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment15.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │           - name: PGADMIN_DEFAULT_EMAIL
  20 │             value: a@email.com
  21 │           - name: PGADMIN_DEFAULT_PASSWORD
  22 │             value: pass123
  23 │         ports:
  24 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin in deployment pgadmin-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin-deployment15.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │           - name: PGADMIN_DEFAULT_EMAIL
  20 │             value: a@email.com
  21 │           - name: PGADMIN_DEFAULT_PASSWORD
  22 │             value: pass123
  23 │         ports:
  24 └           - containerPort: 80
────────────────────────────────────────



pgadmin-deployment16.yaml (kubernetes)
======================================
Tests: 125 (SUCCESSES: 90, FAILURES: 35)
Failures: 35 (UNKNOWN: 0, LOW: 21, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'create-pgadmin-folders' of Deployment 'pgadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin-deployment16.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: create-pgadmin-folders
  19 │         image: busybox
  20 │         command: ['sh', '-c', 'mkdir -p /var/lib/pgadmin/sessions /var/lib/pgadmin/storage && chown -R 5050:5050 /var/lib/pgadmin']
  21 │         volumeMounts:
  22 │         - name: pgadmin-storage
  23 └           mountPath: "/var/lib/pgadmin"    
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin-deployment16.yaml:25-34
────────────────────────────────────────
  25 ┌         - name: pgadmin
  26 │           image: dpage/pgadmin4          
  27 │           env:
  28 │             - name: PGADMIN_DEFAULT_EMAIL
  29 │               value: a@email.com
  30 │             - name: PGADMIN_DEFAULT_PASSWORD
  31 │               value: pass123
  32 │           volumeMounts:
  33 │             - mountPath: /var/lib/pgadmin
  34 └               name: pgadmin-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'create-pgadmin-folders' of Deployment 'pgadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin-deployment16.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: create-pgadmin-folders
  19 │         image: busybox
  20 │         command: ['sh', '-c', 'mkdir -p /var/lib/pgadmin/sessions /var/lib/pgadmin/storage && chown -R 5050:5050 /var/lib/pgadmin']
  21 │         volumeMounts:
  22 │         - name: pgadmin-storage
  23 └           mountPath: "/var/lib/pgadmin"    
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin-deployment16.yaml:25-34
────────────────────────────────────────
  25 ┌         - name: pgadmin
  26 │           image: dpage/pgadmin4          
  27 │           env:
  28 │             - name: PGADMIN_DEFAULT_EMAIL
  29 │               value: a@email.com
  30 │             - name: PGADMIN_DEFAULT_PASSWORD
  31 │               value: pass123
  32 │           volumeMounts:
  33 │             - mountPath: /var/lib/pgadmin
  34 └               name: pgadmin-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create-pgadmin-folders' of 'deployment' 'pgadmin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin-deployment16.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: create-pgadmin-folders
  19 │         image: busybox
  20 │         command: ['sh', '-c', 'mkdir -p /var/lib/pgadmin/sessions /var/lib/pgadmin/storage && chown -R 5050:5050 /var/lib/pgadmin']
  21 │         volumeMounts:
  22 │         - name: pgadmin-storage
  23 └           mountPath: "/var/lib/pgadmin"    
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin' of 'deployment' 'pgadmin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin-deployment16.yaml:25-34
────────────────────────────────────────
  25 ┌         - name: pgadmin
  26 │           image: dpage/pgadmin4          
  27 │           env:
  28 │             - name: PGADMIN_DEFAULT_EMAIL
  29 │               value: a@email.com
  30 │             - name: PGADMIN_DEFAULT_PASSWORD
  31 │               value: pass123
  32 │           volumeMounts:
  33 │             - mountPath: /var/lib/pgadmin
  34 └               name: pgadmin-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create-pgadmin-folders' of Deployment 'pgadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin-deployment16.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: create-pgadmin-folders
  19 │         image: busybox
  20 │         command: ['sh', '-c', 'mkdir -p /var/lib/pgadmin/sessions /var/lib/pgadmin/storage && chown -R 5050:5050 /var/lib/pgadmin']
  21 │         volumeMounts:
  22 │         - name: pgadmin-storage
  23 └           mountPath: "/var/lib/pgadmin"    
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin-deployment16.yaml:25-34
────────────────────────────────────────
  25 ┌         - name: pgadmin
  26 │           image: dpage/pgadmin4          
  27 │           env:
  28 │             - name: PGADMIN_DEFAULT_EMAIL
  29 │               value: a@email.com
  30 │             - name: PGADMIN_DEFAULT_PASSWORD
  31 │               value: pass123
  32 │           volumeMounts:
  33 │             - mountPath: /var/lib/pgadmin
  34 └               name: pgadmin-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'create-pgadmin-folders' of Deployment 'pgadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin-deployment16.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: create-pgadmin-folders
  19 │         image: busybox
  20 │         command: ['sh', '-c', 'mkdir -p /var/lib/pgadmin/sessions /var/lib/pgadmin/storage && chown -R 5050:5050 /var/lib/pgadmin']
  21 │         volumeMounts:
  22 │         - name: pgadmin-storage
  23 └           mountPath: "/var/lib/pgadmin"    
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin-deployment16.yaml:25-34
────────────────────────────────────────
  25 ┌         - name: pgadmin
  26 │           image: dpage/pgadmin4          
  27 │           env:
  28 │             - name: PGADMIN_DEFAULT_EMAIL
  29 │               value: a@email.com
  30 │             - name: PGADMIN_DEFAULT_PASSWORD
  31 │               value: pass123
  32 │           volumeMounts:
  33 │             - mountPath: /var/lib/pgadmin
  34 └               name: pgadmin-storage
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'create-pgadmin-folders' of Deployment 'pgadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin-deployment16.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: create-pgadmin-folders
  19 │         image: busybox
  20 │         command: ['sh', '-c', 'mkdir -p /var/lib/pgadmin/sessions /var/lib/pgadmin/storage && chown -R 5050:5050 /var/lib/pgadmin']
  21 │         volumeMounts:
  22 │         - name: pgadmin-storage
  23 └           mountPath: "/var/lib/pgadmin"    
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin-deployment16.yaml:25-34
────────────────────────────────────────
  25 ┌         - name: pgadmin
  26 │           image: dpage/pgadmin4          
  27 │           env:
  28 │             - name: PGADMIN_DEFAULT_EMAIL
  29 │               value: a@email.com
  30 │             - name: PGADMIN_DEFAULT_PASSWORD
  31 │               value: pass123
  32 │           volumeMounts:
  33 │             - mountPath: /var/lib/pgadmin
  34 └               name: pgadmin-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create-pgadmin-folders' of Deployment 'pgadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin-deployment16.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: create-pgadmin-folders
  19 │         image: busybox
  20 │         command: ['sh', '-c', 'mkdir -p /var/lib/pgadmin/sessions /var/lib/pgadmin/storage && chown -R 5050:5050 /var/lib/pgadmin']
  21 │         volumeMounts:
  22 │         - name: pgadmin-storage
  23 └           mountPath: "/var/lib/pgadmin"    
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin-deployment16.yaml:25-34
────────────────────────────────────────
  25 ┌         - name: pgadmin
  26 │           image: dpage/pgadmin4          
  27 │           env:
  28 │             - name: PGADMIN_DEFAULT_EMAIL
  29 │               value: a@email.com
  30 │             - name: PGADMIN_DEFAULT_PASSWORD
  31 │               value: pass123
  32 │           volumeMounts:
  33 │             - mountPath: /var/lib/pgadmin
  34 └               name: pgadmin-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create-pgadmin-folders' of Deployment 'pgadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin-deployment16.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: create-pgadmin-folders
  19 │         image: busybox
  20 │         command: ['sh', '-c', 'mkdir -p /var/lib/pgadmin/sessions /var/lib/pgadmin/storage && chown -R 5050:5050 /var/lib/pgadmin']
  21 │         volumeMounts:
  22 │         - name: pgadmin-storage
  23 └           mountPath: "/var/lib/pgadmin"    
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin-deployment16.yaml:25-34
────────────────────────────────────────
  25 ┌         - name: pgadmin
  26 │           image: dpage/pgadmin4          
  27 │           env:
  28 │             - name: PGADMIN_DEFAULT_EMAIL
  29 │               value: a@email.com
  30 │             - name: PGADMIN_DEFAULT_PASSWORD
  31 │               value: pass123
  32 │           volumeMounts:
  33 │             - mountPath: /var/lib/pgadmin
  34 └               name: pgadmin-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create-pgadmin-folders' of Deployment 'pgadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin-deployment16.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: create-pgadmin-folders
  19 │         image: busybox
  20 │         command: ['sh', '-c', 'mkdir -p /var/lib/pgadmin/sessions /var/lib/pgadmin/storage && chown -R 5050:5050 /var/lib/pgadmin']
  21 │         volumeMounts:
  22 │         - name: pgadmin-storage
  23 └           mountPath: "/var/lib/pgadmin"    
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin-deployment16.yaml:25-34
────────────────────────────────────────
  25 ┌         - name: pgadmin
  26 │           image: dpage/pgadmin4          
  27 │           env:
  28 │             - name: PGADMIN_DEFAULT_EMAIL
  29 │               value: a@email.com
  30 │             - name: PGADMIN_DEFAULT_PASSWORD
  31 │               value: pass123
  32 │           volumeMounts:
  33 │             - mountPath: /var/lib/pgadmin
  34 └               name: pgadmin-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create-pgadmin-folders' of Deployment 'pgadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin-deployment16.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: create-pgadmin-folders
  19 │         image: busybox
  20 │         command: ['sh', '-c', 'mkdir -p /var/lib/pgadmin/sessions /var/lib/pgadmin/storage && chown -R 5050:5050 /var/lib/pgadmin']
  21 │         volumeMounts:
  22 │         - name: pgadmin-storage
  23 └           mountPath: "/var/lib/pgadmin"    
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin-deployment16.yaml:25-34
────────────────────────────────────────
  25 ┌         - name: pgadmin
  26 │           image: dpage/pgadmin4          
  27 │           env:
  28 │             - name: PGADMIN_DEFAULT_EMAIL
  29 │               value: a@email.com
  30 │             - name: PGADMIN_DEFAULT_PASSWORD
  31 │               value: pass123
  32 │           volumeMounts:
  33 │             - mountPath: /var/lib/pgadmin
  34 └               name: pgadmin-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create-pgadmin-folders' of Deployment 'pgadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin-deployment16.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: create-pgadmin-folders
  19 │         image: busybox
  20 │         command: ['sh', '-c', 'mkdir -p /var/lib/pgadmin/sessions /var/lib/pgadmin/storage && chown -R 5050:5050 /var/lib/pgadmin']
  21 │         volumeMounts:
  22 │         - name: pgadmin-storage
  23 └           mountPath: "/var/lib/pgadmin"    
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin-deployment16.yaml:25-34
────────────────────────────────────────
  25 ┌         - name: pgadmin
  26 │           image: dpage/pgadmin4          
  27 │           env:
  28 │             - name: PGADMIN_DEFAULT_EMAIL
  29 │               value: a@email.com
  30 │             - name: PGADMIN_DEFAULT_PASSWORD
  31 │               value: pass123
  32 │           volumeMounts:
  33 │             - mountPath: /var/lib/pgadmin
  34 └               name: pgadmin-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create-pgadmin-folders' of Deployment 'pgadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin-deployment16.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: create-pgadmin-folders
  19 │         image: busybox
  20 │         command: ['sh', '-c', 'mkdir -p /var/lib/pgadmin/sessions /var/lib/pgadmin/storage && chown -R 5050:5050 /var/lib/pgadmin']
  21 │         volumeMounts:
  22 │         - name: pgadmin-storage
  23 └           mountPath: "/var/lib/pgadmin"    
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin-deployment16.yaml:25-34
────────────────────────────────────────
  25 ┌         - name: pgadmin
  26 │           image: dpage/pgadmin4          
  27 │           env:
  28 │             - name: PGADMIN_DEFAULT_EMAIL
  29 │               value: a@email.com
  30 │             - name: PGADMIN_DEFAULT_PASSWORD
  31 │               value: pass123
  32 │           volumeMounts:
  33 │             - mountPath: /var/lib/pgadmin
  34 └               name: pgadmin-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin-deployment16.yaml:25-34
────────────────────────────────────────
  25 ┌         - name: pgadmin
  26 │           image: dpage/pgadmin4          
  27 │           env:
  28 │             - name: PGADMIN_DEFAULT_EMAIL
  29 │               value: a@email.com
  30 │             - name: PGADMIN_DEFAULT_PASSWORD
  31 │               value: pass123
  32 │           volumeMounts:
  33 │             - mountPath: /var/lib/pgadmin
  34 └               name: pgadmin-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin-deployment16.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: create-pgadmin-folders
  19 │         image: busybox
  20 │         command: ['sh', '-c', 'mkdir -p /var/lib/pgadmin/sessions /var/lib/pgadmin/storage && chown -R 5050:5050 /var/lib/pgadmin']
  21 │         volumeMounts:
  22 │         - name: pgadmin-storage
  23 └           mountPath: "/var/lib/pgadmin"    
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create-pgadmin-folders" of deployment "pgadmin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin-deployment16.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: create-pgadmin-folders
  19 │         image: busybox
  20 │         command: ['sh', '-c', 'mkdir -p /var/lib/pgadmin/sessions /var/lib/pgadmin/storage && chown -R 5050:5050 /var/lib/pgadmin']
  21 │         volumeMounts:
  22 │         - name: pgadmin-storage
  23 └           mountPath: "/var/lib/pgadmin"    
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin" of deployment "pgadmin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin-deployment16.yaml:25-34
────────────────────────────────────────
  25 ┌         - name: pgadmin
  26 │           image: dpage/pgadmin4          
  27 │           env:
  28 │             - name: PGADMIN_DEFAULT_EMAIL
  29 │               value: a@email.com
  30 │             - name: PGADMIN_DEFAULT_PASSWORD
  31 │               value: pass123
  32 │           volumeMounts:
  33 │             - mountPath: /var/lib/pgadmin
  34 └               name: pgadmin-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin-deployment16.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: create-pgadmin-folders
  19 │         image: busybox
  20 │         command: ['sh', '-c', 'mkdir -p /var/lib/pgadmin/sessions /var/lib/pgadmin/storage && chown -R 5050:5050 /var/lib/pgadmin']
  21 │         volumeMounts:
  22 │         - name: pgadmin-storage
  23 └           mountPath: "/var/lib/pgadmin"    
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin-deployment16.yaml:25-34
────────────────────────────────────────
  25 ┌         - name: pgadmin
  26 │           image: dpage/pgadmin4          
  27 │           env:
  28 │             - name: PGADMIN_DEFAULT_EMAIL
  29 │               value: a@email.com
  30 │             - name: PGADMIN_DEFAULT_PASSWORD
  31 │               value: pass123
  32 │           volumeMounts:
  33 │             - mountPath: /var/lib/pgadmin
  34 └               name: pgadmin-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pgadmin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgadmin-deployment16.yaml:4
────────────────────────────────────────
   4 [   name: pgadmin  # Sets Deployment name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment16.yaml:25-34
────────────────────────────────────────
  25 ┌         - name: pgadmin
  26 │           image: dpage/pgadmin4          
  27 │           env:
  28 │             - name: PGADMIN_DEFAULT_EMAIL
  29 │               value: a@email.com
  30 │             - name: PGADMIN_DEFAULT_PASSWORD
  31 │               value: pass123
  32 │           volumeMounts:
  33 │             - mountPath: /var/lib/pgadmin
  34 └               name: pgadmin-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment16.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: create-pgadmin-folders
  19 │         image: busybox
  20 │         command: ['sh', '-c', 'mkdir -p /var/lib/pgadmin/sessions /var/lib/pgadmin/storage && chown -R 5050:5050 /var/lib/pgadmin']
  21 │         volumeMounts:
  22 │         - name: pgadmin-storage
  23 └           mountPath: "/var/lib/pgadmin"    
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgadmin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment16.yaml:17-38
────────────────────────────────────────
  17 ┌       initContainers:
  18 │       - name: create-pgadmin-folders
  19 │         image: busybox
  20 │         command: ['sh', '-c', 'mkdir -p /var/lib/pgadmin/sessions /var/lib/pgadmin/storage && chown -R 5050:5050 /var/lib/pgadmin']
  21 │         volumeMounts:
  22 │         - name: pgadmin-storage
  23 │           mountPath: "/var/lib/pgadmin"    
  24 │       containers:
  25 └         - name: pgadmin
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin in deployment pgadmin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin-deployment16.yaml:25-34
────────────────────────────────────────
  25 ┌         - name: pgadmin
  26 │           image: dpage/pgadmin4          
  27 │           env:
  28 │             - name: PGADMIN_DEFAULT_EMAIL
  29 │               value: a@email.com
  30 │             - name: PGADMIN_DEFAULT_PASSWORD
  31 │               value: pass123
  32 │           volumeMounts:
  33 │             - mountPath: /var/lib/pgadmin
  34 └               name: pgadmin-storage
────────────────────────────────────────



pgadmin-deployment2.yaml (kubernetes)
=====================================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin-container' of Deployment 'pgadmin-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin-deployment2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin-container
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           value: root
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin-container' of Deployment 'pgadmin-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin-deployment2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin-container
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           value: root
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin-container' of 'deployment' 'pgadmin-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin-deployment2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin-container
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           value: root
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin-container' of Deployment 'pgadmin-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin-deployment2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin-container
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           value: root
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin-container' of Deployment 'pgadmin-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin-deployment2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin-container
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           value: root
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin-container' of Deployment 'pgadmin-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin-deployment2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin-container
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           value: root
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin-container' of Deployment 'pgadmin-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin-deployment2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin-container
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           value: root
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin-container' of Deployment 'pgadmin-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin-deployment2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin-container
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           value: root
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin-container' of Deployment 'pgadmin-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin-deployment2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin-container
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           value: root
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin-container' of Deployment 'pgadmin-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin-deployment2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin-container
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           value: root
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin-container' of Deployment 'pgadmin-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin-deployment2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin-container
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           value: root
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin-container' of Deployment 'pgadmin-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin-deployment2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin-container
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           value: root
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin-deployment2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin-container
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           value: root
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin-container" of deployment "pgadmin-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin-deployment2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin-container
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           value: root
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin-deployment2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin-container
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           value: root
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pgadmin-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgadmin-deployment2.yaml:4
────────────────────────────────────────
   4 [   name: pgadmin-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pgadmin-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin-container
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           value: root
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgadmin-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment2.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: pgadmin-container
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           value: root
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin-container in deployment pgadmin-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin-deployment2.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: pgadmin-container
  17 │         image: dpage/pgadmin4
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PGADMIN_DEFAULT_EMAIL
  22 │           value: admin@admin.com
  23 │         - name: PGADMIN_DEFAULT_PASSWORD
  24 └           value: root
────────────────────────────────────────



pgadmin-deployment3.yaml (kubernetes)
=====================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin-deployment3.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: pgadmin
  22 │         image: dpage/pgadmin4:6.9
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: PGADMIN_DEFAULT_EMAIL
  26 │           value: user@domain.com
  27 │         - name: PGADMIN_DEFAULT_PASSWORD
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin-deployment3.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: pgadmin
  22 │         image: dpage/pgadmin4:6.9
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: PGADMIN_DEFAULT_EMAIL
  26 │           value: user@domain.com
  27 │         - name: PGADMIN_DEFAULT_PASSWORD
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin' of 'statefulset' 'pgadmin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin-deployment3.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: pgadmin
  22 │         image: dpage/pgadmin4:6.9
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: PGADMIN_DEFAULT_EMAIL
  26 │           value: user@domain.com
  27 │         - name: PGADMIN_DEFAULT_PASSWORD
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin-deployment3.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: pgadmin
  22 │         image: dpage/pgadmin4:6.9
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: PGADMIN_DEFAULT_EMAIL
  26 │           value: user@domain.com
  27 │         - name: PGADMIN_DEFAULT_PASSWORD
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin-deployment3.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: pgadmin
  22 │         image: dpage/pgadmin4:6.9
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: PGADMIN_DEFAULT_EMAIL
  26 │           value: user@domain.com
  27 │         - name: PGADMIN_DEFAULT_PASSWORD
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin-deployment3.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: pgadmin
  22 │         image: dpage/pgadmin4:6.9
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: PGADMIN_DEFAULT_EMAIL
  26 │           value: user@domain.com
  27 │         - name: PGADMIN_DEFAULT_PASSWORD
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin-deployment3.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: pgadmin
  22 │         image: dpage/pgadmin4:6.9
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: PGADMIN_DEFAULT_EMAIL
  26 │           value: user@domain.com
  27 │         - name: PGADMIN_DEFAULT_PASSWORD
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin-deployment3.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: pgadmin
  22 │         image: dpage/pgadmin4:6.9
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: PGADMIN_DEFAULT_EMAIL
  26 │           value: user@domain.com
  27 │         - name: PGADMIN_DEFAULT_PASSWORD
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin-deployment3.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: pgadmin
  22 │         image: dpage/pgadmin4:6.9
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: PGADMIN_DEFAULT_EMAIL
  26 │           value: user@domain.com
  27 │         - name: PGADMIN_DEFAULT_PASSWORD
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin-deployment3.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: pgadmin
  22 │         image: dpage/pgadmin4:6.9
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: PGADMIN_DEFAULT_EMAIL
  26 │           value: user@domain.com
  27 │         - name: PGADMIN_DEFAULT_PASSWORD
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin-deployment3.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: pgadmin
  22 │         image: dpage/pgadmin4:6.9
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: PGADMIN_DEFAULT_EMAIL
  26 │           value: user@domain.com
  27 │         - name: PGADMIN_DEFAULT_PASSWORD
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin-deployment3.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: pgadmin
  22 │         image: dpage/pgadmin4:6.9
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: PGADMIN_DEFAULT_EMAIL
  26 │           value: user@domain.com
  27 │         - name: PGADMIN_DEFAULT_PASSWORD
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin" of statefulset "pgadmin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin-deployment3.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: pgadmin
  22 │         image: dpage/pgadmin4:6.9
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: PGADMIN_DEFAULT_EMAIL
  26 │           value: user@domain.com
  27 │         - name: PGADMIN_DEFAULT_PASSWORD
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin-deployment3.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: pgadmin
  22 │         image: dpage/pgadmin4:6.9
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: PGADMIN_DEFAULT_EMAIL
  26 │           value: user@domain.com
  27 │         - name: PGADMIN_DEFAULT_PASSWORD
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset pgadmin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgadmin-deployment3.yaml:4
────────────────────────────────────────
   4 [   name: pgadmin
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): statefulset pgadmin in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment3.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: pgadmin
  22 │         image: dpage/pgadmin4:6.9
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: PGADMIN_DEFAULT_EMAIL
  26 │           value: user@domain.com
  27 │         - name: PGADMIN_DEFAULT_PASSWORD
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset pgadmin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment3.yaml:19-46
────────────────────────────────────────
  19 ┌       terminationGracePeriodSeconds: 10
  20 │       containers:
  21 │       - name: pgadmin
  22 │         image: dpage/pgadmin4:6.9
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: PGADMIN_DEFAULT_EMAIL
  26 │           value: user@domain.com
  27 └         - name: PGADMIN_DEFAULT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin in statefulset pgadmin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin-deployment3.yaml:21-42
────────────────────────────────────────
  21 ┌       - name: pgadmin
  22 │         image: dpage/pgadmin4:6.9
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: PGADMIN_DEFAULT_EMAIL
  26 │           value: user@domain.com
  27 │         - name: PGADMIN_DEFAULT_PASSWORD
  28 │           valueFrom:
  29 └             secretKeyRef:
  ..   
────────────────────────────────────────



pgadmin-deployment4.yaml (kubernetes)
=====================================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin-deployment4.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           value: test@test.com
  28 │         - name: PGADMIN_DEFAULT_PASSWORD
  29 │           value: test
  30 └         - name: PGADMIN_LISTEN_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin-deployment4.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           value: test@test.com
  28 │         - name: PGADMIN_DEFAULT_PASSWORD
  29 │           value: test
  30 └         - name: PGADMIN_LISTEN_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin' of 'statefulset' 'pgadmin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin-deployment4.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           value: test@test.com
  28 │         - name: PGADMIN_DEFAULT_PASSWORD
  29 │           value: test
  30 └         - name: PGADMIN_LISTEN_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin-deployment4.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           value: test@test.com
  28 │         - name: PGADMIN_DEFAULT_PASSWORD
  29 │           value: test
  30 └         - name: PGADMIN_LISTEN_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin-deployment4.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           value: test@test.com
  28 │         - name: PGADMIN_DEFAULT_PASSWORD
  29 │           value: test
  30 └         - name: PGADMIN_LISTEN_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin' of StatefulSet 'pgadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin-deployment4.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           value: test@test.com
  28 │         - name: PGADMIN_DEFAULT_PASSWORD
  29 │           value: test
  30 └         - name: PGADMIN_LISTEN_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin-deployment4.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           value: test@test.com
  28 │         - name: PGADMIN_DEFAULT_PASSWORD
  29 │           value: test
  30 └         - name: PGADMIN_LISTEN_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin-deployment4.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           value: test@test.com
  28 │         - name: PGADMIN_DEFAULT_PASSWORD
  29 │           value: test
  30 └         - name: PGADMIN_LISTEN_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin-deployment4.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           value: test@test.com
  28 │         - name: PGADMIN_DEFAULT_PASSWORD
  29 │           value: test
  30 └         - name: PGADMIN_LISTEN_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin-deployment4.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           value: test@test.com
  28 │         - name: PGADMIN_DEFAULT_PASSWORD
  29 │           value: test
  30 └         - name: PGADMIN_LISTEN_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin-deployment4.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           value: test@test.com
  28 │         - name: PGADMIN_DEFAULT_PASSWORD
  29 │           value: test
  30 └         - name: PGADMIN_LISTEN_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin-deployment4.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           value: test@test.com
  28 │         - name: PGADMIN_DEFAULT_PASSWORD
  29 │           value: test
  30 └         - name: PGADMIN_LISTEN_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin-deployment4.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           value: test@test.com
  28 │         - name: PGADMIN_DEFAULT_PASSWORD
  29 │           value: test
  30 └         - name: PGADMIN_LISTEN_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin" of statefulset "pgadmin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin-deployment4.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           value: test@test.com
  28 │         - name: PGADMIN_DEFAULT_PASSWORD
  29 │           value: test
  30 └         - name: PGADMIN_LISTEN_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin-deployment4.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           value: test@test.com
  28 │         - name: PGADMIN_DEFAULT_PASSWORD
  29 │           value: test
  30 └         - name: PGADMIN_LISTEN_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset pgadmin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgadmin-deployment4.yaml:4
────────────────────────────────────────
   4 [  name: pgadmin
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): statefulset pgadmin in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment4.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           value: test@test.com
  28 │         - name: PGADMIN_DEFAULT_PASSWORD
  29 │           value: test
  30 └         - name: PGADMIN_LISTEN_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset pgadmin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment4.yaml:19-44
────────────────────────────────────────
  19 ┌      serviceAccountName: sa-pga
  20 │      terminationGracePeriodSeconds: 10
  21 │      containers:
  22 │       - name: pgadmin
  23 │         image: dpage/pgadmin4:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 └           value: test@test.com
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin in statefulset pgadmin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin-deployment4.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4:latest
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           value: test@test.com
  28 │         - name: PGADMIN_DEFAULT_PASSWORD
  29 │           value: test
  30 └         - name: PGADMIN_LISTEN_PORT
  ..   
────────────────────────────────────────



pgadmin-deployment5.yaml (kubernetes)
=====================================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin-deployment5.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: admin@pgadmin.com
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: admin
  30 │           image: dpage/pgadmin4
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin-deployment5.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: admin@pgadmin.com
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: admin
  30 │           image: dpage/pgadmin4
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin' of 'deployment' 'pgadmin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin-deployment5.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: admin@pgadmin.com
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: admin
  30 │           image: dpage/pgadmin4
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin-deployment5.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: admin@pgadmin.com
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: admin
  30 │           image: dpage/pgadmin4
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin-deployment5.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: admin@pgadmin.com
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: admin
  30 │           image: dpage/pgadmin4
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin-deployment5.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: admin@pgadmin.com
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: admin
  30 │           image: dpage/pgadmin4
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin-deployment5.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: admin@pgadmin.com
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: admin
  30 │           image: dpage/pgadmin4
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin-deployment5.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: admin@pgadmin.com
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: admin
  30 │           image: dpage/pgadmin4
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin-deployment5.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: admin@pgadmin.com
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: admin
  30 │           image: dpage/pgadmin4
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin-deployment5.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: admin@pgadmin.com
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: admin
  30 │           image: dpage/pgadmin4
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin-deployment5.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: admin@pgadmin.com
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: admin
  30 │           image: dpage/pgadmin4
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin-deployment5.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: admin@pgadmin.com
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: admin
  30 │           image: dpage/pgadmin4
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin-deployment5.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: admin@pgadmin.com
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: admin
  30 │           image: dpage/pgadmin4
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin" of deployment "pgadmin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin-deployment5.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: admin@pgadmin.com
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: admin
  30 │           image: dpage/pgadmin4
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin-deployment5.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: admin@pgadmin.com
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: admin
  30 │           image: dpage/pgadmin4
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pgadmin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgadmin-deployment5.yaml:4-9
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: C:\Users\minam\AppData\Local\Microsoft\WinGet\Packages\Kubernetes.kompose_Microsoft.Winget.Source_8wekyb3d8bbwe\kompose.exe convert -f docker-compose.yaml
   6 │     kompose.version: 1.31.2 (a92241f79)
   7 │   labels:
   8 │     io.kompose.service: pgadmin
   9 └   name: pgadmin
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pgadmin in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment5.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: admin@pgadmin.com
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: admin
  30 │           image: dpage/pgadmin4
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgadmin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment5.yaml:24-36
────────────────────────────────────────
  24 ┌       containers:
  25 │         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: admin@pgadmin.com
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: admin
  30 │           image: dpage/pgadmin4
  31 │           name: pgadmin
  32 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin in deployment pgadmin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin-deployment5.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: admin@pgadmin.com
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: admin
  30 │           image: dpage/pgadmin4
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────



pgadmin-deployment6.yaml (kubernetes)
=====================================
Tests: 109 (SUCCESSES: 88, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin-deployment6.yaml:19-36
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               name: pg-config
  24 │               key: PGADMIN_DEFAULT_EMAIL
  25 │         - name: PGADMIN_DEFAULT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin-deployment6.yaml:19-36
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               name: pg-config
  24 │               key: PGADMIN_DEFAULT_EMAIL
  25 │         - name: PGADMIN_DEFAULT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin' of 'deployment' 'pgadmin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin-deployment6.yaml:19-36
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               name: pg-config
  24 │               key: PGADMIN_DEFAULT_EMAIL
  25 │         - name: PGADMIN_DEFAULT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin-deployment6.yaml:19-36
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               name: pg-config
  24 │               key: PGADMIN_DEFAULT_EMAIL
  25 │         - name: PGADMIN_DEFAULT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin-deployment6.yaml:19-36
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               name: pg-config
  24 │               key: PGADMIN_DEFAULT_EMAIL
  25 │         - name: PGADMIN_DEFAULT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin-deployment6.yaml:19-36
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               name: pg-config
  24 │               key: PGADMIN_DEFAULT_EMAIL
  25 │         - name: PGADMIN_DEFAULT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin-deployment6.yaml:19-36
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               name: pg-config
  24 │               key: PGADMIN_DEFAULT_EMAIL
  25 │         - name: PGADMIN_DEFAULT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin-deployment6.yaml:19-36
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               name: pg-config
  24 │               key: PGADMIN_DEFAULT_EMAIL
  25 │         - name: PGADMIN_DEFAULT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin-deployment6.yaml:19-36
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               name: pg-config
  24 │               key: PGADMIN_DEFAULT_EMAIL
  25 │         - name: PGADMIN_DEFAULT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin-deployment6.yaml:19-36
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               name: pg-config
  24 │               key: PGADMIN_DEFAULT_EMAIL
  25 │         - name: PGADMIN_DEFAULT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin-deployment6.yaml:19-36
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               name: pg-config
  24 │               key: PGADMIN_DEFAULT_EMAIL
  25 │         - name: PGADMIN_DEFAULT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin-deployment6.yaml:19-36
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               name: pg-config
  24 │               key: PGADMIN_DEFAULT_EMAIL
  25 │         - name: PGADMIN_DEFAULT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'pgadmin' of Deployment 'pgadmin' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 pgadmin-deployment6.yaml:19-36
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               name: pg-config
  24 │               key: PGADMIN_DEFAULT_EMAIL
  25 │         - name: PGADMIN_DEFAULT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin-deployment6.yaml:19-36
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               name: pg-config
  24 │               key: PGADMIN_DEFAULT_EMAIL
  25 │         - name: PGADMIN_DEFAULT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin" of deployment "pgadmin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin-deployment6.yaml:19-36
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               name: pg-config
  24 │               key: PGADMIN_DEFAULT_EMAIL
  25 │         - name: PGADMIN_DEFAULT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin-deployment6.yaml:19-36
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               name: pg-config
  24 │               key: PGADMIN_DEFAULT_EMAIL
  25 │         - name: PGADMIN_DEFAULT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pgadmin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgadmin-deployment6.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: pgadmin
   6 └   name: pgadmin
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pgadmin in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment6.yaml:19-36
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               name: pg-config
  24 │               key: PGADMIN_DEFAULT_EMAIL
  25 │         - name: PGADMIN_DEFAULT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgadmin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment6.yaml:18-37
────────────────────────────────────────
  18 ┌       containers:
  19 │       - env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               name: pg-config
  24 │               key: PGADMIN_DEFAULT_EMAIL
  25 │         - name: PGADMIN_DEFAULT_PASSWORD
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin in deployment pgadmin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin-deployment6.yaml:19-36
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               name: pg-config
  24 │               key: PGADMIN_DEFAULT_EMAIL
  25 │         - name: PGADMIN_DEFAULT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────



pgadmin-deployment7.yaml (kubernetes)
=====================================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 7, MEDIUM: 6, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin-deployment7.yaml:25-42
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: "mypsql_user@mail.com"
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: "pg_admin_password"
  30 │           image: dpage/pgadmin4:latest
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin-deployment7.yaml:25-42
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: "mypsql_user@mail.com"
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: "pg_admin_password"
  30 │           image: dpage/pgadmin4:latest
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin' of 'deployment' 'pgadmin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin-deployment7.yaml:25-42
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: "mypsql_user@mail.com"
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: "pg_admin_password"
  30 │           image: dpage/pgadmin4:latest
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin-deployment7.yaml:25-42
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: "mypsql_user@mail.com"
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: "pg_admin_password"
  30 │           image: dpage/pgadmin4:latest
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin-deployment7.yaml:25-42
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: "mypsql_user@mail.com"
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: "pg_admin_password"
  30 │           image: dpage/pgadmin4:latest
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin-deployment7.yaml:25-42
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: "mypsql_user@mail.com"
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: "pg_admin_password"
  30 │           image: dpage/pgadmin4:latest
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin-deployment7.yaml:25-42
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: "mypsql_user@mail.com"
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: "pg_admin_password"
  30 │           image: dpage/pgadmin4:latest
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin-deployment7.yaml:25-42
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: "mypsql_user@mail.com"
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: "pg_admin_password"
  30 │           image: dpage/pgadmin4:latest
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'pgadmin' of Deployment 'pgadmin' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 pgadmin-deployment7.yaml:25-42
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: "mypsql_user@mail.com"
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: "pg_admin_password"
  30 │           image: dpage/pgadmin4:latest
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin-deployment7.yaml:25-42
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: "mypsql_user@mail.com"
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: "pg_admin_password"
  30 │           image: dpage/pgadmin4:latest
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin" of deployment "pgadmin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin-deployment7.yaml:25-42
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: "mypsql_user@mail.com"
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: "pg_admin_password"
  30 │           image: dpage/pgadmin4:latest
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin-deployment7.yaml:25-42
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: "mypsql_user@mail.com"
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: "pg_admin_password"
  30 │           image: dpage/pgadmin4:latest
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pgadmin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgadmin-deployment7.yaml:4-9
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: ./kompose convert --out yamls
   6 │     kompose.version: 1.32.0 (765fde254)
   7 │   labels:
   8 │     io.kompose.service: pgadmin
   9 └   name: pgadmin
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pgadmin in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment7.yaml:25-42
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: "mypsql_user@mail.com"
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: "pg_admin_password"
  30 │           image: dpage/pgadmin4:latest
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgadmin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment7.yaml:24-43
────────────────────────────────────────
  24 ┌       containers:
  25 │         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: "mypsql_user@mail.com"
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: "pg_admin_password"
  30 │           image: dpage/pgadmin4:latest
  31 │           name: pgadmin
  32 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin in deployment pgadmin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin-deployment7.yaml:25-42
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │               value: "mypsql_user@mail.com"
  28 │             - name: PGADMIN_DEFAULT_PASSWORD
  29 │               value: "pg_admin_password"
  30 │           image: dpage/pgadmin4:latest
  31 │           name: pgadmin
  32 │           ports:
  33 └             - containerPort: 80
  ..   
────────────────────────────────────────



pgadmin-deployment8.yaml (kubernetes)
=====================================
Tests: 109 (SUCCESSES: 88, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin-deployment8.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │           image: dpage/pgadmin4:latest
  29 │           name: pgadmin
  30 │           ports:
  31 │             - containerPort: 80
  32 │               hostPort: 5050
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin-deployment8.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │           image: dpage/pgadmin4:latest
  29 │           name: pgadmin
  30 │           ports:
  31 │             - containerPort: 80
  32 │               hostPort: 5050
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin' of 'deployment' 'pgadmin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin-deployment8.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │           image: dpage/pgadmin4:latest
  29 │           name: pgadmin
  30 │           ports:
  31 │             - containerPort: 80
  32 │               hostPort: 5050
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin-deployment8.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │           image: dpage/pgadmin4:latest
  29 │           name: pgadmin
  30 │           ports:
  31 │             - containerPort: 80
  32 │               hostPort: 5050
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin-deployment8.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │           image: dpage/pgadmin4:latest
  29 │           name: pgadmin
  30 │           ports:
  31 │             - containerPort: 80
  32 │               hostPort: 5050
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin-deployment8.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │           image: dpage/pgadmin4:latest
  29 │           name: pgadmin
  30 │           ports:
  31 │             - containerPort: 80
  32 │               hostPort: 5050
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin-deployment8.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │           image: dpage/pgadmin4:latest
  29 │           name: pgadmin
  30 │           ports:
  31 │             - containerPort: 80
  32 │               hostPort: 5050
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin-deployment8.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │           image: dpage/pgadmin4:latest
  29 │           name: pgadmin
  30 │           ports:
  31 │             - containerPort: 80
  32 │               hostPort: 5050
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin-deployment8.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │           image: dpage/pgadmin4:latest
  29 │           name: pgadmin
  30 │           ports:
  31 │             - containerPort: 80
  32 │               hostPort: 5050
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin-deployment8.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │           image: dpage/pgadmin4:latest
  29 │           name: pgadmin
  30 │           ports:
  31 │             - containerPort: 80
  32 │               hostPort: 5050
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin-deployment8.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │           image: dpage/pgadmin4:latest
  29 │           name: pgadmin
  30 │           ports:
  31 │             - containerPort: 80
  32 │               hostPort: 5050
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin-deployment8.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │           image: dpage/pgadmin4:latest
  29 │           name: pgadmin
  30 │           ports:
  31 │             - containerPort: 80
  32 │               hostPort: 5050
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'pgadmin' of Deployment 'pgadmin' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 pgadmin-deployment8.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │           image: dpage/pgadmin4:latest
  29 │           name: pgadmin
  30 │           ports:
  31 │             - containerPort: 80
  32 │               hostPort: 5050
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin-deployment8.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │           image: dpage/pgadmin4:latest
  29 │           name: pgadmin
  30 │           ports:
  31 │             - containerPort: 80
  32 │               hostPort: 5050
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin" of deployment "pgadmin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin-deployment8.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │           image: dpage/pgadmin4:latest
  29 │           name: pgadmin
  30 │           ports:
  31 │             - containerPort: 80
  32 │               hostPort: 5050
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin-deployment8.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │           image: dpage/pgadmin4:latest
  29 │           name: pgadmin
  30 │           ports:
  31 │             - containerPort: 80
  32 │               hostPort: 5050
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pgadmin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgadmin-deployment8.yaml:4-9
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: ./kompose convert --out yamls
   6 │     kompose.version: 1.32.0 (765fde254)
   7 │   labels:
   8 │     io.kompose.service: pgadmin
   9 └   name: pgadmin
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pgadmin in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment8.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │           image: dpage/pgadmin4:latest
  29 │           name: pgadmin
  30 │           ports:
  31 │             - containerPort: 80
  32 │               hostPort: 5050
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgadmin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-deployment8.yaml:24-34
────────────────────────────────────────
  24 ┌       containers:
  25 │         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │           image: dpage/pgadmin4:latest
  29 │           name: pgadmin
  30 │           ports:
  31 │             - containerPort: 80
  32 └               hostPort: 5050
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin in deployment pgadmin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin-deployment8.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: PGADMIN_DEFAULT_EMAIL
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │           image: dpage/pgadmin4:latest
  29 │           name: pgadmin
  30 │           ports:
  31 │             - containerPort: 80
  32 │               hostPort: 5050
  33 └               protocol: TCP
────────────────────────────────────────



pgadmin-dpl.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin-dpl.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │           - name: PGADMIN_DEFAULT_EMAIL
  23 │             valueFrom:
  24 │               configMapKeyRef:
  25 └                 name: my-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin-dpl.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │           - name: PGADMIN_DEFAULT_EMAIL
  23 │             valueFrom:
  24 │               configMapKeyRef:
  25 └                 name: my-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin' of 'deployment' 'pgadmin' in 'standard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin-dpl.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │           - name: PGADMIN_DEFAULT_EMAIL
  23 │             valueFrom:
  24 │               configMapKeyRef:
  25 └                 name: my-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin-dpl.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │           - name: PGADMIN_DEFAULT_EMAIL
  23 │             valueFrom:
  24 │               configMapKeyRef:
  25 └                 name: my-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin-dpl.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │           - name: PGADMIN_DEFAULT_EMAIL
  23 │             valueFrom:
  24 │               configMapKeyRef:
  25 └                 name: my-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin-dpl.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │           - name: PGADMIN_DEFAULT_EMAIL
  23 │             valueFrom:
  24 │               configMapKeyRef:
  25 └                 name: my-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin-dpl.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │           - name: PGADMIN_DEFAULT_EMAIL
  23 │             valueFrom:
  24 │               configMapKeyRef:
  25 └                 name: my-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin-dpl.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │           - name: PGADMIN_DEFAULT_EMAIL
  23 │             valueFrom:
  24 │               configMapKeyRef:
  25 └                 name: my-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin-dpl.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │           - name: PGADMIN_DEFAULT_EMAIL
  23 │             valueFrom:
  24 │               configMapKeyRef:
  25 └                 name: my-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin-dpl.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │           - name: PGADMIN_DEFAULT_EMAIL
  23 │             valueFrom:
  24 │               configMapKeyRef:
  25 └                 name: my-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin-dpl.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │           - name: PGADMIN_DEFAULT_EMAIL
  23 │             valueFrom:
  24 │               configMapKeyRef:
  25 └                 name: my-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin-dpl.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │           - name: PGADMIN_DEFAULT_EMAIL
  23 │             valueFrom:
  24 │               configMapKeyRef:
  25 └                 name: my-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin-dpl.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │           - name: PGADMIN_DEFAULT_EMAIL
  23 │             valueFrom:
  24 │               configMapKeyRef:
  25 └                 name: my-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin" of deployment "pgadmin" in "standard" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin-dpl.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │           - name: PGADMIN_DEFAULT_EMAIL
  23 │             valueFrom:
  24 │               configMapKeyRef:
  25 └                 name: my-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin-dpl.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │           - name: PGADMIN_DEFAULT_EMAIL
  23 │             valueFrom:
  24 │               configMapKeyRef:
  25 └                 name: my-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin in standard namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-dpl.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │           - name: PGADMIN_DEFAULT_EMAIL
  23 │             valueFrom:
  24 │               configMapKeyRef:
  25 └                 name: my-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgadmin in standard namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-dpl.yaml:16-31
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │           - name: PGADMIN_DEFAULT_EMAIL
  23 │             valueFrom:
  24 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin in deployment pgadmin (namespace: standard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin-dpl.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │           - name: PGADMIN_DEFAULT_EMAIL
  23 │             valueFrom:
  24 │               configMapKeyRef:
  25 └                 name: my-configmap
  ..   
────────────────────────────────────────



pgadmin-service11.yaml (kubernetes)
===================================
Tests: 108 (SUCCESSES: 107, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'pgadmin-service' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 pgadmin-service11.yaml:7-13
────────────────────────────────────────
   7 ┌   type: LoadBalancer
   8 │   selector:
   9 │     app: pgadmin
  10 │   ports:
  11 │     - protocol: TCP
  12 │       port: 80
  13 └       targetPort: 80
────────────────────────────────────────



pgadmin-statefulset.yaml (kubernetes)
=====================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin-statefulset.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pgadmin
  22 │           image: dpage/pgadmin4:5.4
  23 │           imagePullPolicy: Always
  24 │           env:
  25 │             - name: PGADMIN_DEFAULT_EMAIL
  26 │               value: user@domain.com
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │               valueFrom:
  29 └                 secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin-statefulset.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pgadmin
  22 │           image: dpage/pgadmin4:5.4
  23 │           imagePullPolicy: Always
  24 │           env:
  25 │             - name: PGADMIN_DEFAULT_EMAIL
  26 │               value: user@domain.com
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │               valueFrom:
  29 └                 secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin' of 'statefulset' 'pgadmin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin-statefulset.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pgadmin
  22 │           image: dpage/pgadmin4:5.4
  23 │           imagePullPolicy: Always
  24 │           env:
  25 │             - name: PGADMIN_DEFAULT_EMAIL
  26 │               value: user@domain.com
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │               valueFrom:
  29 └                 secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin-statefulset.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pgadmin
  22 │           image: dpage/pgadmin4:5.4
  23 │           imagePullPolicy: Always
  24 │           env:
  25 │             - name: PGADMIN_DEFAULT_EMAIL
  26 │               value: user@domain.com
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │               valueFrom:
  29 └                 secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin-statefulset.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pgadmin
  22 │           image: dpage/pgadmin4:5.4
  23 │           imagePullPolicy: Always
  24 │           env:
  25 │             - name: PGADMIN_DEFAULT_EMAIL
  26 │               value: user@domain.com
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │               valueFrom:
  29 └                 secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin-statefulset.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pgadmin
  22 │           image: dpage/pgadmin4:5.4
  23 │           imagePullPolicy: Always
  24 │           env:
  25 │             - name: PGADMIN_DEFAULT_EMAIL
  26 │               value: user@domain.com
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │               valueFrom:
  29 └                 secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin-statefulset.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pgadmin
  22 │           image: dpage/pgadmin4:5.4
  23 │           imagePullPolicy: Always
  24 │           env:
  25 │             - name: PGADMIN_DEFAULT_EMAIL
  26 │               value: user@domain.com
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │               valueFrom:
  29 └                 secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin-statefulset.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pgadmin
  22 │           image: dpage/pgadmin4:5.4
  23 │           imagePullPolicy: Always
  24 │           env:
  25 │             - name: PGADMIN_DEFAULT_EMAIL
  26 │               value: user@domain.com
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │               valueFrom:
  29 └                 secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin-statefulset.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pgadmin
  22 │           image: dpage/pgadmin4:5.4
  23 │           imagePullPolicy: Always
  24 │           env:
  25 │             - name: PGADMIN_DEFAULT_EMAIL
  26 │               value: user@domain.com
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │               valueFrom:
  29 └                 secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin-statefulset.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pgadmin
  22 │           image: dpage/pgadmin4:5.4
  23 │           imagePullPolicy: Always
  24 │           env:
  25 │             - name: PGADMIN_DEFAULT_EMAIL
  26 │               value: user@domain.com
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │               valueFrom:
  29 └                 secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin-statefulset.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pgadmin
  22 │           image: dpage/pgadmin4:5.4
  23 │           imagePullPolicy: Always
  24 │           env:
  25 │             - name: PGADMIN_DEFAULT_EMAIL
  26 │               value: user@domain.com
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │               valueFrom:
  29 └                 secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin-statefulset.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pgadmin
  22 │           image: dpage/pgadmin4:5.4
  23 │           imagePullPolicy: Always
  24 │           env:
  25 │             - name: PGADMIN_DEFAULT_EMAIL
  26 │               value: user@domain.com
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │               valueFrom:
  29 └                 secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin" of statefulset "pgadmin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin-statefulset.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pgadmin
  22 │           image: dpage/pgadmin4:5.4
  23 │           imagePullPolicy: Always
  24 │           env:
  25 │             - name: PGADMIN_DEFAULT_EMAIL
  26 │               value: user@domain.com
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │               valueFrom:
  29 └                 secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin-statefulset.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pgadmin
  22 │           image: dpage/pgadmin4:5.4
  23 │           imagePullPolicy: Always
  24 │           env:
  25 │             - name: PGADMIN_DEFAULT_EMAIL
  26 │               value: user@domain.com
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │               valueFrom:
  29 └                 secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset pgadmin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgadmin-statefulset.yaml:4
────────────────────────────────────────
   4 [   name: pgadmin
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): statefulset pgadmin in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-statefulset.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pgadmin
  22 │           image: dpage/pgadmin4:5.4
  23 │           imagePullPolicy: Always
  24 │           env:
  25 │             - name: PGADMIN_DEFAULT_EMAIL
  26 │               value: user@domain.com
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │               valueFrom:
  29 └                 secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset pgadmin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin-statefulset.yaml:19-46
────────────────────────────────────────
  19 ┌       terminationGracePeriodSeconds: 10
  20 │       containers:
  21 │         - name: pgadmin
  22 │           image: dpage/pgadmin4:5.4
  23 │           imagePullPolicy: Always
  24 │           env:
  25 │             - name: PGADMIN_DEFAULT_EMAIL
  26 │               value: user@domain.com
  27 └             - name: PGADMIN_DEFAULT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin in statefulset pgadmin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin-statefulset.yaml:21-42
────────────────────────────────────────
  21 ┌         - name: pgadmin
  22 │           image: dpage/pgadmin4:5.4
  23 │           imagePullPolicy: Always
  24 │           env:
  25 │             - name: PGADMIN_DEFAULT_EMAIL
  26 │               value: user@domain.com
  27 │             - name: PGADMIN_DEFAULT_PASSWORD
  28 │               valueFrom:
  29 └                 secretKeyRef:
  ..   
────────────────────────────────────────



pgadmin.yaml (kubernetes)
=========================
Tests: 108 (SUCCESSES: 106, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'pgadmin-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PGADMIN_DEFAULT_EMAIL"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'pgadmin-config' in 'default' namespace stores secrets in key(s) or value(s) '{"PGADMIN_DEFAULT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



pgadmin10.yaml (kubernetes)
===========================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin10.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin10.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin' of 'deployment' 'pgadmin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin10.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin10.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin10.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin10.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin10.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin10.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin10.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin10.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin10.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin10.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin10.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin" of deployment "pgadmin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin10.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin10.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pgadmin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgadmin10.yaml:4
────────────────────────────────────────
   4 [   name: pgadmin
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pgadmin in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin10.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgadmin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin10.yaml:15-23
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin in deployment pgadmin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin10.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────



pgadmin11.yaml (kubernetes)
===========================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin11.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin11.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin' of 'deployment' 'pgadmin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin11.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin11.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin11.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin11.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin11.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin11.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin11.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin11.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin11.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin11.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin11.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin" of deployment "pgadmin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin11.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin11.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pgadmin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgadmin11.yaml:4
────────────────────────────────────────
   4 [   name: pgadmin
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pgadmin in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin11.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgadmin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin11.yaml:15-23
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin in deployment pgadmin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin11.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: pgadmin
  17 │           image: dpage/pgadmin4
  18 │           imagePullPolicy: IfNotPresent
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: pgadmin-rootpass
  22 │           ports:
  23 └             - containerPort: 80
────────────────────────────────────────



pgadmin16.yaml (kubernetes)
===========================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin-db' of Deployment 'pgadmin-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin16.yaml:21-35
────────────────────────────────────────
  21 ┌       - name: pgadmin-db
  22 │         image: dpage/pgadmin4:latest
  23 │         env:
  24 │         - name: PGADMIN_DEFAULT_EMAIL
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               name: config-kub-values
  28 │               key: PGADMIN_DEFAULT_EMAIL
  29 └         - name: PGADMIN_DEFAULT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin-db' of Deployment 'pgadmin-db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin16.yaml:21-35
────────────────────────────────────────
  21 ┌       - name: pgadmin-db
  22 │         image: dpage/pgadmin4:latest
  23 │         env:
  24 │         - name: PGADMIN_DEFAULT_EMAIL
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               name: config-kub-values
  28 │               key: PGADMIN_DEFAULT_EMAIL
  29 └         - name: PGADMIN_DEFAULT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin-db' of 'deployment' 'pgadmin-db' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin16.yaml:21-35
────────────────────────────────────────
  21 ┌       - name: pgadmin-db
  22 │         image: dpage/pgadmin4:latest
  23 │         env:
  24 │         - name: PGADMIN_DEFAULT_EMAIL
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               name: config-kub-values
  28 │               key: PGADMIN_DEFAULT_EMAIL
  29 └         - name: PGADMIN_DEFAULT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin-db' of Deployment 'pgadmin-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin16.yaml:21-35
────────────────────────────────────────
  21 ┌       - name: pgadmin-db
  22 │         image: dpage/pgadmin4:latest
  23 │         env:
  24 │         - name: PGADMIN_DEFAULT_EMAIL
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               name: config-kub-values
  28 │               key: PGADMIN_DEFAULT_EMAIL
  29 └         - name: PGADMIN_DEFAULT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin-db' of Deployment 'pgadmin-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin16.yaml:21-35
────────────────────────────────────────
  21 ┌       - name: pgadmin-db
  22 │         image: dpage/pgadmin4:latest
  23 │         env:
  24 │         - name: PGADMIN_DEFAULT_EMAIL
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               name: config-kub-values
  28 │               key: PGADMIN_DEFAULT_EMAIL
  29 └         - name: PGADMIN_DEFAULT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin-db' of Deployment 'pgadmin-db' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin16.yaml:21-35
────────────────────────────────────────
  21 ┌       - name: pgadmin-db
  22 │         image: dpage/pgadmin4:latest
  23 │         env:
  24 │         - name: PGADMIN_DEFAULT_EMAIL
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               name: config-kub-values
  28 │               key: PGADMIN_DEFAULT_EMAIL
  29 └         - name: PGADMIN_DEFAULT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin-db' of Deployment 'pgadmin-db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin16.yaml:21-35
────────────────────────────────────────
  21 ┌       - name: pgadmin-db
  22 │         image: dpage/pgadmin4:latest
  23 │         env:
  24 │         - name: PGADMIN_DEFAULT_EMAIL
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               name: config-kub-values
  28 │               key: PGADMIN_DEFAULT_EMAIL
  29 └         - name: PGADMIN_DEFAULT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin-db' of Deployment 'pgadmin-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin16.yaml:21-35
────────────────────────────────────────
  21 ┌       - name: pgadmin-db
  22 │         image: dpage/pgadmin4:latest
  23 │         env:
  24 │         - name: PGADMIN_DEFAULT_EMAIL
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               name: config-kub-values
  28 │               key: PGADMIN_DEFAULT_EMAIL
  29 └         - name: PGADMIN_DEFAULT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin-db' of Deployment 'pgadmin-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin16.yaml:21-35
────────────────────────────────────────
  21 ┌       - name: pgadmin-db
  22 │         image: dpage/pgadmin4:latest
  23 │         env:
  24 │         - name: PGADMIN_DEFAULT_EMAIL
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               name: config-kub-values
  28 │               key: PGADMIN_DEFAULT_EMAIL
  29 └         - name: PGADMIN_DEFAULT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin-db' of Deployment 'pgadmin-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin16.yaml:21-35
────────────────────────────────────────
  21 ┌       - name: pgadmin-db
  22 │         image: dpage/pgadmin4:latest
  23 │         env:
  24 │         - name: PGADMIN_DEFAULT_EMAIL
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               name: config-kub-values
  28 │               key: PGADMIN_DEFAULT_EMAIL
  29 └         - name: PGADMIN_DEFAULT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin-db' of Deployment 'pgadmin-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin16.yaml:21-35
────────────────────────────────────────
  21 ┌       - name: pgadmin-db
  22 │         image: dpage/pgadmin4:latest
  23 │         env:
  24 │         - name: PGADMIN_DEFAULT_EMAIL
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               name: config-kub-values
  28 │               key: PGADMIN_DEFAULT_EMAIL
  29 └         - name: PGADMIN_DEFAULT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin-db' of Deployment 'pgadmin-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin16.yaml:21-35
────────────────────────────────────────
  21 ┌       - name: pgadmin-db
  22 │         image: dpage/pgadmin4:latest
  23 │         env:
  24 │         - name: PGADMIN_DEFAULT_EMAIL
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               name: config-kub-values
  28 │               key: PGADMIN_DEFAULT_EMAIL
  29 └         - name: PGADMIN_DEFAULT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin16.yaml:21-35
────────────────────────────────────────
  21 ┌       - name: pgadmin-db
  22 │         image: dpage/pgadmin4:latest
  23 │         env:
  24 │         - name: PGADMIN_DEFAULT_EMAIL
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               name: config-kub-values
  28 │               key: PGADMIN_DEFAULT_EMAIL
  29 └         - name: PGADMIN_DEFAULT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin-db" of deployment "pgadmin-db" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin16.yaml:21-35
────────────────────────────────────────
  21 ┌       - name: pgadmin-db
  22 │         image: dpage/pgadmin4:latest
  23 │         env:
  24 │         - name: PGADMIN_DEFAULT_EMAIL
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               name: config-kub-values
  28 │               key: PGADMIN_DEFAULT_EMAIL
  29 └         - name: PGADMIN_DEFAULT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin16.yaml:21-35
────────────────────────────────────────
  21 ┌       - name: pgadmin-db
  22 │         image: dpage/pgadmin4:latest
  23 │         env:
  24 │         - name: PGADMIN_DEFAULT_EMAIL
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               name: config-kub-values
  28 │               key: PGADMIN_DEFAULT_EMAIL
  29 └         - name: PGADMIN_DEFAULT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pgadmin-db in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgadmin16.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: pgadmin
   6 │     service: pgadmin
   7 └   name: pgadmin-db
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pgadmin-db in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin-db in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin16.yaml:21-35
────────────────────────────────────────
  21 ┌       - name: pgadmin-db
  22 │         image: dpage/pgadmin4:latest
  23 │         env:
  24 │         - name: PGADMIN_DEFAULT_EMAIL
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               name: config-kub-values
  28 │               key: PGADMIN_DEFAULT_EMAIL
  29 └         - name: PGADMIN_DEFAULT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgadmin-db in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin16.yaml:20-35
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: pgadmin-db
  22 │         image: dpage/pgadmin4:latest
  23 │         env:
  24 │         - name: PGADMIN_DEFAULT_EMAIL
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               name: config-kub-values
  28 └               key: PGADMIN_DEFAULT_EMAIL
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin-db in deployment pgadmin-db (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin16.yaml:21-35
────────────────────────────────────────
  21 ┌       - name: pgadmin-db
  22 │         image: dpage/pgadmin4:latest
  23 │         env:
  24 │         - name: PGADMIN_DEFAULT_EMAIL
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               name: config-kub-values
  28 │               key: PGADMIN_DEFAULT_EMAIL
  29 └         - name: PGADMIN_DEFAULT_PASSWORD
  ..   
────────────────────────────────────────



pgadmin2.yaml (kubernetes)
==========================
Tests: 108 (SUCCESSES: 106, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'pgadmin-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PGADMIN_DEFAULT_EMAIL"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'pgadmin-config' in 'default' namespace stores secrets in key(s) or value(s) '{"PGADMIN_DEFAULT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



pgadmin2_1.yaml (kubernetes)
============================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin2_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin2_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin' of 'deployment' 'pgadmin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin2_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin2_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin2_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin2_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin2_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin2_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin2_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin2_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin2_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin2_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin2_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin" of deployment "pgadmin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin2_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin2_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pgadmin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgadmin2_1.yaml:4
────────────────────────────────────────
   4 [   name: pgadmin
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pgadmin in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin2_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgadmin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin2_1.yaml:15-23
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin in deployment pgadmin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin2_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────



pgadmin5.yaml (kubernetes)
==========================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin5.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │         - name: PGADMIN_DEFAULT_EMAIL
  20 │           value: admin@admin.com
  21 │         - name: PGADMIN_DEFAULT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin5.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │         - name: PGADMIN_DEFAULT_EMAIL
  20 │           value: admin@admin.com
  21 │         - name: PGADMIN_DEFAULT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin' of 'deployment' 'pgadmin-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin5.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │         - name: PGADMIN_DEFAULT_EMAIL
  20 │           value: admin@admin.com
  21 │         - name: PGADMIN_DEFAULT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin5.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │         - name: PGADMIN_DEFAULT_EMAIL
  20 │           value: admin@admin.com
  21 │         - name: PGADMIN_DEFAULT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin5.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │         - name: PGADMIN_DEFAULT_EMAIL
  20 │           value: admin@admin.com
  21 │         - name: PGADMIN_DEFAULT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin5.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │         - name: PGADMIN_DEFAULT_EMAIL
  20 │           value: admin@admin.com
  21 │         - name: PGADMIN_DEFAULT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin5.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │         - name: PGADMIN_DEFAULT_EMAIL
  20 │           value: admin@admin.com
  21 │         - name: PGADMIN_DEFAULT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin5.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │         - name: PGADMIN_DEFAULT_EMAIL
  20 │           value: admin@admin.com
  21 │         - name: PGADMIN_DEFAULT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin5.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │         - name: PGADMIN_DEFAULT_EMAIL
  20 │           value: admin@admin.com
  21 │         - name: PGADMIN_DEFAULT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin5.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │         - name: PGADMIN_DEFAULT_EMAIL
  20 │           value: admin@admin.com
  21 │         - name: PGADMIN_DEFAULT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin5.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │         - name: PGADMIN_DEFAULT_EMAIL
  20 │           value: admin@admin.com
  21 │         - name: PGADMIN_DEFAULT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin5.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │         - name: PGADMIN_DEFAULT_EMAIL
  20 │           value: admin@admin.com
  21 │         - name: PGADMIN_DEFAULT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin5.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │         - name: PGADMIN_DEFAULT_EMAIL
  20 │           value: admin@admin.com
  21 │         - name: PGADMIN_DEFAULT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin" of deployment "pgadmin-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin5.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │         - name: PGADMIN_DEFAULT_EMAIL
  20 │           value: admin@admin.com
  21 │         - name: PGADMIN_DEFAULT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin5.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │         - name: PGADMIN_DEFAULT_EMAIL
  20 │           value: admin@admin.com
  21 │         - name: PGADMIN_DEFAULT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pgadmin-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgadmin5.yaml:4
────────────────────────────────────────
   4 [   name: pgadmin-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pgadmin-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin5.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │         - name: PGADMIN_DEFAULT_EMAIL
  20 │           value: admin@admin.com
  21 │         - name: PGADMIN_DEFAULT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgadmin-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin5.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │         - name: PGADMIN_DEFAULT_EMAIL
  20 │           value: admin@admin.com
  21 │         - name: PGADMIN_DEFAULT_PASSWORD
  22 │           valueFrom:
  23 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin in deployment pgadmin-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin5.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         env:
  19 │         - name: PGADMIN_DEFAULT_EMAIL
  20 │           value: admin@admin.com
  21 │         - name: PGADMIN_DEFAULT_PASSWORD
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────



pgadmin6.yaml (kubernetes)
==========================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin6.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin6.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin' of 'deployment' 'pgadmin-deployment' in 'standard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin6.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin6.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin6.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin6.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin6.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin6.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin6.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin6.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin6.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin6.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin6.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin" of deployment "pgadmin-deployment" in "standard" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin6.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin6.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pgadmin-deployment in standard namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin-deployment in standard namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin6.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgadmin-deployment in standard namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin6.yaml:16-28
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin in deployment pgadmin-deployment (namespace: standard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin6.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: secrets-postgre-creds
  ..   
────────────────────────────────────────



pgadmin7_2.yaml (kubernetes)
============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin7_2.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 │               name: pgadmin-secret
  30 └               key: PGADMIN_DEFAULT_EMAIL
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin7_2.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 │               name: pgadmin-secret
  30 └               key: PGADMIN_DEFAULT_EMAIL
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin' of 'statefulset' 'pgadmin' in 'postgres-dev' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin7_2.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 │               name: pgadmin-secret
  30 └               key: PGADMIN_DEFAULT_EMAIL
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin7_2.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 │               name: pgadmin-secret
  30 └               key: PGADMIN_DEFAULT_EMAIL
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin7_2.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 │               name: pgadmin-secret
  30 └               key: PGADMIN_DEFAULT_EMAIL
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin' of StatefulSet 'pgadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin7_2.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 │               name: pgadmin-secret
  30 └               key: PGADMIN_DEFAULT_EMAIL
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin7_2.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 │               name: pgadmin-secret
  30 └               key: PGADMIN_DEFAULT_EMAIL
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin7_2.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 │               name: pgadmin-secret
  30 └               key: PGADMIN_DEFAULT_EMAIL
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin7_2.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 │               name: pgadmin-secret
  30 └               key: PGADMIN_DEFAULT_EMAIL
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin7_2.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 │               name: pgadmin-secret
  30 └               key: PGADMIN_DEFAULT_EMAIL
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin7_2.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 │               name: pgadmin-secret
  30 └               key: PGADMIN_DEFAULT_EMAIL
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin' of StatefulSet 'pgadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin7_2.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 │               name: pgadmin-secret
  30 └               key: PGADMIN_DEFAULT_EMAIL
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin7_2.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 │               name: pgadmin-secret
  30 └               key: PGADMIN_DEFAULT_EMAIL
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin" of statefulset "pgadmin" in "postgres-dev" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin7_2.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 │               name: pgadmin-secret
  30 └               key: PGADMIN_DEFAULT_EMAIL
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin7_2.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 │               name: pgadmin-secret
  30 └               key: PGADMIN_DEFAULT_EMAIL
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): statefulset pgadmin in postgres-dev namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin in postgres-dev namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin7_2.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 │               name: pgadmin-secret
  30 └               key: PGADMIN_DEFAULT_EMAIL
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset pgadmin in postgres-dev namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin7_2.yaml:20-50
────────────────────────────────────────
  20 ┌       terminationGracePeriodSeconds: 10
  21 │       containers:
  22 │       - name: pgadmin
  23 │         image: dpage/pgadmin4
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           valueFrom:
  28 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin in statefulset pgadmin (namespace: postgres-dev) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin7_2.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: pgadmin
  23 │         image: dpage/pgadmin4
  24 │         imagePullPolicy: Always
  25 │         env:
  26 │         - name: PGADMIN_DEFAULT_EMAIL
  27 │           valueFrom:
  28 │             secretKeyRef:
  29 │               name: pgadmin-secret
  30 └               key: PGADMIN_DEFAULT_EMAIL
  ..   
────────────────────────────────────────



pgadmin8.yaml (kubernetes)
==========================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin4' of Deployment 'pgadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin8.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin4
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           value: password
  24 │         - name: PGADMIN_PORT
  25 └           value: '80'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin4' of Deployment 'pgadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin8.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin4
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           value: password
  24 │         - name: PGADMIN_PORT
  25 └           value: '80'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin4' of 'deployment' 'pgadmin' in 'postgresql' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin8.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin4
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           value: password
  24 │         - name: PGADMIN_PORT
  25 └           value: '80'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin4' of Deployment 'pgadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin8.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin4
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           value: password
  24 │         - name: PGADMIN_PORT
  25 └           value: '80'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin4' of Deployment 'pgadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin8.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin4
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           value: password
  24 │         - name: PGADMIN_PORT
  25 └           value: '80'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin4' of Deployment 'pgadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin8.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin4
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           value: password
  24 │         - name: PGADMIN_PORT
  25 └           value: '80'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin4' of Deployment 'pgadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin8.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin4
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           value: password
  24 │         - name: PGADMIN_PORT
  25 └           value: '80'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin4' of Deployment 'pgadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin8.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin4
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           value: password
  24 │         - name: PGADMIN_PORT
  25 └           value: '80'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin4' of Deployment 'pgadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin8.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin4
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           value: password
  24 │         - name: PGADMIN_PORT
  25 └           value: '80'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin4' of Deployment 'pgadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin8.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin4
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           value: password
  24 │         - name: PGADMIN_PORT
  25 └           value: '80'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin4' of Deployment 'pgadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin8.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin4
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           value: password
  24 │         - name: PGADMIN_PORT
  25 └           value: '80'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin4' of Deployment 'pgadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin8.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin4
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           value: password
  24 │         - name: PGADMIN_PORT
  25 └           value: '80'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin8.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin4
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           value: password
  24 │         - name: PGADMIN_PORT
  25 └           value: '80'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin4" of deployment "pgadmin" in "postgresql" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin8.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin4
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           value: password
  24 │         - name: PGADMIN_PORT
  25 └           value: '80'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin8.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin4
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           value: password
  24 │         - name: PGADMIN_PORT
  25 └           value: '80'
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pgadmin in postgresql namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin in postgresql namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin8.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin4
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           value: password
  24 │         - name: PGADMIN_PORT
  25 └           value: '80'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgadmin in postgresql namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin8.yaml:16-28
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: pgadmin4
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           value: password
  24 └         - name: PGADMIN_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin4 in deployment pgadmin (namespace: postgresql) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin8.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: pgadmin4
  18 │         image: dpage/pgadmin4
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: admin@admin.com
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 │           value: password
  24 │         - name: PGADMIN_PORT
  25 └           value: '80'
  ..   
────────────────────────────────────────



pgadmin_1.yaml (kubernetes)
===========================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin' of 'deployment' 'pgadmin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin' of Deployment 'pgadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin" of deployment "pgadmin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pgadmin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgadmin_1.yaml:4
────────────────────────────────────────
   4 [   name: pgadmin
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pgadmin in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgadmin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin_1.yaml:15-23
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin in deployment pgadmin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgadmin
  17 │         image: dpage/pgadmin4
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 80
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: pgadmin-config
────────────────────────────────────────



pgadmin_deploy1.yaml (kubernetes)
=================================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgadmin_deploy1.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: pgadmin
  16 │         image: dpage/pgadmin4
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: "admin@admin.com"
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 └           value: "root"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgadmin_deploy1.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: pgadmin
  16 │         image: dpage/pgadmin4
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: "admin@admin.com"
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 └           value: "root"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgadmin' of 'deployment' 'pgadmin-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgadmin_deploy1.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: pgadmin
  16 │         image: dpage/pgadmin4
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: "admin@admin.com"
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 └           value: "root"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgadmin_deploy1.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: pgadmin
  16 │         image: dpage/pgadmin4
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: "admin@admin.com"
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 └           value: "root"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgadmin_deploy1.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: pgadmin
  16 │         image: dpage/pgadmin4
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: "admin@admin.com"
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 └           value: "root"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgadmin' of Deployment 'pgadmin-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgadmin_deploy1.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: pgadmin
  16 │         image: dpage/pgadmin4
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: "admin@admin.com"
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 └           value: "root"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgadmin_deploy1.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: pgadmin
  16 │         image: dpage/pgadmin4
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: "admin@admin.com"
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 └           value: "root"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgadmin_deploy1.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: pgadmin
  16 │         image: dpage/pgadmin4
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: "admin@admin.com"
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 └           value: "root"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgadmin_deploy1.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: pgadmin
  16 │         image: dpage/pgadmin4
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: "admin@admin.com"
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 └           value: "root"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgadmin_deploy1.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: pgadmin
  16 │         image: dpage/pgadmin4
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: "admin@admin.com"
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 └           value: "root"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgadmin_deploy1.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: pgadmin
  16 │         image: dpage/pgadmin4
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: "admin@admin.com"
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 └           value: "root"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgadmin' of Deployment 'pgadmin-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgadmin_deploy1.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: pgadmin
  16 │         image: dpage/pgadmin4
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: "admin@admin.com"
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 └           value: "root"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgadmin_deploy1.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: pgadmin
  16 │         image: dpage/pgadmin4
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: "admin@admin.com"
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 └           value: "root"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgadmin" of deployment "pgadmin-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgadmin_deploy1.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: pgadmin
  16 │         image: dpage/pgadmin4
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: "admin@admin.com"
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 └           value: "root"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgadmin_deploy1.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: pgadmin
  16 │         image: dpage/pgadmin4
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: "admin@admin.com"
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 └           value: "root"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pgadmin-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgadmin_deploy1.yaml:4
────────────────────────────────────────
   4 [   name: pgadmin-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pgadmin-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgadmin-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin_deploy1.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: pgadmin
  16 │         image: dpage/pgadmin4
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: "admin@admin.com"
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 └           value: "root"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgadmin-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgadmin_deploy1.yaml:14-23
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: pgadmin
  16 │         image: dpage/pgadmin4
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: "admin@admin.com"
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 └           value: "root"
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgadmin in deployment pgadmin-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgadmin_deploy1.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: pgadmin
  16 │         image: dpage/pgadmin4
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: PGADMIN_DEFAULT_EMAIL
  21 │           value: "admin@admin.com"
  22 │         - name: PGADMIN_DEFAULT_PASSWORD
  23 └           value: "root"
────────────────────────────────────────



pgbouncer-configmap.yaml (kubernetes)
=====================================
Tests: 108 (SUCCESSES: 107, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'pgbouncer-configmap' in 'sandbox' namespace stores sensitive contents in key(s) or value(s) '{"PGBOUNCER_MAX_CLIENT_CONN", "PGBOUNCER_MAX_PREPARED_STATEMENTS", "POSTGRESQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



pgbouncer-deployment-spec.yaml (kubernetes)
===========================================
Tests: 109 (SUCCESSES: 95, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgbouncer' of Deployment 'pgbouncer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgbouncer-deployment-spec.yaml:22-37
────────────────────────────────────────
  22 ┌       - name: pgbouncer
  23 │         image: bitnami/pgbouncer:latest
  24 │         ports:
  25 │         - containerPort: 6432
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: pgbouncer-configmap
  29 │         - secretRef:
  30 └             name: pgbouncer-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgbouncer' of Deployment 'pgbouncer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgbouncer-deployment-spec.yaml:22-37
────────────────────────────────────────
  22 ┌       - name: pgbouncer
  23 │         image: bitnami/pgbouncer:latest
  24 │         ports:
  25 │         - containerPort: 6432
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: pgbouncer-configmap
  29 │         - secretRef:
  30 └             name: pgbouncer-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgbouncer' of 'deployment' 'pgbouncer' in 'sandbox' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgbouncer-deployment-spec.yaml:22-37
────────────────────────────────────────
  22 ┌       - name: pgbouncer
  23 │         image: bitnami/pgbouncer:latest
  24 │         ports:
  25 │         - containerPort: 6432
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: pgbouncer-configmap
  29 │         - secretRef:
  30 └             name: pgbouncer-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgbouncer' of Deployment 'pgbouncer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgbouncer-deployment-spec.yaml:22-37
────────────────────────────────────────
  22 ┌       - name: pgbouncer
  23 │         image: bitnami/pgbouncer:latest
  24 │         ports:
  25 │         - containerPort: 6432
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: pgbouncer-configmap
  29 │         - secretRef:
  30 └             name: pgbouncer-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgbouncer' of Deployment 'pgbouncer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgbouncer-deployment-spec.yaml:22-37
────────────────────────────────────────
  22 ┌       - name: pgbouncer
  23 │         image: bitnami/pgbouncer:latest
  24 │         ports:
  25 │         - containerPort: 6432
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: pgbouncer-configmap
  29 │         - secretRef:
  30 └             name: pgbouncer-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgbouncer' of Deployment 'pgbouncer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgbouncer-deployment-spec.yaml:22-37
────────────────────────────────────────
  22 ┌       - name: pgbouncer
  23 │         image: bitnami/pgbouncer:latest
  24 │         ports:
  25 │         - containerPort: 6432
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: pgbouncer-configmap
  29 │         - secretRef:
  30 └             name: pgbouncer-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgbouncer' of Deployment 'pgbouncer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgbouncer-deployment-spec.yaml:22-37
────────────────────────────────────────
  22 ┌       - name: pgbouncer
  23 │         image: bitnami/pgbouncer:latest
  24 │         ports:
  25 │         - containerPort: 6432
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: pgbouncer-configmap
  29 │         - secretRef:
  30 └             name: pgbouncer-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgbouncer' of Deployment 'pgbouncer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgbouncer-deployment-spec.yaml:22-37
────────────────────────────────────────
  22 ┌       - name: pgbouncer
  23 │         image: bitnami/pgbouncer:latest
  24 │         ports:
  25 │         - containerPort: 6432
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: pgbouncer-configmap
  29 │         - secretRef:
  30 └             name: pgbouncer-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgbouncer-deployment-spec.yaml:22-37
────────────────────────────────────────
  22 ┌       - name: pgbouncer
  23 │         image: bitnami/pgbouncer:latest
  24 │         ports:
  25 │         - containerPort: 6432
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: pgbouncer-configmap
  29 │         - secretRef:
  30 └             name: pgbouncer-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgbouncer" of deployment "pgbouncer" in "sandbox" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgbouncer-deployment-spec.yaml:22-37
────────────────────────────────────────
  22 ┌       - name: pgbouncer
  23 │         image: bitnami/pgbouncer:latest
  24 │         ports:
  25 │         - containerPort: 6432
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: pgbouncer-configmap
  29 │         - secretRef:
  30 └             name: pgbouncer-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgbouncer-deployment-spec.yaml:22-37
────────────────────────────────────────
  22 ┌       - name: pgbouncer
  23 │         image: bitnami/pgbouncer:latest
  24 │         ports:
  25 │         - containerPort: 6432
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: pgbouncer-configmap
  29 │         - secretRef:
  30 └             name: pgbouncer-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgbouncer in sandbox namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgbouncer-deployment-spec.yaml:22-37
────────────────────────────────────────
  22 ┌       - name: pgbouncer
  23 │         image: bitnami/pgbouncer:latest
  24 │         ports:
  25 │         - containerPort: 6432
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: pgbouncer-configmap
  29 │         - secretRef:
  30 └             name: pgbouncer-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgbouncer in sandbox namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgbouncer-deployment-spec.yaml:21-37
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: pgbouncer
  23 │         image: bitnami/pgbouncer:latest
  24 │         ports:
  25 │         - containerPort: 6432
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: pgbouncer-configmap
  29 └         - secretRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgbouncer in deployment pgbouncer (namespace: sandbox) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgbouncer-deployment-spec.yaml:22-37
────────────────────────────────────────
  22 ┌       - name: pgbouncer
  23 │         image: bitnami/pgbouncer:latest
  24 │         ports:
  25 │         - containerPort: 6432
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: pgbouncer-configmap
  29 │         - secretRef:
  30 └             name: pgbouncer-secrets
  ..   
────────────────────────────────────────



pgbouncer.yaml (kubernetes)
===========================
Tests: 108 (SUCCESSES: 95, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'pgbouncer' of Deployment 'pgbouncer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgbouncer.yaml:18-50
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: DB_HOST
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: DB_HOST
  23 │               name: pgbouncer-configs
  24 │         - name: DB_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgbouncer' of Deployment 'pgbouncer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgbouncer.yaml:18-50
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: DB_HOST
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: DB_HOST
  23 │               name: pgbouncer-configs
  24 │         - name: DB_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgbouncer' of Deployment 'pgbouncer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgbouncer.yaml:18-50
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: DB_HOST
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: DB_HOST
  23 │               name: pgbouncer-configs
  24 │         - name: DB_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgbouncer' of Deployment 'pgbouncer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgbouncer.yaml:18-50
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: DB_HOST
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: DB_HOST
  23 │               name: pgbouncer-configs
  24 │         - name: DB_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgbouncer' of Deployment 'pgbouncer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgbouncer.yaml:18-50
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: DB_HOST
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: DB_HOST
  23 │               name: pgbouncer-configs
  24 │         - name: DB_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgbouncer' of Deployment 'pgbouncer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgbouncer.yaml:18-50
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: DB_HOST
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: DB_HOST
  23 │               name: pgbouncer-configs
  24 │         - name: DB_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgbouncer' of Deployment 'pgbouncer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgbouncer.yaml:18-50
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: DB_HOST
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: DB_HOST
  23 │               name: pgbouncer-configs
  24 │         - name: DB_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgbouncer' of Deployment 'pgbouncer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgbouncer.yaml:18-50
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: DB_HOST
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: DB_HOST
  23 │               name: pgbouncer-configs
  24 │         - name: DB_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgbouncer.yaml:18-50
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: DB_HOST
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: DB_HOST
  23 │               name: pgbouncer-configs
  24 │         - name: DB_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgbouncer" of deployment "pgbouncer" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgbouncer.yaml:18-50
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: DB_HOST
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: DB_HOST
  23 │               name: pgbouncer-configs
  24 │         - name: DB_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pgbouncer in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgbouncer.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: pgbouncer
   6 └   name: pgbouncer
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgbouncer in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgbouncer.yaml:17-50
────────────────────────────────────────
  17 ┌       containers:
  18 │       - env:
  19 │         - name: DB_HOST
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: DB_HOST
  23 │               name: pgbouncer-configs
  24 │         - name: DB_PASSWORD
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgbouncer in deployment pgbouncer (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgbouncer.yaml:18-50
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: DB_HOST
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               key: DB_HOST
  23 │               name: pgbouncer-configs
  24 │         - name: DB_PASSWORD
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────



pgpool-deployment.yaml (kubernetes)
===================================
Tests: 108 (SUCCESSES: 96, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgpool' of Deployment 'pgpool-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgpool-deployment.yaml:18-104
────────────────────────────────────────
  18 ┌         - name: pgpool
  19 │           image: docker.io/bitnami/pgpool:4.2.3-debian-10-r38
  20 │           imagePullPolicy: "IfNotPresent"
  21 │           securityContext:
  22 │             runAsUser: 1001
  23 │           resources:
  24 │             requests:
  25 │               cpu: 100m
  26 └               memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgpool' of Deployment 'pgpool-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgpool-deployment.yaml:18-104
────────────────────────────────────────
  18 ┌         - name: pgpool
  19 │           image: docker.io/bitnami/pgpool:4.2.3-debian-10-r38
  20 │           imagePullPolicy: "IfNotPresent"
  21 │           securityContext:
  22 │             runAsUser: 1001
  23 │           resources:
  24 │             requests:
  25 │               cpu: 100m
  26 └               memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgpool' of 'deployment' 'pgpool-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgpool-deployment.yaml:18-104
────────────────────────────────────────
  18 ┌         - name: pgpool
  19 │           image: docker.io/bitnami/pgpool:4.2.3-debian-10-r38
  20 │           imagePullPolicy: "IfNotPresent"
  21 │           securityContext:
  22 │             runAsUser: 1001
  23 │           resources:
  24 │             requests:
  25 │               cpu: 100m
  26 └               memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgpool' of Deployment 'pgpool-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgpool-deployment.yaml:18-104
────────────────────────────────────────
  18 ┌         - name: pgpool
  19 │           image: docker.io/bitnami/pgpool:4.2.3-debian-10-r38
  20 │           imagePullPolicy: "IfNotPresent"
  21 │           securityContext:
  22 │             runAsUser: 1001
  23 │           resources:
  24 │             requests:
  25 │               cpu: 100m
  26 └               memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgpool' of Deployment 'pgpool-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgpool-deployment.yaml:18-104
────────────────────────────────────────
  18 ┌         - name: pgpool
  19 │           image: docker.io/bitnami/pgpool:4.2.3-debian-10-r38
  20 │           imagePullPolicy: "IfNotPresent"
  21 │           securityContext:
  22 │             runAsUser: 1001
  23 │           resources:
  24 │             requests:
  25 │               cpu: 100m
  26 └               memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgpool' of Deployment 'pgpool-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgpool-deployment.yaml:18-104
────────────────────────────────────────
  18 ┌         - name: pgpool
  19 │           image: docker.io/bitnami/pgpool:4.2.3-debian-10-r38
  20 │           imagePullPolicy: "IfNotPresent"
  21 │           securityContext:
  22 │             runAsUser: 1001
  23 │           resources:
  24 │             requests:
  25 │               cpu: 100m
  26 └               memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgpool' of Deployment 'pgpool-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgpool-deployment.yaml:18-104
────────────────────────────────────────
  18 ┌         - name: pgpool
  19 │           image: docker.io/bitnami/pgpool:4.2.3-debian-10-r38
  20 │           imagePullPolicy: "IfNotPresent"
  21 │           securityContext:
  22 │             runAsUser: 1001
  23 │           resources:
  24 │             requests:
  25 │               cpu: 100m
  26 └               memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgpool-deployment.yaml:18-104
────────────────────────────────────────
  18 ┌         - name: pgpool
  19 │           image: docker.io/bitnami/pgpool:4.2.3-debian-10-r38
  20 │           imagePullPolicy: "IfNotPresent"
  21 │           securityContext:
  22 │             runAsUser: 1001
  23 │           resources:
  24 │             requests:
  25 │               cpu: 100m
  26 └               memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgpool" of deployment "pgpool-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgpool-deployment.yaml:18-104
────────────────────────────────────────
  18 ┌         - name: pgpool
  19 │           image: docker.io/bitnami/pgpool:4.2.3-debian-10-r38
  20 │           imagePullPolicy: "IfNotPresent"
  21 │           securityContext:
  22 │             runAsUser: 1001
  23 │           resources:
  24 │             requests:
  25 │               cpu: 100m
  26 └               memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgpool-deployment.yaml:18-104
────────────────────────────────────────
  18 ┌         - name: pgpool
  19 │           image: docker.io/bitnami/pgpool:4.2.3-debian-10-r38
  20 │           imagePullPolicy: "IfNotPresent"
  21 │           securityContext:
  22 │             runAsUser: 1001
  23 │           resources:
  24 │             requests:
  25 │               cpu: 100m
  26 └               memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pgpool-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgpool-deployment.yaml:4
────────────────────────────────────────
   4 [   name: pgpool-deployment
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgpool in deployment pgpool-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgpool-deployment.yaml:18-104
────────────────────────────────────────
  18 ┌         - name: pgpool
  19 │           image: docker.io/bitnami/pgpool:4.2.3-debian-10-r38
  20 │           imagePullPolicy: "IfNotPresent"
  21 │           securityContext:
  22 │             runAsUser: 1001
  23 │           resources:
  24 │             requests:
  25 │               cpu: 100m
  26 └               memory: 128Mi
  ..   
────────────────────────────────────────



pgsql-cm.yaml (kubernetes)
==========================
Tests: 108 (SUCCESSES: 107, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'pgsql' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────
 pgsql-cm.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



pgsql-deployment.yaml (kubernetes)
==================================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'contenedor-postgresql' of Deployment 'pgsql-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgsql-deployment.yaml:21-41
────────────────────────────────────────
  21 ┌         - name: contenedor-postgresql
  22 │           image: postgres:15
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: db-port
  26 │           env:
  27 │             - name: POSTGRES_USER
  28 │               valueFrom:
  29 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'contenedor-postgresql' of Deployment 'pgsql-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgsql-deployment.yaml:21-41
────────────────────────────────────────
  21 ┌         - name: contenedor-postgresql
  22 │           image: postgres:15
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: db-port
  26 │           env:
  27 │             - name: POSTGRES_USER
  28 │               valueFrom:
  29 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'contenedor-postgresql' of 'deployment' 'pgsql-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgsql-deployment.yaml:21-41
────────────────────────────────────────
  21 ┌         - name: contenedor-postgresql
  22 │           image: postgres:15
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: db-port
  26 │           env:
  27 │             - name: POSTGRES_USER
  28 │               valueFrom:
  29 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'contenedor-postgresql' of Deployment 'pgsql-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgsql-deployment.yaml:21-41
────────────────────────────────────────
  21 ┌         - name: contenedor-postgresql
  22 │           image: postgres:15
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: db-port
  26 │           env:
  27 │             - name: POSTGRES_USER
  28 │               valueFrom:
  29 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'contenedor-postgresql' of Deployment 'pgsql-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgsql-deployment.yaml:21-41
────────────────────────────────────────
  21 ┌         - name: contenedor-postgresql
  22 │           image: postgres:15
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: db-port
  26 │           env:
  27 │             - name: POSTGRES_USER
  28 │               valueFrom:
  29 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'contenedor-postgresql' of Deployment 'pgsql-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgsql-deployment.yaml:21-41
────────────────────────────────────────
  21 ┌         - name: contenedor-postgresql
  22 │           image: postgres:15
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: db-port
  26 │           env:
  27 │             - name: POSTGRES_USER
  28 │               valueFrom:
  29 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'contenedor-postgresql' of Deployment 'pgsql-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgsql-deployment.yaml:21-41
────────────────────────────────────────
  21 ┌         - name: contenedor-postgresql
  22 │           image: postgres:15
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: db-port
  26 │           env:
  27 │             - name: POSTGRES_USER
  28 │               valueFrom:
  29 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'contenedor-postgresql' of Deployment 'pgsql-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgsql-deployment.yaml:21-41
────────────────────────────────────────
  21 ┌         - name: contenedor-postgresql
  22 │           image: postgres:15
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: db-port
  26 │           env:
  27 │             - name: POSTGRES_USER
  28 │               valueFrom:
  29 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'contenedor-postgresql' of Deployment 'pgsql-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgsql-deployment.yaml:21-41
────────────────────────────────────────
  21 ┌         - name: contenedor-postgresql
  22 │           image: postgres:15
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: db-port
  26 │           env:
  27 │             - name: POSTGRES_USER
  28 │               valueFrom:
  29 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'contenedor-postgresql' of Deployment 'pgsql-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgsql-deployment.yaml:21-41
────────────────────────────────────────
  21 ┌         - name: contenedor-postgresql
  22 │           image: postgres:15
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: db-port
  26 │           env:
  27 │             - name: POSTGRES_USER
  28 │               valueFrom:
  29 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'contenedor-postgresql' of Deployment 'pgsql-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgsql-deployment.yaml:21-41
────────────────────────────────────────
  21 ┌         - name: contenedor-postgresql
  22 │           image: postgres:15
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: db-port
  26 │           env:
  27 │             - name: POSTGRES_USER
  28 │               valueFrom:
  29 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgsql-deployment.yaml:21-41
────────────────────────────────────────
  21 ┌         - name: contenedor-postgresql
  22 │           image: postgres:15
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: db-port
  26 │           env:
  27 │             - name: POSTGRES_USER
  28 │               valueFrom:
  29 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "contenedor-postgresql" of deployment "pgsql-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgsql-deployment.yaml:21-41
────────────────────────────────────────
  21 ┌         - name: contenedor-postgresql
  22 │           image: postgres:15
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: db-port
  26 │           env:
  27 │             - name: POSTGRES_USER
  28 │               valueFrom:
  29 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgsql-deployment.yaml:21-41
────────────────────────────────────────
  21 ┌         - name: contenedor-postgresql
  22 │           image: postgres:15
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: db-port
  26 │           env:
  27 │             - name: POSTGRES_USER
  28 │               valueFrom:
  29 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pgsql-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgsql-deployment.yaml:4-7
────────────────────────────────────────
   4 ┌   name: pgsql-deployment
   5 │   labels:
   6 │     app: djangogirls
   7 └     type: database
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgsql-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgsql-deployment.yaml:21-41
────────────────────────────────────────
  21 ┌         - name: contenedor-postgresql
  22 │           image: postgres:15
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: db-port
  26 │           env:
  27 │             - name: POSTGRES_USER
  28 │               valueFrom:
  29 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgsql-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgsql-deployment.yaml:20-41
────────────────────────────────────────
  20 ┌       containers:
  21 │         - name: contenedor-postgresql
  22 │           image: postgres:15
  23 │           ports:
  24 │             - containerPort: 5432
  25 │               name: db-port
  26 │           env:
  27 │             - name: POSTGRES_USER
  28 └               valueFrom:
  ..   
────────────────────────────────────────



pgsql-ext-cfg.yaml (kubernetes)
===============================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgsql-ext-cfg.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - configMapRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgsql-ext-cfg.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - configMapRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgsql-ext-cfg.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - configMapRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgsql-ext-cfg.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - configMapRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgsql-ext-cfg.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - configMapRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'postgres' of Deployment 'postgres' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgsql-ext-cfg.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - configMapRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgsql-ext-cfg.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - configMapRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgsql-ext-cfg.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - configMapRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgsql-ext-cfg.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - configMapRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgsql-ext-cfg.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - configMapRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgsql-ext-cfg.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - configMapRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgsql-ext-cfg.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - configMapRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgsql-ext-cfg.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - configMapRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgsql-ext-cfg.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - configMapRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgsql-ext-cfg.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - configMapRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment postgres in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgsql-ext-cfg.yaml:5
────────────────────────────────────────
   5 [   name: postgres
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgsql-ext-cfg.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - configMapRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgsql-ext-cfg.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - configMapRef:
  21 └             name: pgsql
────────────────────────────────────────



pgsql-ext-sec.yaml (kubernetes)
===============================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgsql-ext-sec.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - secretRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgsql-ext-sec.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - secretRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgsql-ext-sec.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - secretRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgsql-ext-sec.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - secretRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgsql-ext-sec.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - secretRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'postgres' of Deployment 'postgres' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgsql-ext-sec.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - secretRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgsql-ext-sec.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - secretRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgsql-ext-sec.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - secretRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgsql-ext-sec.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - secretRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgsql-ext-sec.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - secretRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgsql-ext-sec.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - secretRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgsql-ext-sec.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - secretRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgsql-ext-sec.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - secretRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgsql-ext-sec.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - secretRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgsql-ext-sec.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - secretRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment postgres in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgsql-ext-sec.yaml:5
────────────────────────────────────────
   5 [   name: postgres
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgsql-ext-sec.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - secretRef:
  21 └             name: pgsql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgsql-ext-sec.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: postgres
  18 │         image: postgres
  19 │         envFrom:
  20 │         - secretRef:
  21 └             name: pgsql
────────────────────────────────────────



pgsql-set_1.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgsql-set_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 │           value: supersecret
  22 │         - name: PGDATA
  23 │           value: /data/pgdata
  24 │         volumeMounts:
  25 │         - name: postgres-volume
  26 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of StatefulSet 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgsql-set_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 │           value: supersecret
  22 │         - name: PGDATA
  23 │           value: /data/pgdata
  24 │         volumeMounts:
  25 │         - name: postgres-volume
  26 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'statefulset' 'postgres' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgsql-set_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 │           value: supersecret
  22 │         - name: PGDATA
  23 │           value: /data/pgdata
  24 │         volumeMounts:
  25 │         - name: postgres-volume
  26 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgsql-set_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 │           value: supersecret
  22 │         - name: PGDATA
  23 │           value: /data/pgdata
  24 │         volumeMounts:
  25 │         - name: postgres-volume
  26 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgsql-set_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 │           value: supersecret
  22 │         - name: PGDATA
  23 │           value: /data/pgdata
  24 │         volumeMounts:
  25 │         - name: postgres-volume
  26 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'postgres' of StatefulSet 'postgres' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgsql-set_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 │           value: supersecret
  22 │         - name: PGDATA
  23 │           value: /data/pgdata
  24 │         volumeMounts:
  25 │         - name: postgres-volume
  26 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgsql-set_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 │           value: supersecret
  22 │         - name: PGDATA
  23 │           value: /data/pgdata
  24 │         volumeMounts:
  25 │         - name: postgres-volume
  26 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgsql-set_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 │           value: supersecret
  22 │         - name: PGDATA
  23 │           value: /data/pgdata
  24 │         volumeMounts:
  25 │         - name: postgres-volume
  26 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgsql-set_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 │           value: supersecret
  22 │         - name: PGDATA
  23 │           value: /data/pgdata
  24 │         volumeMounts:
  25 │         - name: postgres-volume
  26 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgsql-set_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 │           value: supersecret
  22 │         - name: PGDATA
  23 │           value: /data/pgdata
  24 │         volumeMounts:
  25 │         - name: postgres-volume
  26 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgsql-set_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 │           value: supersecret
  22 │         - name: PGDATA
  23 │           value: /data/pgdata
  24 │         volumeMounts:
  25 │         - name: postgres-volume
  26 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgsql-set_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 │           value: supersecret
  22 │         - name: PGDATA
  23 │           value: /data/pgdata
  24 │         volumeMounts:
  25 │         - name: postgres-volume
  26 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgsql-set_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 │           value: supersecret
  22 │         - name: PGDATA
  23 │           value: /data/pgdata
  24 │         volumeMounts:
  25 │         - name: postgres-volume
  26 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of statefulset "postgres" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgsql-set_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 │           value: supersecret
  22 │         - name: PGDATA
  23 │           value: /data/pgdata
  24 │         volumeMounts:
  25 │         - name: postgres-volume
  26 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgsql-set_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 │           value: supersecret
  22 │         - name: PGDATA
  23 │           value: /data/pgdata
  24 │         volumeMounts:
  25 │         - name: postgres-volume
  26 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset postgres in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgsql-set_1.yaml:4
────────────────────────────────────────
   4 [   name: postgres
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgsql-set_1.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 │           value: supersecret
  22 │         - name: PGDATA
  23 │           value: /data/pgdata
  24 │         volumeMounts:
  25 │         - name: postgres-volume
  26 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset postgres in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgsql-set_1.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 │           value: supersecret
  22 │         - name: PGDATA
  23 │           value: /data/pgdata
  24 └         volumeMounts:
  ..   
────────────────────────────────────────



pgsql.yaml (kubernetes)
=======================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgsql.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 └           value: "supersecret"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgsql.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 └           value: "supersecret"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgsql.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 └           value: "supersecret"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgsql.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 └           value: "supersecret"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgsql.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 └           value: "supersecret"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'postgres' of Deployment 'postgres' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgsql.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 └           value: "supersecret"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgsql.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 └           value: "supersecret"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgsql.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 └           value: "supersecret"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgsql.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 └           value: "supersecret"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgsql.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 └           value: "supersecret"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgsql.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 └           value: "supersecret"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgsql.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 └           value: "supersecret"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgsql.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 └           value: "supersecret"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgsql.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 └           value: "supersecret"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgsql.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 └           value: "supersecret"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment postgres in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgsql.yaml:5
────────────────────────────────────────
   5 [   name: postgres
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgsql.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 └           value: "supersecret"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgsql.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: postgres
  18 │         image: postgres
  19 │         env:
  20 │         - name: POSTGRES_PASSWORD
  21 └           value: "supersecret"
────────────────────────────────────────



pgsql2.yaml (kubernetes)
========================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgsql2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: yourpassword
  21 │         ports:
  22 └         - containerPort: 5432
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgsql2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: yourpassword
  21 │         ports:
  22 └         - containerPort: 5432
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgsql2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: yourpassword
  21 │         ports:
  22 └         - containerPort: 5432
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Deployment 'postgres-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgsql2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: yourpassword
  21 │         ports:
  22 └         - containerPort: 5432
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgsql2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: yourpassword
  21 │         ports:
  22 └         - containerPort: 5432
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgsql2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: yourpassword
  21 │         ports:
  22 └         - containerPort: 5432
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Deployment 'postgres-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgsql2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: yourpassword
  21 │         ports:
  22 └         - containerPort: 5432
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Deployment 'postgres-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgsql2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: yourpassword
  21 │         ports:
  22 └         - containerPort: 5432
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Deployment 'postgres-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgsql2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: yourpassword
  21 │         ports:
  22 └         - containerPort: 5432
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgsql2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: yourpassword
  21 │         ports:
  22 └         - containerPort: 5432
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgsql2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: yourpassword
  21 │         ports:
  22 └         - containerPort: 5432
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgsql2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: yourpassword
  21 │         ports:
  22 └         - containerPort: 5432
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgsql2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: yourpassword
  21 │         ports:
  22 └         - containerPort: 5432
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgsql2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: yourpassword
  21 │         ports:
  22 └         - containerPort: 5432
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment postgres-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgsql2.yaml:4
────────────────────────────────────────
   4 [   name: postgres-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgsql2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: yourpassword
  21 │         ports:
  22 └         - containerPort: 5432
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgsql2.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: postgres
  17 │         image: postgres:alpine
  18 │         env:
  19 │         - name: POSTGRES_PASSWORD
  20 │           value: yourpassword
  21 │         ports:
  22 └         - containerPort: 5432
────────────────────────────────────────



pgsql2_2.yaml (kubernetes)
==========================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres-client' of Deployment 'postgres-client-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgsql2_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres-client
  17 │         image: postgres:alpine
  18 │         command:
  19 │         - /bin/sh
  20 │         args:
  21 │         - -c
  22 └         - while true; do sleep 30; done;
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres-client' of Deployment 'postgres-client-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgsql2_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres-client
  17 │         image: postgres:alpine
  18 │         command:
  19 │         - /bin/sh
  20 │         args:
  21 │         - -c
  22 └         - while true; do sleep 30; done;
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres-client' of 'deployment' 'postgres-client-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgsql2_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres-client
  17 │         image: postgres:alpine
  18 │         command:
  19 │         - /bin/sh
  20 │         args:
  21 │         - -c
  22 └         - while true; do sleep 30; done;
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres-client' of Deployment 'postgres-client-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgsql2_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres-client
  17 │         image: postgres:alpine
  18 │         command:
  19 │         - /bin/sh
  20 │         args:
  21 │         - -c
  22 └         - while true; do sleep 30; done;
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres-client' of Deployment 'postgres-client-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgsql2_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres-client
  17 │         image: postgres:alpine
  18 │         command:
  19 │         - /bin/sh
  20 │         args:
  21 │         - -c
  22 └         - while true; do sleep 30; done;
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres-client' of Deployment 'postgres-client-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgsql2_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres-client
  17 │         image: postgres:alpine
  18 │         command:
  19 │         - /bin/sh
  20 │         args:
  21 │         - -c
  22 └         - while true; do sleep 30; done;
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres-client' of Deployment 'postgres-client-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgsql2_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres-client
  17 │         image: postgres:alpine
  18 │         command:
  19 │         - /bin/sh
  20 │         args:
  21 │         - -c
  22 └         - while true; do sleep 30; done;
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres-client' of Deployment 'postgres-client-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgsql2_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres-client
  17 │         image: postgres:alpine
  18 │         command:
  19 │         - /bin/sh
  20 │         args:
  21 │         - -c
  22 └         - while true; do sleep 30; done;
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres-client' of Deployment 'postgres-client-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgsql2_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres-client
  17 │         image: postgres:alpine
  18 │         command:
  19 │         - /bin/sh
  20 │         args:
  21 │         - -c
  22 └         - while true; do sleep 30; done;
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres-client' of Deployment 'postgres-client-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgsql2_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres-client
  17 │         image: postgres:alpine
  18 │         command:
  19 │         - /bin/sh
  20 │         args:
  21 │         - -c
  22 └         - while true; do sleep 30; done;
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres-client' of Deployment 'postgres-client-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgsql2_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres-client
  17 │         image: postgres:alpine
  18 │         command:
  19 │         - /bin/sh
  20 │         args:
  21 │         - -c
  22 └         - while true; do sleep 30; done;
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgsql2_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres-client
  17 │         image: postgres:alpine
  18 │         command:
  19 │         - /bin/sh
  20 │         args:
  21 │         - -c
  22 └         - while true; do sleep 30; done;
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres-client" of deployment "postgres-client-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgsql2_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres-client
  17 │         image: postgres:alpine
  18 │         command:
  19 │         - /bin/sh
  20 │         args:
  21 │         - -c
  22 └         - while true; do sleep 30; done;
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgsql2_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres-client
  17 │         image: postgres:alpine
  18 │         command:
  19 │         - /bin/sh
  20 │         args:
  21 │         - -c
  22 └         - while true; do sleep 30; done;
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment postgres-client-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgsql2_2.yaml:4
────────────────────────────────────────
   4 [   name: postgres-client-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres-client-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgsql2_2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: postgres-client
  17 │         image: postgres:alpine
  18 │         command:
  19 │         - /bin/sh
  20 │         args:
  21 │         - -c
  22 └         - while true; do sleep 30; done;
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres-client-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgsql2_2.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: postgres-client
  17 │         image: postgres:alpine
  18 │         command:
  19 │         - /bin/sh
  20 │         args:
  21 │         - -c
  22 └         - while true; do sleep 30; done;
────────────────────────────────────────



pgsql_deployment.yaml (kubernetes)
==================================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgsql_deployment.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgsql_deployment.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgsql_deployment.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Deployment 'postgres-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgsql_deployment.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgsql_deployment.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'postgres' of Deployment 'postgres-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgsql_deployment.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgsql_deployment.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Deployment 'postgres-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgsql_deployment.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Deployment 'postgres-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgsql_deployment.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Deployment 'postgres-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgsql_deployment.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgsql_deployment.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgsql_deployment.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgsql_deployment.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgsql_deployment.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgsql_deployment.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment postgres-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgsql_deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: postgres-deployment
   5 │   labels:
   6 └     app: postgres
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgsql_deployment.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgsql_deployment.yaml:17-44
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 └         - name: POSTGRES_DB
  ..   
────────────────────────────────────────



pgsql_deployment1.yaml (kubernetes)
===================================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgsql_deployment1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgsql_deployment1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgsql_deployment1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Deployment 'postgres-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgsql_deployment1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgsql_deployment1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'postgres' of Deployment 'postgres-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgsql_deployment1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgsql_deployment1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Deployment 'postgres-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgsql_deployment1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Deployment 'postgres-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgsql_deployment1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Deployment 'postgres-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgsql_deployment1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgsql_deployment1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgsql_deployment1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgsql_deployment1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgsql_deployment1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgsql_deployment1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment postgres-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgsql_deployment1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: postgres-deployment
   5 │   labels:
   6 └     app: postgres
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgsql_deployment1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 │         - name: POSTGRES_DB
  26 └           value: mikes_db
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgsql_deployment1.yaml:17-44
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: postgres
  19 │         image: postgres:latest
  20 │         env:
  21 │         - name: POSTGRES_PASSWORD
  22 │           value: mikedb
  23 │         - name: POSTGRES_USER
  24 │           value: mike
  25 └         - name: POSTGRES_DB
  ..   
────────────────────────────────────────



pgsqlgule-classic_1.yaml (kubernetes)
=====================================
Tests: 108 (SUCCESSES: 99, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'svc' of Deployment 'pgsqlgule-dv-classic' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgsqlgule-classic_1.yaml:29-53
────────────────────────────────────────
  29 ┌       - name: svc
  30 │         image: registry.numberly.in/docker-images/postgres-curl-jq:0.1.0
  31 │         imagePullPolicy: IfNotPresent
  32 │         resources:
  33 │           limits:
  34 │             ephemeral-storage: 2Gi
  35 │             memory: 400Mi
  36 │           requests:
  37 └             ephemeral-storage: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'svc' of 'deployment' 'pgsqlgule-dv-classic' in 'demo' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgsqlgule-classic_1.yaml:29-53
────────────────────────────────────────
  29 ┌       - name: svc
  30 │         image: registry.numberly.in/docker-images/postgres-curl-jq:0.1.0
  31 │         imagePullPolicy: IfNotPresent
  32 │         resources:
  33 │           limits:
  34 │             ephemeral-storage: 2Gi
  35 │             memory: 400Mi
  36 │           requests:
  37 └             ephemeral-storage: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'svc' of Deployment 'pgsqlgule-dv-classic' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgsqlgule-classic_1.yaml:29-53
────────────────────────────────────────
  29 ┌       - name: svc
  30 │         image: registry.numberly.in/docker-images/postgres-curl-jq:0.1.0
  31 │         imagePullPolicy: IfNotPresent
  32 │         resources:
  33 │           limits:
  34 │             ephemeral-storage: 2Gi
  35 │             memory: 400Mi
  36 │           requests:
  37 └             ephemeral-storage: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'svc' of Deployment 'pgsqlgule-dv-classic' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgsqlgule-classic_1.yaml:29-53
────────────────────────────────────────
  29 ┌       - name: svc
  30 │         image: registry.numberly.in/docker-images/postgres-curl-jq:0.1.0
  31 │         imagePullPolicy: IfNotPresent
  32 │         resources:
  33 │           limits:
  34 │             ephemeral-storage: 2Gi
  35 │             memory: 400Mi
  36 │           requests:
  37 └             ephemeral-storage: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgsqlgule-classic_1.yaml:29-53
────────────────────────────────────────
  29 ┌       - name: svc
  30 │         image: registry.numberly.in/docker-images/postgres-curl-jq:0.1.0
  31 │         imagePullPolicy: IfNotPresent
  32 │         resources:
  33 │           limits:
  34 │             ephemeral-storage: 2Gi
  35 │             memory: 400Mi
  36 │           requests:
  37 └             ephemeral-storage: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "svc" of deployment "pgsqlgule-dv-classic" in "demo" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgsqlgule-classic_1.yaml:29-53
────────────────────────────────────────
  29 ┌       - name: svc
  30 │         image: registry.numberly.in/docker-images/postgres-curl-jq:0.1.0
  31 │         imagePullPolicy: IfNotPresent
  32 │         resources:
  33 │           limits:
  34 │             ephemeral-storage: 2Gi
  35 │             memory: 400Mi
  36 │           requests:
  37 └             ephemeral-storage: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgsqlgule-classic_1.yaml:29-53
────────────────────────────────────────
  29 ┌       - name: svc
  30 │         image: registry.numberly.in/docker-images/postgres-curl-jq:0.1.0
  31 │         imagePullPolicy: IfNotPresent
  32 │         resources:
  33 │           limits:
  34 │             ephemeral-storage: 2Gi
  35 │             memory: 400Mi
  36 │           requests:
  37 └             ephemeral-storage: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgsqlgule-dv-classic in demo namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgsqlgule-classic_1.yaml:24-53
────────────────────────────────────────
  24 ┌       serviceAccountName: pgsqlgule-dv
  25 │       imagePullSecrets:
  26 │       - name: registry-token
  27 │       - name: registry-token-common
  28 │       containers:
  29 │       - name: svc
  30 │         image: registry.numberly.in/docker-images/postgres-curl-jq:0.1.0
  31 │         imagePullPolicy: IfNotPresent
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container svc in deployment pgsqlgule-dv-classic (namespace: demo) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgsqlgule-classic_1.yaml:29-53
────────────────────────────────────────
  29 ┌       - name: svc
  30 │         image: registry.numberly.in/docker-images/postgres-curl-jq:0.1.0
  31 │         imagePullPolicy: IfNotPresent
  32 │         resources:
  33 │           limits:
  34 │             ephemeral-storage: 2Gi
  35 │             memory: 400Mi
  36 │           requests:
  37 └             ephemeral-storage: 512Mi
  ..   
────────────────────────────────────────



pgsqlgule-uri_1.yaml (kubernetes)
=================================
Tests: 108 (SUCCESSES: 99, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'svc' of Deployment 'pgsqlgule-dv-uri' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgsqlgule-uri_1.yaml:29-48
────────────────────────────────────────
  29 ┌       - name: svc
  30 │         image: registry.numberly.in/docker-images/postgres-curl-jq:0.1.0
  31 │         imagePullPolicy: IfNotPresent
  32 │         resources:
  33 │           limits:
  34 │             ephemeral-storage: 2Gi
  35 │             memory: 400Mi
  36 │           requests:
  37 └             ephemeral-storage: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'svc' of 'deployment' 'pgsqlgule-dv-uri' in 'demo' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgsqlgule-uri_1.yaml:29-48
────────────────────────────────────────
  29 ┌       - name: svc
  30 │         image: registry.numberly.in/docker-images/postgres-curl-jq:0.1.0
  31 │         imagePullPolicy: IfNotPresent
  32 │         resources:
  33 │           limits:
  34 │             ephemeral-storage: 2Gi
  35 │             memory: 400Mi
  36 │           requests:
  37 └             ephemeral-storage: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'svc' of Deployment 'pgsqlgule-dv-uri' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgsqlgule-uri_1.yaml:29-48
────────────────────────────────────────
  29 ┌       - name: svc
  30 │         image: registry.numberly.in/docker-images/postgres-curl-jq:0.1.0
  31 │         imagePullPolicy: IfNotPresent
  32 │         resources:
  33 │           limits:
  34 │             ephemeral-storage: 2Gi
  35 │             memory: 400Mi
  36 │           requests:
  37 └             ephemeral-storage: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'svc' of Deployment 'pgsqlgule-dv-uri' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgsqlgule-uri_1.yaml:29-48
────────────────────────────────────────
  29 ┌       - name: svc
  30 │         image: registry.numberly.in/docker-images/postgres-curl-jq:0.1.0
  31 │         imagePullPolicy: IfNotPresent
  32 │         resources:
  33 │           limits:
  34 │             ephemeral-storage: 2Gi
  35 │             memory: 400Mi
  36 │           requests:
  37 └             ephemeral-storage: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgsqlgule-uri_1.yaml:29-48
────────────────────────────────────────
  29 ┌       - name: svc
  30 │         image: registry.numberly.in/docker-images/postgres-curl-jq:0.1.0
  31 │         imagePullPolicy: IfNotPresent
  32 │         resources:
  33 │           limits:
  34 │             ephemeral-storage: 2Gi
  35 │             memory: 400Mi
  36 │           requests:
  37 └             ephemeral-storage: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "svc" of deployment "pgsqlgule-dv-uri" in "demo" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgsqlgule-uri_1.yaml:29-48
────────────────────────────────────────
  29 ┌       - name: svc
  30 │         image: registry.numberly.in/docker-images/postgres-curl-jq:0.1.0
  31 │         imagePullPolicy: IfNotPresent
  32 │         resources:
  33 │           limits:
  34 │             ephemeral-storage: 2Gi
  35 │             memory: 400Mi
  36 │           requests:
  37 └             ephemeral-storage: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgsqlgule-uri_1.yaml:29-48
────────────────────────────────────────
  29 ┌       - name: svc
  30 │         image: registry.numberly.in/docker-images/postgres-curl-jq:0.1.0
  31 │         imagePullPolicy: IfNotPresent
  32 │         resources:
  33 │           limits:
  34 │             ephemeral-storage: 2Gi
  35 │             memory: 400Mi
  36 │           requests:
  37 └             ephemeral-storage: 512Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgsqlgule-dv-uri in demo namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgsqlgule-uri_1.yaml:24-48
────────────────────────────────────────
  24 ┌       serviceAccountName: pgsqlgule-dv
  25 │       imagePullSecrets:
  26 │       - name: registry-token
  27 │       - name: registry-token-common
  28 │       containers:
  29 │       - name: svc
  30 │         image: registry.numberly.in/docker-images/postgres-curl-jq:0.1.0
  31 │         imagePullPolicy: IfNotPresent
  32 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container svc in deployment pgsqlgule-dv-uri (namespace: demo) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgsqlgule-uri_1.yaml:29-48
────────────────────────────────────────
  29 ┌       - name: svc
  30 │         image: registry.numberly.in/docker-images/postgres-curl-jq:0.1.0
  31 │         imagePullPolicy: IfNotPresent
  32 │         resources:
  33 │           limits:
  34 │             ephemeral-storage: 2Gi
  35 │             memory: 400Mi
  36 │           requests:
  37 └             ephemeral-storage: 512Mi
  ..   
────────────────────────────────────────



pgvector-deployment.yaml (kubernetes)
=====================================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgvector' of Deployment 'pgvector' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgvector-deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgvector' of Deployment 'pgvector' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgvector-deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgvector' of 'deployment' 'pgvector' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgvector-deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgvector' of Deployment 'pgvector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgvector-deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgvector' of Deployment 'pgvector' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgvector-deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgvector' of Deployment 'pgvector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgvector-deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgvector' of Deployment 'pgvector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgvector-deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgvector' of Deployment 'pgvector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgvector-deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgvector' of Deployment 'pgvector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgvector-deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgvector' of Deployment 'pgvector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgvector-deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgvector' of Deployment 'pgvector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgvector-deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgvector-deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgvector" of deployment "pgvector" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgvector-deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgvector-deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pgvector in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgvector-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pgvector
   5 │   labels:
   6 └     app: pgvector
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgvector in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgvector-deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgvector in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgvector-deployment.yaml:17-37
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgvector in deployment pgvector (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgvector-deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────



pgvector-deployment1.yaml (kubernetes)
======================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vectordb' of Deployment 'vectordb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgvector-deployment1.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vectordb' of Deployment 'vectordb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgvector-deployment1.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vectordb' of 'deployment' 'vectordb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgvector-deployment1.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vectordb' of Deployment 'vectordb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgvector-deployment1.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vectordb' of Deployment 'vectordb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgvector-deployment1.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vectordb' of Deployment 'vectordb' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgvector-deployment1.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vectordb' of Deployment 'vectordb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgvector-deployment1.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vectordb' of Deployment 'vectordb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgvector-deployment1.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vectordb' of Deployment 'vectordb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgvector-deployment1.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vectordb' of Deployment 'vectordb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgvector-deployment1.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vectordb' of Deployment 'vectordb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgvector-deployment1.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vectordb' of Deployment 'vectordb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgvector-deployment1.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgvector-deployment1.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vectordb" of deployment "vectordb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgvector-deployment1.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgvector-deployment1.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vectordb in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgvector-deployment1.yaml:4
────────────────────────────────────────
   4 [   name: vectordb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vectordb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgvector-deployment1.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vectordb in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgvector-deployment1.yaml:16-41
────────────────────────────────────────
  16 ┌       affinity:
  17 │         nodeAffinity:
  18 │           requiredDuringSchedulingIgnoredDuringExecution:
  19 │             nodeSelectorTerms:
  20 │             - matchExpressions:
  21 │               - key: kubernetes.azure.com/role
  22 │                 operator: In
  23 │                 values:
  24 └                 - agent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vectordb in deployment vectordb (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgvector-deployment1.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────



pgvector-deployment2.yaml (kubernetes)
======================================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgvector' of Deployment 'pgvector' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgvector-deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgvector' of Deployment 'pgvector' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgvector-deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgvector' of 'deployment' 'pgvector' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgvector-deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgvector' of Deployment 'pgvector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgvector-deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgvector' of Deployment 'pgvector' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgvector-deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgvector' of Deployment 'pgvector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgvector-deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgvector' of Deployment 'pgvector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgvector-deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgvector' of Deployment 'pgvector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgvector-deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgvector' of Deployment 'pgvector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgvector-deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgvector' of Deployment 'pgvector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgvector-deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgvector' of Deployment 'pgvector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgvector-deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgvector-deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgvector" of deployment "pgvector" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgvector-deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgvector-deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pgvector in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgvector-deployment2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pgvector
   5 │   labels:
   6 └     app: pgvector
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgvector in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgvector-deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgvector in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgvector-deployment2.yaml:17-37
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgvector in deployment pgvector (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgvector-deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: pgvector
  19 │         image: pgvector/pgvector:pg17
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_USER
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: pgvector
  ..   
────────────────────────────────────────



pgvector-deployment3.yaml (kubernetes)
======================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vectordb' of Deployment 'vectordb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgvector-deployment3.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vectordb' of Deployment 'vectordb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgvector-deployment3.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vectordb' of 'deployment' 'vectordb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgvector-deployment3.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vectordb' of Deployment 'vectordb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgvector-deployment3.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vectordb' of Deployment 'vectordb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgvector-deployment3.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vectordb' of Deployment 'vectordb' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgvector-deployment3.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vectordb' of Deployment 'vectordb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgvector-deployment3.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vectordb' of Deployment 'vectordb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgvector-deployment3.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vectordb' of Deployment 'vectordb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgvector-deployment3.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vectordb' of Deployment 'vectordb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgvector-deployment3.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vectordb' of Deployment 'vectordb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgvector-deployment3.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vectordb' of Deployment 'vectordb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgvector-deployment3.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgvector-deployment3.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vectordb" of deployment "vectordb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgvector-deployment3.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgvector-deployment3.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vectordb in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgvector-deployment3.yaml:4
────────────────────────────────────────
   4 [   name: vectordb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vectordb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgvector-deployment3.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vectordb in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgvector-deployment3.yaml:16-41
────────────────────────────────────────
  16 ┌       affinity:
  17 │         nodeAffinity:
  18 │           requiredDuringSchedulingIgnoredDuringExecution:
  19 │             nodeSelectorTerms:
  20 │             - matchExpressions:
  21 │               - key: kubernetes.azure.com/role
  22 │                 operator: In
  23 │                 values:
  24 └                 - agent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vectordb in deployment vectordb (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgvector-deployment3.yaml:26-37
────────────────────────────────────────
  26 ┌       - name: vectordb
  27 │         image: ankane/pgvector:latest
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 5432
  31 │         envFrom:
  32 │         - secretRef:
  33 │             name: vectordb-secrets
  34 └         volumeMounts:
  ..   
────────────────────────────────────────



pgweb_1.yaml (kubernetes)
=========================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pgweb' of Deployment 'pgweb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pgweb_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgweb
  17 │         image: sosedoff/pgweb
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: DATABASE_URL
  21 │           value: postgres://demouser:demopasswd@cockroachdb-public:26257/defaultdb
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pgweb' of Deployment 'pgweb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pgweb_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgweb
  17 │         image: sosedoff/pgweb
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: DATABASE_URL
  21 │           value: postgres://demouser:demopasswd@cockroachdb-public:26257/defaultdb
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pgweb' of 'deployment' 'pgweb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pgweb_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgweb
  17 │         image: sosedoff/pgweb
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: DATABASE_URL
  21 │           value: postgres://demouser:demopasswd@cockroachdb-public:26257/defaultdb
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pgweb' of Deployment 'pgweb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pgweb_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgweb
  17 │         image: sosedoff/pgweb
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: DATABASE_URL
  21 │           value: postgres://demouser:demopasswd@cockroachdb-public:26257/defaultdb
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pgweb' of Deployment 'pgweb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pgweb_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgweb
  17 │         image: sosedoff/pgweb
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: DATABASE_URL
  21 │           value: postgres://demouser:demopasswd@cockroachdb-public:26257/defaultdb
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pgweb' of Deployment 'pgweb' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pgweb_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgweb
  17 │         image: sosedoff/pgweb
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: DATABASE_URL
  21 │           value: postgres://demouser:demopasswd@cockroachdb-public:26257/defaultdb
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pgweb' of Deployment 'pgweb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pgweb_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgweb
  17 │         image: sosedoff/pgweb
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: DATABASE_URL
  21 │           value: postgres://demouser:demopasswd@cockroachdb-public:26257/defaultdb
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pgweb' of Deployment 'pgweb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pgweb_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgweb
  17 │         image: sosedoff/pgweb
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: DATABASE_URL
  21 │           value: postgres://demouser:demopasswd@cockroachdb-public:26257/defaultdb
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pgweb' of Deployment 'pgweb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pgweb_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgweb
  17 │         image: sosedoff/pgweb
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: DATABASE_URL
  21 │           value: postgres://demouser:demopasswd@cockroachdb-public:26257/defaultdb
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pgweb' of Deployment 'pgweb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pgweb_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgweb
  17 │         image: sosedoff/pgweb
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: DATABASE_URL
  21 │           value: postgres://demouser:demopasswd@cockroachdb-public:26257/defaultdb
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pgweb' of Deployment 'pgweb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pgweb_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgweb
  17 │         image: sosedoff/pgweb
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: DATABASE_URL
  21 │           value: postgres://demouser:demopasswd@cockroachdb-public:26257/defaultdb
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pgweb' of Deployment 'pgweb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pgweb_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgweb
  17 │         image: sosedoff/pgweb
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: DATABASE_URL
  21 │           value: postgres://demouser:demopasswd@cockroachdb-public:26257/defaultdb
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pgweb_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgweb
  17 │         image: sosedoff/pgweb
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: DATABASE_URL
  21 │           value: postgres://demouser:demopasswd@cockroachdb-public:26257/defaultdb
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pgweb" of deployment "pgweb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pgweb_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgweb
  17 │         image: sosedoff/pgweb
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: DATABASE_URL
  21 │           value: postgres://demouser:demopasswd@cockroachdb-public:26257/defaultdb
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pgweb_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgweb
  17 │         image: sosedoff/pgweb
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: DATABASE_URL
  21 │           value: postgres://demouser:demopasswd@cockroachdb-public:26257/defaultdb
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pgweb in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pgweb_1.yaml:4
────────────────────────────────────────
   4 [   name: pgweb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pgweb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgweb_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgweb
  17 │         image: sosedoff/pgweb
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: DATABASE_URL
  21 │           value: postgres://demouser:demopasswd@cockroachdb-public:26257/defaultdb
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pgweb in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pgweb_1.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: pgweb
  17 │         image: sosedoff/pgweb
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: DATABASE_URL
  21 │           value: postgres://demouser:demopasswd@cockroachdb-public:26257/defaultdb
  22 │         ports:
  23 │         - containerPort: 8081
  24 └       restartPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pgweb in deployment pgweb (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pgweb_1.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: pgweb
  17 │         image: sosedoff/pgweb
  18 │         imagePullPolicy: Always
  19 │         env:
  20 │         - name: DATABASE_URL
  21 │           value: postgres://demouser:demopasswd@cockroachdb-public:26257/defaultdb
  22 │         ports:
  23 └         - containerPort: 8081
────────────────────────────────────────



photosmngservice.-dpl.yaml (kubernetes)
=======================================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'photosmngservice' of Deployment 'photosmngservice-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 photosmngservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: photosmngservice
  17 └         image: us.gcr.io/image-project-123/photosmngservice
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'photosmngservice' of Deployment 'photosmngservice-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 photosmngservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: photosmngservice
  17 └         image: us.gcr.io/image-project-123/photosmngservice
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'photosmngservice' of 'deployment' 'photosmngservice-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 photosmngservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: photosmngservice
  17 └         image: us.gcr.io/image-project-123/photosmngservice
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'photosmngservice' of Deployment 'photosmngservice-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 photosmngservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: photosmngservice
  17 └         image: us.gcr.io/image-project-123/photosmngservice
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'photosmngservice' of Deployment 'photosmngservice-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 photosmngservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: photosmngservice
  17 └         image: us.gcr.io/image-project-123/photosmngservice
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'photosmngservice' of Deployment 'photosmngservice-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 photosmngservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: photosmngservice
  17 └         image: us.gcr.io/image-project-123/photosmngservice
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'photosmngservice' of Deployment 'photosmngservice-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 photosmngservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: photosmngservice
  17 └         image: us.gcr.io/image-project-123/photosmngservice
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'photosmngservice' of Deployment 'photosmngservice-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 photosmngservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: photosmngservice
  17 └         image: us.gcr.io/image-project-123/photosmngservice
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'photosmngservice' of Deployment 'photosmngservice-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 photosmngservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: photosmngservice
  17 └         image: us.gcr.io/image-project-123/photosmngservice
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'photosmngservice' of Deployment 'photosmngservice-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 photosmngservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: photosmngservice
  17 └         image: us.gcr.io/image-project-123/photosmngservice
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'photosmngservice' of Deployment 'photosmngservice-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 photosmngservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: photosmngservice
  17 └         image: us.gcr.io/image-project-123/photosmngservice
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'photosmngservice' of Deployment 'photosmngservice-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 photosmngservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: photosmngservice
  17 └         image: us.gcr.io/image-project-123/photosmngservice
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 photosmngservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: photosmngservice
  17 └         image: us.gcr.io/image-project-123/photosmngservice
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "photosmngservice" of deployment "photosmngservice-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 photosmngservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: photosmngservice
  17 └         image: us.gcr.io/image-project-123/photosmngservice
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 photosmngservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: photosmngservice
  17 └         image: us.gcr.io/image-project-123/photosmngservice
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment photosmngservice-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 photosmngservice.-dpl.yaml:4
────────────────────────────────────────
   4 [   name: photosmngservice-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container photosmngservice-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 photosmngservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: photosmngservice
  17 └         image: us.gcr.io/image-project-123/photosmngservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment photosmngservice-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 photosmngservice.-dpl.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: photosmngservice
  17 └         image: us.gcr.io/image-project-123/photosmngservice
────────────────────────────────────────



php-apache-deployment.yaml (kubernetes)
=======================================
Tests: 109 (SUCCESSES: 94, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-apache-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: "password"
  24 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-apache' of Deployment 'php-apache' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-apache-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: "password"
  24 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-apache' of 'deployment' 'php-apache' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-apache-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: "password"
  24 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-apache-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: "password"
  24 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-apache-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: "password"
  24 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-apache-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: "password"
  24 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-apache-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: "password"
  24 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-apache-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: "password"
  24 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-apache-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: "password"
  24 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-apache" of deployment "php-apache" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-apache-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: "password"
  24 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-apache-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: "password"
  24 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment php-apache in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-apache-deployment.yaml:4
────────────────────────────────────────
   4 [   name: php-apache
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment php-apache in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-apache in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache-deployment.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: "password"
  24 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-apache in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache-deployment.yaml:15-30
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 └           value: "password"
  ..   
────────────────────────────────────────



php-apache-deployment1.yaml (kubernetes)
========================================
Tests: 109 (SUCCESSES: 94, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-apache-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             memory: "64Mi"
  24 └             cpu: "200m"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-apache' of Deployment 'php-apache' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-apache-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             memory: "64Mi"
  24 └             cpu: "200m"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-apache' of 'deployment' 'php-apache' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-apache-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             memory: "64Mi"
  24 └             cpu: "200m"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-apache-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             memory: "64Mi"
  24 └             cpu: "200m"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-apache-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             memory: "64Mi"
  24 └             cpu: "200m"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-apache-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             memory: "64Mi"
  24 └             cpu: "200m"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-apache-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             memory: "64Mi"
  24 └             cpu: "200m"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-apache-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             memory: "64Mi"
  24 └             cpu: "200m"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-apache-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             memory: "64Mi"
  24 └             cpu: "200m"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-apache" of deployment "php-apache" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-apache-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             memory: "64Mi"
  24 └             cpu: "200m"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-apache-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             memory: "64Mi"
  24 └             cpu: "200m"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment php-apache in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-apache-deployment1.yaml:4
────────────────────────────────────────
   4 [   name: php-apache
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment php-apache in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-apache in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache-deployment1.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             memory: "64Mi"
  24 └             cpu: "200m"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-apache in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache-deployment1.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 └             memory: "64Mi"
  ..   
────────────────────────────────────────



php-apache-deployment2.yaml (kubernetes)
========================================
Tests: 109 (SUCCESSES: 94, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-apache-deployment2.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             memory: "64Mi"
  24 └             cpu: "200m"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-apache' of Deployment 'php-apache' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-apache-deployment2.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             memory: "64Mi"
  24 └             cpu: "200m"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-apache' of 'deployment' 'php-apache' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-apache-deployment2.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             memory: "64Mi"
  24 └             cpu: "200m"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-apache-deployment2.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             memory: "64Mi"
  24 └             cpu: "200m"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-apache-deployment2.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             memory: "64Mi"
  24 └             cpu: "200m"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-apache-deployment2.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             memory: "64Mi"
  24 └             cpu: "200m"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-apache-deployment2.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             memory: "64Mi"
  24 └             cpu: "200m"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-apache-deployment2.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             memory: "64Mi"
  24 └             cpu: "200m"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-apache-deployment2.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             memory: "64Mi"
  24 └             cpu: "200m"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-apache" of deployment "php-apache" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-apache-deployment2.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             memory: "64Mi"
  24 └             cpu: "200m"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-apache-deployment2.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             memory: "64Mi"
  24 └             cpu: "200m"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment php-apache in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-apache-deployment2.yaml:4
────────────────────────────────────────
   4 [   name: php-apache
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment php-apache in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-apache in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache-deployment2.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             memory: "64Mi"
  24 └             cpu: "200m"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-apache in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache-deployment2.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         imagePullPolicy: IfNotPresent        
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 └             memory: "64Mi"
  ..   
────────────────────────────────────────



php-apache10.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 9, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-apache10.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-apache' of Deployment 'php-apache' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-apache10.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-apache' of 'deployment' 'php-apache' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-apache10.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-apache10.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-apache10.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-apache10.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-apache10.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-apache10.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-apache10.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-apache10.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-apache10.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-apache" of deployment "php-apache" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-apache10.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-apache10.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment php-apache in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-apache10.yaml:4
────────────────────────────────────────
   4 [   name: php-apache
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment php-apache in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-apache in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache10.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-apache in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache10.yaml:14-23
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container php-apache in deployment php-apache (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 php-apache10.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────



php-apache11_1.yaml (kubernetes)
================================
Tests: 109 (SUCCESSES: 95, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-apache11_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: php-apache
  18 │         image: k8s.gcr.io/hpa-example
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 256Mi
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-apache' of Deployment 'php-apache' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-apache11_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: php-apache
  18 │         image: k8s.gcr.io/hpa-example
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 256Mi
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-apache' of 'deployment' 'php-apache' in 'staging' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-apache11_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: php-apache
  18 │         image: k8s.gcr.io/hpa-example
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 256Mi
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-apache11_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: php-apache
  18 │         image: k8s.gcr.io/hpa-example
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 256Mi
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-apache11_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: php-apache
  18 │         image: k8s.gcr.io/hpa-example
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 256Mi
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-apache11_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: php-apache
  18 │         image: k8s.gcr.io/hpa-example
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 256Mi
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-apache11_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: php-apache
  18 │         image: k8s.gcr.io/hpa-example
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 256Mi
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-apache11_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: php-apache
  18 │         image: k8s.gcr.io/hpa-example
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 256Mi
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-apache11_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: php-apache
  18 │         image: k8s.gcr.io/hpa-example
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 256Mi
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-apache" of deployment "php-apache" in "staging" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-apache11_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: php-apache
  18 │         image: k8s.gcr.io/hpa-example
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 256Mi
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-apache11_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: php-apache
  18 │         image: k8s.gcr.io/hpa-example
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 256Mi
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment php-apache in staging namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-apache in staging namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache11_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: php-apache
  18 │         image: k8s.gcr.io/hpa-example
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 256Mi
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-apache in staging namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache11_1.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: php-apache
  18 │         image: k8s.gcr.io/hpa-example
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 └             memory: 256Mi
  ..   
────────────────────────────────────────



php-apache12.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-apache12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-apache' of Deployment 'php-apache' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-apache12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-apache' of 'deployment' 'php-apache' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-apache12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-apache12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-apache12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-apache12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-apache12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-apache12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-apache12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-apache12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-apache12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-apache" of deployment "php-apache" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-apache12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-apache12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment php-apache in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-apache12.yaml:4
────────────────────────────────────────
   4 [   name: php-apache
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment php-apache in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-apache in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache12.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-apache in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache12.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────



php-apache13.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-apache13.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-apache' of Deployment 'php-apache' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-apache13.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-apache' of 'deployment' 'php-apache' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-apache13.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-apache13.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-apache13.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-apache13.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-apache13.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-apache13.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-apache13.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-apache13.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-apache13.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-apache" of deployment "php-apache" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-apache13.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-apache13.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment php-apache in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-apache13.yaml:4
────────────────────────────────────────
   4 [   name: php-apache
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment php-apache in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-apache in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache13.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-apache in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache13.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────



php-apache14.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 9, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-apache14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-apache' of Deployment 'php-apache' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-apache14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-apache' of 'deployment' 'php-apache' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-apache14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-apache14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-apache14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-apache14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-apache14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-apache14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-apache14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-apache14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-apache14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-apache" of deployment "php-apache" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-apache14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-apache14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment php-apache in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-apache14.yaml:4
────────────────────────────────────────
   4 [   name: php-apache
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment php-apache in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-apache in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-apache in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache14.yaml:14-23
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container php-apache in deployment php-apache (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 php-apache14.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────



php-apache16.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 94, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-apache16.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 │             cpu: 100m
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-apache' of Deployment 'php-apache' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-apache16.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 │             cpu: 100m
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-apache' of 'deployment' 'php-apache' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-apache16.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 │             cpu: 100m
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-apache16.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 │             cpu: 100m
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-apache16.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 │             cpu: 100m
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-apache16.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 │             cpu: 100m
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-apache16.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 │             cpu: 100m
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-apache16.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 │             cpu: 100m
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-apache16.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 │             cpu: 100m
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-apache" of deployment "php-apache" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-apache16.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 │             cpu: 100m
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-apache16.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 │             cpu: 100m
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment php-apache in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-apache16.yaml:4
────────────────────────────────────────
   4 [   name: php-apache
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment php-apache in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-apache in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache16.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 │             cpu: 100m
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-apache in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache16.yaml:15-26
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 └             cpu: 100m
  ..   
────────────────────────────────────────



php-apache17.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 9, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-apache17.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-apache' of Deployment 'php-apache' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-apache17.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-apache' of 'deployment' 'php-apache' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-apache17.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-apache17.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-apache17.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-apache17.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-apache17.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-apache17.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-apache17.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-apache17.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-apache17.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-apache" of deployment "php-apache" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-apache17.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-apache17.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment php-apache in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-apache17.yaml:4
────────────────────────────────────────
   4 [   name: php-apache
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment php-apache in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-apache in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache17.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-apache in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache17.yaml:14-23
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container php-apache in deployment php-apache (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 php-apache17.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────



php-apache18.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 94, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-apache18.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 │             cpu: 100m
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-apache' of Deployment 'php-apache' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-apache18.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 │             cpu: 100m
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-apache' of 'deployment' 'php-apache' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-apache18.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 │             cpu: 100m
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-apache18.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 │             cpu: 100m
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-apache18.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 │             cpu: 100m
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-apache18.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 │             cpu: 100m
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-apache18.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 │             cpu: 100m
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-apache18.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 │             cpu: 100m
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-apache18.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 │             cpu: 100m
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-apache" of deployment "php-apache" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-apache18.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 │             cpu: 100m
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-apache18.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 │             cpu: 100m
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment php-apache in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-apache18.yaml:4
────────────────────────────────────────
   4 [   name: php-apache
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment php-apache in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-apache in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache18.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 │             cpu: 100m
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-apache in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache18.yaml:15-26
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             memory: 500Mi
  23 └             cpu: 100m
  ..   
────────────────────────────────────────



php-apache3.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-apache3.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-apache' of Deployment 'php-apache' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-apache3.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-apache' of 'deployment' 'php-apache' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-apache3.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-apache3.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-apache3.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-apache3.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-apache3.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-apache3.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-apache3.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-apache3.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-apache3.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-apache" of deployment "php-apache" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-apache3.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-apache3.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment php-apache in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-apache3.yaml:4
────────────────────────────────────────
   4 [   name: php-apache
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment php-apache in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-apache in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache3.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-apache in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache3.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────



php-apache4.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 9, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-apache4.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: saramashat/php-apache:latest
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 │           requests:
  25 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-apache' of Deployment 'php-apache' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-apache4.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: saramashat/php-apache:latest
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 │           requests:
  25 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-apache' of 'deployment' 'php-apache' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-apache4.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: saramashat/php-apache:latest
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 │           requests:
  25 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-apache4.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: saramashat/php-apache:latest
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 │           requests:
  25 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-apache4.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: saramashat/php-apache:latest
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 │           requests:
  25 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-apache4.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: saramashat/php-apache:latest
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 │           requests:
  25 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-apache4.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: saramashat/php-apache:latest
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 │           requests:
  25 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-apache4.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: saramashat/php-apache:latest
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 │           requests:
  25 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-apache4.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: saramashat/php-apache:latest
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 │           requests:
  25 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-apache4.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: saramashat/php-apache:latest
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 │           requests:
  25 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-apache4.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: saramashat/php-apache:latest
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 │           requests:
  25 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-apache" of deployment "php-apache" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-apache4.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: saramashat/php-apache:latest
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 │           requests:
  25 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-apache4.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: saramashat/php-apache:latest
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 │           requests:
  25 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment php-apache in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-apache4.yaml:4
────────────────────────────────────────
   4 [   name: php-apache
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment php-apache in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-apache in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache4.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: saramashat/php-apache:latest
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 │           requests:
  25 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-apache in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache4.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: php-apache
  17 │         image: saramashat/php-apache:latest
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container php-apache in deployment php-apache (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 php-apache4.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: saramashat/php-apache:latest
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 80
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 │           requests:
  25 └             cpu: 200m
────────────────────────────────────────



php-apache5.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 9, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-apache5.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-apache' of Deployment 'php-apache' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-apache5.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-apache' of 'deployment' 'php-apache' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-apache5.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-apache5.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-apache5.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-apache5.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-apache5.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-apache5.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-apache5.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-apache5.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-apache5.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-apache" of deployment "php-apache" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-apache5.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-apache5.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment php-apache in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-apache5.yaml:4
────────────────────────────────────────
   4 [   name: php-apache
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment php-apache in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-apache in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache5.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-apache in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache5.yaml:14-23
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container php-apache in deployment php-apache (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 php-apache5.yaml:15-23
────────────────────────────────────────
  15 ┌       - name: php-apache
  16 │         image: registry.k8s.io/hpa-example
  17 │         ports:
  18 │         - containerPort: 80
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │           requests:
  23 └             cpu: 200m
────────────────────────────────────────



php-apache8.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-apache8.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-apache' of Deployment 'php-apache' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-apache8.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-apache' of 'deployment' 'php-apache' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-apache8.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-apache8.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-apache8.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-apache8.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-apache8.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-apache8.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-apache8.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-apache8.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-apache8.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-apache" of deployment "php-apache" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-apache8.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-apache8.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment php-apache in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-apache8.yaml:4
────────────────────────────────────────
   4 [   name: php-apache
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment php-apache in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-apache in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache8.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-apache in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache8.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────



php-apache9.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-apache9.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-apache' of Deployment 'php-apache' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-apache9.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-apache' of 'deployment' 'php-apache' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-apache9.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-apache9.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'php-apache' of Deployment 'php-apache' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-apache9.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-apache9.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-apache9.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-apache9.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-apache9.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-apache' of Deployment 'php-apache' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-apache9.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-apache9.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-apache" of deployment "php-apache" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-apache9.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-apache9.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment php-apache in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-apache9.yaml:4
────────────────────────────────────────
   4 [   name: php-apache
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment php-apache in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-apache in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache9.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-apache in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-apache9.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: php-apache
  17 │         image: k8s.gcr.io/hpa-example
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           limits:
  22 │             cpu: 500m
  23 │           requests:
  24 └             cpu: 200m
────────────────────────────────────────



php-app-deployment.yaml (kubernetes)
====================================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-container' of Deployment 'php-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: php-container
  17 │         image: php:7.1-apache
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-container' of Deployment 'php-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: php-container
  17 │         image: php:7.1-apache
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-container' of 'deployment' 'php-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: php-container
  17 │         image: php:7.1-apache
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'php-container' of Deployment 'php-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 php-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: php-container
  17 │         image: php:7.1-apache
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-container' of Deployment 'php-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: php-container
  17 │         image: php:7.1-apache
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-container' of Deployment 'php-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: php-container
  17 │         image: php:7.1-apache
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'php-container' of Deployment 'php-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 php-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: php-container
  17 │         image: php:7.1-apache
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php-container' of Deployment 'php-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: php-container
  17 │         image: php:7.1-apache
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php-container' of Deployment 'php-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: php-container
  17 │         image: php:7.1-apache
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-container' of Deployment 'php-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: php-container
  17 │         image: php:7.1-apache
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-container' of Deployment 'php-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: php-container
  17 │         image: php:7.1-apache
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: php-container
  17 │         image: php:7.1-apache
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-container" of deployment "php-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: php-container
  17 │         image: php:7.1-apache
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: php-container
  17 │         image: php:7.1-apache
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment php-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-app-deployment.yaml:4
────────────────────────────────────────
   4 [   name: php-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment php-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: php-container
  17 │         image: php:7.1-apache
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-app-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: php-container
  17 │         image: php:7.1-apache
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



php-deploy.yaml (kubernetes)
============================
Tests: 124 (SUCCESSES: 92, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 20, MEDIUM: 7, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'install' of Deployment 'onepage' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-deploy.yaml:31-40
────────────────────────────────────────
  31 ┌         - name: install
  32 │           image: busybox
  33 │           volumeMounts:
  34 │             - name: code
  35 │               mountPath: /code
  36 │           command:
  37 │             - wget
  38 │             - "-O"
  39 │             - "/code/index.php"
  40 └             - https://raw.githubusercontent.com/do-community/php-kubernetes/master/index.php
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'onepage' of Deployment 'onepage' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-deploy.yaml:25-29
────────────────────────────────────────
  25 ┌         - name: onepage
  26 │           image: php:7.4-fpm
  27 │           volumeMounts:
  28 │             - name: code
  29 └               mountPath: /code
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'install' of Deployment 'onepage' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-deploy.yaml:31-40
────────────────────────────────────────
  31 ┌         - name: install
  32 │           image: busybox
  33 │           volumeMounts:
  34 │             - name: code
  35 │               mountPath: /code
  36 │           command:
  37 │             - wget
  38 │             - "-O"
  39 │             - "/code/index.php"
  40 └             - https://raw.githubusercontent.com/do-community/php-kubernetes/master/index.php
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'onepage' of Deployment 'onepage' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-deploy.yaml:25-29
────────────────────────────────────────
  25 ┌         - name: onepage
  26 │           image: php:7.4-fpm
  27 │           volumeMounts:
  28 │             - name: code
  29 └               mountPath: /code
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'install' of 'deployment' 'onepage' in 'onepage' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-deploy.yaml:31-40
────────────────────────────────────────
  31 ┌         - name: install
  32 │           image: busybox
  33 │           volumeMounts:
  34 │             - name: code
  35 │               mountPath: /code
  36 │           command:
  37 │             - wget
  38 │             - "-O"
  39 │             - "/code/index.php"
  40 └             - https://raw.githubusercontent.com/do-community/php-kubernetes/master/index.php
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'onepage' of 'deployment' 'onepage' in 'onepage' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-deploy.yaml:25-29
────────────────────────────────────────
  25 ┌         - name: onepage
  26 │           image: php:7.4-fpm
  27 │           volumeMounts:
  28 │             - name: code
  29 └               mountPath: /code
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'install' of Deployment 'onepage' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 php-deploy.yaml:31-40
────────────────────────────────────────
  31 ┌         - name: install
  32 │           image: busybox
  33 │           volumeMounts:
  34 │             - name: code
  35 │               mountPath: /code
  36 │           command:
  37 │             - wget
  38 │             - "-O"
  39 │             - "/code/index.php"
  40 └             - https://raw.githubusercontent.com/do-community/php-kubernetes/master/index.php
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'onepage' of Deployment 'onepage' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 php-deploy.yaml:25-29
────────────────────────────────────────
  25 ┌         - name: onepage
  26 │           image: php:7.4-fpm
  27 │           volumeMounts:
  28 │             - name: code
  29 └               mountPath: /code
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'install' of Deployment 'onepage' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-deploy.yaml:31-40
────────────────────────────────────────
  31 ┌         - name: install
  32 │           image: busybox
  33 │           volumeMounts:
  34 │             - name: code
  35 │               mountPath: /code
  36 │           command:
  37 │             - wget
  38 │             - "-O"
  39 │             - "/code/index.php"
  40 └             - https://raw.githubusercontent.com/do-community/php-kubernetes/master/index.php
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'onepage' of Deployment 'onepage' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-deploy.yaml:25-29
────────────────────────────────────────
  25 ┌         - name: onepage
  26 │           image: php:7.4-fpm
  27 │           volumeMounts:
  28 │             - name: code
  29 └               mountPath: /code
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'install' of Deployment 'onepage' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-deploy.yaml:31-40
────────────────────────────────────────
  31 ┌         - name: install
  32 │           image: busybox
  33 │           volumeMounts:
  34 │             - name: code
  35 │               mountPath: /code
  36 │           command:
  37 │             - wget
  38 │             - "-O"
  39 │             - "/code/index.php"
  40 └             - https://raw.githubusercontent.com/do-community/php-kubernetes/master/index.php
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'install' of Deployment 'onepage' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-deploy.yaml:31-40
────────────────────────────────────────
  31 ┌         - name: install
  32 │           image: busybox
  33 │           volumeMounts:
  34 │             - name: code
  35 │               mountPath: /code
  36 │           command:
  37 │             - wget
  38 │             - "-O"
  39 │             - "/code/index.php"
  40 └             - https://raw.githubusercontent.com/do-community/php-kubernetes/master/index.php
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'onepage' of Deployment 'onepage' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-deploy.yaml:25-29
────────────────────────────────────────
  25 ┌         - name: onepage
  26 │           image: php:7.4-fpm
  27 │           volumeMounts:
  28 │             - name: code
  29 └               mountPath: /code
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'install' of Deployment 'onepage' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 php-deploy.yaml:31-40
────────────────────────────────────────
  31 ┌         - name: install
  32 │           image: busybox
  33 │           volumeMounts:
  34 │             - name: code
  35 │               mountPath: /code
  36 │           command:
  37 │             - wget
  38 │             - "-O"
  39 │             - "/code/index.php"
  40 └             - https://raw.githubusercontent.com/do-community/php-kubernetes/master/index.php
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'onepage' of Deployment 'onepage' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 php-deploy.yaml:25-29
────────────────────────────────────────
  25 ┌         - name: onepage
  26 │           image: php:7.4-fpm
  27 │           volumeMounts:
  28 │             - name: code
  29 └               mountPath: /code
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'install' of Deployment 'onepage' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-deploy.yaml:31-40
────────────────────────────────────────
  31 ┌         - name: install
  32 │           image: busybox
  33 │           volumeMounts:
  34 │             - name: code
  35 │               mountPath: /code
  36 │           command:
  37 │             - wget
  38 │             - "-O"
  39 │             - "/code/index.php"
  40 └             - https://raw.githubusercontent.com/do-community/php-kubernetes/master/index.php
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'onepage' of Deployment 'onepage' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-deploy.yaml:25-29
────────────────────────────────────────
  25 ┌         - name: onepage
  26 │           image: php:7.4-fpm
  27 │           volumeMounts:
  28 │             - name: code
  29 └               mountPath: /code
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'install' of Deployment 'onepage' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-deploy.yaml:31-40
────────────────────────────────────────
  31 ┌         - name: install
  32 │           image: busybox
  33 │           volumeMounts:
  34 │             - name: code
  35 │               mountPath: /code
  36 │           command:
  37 │             - wget
  38 │             - "-O"
  39 │             - "/code/index.php"
  40 └             - https://raw.githubusercontent.com/do-community/php-kubernetes/master/index.php
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'onepage' of Deployment 'onepage' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-deploy.yaml:25-29
────────────────────────────────────────
  25 ┌         - name: onepage
  26 │           image: php:7.4-fpm
  27 │           volumeMounts:
  28 │             - name: code
  29 └               mountPath: /code
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'install' of Deployment 'onepage' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-deploy.yaml:31-40
────────────────────────────────────────
  31 ┌         - name: install
  32 │           image: busybox
  33 │           volumeMounts:
  34 │             - name: code
  35 │               mountPath: /code
  36 │           command:
  37 │             - wget
  38 │             - "-O"
  39 │             - "/code/index.php"
  40 └             - https://raw.githubusercontent.com/do-community/php-kubernetes/master/index.php
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'onepage' of Deployment 'onepage' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-deploy.yaml:25-29
────────────────────────────────────────
  25 ┌         - name: onepage
  26 │           image: php:7.4-fpm
  27 │           volumeMounts:
  28 │             - name: code
  29 └               mountPath: /code
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'install' of Deployment 'onepage' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-deploy.yaml:31-40
────────────────────────────────────────
  31 ┌         - name: install
  32 │           image: busybox
  33 │           volumeMounts:
  34 │             - name: code
  35 │               mountPath: /code
  36 │           command:
  37 │             - wget
  38 │             - "-O"
  39 │             - "/code/index.php"
  40 └             - https://raw.githubusercontent.com/do-community/php-kubernetes/master/index.php
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'onepage' of Deployment 'onepage' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-deploy.yaml:25-29
────────────────────────────────────────
  25 ┌         - name: onepage
  26 │           image: php:7.4-fpm
  27 │           volumeMounts:
  28 │             - name: code
  29 └               mountPath: /code
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-deploy.yaml:31-40
────────────────────────────────────────
  31 ┌         - name: install
  32 │           image: busybox
  33 │           volumeMounts:
  34 │             - name: code
  35 │               mountPath: /code
  36 │           command:
  37 │             - wget
  38 │             - "-O"
  39 │             - "/code/index.php"
  40 └             - https://raw.githubusercontent.com/do-community/php-kubernetes/master/index.php
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-deploy.yaml:25-29
────────────────────────────────────────
  25 ┌         - name: onepage
  26 │           image: php:7.4-fpm
  27 │           volumeMounts:
  28 │             - name: code
  29 └               mountPath: /code
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "install" of deployment "onepage" in "onepage" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-deploy.yaml:31-40
────────────────────────────────────────
  31 ┌         - name: install
  32 │           image: busybox
  33 │           volumeMounts:
  34 │             - name: code
  35 │               mountPath: /code
  36 │           command:
  37 │             - wget
  38 │             - "-O"
  39 │             - "/code/index.php"
  40 └             - https://raw.githubusercontent.com/do-community/php-kubernetes/master/index.php
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "onepage" of deployment "onepage" in "onepage" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-deploy.yaml:25-29
────────────────────────────────────────
  25 ┌         - name: onepage
  26 │           image: php:7.4-fpm
  27 │           volumeMounts:
  28 │             - name: code
  29 └               mountPath: /code
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-deploy.yaml:25-29
────────────────────────────────────────
  25 ┌         - name: onepage
  26 │           image: php:7.4-fpm
  27 │           volumeMounts:
  28 │             - name: code
  29 └               mountPath: /code
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-deploy.yaml:31-40
────────────────────────────────────────
  31 ┌         - name: install
  32 │           image: busybox
  33 │           volumeMounts:
  34 │             - name: code
  35 │               mountPath: /code
  36 │           command:
  37 │             - wget
  38 │             - "-O"
  39 │             - "/code/index.php"
  40 └             - https://raw.githubusercontent.com/do-community/php-kubernetes/master/index.php
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container onepage in onepage namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-deploy.yaml:31-40
────────────────────────────────────────
  31 ┌         - name: install
  32 │           image: busybox
  33 │           volumeMounts:
  34 │             - name: code
  35 │               mountPath: /code
  36 │           command:
  37 │             - wget
  38 │             - "-O"
  39 │             - "/code/index.php"
  40 └             - https://raw.githubusercontent.com/do-community/php-kubernetes/master/index.php
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container onepage in onepage namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-deploy.yaml:25-29
────────────────────────────────────────
  25 ┌         - name: onepage
  26 │           image: php:7.4-fpm
  27 │           volumeMounts:
  28 │             - name: code
  29 └               mountPath: /code
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment onepage in onepage namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-deploy.yaml:20-40
────────────────────────────────────────
  20 ┌       volumes:
  21 │         - name: code
  22 │           persistentVolumeClaim:
  23 │             claimName: code
  24 │       containers:
  25 │         - name: onepage
  26 │           image: php:7.4-fpm
  27 │           volumeMounts:
  28 └             - name: code
  ..   
────────────────────────────────────────



php-deployment.yaml (kubernetes)
================================
Tests: 125 (SUCCESSES: 91, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php' of Deployment 'app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-deployment.yaml:40-54
────────────────────────────────────────
  40 ┌         - env:
  41 │             - name: DB_DATABASE
  42 │               value: forge
  43 │             - name: DB_HOST
  44 │               value: mariadbservice
  45 │             - name: DB_PASSWORD
  46 │               value: root
  47 │             - name: DB_PORT
  48 └               value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'php1' of Deployment 'app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-deployment.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: php1
  20 │         image: shivani446/php-app:v1
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │             - name: DB_DATABASE
  25 │               value: forge
  26 │             - name: DB_HOST
  27 └               value: mariadbservice
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php' of Deployment 'app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-deployment.yaml:40-54
────────────────────────────────────────
  40 ┌         - env:
  41 │             - name: DB_DATABASE
  42 │               value: forge
  43 │             - name: DB_HOST
  44 │               value: mariadbservice
  45 │             - name: DB_PASSWORD
  46 │               value: root
  47 │             - name: DB_PORT
  48 └               value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php1' of Deployment 'app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-deployment.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: php1
  20 │         image: shivani446/php-app:v1
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │             - name: DB_DATABASE
  25 │               value: forge
  26 │             - name: DB_HOST
  27 └               value: mariadbservice
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php' of 'deployment' 'app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-deployment.yaml:40-54
────────────────────────────────────────
  40 ┌         - env:
  41 │             - name: DB_DATABASE
  42 │               value: forge
  43 │             - name: DB_HOST
  44 │               value: mariadbservice
  45 │             - name: DB_PASSWORD
  46 │               value: root
  47 │             - name: DB_PORT
  48 └               value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php1' of 'deployment' 'app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-deployment.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: php1
  20 │         image: shivani446/php-app:v1
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │             - name: DB_DATABASE
  25 │               value: forge
  26 │             - name: DB_HOST
  27 └               value: mariadbservice
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'php' of Deployment 'app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 php-deployment.yaml:40-54
────────────────────────────────────────
  40 ┌         - env:
  41 │             - name: DB_DATABASE
  42 │               value: forge
  43 │             - name: DB_HOST
  44 │               value: mariadbservice
  45 │             - name: DB_PASSWORD
  46 │               value: root
  47 │             - name: DB_PORT
  48 └               value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'php1' of Deployment 'app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 php-deployment.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: php1
  20 │         image: shivani446/php-app:v1
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │             - name: DB_DATABASE
  25 │               value: forge
  26 │             - name: DB_HOST
  27 └               value: mariadbservice
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php' of Deployment 'app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-deployment.yaml:40-54
────────────────────────────────────────
  40 ┌         - env:
  41 │             - name: DB_DATABASE
  42 │               value: forge
  43 │             - name: DB_HOST
  44 │               value: mariadbservice
  45 │             - name: DB_PASSWORD
  46 │               value: root
  47 │             - name: DB_PORT
  48 └               value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php1' of Deployment 'app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-deployment.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: php1
  20 │         image: shivani446/php-app:v1
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │             - name: DB_DATABASE
  25 │               value: forge
  26 │             - name: DB_HOST
  27 └               value: mariadbservice
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php' of Deployment 'app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-deployment.yaml:40-54
────────────────────────────────────────
  40 ┌         - env:
  41 │             - name: DB_DATABASE
  42 │               value: forge
  43 │             - name: DB_HOST
  44 │               value: mariadbservice
  45 │             - name: DB_PASSWORD
  46 │               value: root
  47 │             - name: DB_PORT
  48 └               value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php1' of Deployment 'app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-deployment.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: php1
  20 │         image: shivani446/php-app:v1
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │             - name: DB_DATABASE
  25 │               value: forge
  26 │             - name: DB_HOST
  27 └               value: mariadbservice
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'php' of Deployment 'app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 php-deployment.yaml:40-54
────────────────────────────────────────
  40 ┌         - env:
  41 │             - name: DB_DATABASE
  42 │               value: forge
  43 │             - name: DB_HOST
  44 │               value: mariadbservice
  45 │             - name: DB_PASSWORD
  46 │               value: root
  47 │             - name: DB_PORT
  48 └               value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'php1' of Deployment 'app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 php-deployment.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: php1
  20 │         image: shivani446/php-app:v1
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │             - name: DB_DATABASE
  25 │               value: forge
  26 │             - name: DB_HOST
  27 └               value: mariadbservice
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php' of Deployment 'app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-deployment.yaml:40-54
────────────────────────────────────────
  40 ┌         - env:
  41 │             - name: DB_DATABASE
  42 │               value: forge
  43 │             - name: DB_HOST
  44 │               value: mariadbservice
  45 │             - name: DB_PASSWORD
  46 │               value: root
  47 │             - name: DB_PORT
  48 └               value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php1' of Deployment 'app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-deployment.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: php1
  20 │         image: shivani446/php-app:v1
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │             - name: DB_DATABASE
  25 │               value: forge
  26 │             - name: DB_HOST
  27 └               value: mariadbservice
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php' of Deployment 'app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-deployment.yaml:40-54
────────────────────────────────────────
  40 ┌         - env:
  41 │             - name: DB_DATABASE
  42 │               value: forge
  43 │             - name: DB_HOST
  44 │               value: mariadbservice
  45 │             - name: DB_PASSWORD
  46 │               value: root
  47 │             - name: DB_PORT
  48 └               value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php1' of Deployment 'app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-deployment.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: php1
  20 │         image: shivani446/php-app:v1
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │             - name: DB_DATABASE
  25 │               value: forge
  26 │             - name: DB_HOST
  27 └               value: mariadbservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php' of Deployment 'app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-deployment.yaml:40-54
────────────────────────────────────────
  40 ┌         - env:
  41 │             - name: DB_DATABASE
  42 │               value: forge
  43 │             - name: DB_HOST
  44 │               value: mariadbservice
  45 │             - name: DB_PASSWORD
  46 │               value: root
  47 │             - name: DB_PORT
  48 └               value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php1' of Deployment 'app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-deployment.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: php1
  20 │         image: shivani446/php-app:v1
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │             - name: DB_DATABASE
  25 │               value: forge
  26 │             - name: DB_HOST
  27 └               value: mariadbservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php' of Deployment 'app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-deployment.yaml:40-54
────────────────────────────────────────
  40 ┌         - env:
  41 │             - name: DB_DATABASE
  42 │               value: forge
  43 │             - name: DB_HOST
  44 │               value: mariadbservice
  45 │             - name: DB_PASSWORD
  46 │               value: root
  47 │             - name: DB_PORT
  48 └               value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php1' of Deployment 'app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-deployment.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: php1
  20 │         image: shivani446/php-app:v1
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │             - name: DB_DATABASE
  25 │               value: forge
  26 │             - name: DB_HOST
  27 └               value: mariadbservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-deployment.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: php1
  20 │         image: shivani446/php-app:v1
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │             - name: DB_DATABASE
  25 │               value: forge
  26 │             - name: DB_HOST
  27 └               value: mariadbservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-deployment.yaml:40-54
────────────────────────────────────────
  40 ┌         - env:
  41 │             - name: DB_DATABASE
  42 │               value: forge
  43 │             - name: DB_HOST
  44 │               value: mariadbservice
  45 │             - name: DB_PASSWORD
  46 │               value: root
  47 │             - name: DB_PORT
  48 └               value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php" of deployment "app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-deployment.yaml:40-54
────────────────────────────────────────
  40 ┌         - env:
  41 │             - name: DB_DATABASE
  42 │               value: forge
  43 │             - name: DB_HOST
  44 │               value: mariadbservice
  45 │             - name: DB_PASSWORD
  46 │               value: root
  47 │             - name: DB_PORT
  48 └               value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php1" of deployment "app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-deployment.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: php1
  20 │         image: shivani446/php-app:v1
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │             - name: DB_DATABASE
  25 │               value: forge
  26 │             - name: DB_HOST
  27 └               value: mariadbservice
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-deployment.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: php1
  20 │         image: shivani446/php-app:v1
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │             - name: DB_DATABASE
  25 │               value: forge
  26 │             - name: DB_HOST
  27 └               value: mariadbservice
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-deployment.yaml:40-54
────────────────────────────────────────
  40 ┌         - env:
  41 │             - name: DB_DATABASE
  42 │               value: forge
  43 │             - name: DB_HOST
  44 │               value: mariadbservice
  45 │             - name: DB_PASSWORD
  46 │               value: root
  47 │             - name: DB_PORT
  48 └               value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     php-app: my-app
   6 └   name: app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-deployment.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: php1
  20 │         image: shivani446/php-app:v1
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │             - name: DB_DATABASE
  25 │               value: forge
  26 │             - name: DB_HOST
  27 └               value: mariadbservice
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-deployment.yaml:40-54
────────────────────────────────────────
  40 ┌         - env:
  41 │             - name: DB_DATABASE
  42 │               value: forge
  43 │             - name: DB_HOST
  44 │               value: mariadbservice
  45 │             - name: DB_PASSWORD
  46 │               value: root
  47 │             - name: DB_PORT
  48 └               value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-deployment.yaml:18-56
────────────────────────────────────────
  18 ┌       initContainers:
  19 │       - name: php1
  20 │         image: shivani446/php-app:v1
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │             - name: DB_DATABASE
  25 │               value: forge
  26 └             - name: DB_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container php in deployment app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 php-deployment.yaml:40-54
────────────────────────────────────────
  40 ┌         - env:
  41 │             - name: DB_DATABASE
  42 │               value: forge
  43 │             - name: DB_HOST
  44 │               value: mariadbservice
  45 │             - name: DB_PASSWORD
  46 │               value: root
  47 │             - name: DB_PORT
  48 └               value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container php1 in deployment app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 php-deployment.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: php1
  20 │         image: shivani446/php-app:v1
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │             - name: DB_DATABASE
  25 │               value: forge
  26 │             - name: DB_HOST
  27 └               value: mariadbservice
  ..   
────────────────────────────────────────



php-deployment1.yaml (kubernetes)
=================================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php' of Deployment 'php' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-deployment1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: php
  16 │         image: php:7.4-apache
  17 │         ports:
  18 │         - containerPort: 80
  19 │         volumeMounts:
  20 │         - name: php-html
  21 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php' of Deployment 'php' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-deployment1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: php
  16 │         image: php:7.4-apache
  17 │         ports:
  18 │         - containerPort: 80
  19 │         volumeMounts:
  20 │         - name: php-html
  21 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php' of 'deployment' 'php' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-deployment1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: php
  16 │         image: php:7.4-apache
  17 │         ports:
  18 │         - containerPort: 80
  19 │         volumeMounts:
  20 │         - name: php-html
  21 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'php' of Deployment 'php' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 php-deployment1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: php
  16 │         image: php:7.4-apache
  17 │         ports:
  18 │         - containerPort: 80
  19 │         volumeMounts:
  20 │         - name: php-html
  21 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php' of Deployment 'php' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-deployment1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: php
  16 │         image: php:7.4-apache
  17 │         ports:
  18 │         - containerPort: 80
  19 │         volumeMounts:
  20 │         - name: php-html
  21 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php' of Deployment 'php' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-deployment1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: php
  16 │         image: php:7.4-apache
  17 │         ports:
  18 │         - containerPort: 80
  19 │         volumeMounts:
  20 │         - name: php-html
  21 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'php' of Deployment 'php' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 php-deployment1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: php
  16 │         image: php:7.4-apache
  17 │         ports:
  18 │         - containerPort: 80
  19 │         volumeMounts:
  20 │         - name: php-html
  21 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php' of Deployment 'php' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-deployment1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: php
  16 │         image: php:7.4-apache
  17 │         ports:
  18 │         - containerPort: 80
  19 │         volumeMounts:
  20 │         - name: php-html
  21 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php' of Deployment 'php' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-deployment1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: php
  16 │         image: php:7.4-apache
  17 │         ports:
  18 │         - containerPort: 80
  19 │         volumeMounts:
  20 │         - name: php-html
  21 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php' of Deployment 'php' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-deployment1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: php
  16 │         image: php:7.4-apache
  17 │         ports:
  18 │         - containerPort: 80
  19 │         volumeMounts:
  20 │         - name: php-html
  21 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php' of Deployment 'php' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-deployment1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: php
  16 │         image: php:7.4-apache
  17 │         ports:
  18 │         - containerPort: 80
  19 │         volumeMounts:
  20 │         - name: php-html
  21 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-deployment1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: php
  16 │         image: php:7.4-apache
  17 │         ports:
  18 │         - containerPort: 80
  19 │         volumeMounts:
  20 │         - name: php-html
  21 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php" of deployment "php" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-deployment1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: php
  16 │         image: php:7.4-apache
  17 │         ports:
  18 │         - containerPort: 80
  19 │         volumeMounts:
  20 │         - name: php-html
  21 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-deployment1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: php
  16 │         image: php:7.4-apache
  17 │         ports:
  18 │         - containerPort: 80
  19 │         volumeMounts:
  20 │         - name: php-html
  21 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment php in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-deployment1.yaml:4
────────────────────────────────────────
   4 [   name: php
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment php in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-deployment1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: php
  16 │         image: php:7.4-apache
  17 │         ports:
  18 │         - containerPort: 80
  19 │         volumeMounts:
  20 │         - name: php-html
  21 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-deployment1.yaml:14-25
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: php
  16 │         image: php:7.4-apache
  17 │         ports:
  18 │         - containerPort: 80
  19 │         volumeMounts:
  20 │         - name: php-html
  21 │           mountPath: /var/www/html
  22 └       volumes:
  ..   
────────────────────────────────────────



php-deployment2_1.yaml (kubernetes)
===================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'webapp1' of Deployment 'webapp1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-deployment2_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'webapp1' of Deployment 'webapp1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-deployment2_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'webapp1' of 'deployment' 'webapp1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-deployment2_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'webapp1' of Deployment 'webapp1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 php-deployment2_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'webapp1' of Deployment 'webapp1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-deployment2_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'webapp1' of Deployment 'webapp1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-deployment2_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'webapp1' of Deployment 'webapp1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-deployment2_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'webapp1' of Deployment 'webapp1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 php-deployment2_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'webapp1' of Deployment 'webapp1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-deployment2_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'webapp1' of Deployment 'webapp1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-deployment2_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'webapp1' of Deployment 'webapp1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-deployment2_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'webapp1' of Deployment 'webapp1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-deployment2_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-deployment2_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "webapp1" of deployment "webapp1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-deployment2_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-deployment2_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment webapp1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-deployment2_1.yaml:4-7
────────────────────────────────────────
   4 ┌   name: webapp1
   5 │   labels:
   6 │     app: webapp-sql
   7 └     tier: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-deployment2_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-deployment2_1.yaml:20-25
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container webapp1 in deployment webapp1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 php-deployment2_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────



php-deployment3.yaml (kubernetes)
=================================
Tests: 125 (SUCCESSES: 91, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'init-copy-php-app' of Deployment 'php-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-deployment3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'php' of Deployment 'php-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-deployment3.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'init-copy-php-app' of Deployment 'php-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-deployment3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php' of Deployment 'php-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-deployment3.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'init-copy-php-app' of 'deployment' 'php-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-deployment3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php' of 'deployment' 'php-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-deployment3.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'init-copy-php-app' of Deployment 'php-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 php-deployment3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'php' of Deployment 'php-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 php-deployment3.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'init-copy-php-app' of Deployment 'php-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-deployment3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php' of Deployment 'php-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-deployment3.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'init-copy-php-app' of Deployment 'php-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-deployment3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'php' of Deployment 'php-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-deployment3.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'init-copy-php-app' of Deployment 'php-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-deployment3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php' of Deployment 'php-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-deployment3.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'init-copy-php-app' of Deployment 'php-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 php-deployment3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'php' of Deployment 'php-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 php-deployment3.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'init-copy-php-app' of Deployment 'php-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-deployment3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php' of Deployment 'php-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-deployment3.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'init-copy-php-app' of Deployment 'php-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-deployment3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php' of Deployment 'php-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-deployment3.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'init-copy-php-app' of Deployment 'php-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-deployment3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php' of Deployment 'php-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-deployment3.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'init-copy-php-app' of Deployment 'php-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-deployment3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php' of Deployment 'php-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-deployment3.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-deployment3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-deployment3.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "init-copy-php-app" of deployment "php-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-deployment3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php" of deployment "php-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-deployment3.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-deployment3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-deployment3.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment php-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-deployment3.yaml:4
────────────────────────────────────────
   4 [   name: php-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-deployment3.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-deployment3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-deployment3.yaml:15-36
────────────────────────────────────────
  15 ┌       initContainers:
  16 │       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 └         - cp
  ..   
────────────────────────────────────────



php-deployment4.yaml (kubernetes)
=================================
Tests: 125 (SUCCESSES: 91, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'init-copy-php-app' of Deployment 'php-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-deployment4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'php' of Deployment 'php-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-deployment4.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'init-copy-php-app' of Deployment 'php-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-deployment4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php' of Deployment 'php-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-deployment4.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'init-copy-php-app' of 'deployment' 'php-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-deployment4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php' of 'deployment' 'php-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-deployment4.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'init-copy-php-app' of Deployment 'php-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 php-deployment4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'php' of Deployment 'php-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 php-deployment4.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'init-copy-php-app' of Deployment 'php-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-deployment4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php' of Deployment 'php-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-deployment4.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'init-copy-php-app' of Deployment 'php-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-deployment4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'php' of Deployment 'php-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-deployment4.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'init-copy-php-app' of Deployment 'php-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-deployment4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php' of Deployment 'php-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-deployment4.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'init-copy-php-app' of Deployment 'php-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 php-deployment4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'php' of Deployment 'php-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 php-deployment4.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'init-copy-php-app' of Deployment 'php-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-deployment4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php' of Deployment 'php-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-deployment4.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'init-copy-php-app' of Deployment 'php-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-deployment4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php' of Deployment 'php-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-deployment4.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'init-copy-php-app' of Deployment 'php-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-deployment4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php' of Deployment 'php-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-deployment4.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'init-copy-php-app' of Deployment 'php-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-deployment4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php' of Deployment 'php-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-deployment4.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-deployment4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-deployment4.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "init-copy-php-app" of deployment "php-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-deployment4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php" of deployment "php-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-deployment4.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-deployment4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-deployment4.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment php-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-deployment4.yaml:4
────────────────────────────────────────
   4 [   name: php-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-deployment4.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: php
  29 │         image: php-demo-fpm-debian-image:latest
  30 │         imagePullPolicy: Never
  31 │         ports:
  32 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-deployment4.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 │         - cp
  24 └         - -r
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-deployment4.yaml:15-36
────────────────────────────────────────
  15 ┌       initContainers:
  16 │       - name: init-copy-php-app
  17 │         image: php-demo-fpm-debian-image:latest
  18 │         imagePullPolicy: Never
  19 │         volumeMounts:
  20 │         - name: php-app-storage
  21 │           mountPath: /app
  22 │         command:
  23 └         - cp
  ..   
────────────────────────────────────────



php-deployment5_1.yaml (kubernetes)
===================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'webapp1' of Deployment 'webapp1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-deployment5_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'webapp1' of Deployment 'webapp1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-deployment5_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'webapp1' of 'deployment' 'webapp1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-deployment5_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'webapp1' of Deployment 'webapp1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 php-deployment5_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'webapp1' of Deployment 'webapp1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-deployment5_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'webapp1' of Deployment 'webapp1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-deployment5_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'webapp1' of Deployment 'webapp1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-deployment5_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'webapp1' of Deployment 'webapp1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 php-deployment5_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'webapp1' of Deployment 'webapp1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-deployment5_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'webapp1' of Deployment 'webapp1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-deployment5_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'webapp1' of Deployment 'webapp1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-deployment5_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'webapp1' of Deployment 'webapp1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-deployment5_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-deployment5_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "webapp1" of deployment "webapp1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-deployment5_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-deployment5_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment webapp1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-deployment5_1.yaml:4-7
────────────────────────────────────────
   4 ┌   name: webapp1
   5 │   labels:
   6 │     app: webapp-sql
   7 └     tier: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-deployment5_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-deployment5_1.yaml:20-25
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container webapp1 in deployment webapp1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 php-deployment5_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────



php-deployment6_1.yaml (kubernetes)
===================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'webapp1' of Deployment 'webapp1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-deployment6_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'webapp1' of Deployment 'webapp1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-deployment6_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'webapp1' of 'deployment' 'webapp1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-deployment6_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'webapp1' of Deployment 'webapp1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 php-deployment6_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'webapp1' of Deployment 'webapp1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-deployment6_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'webapp1' of Deployment 'webapp1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-deployment6_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'webapp1' of Deployment 'webapp1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-deployment6_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'webapp1' of Deployment 'webapp1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 php-deployment6_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'webapp1' of Deployment 'webapp1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-deployment6_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'webapp1' of Deployment 'webapp1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-deployment6_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'webapp1' of Deployment 'webapp1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-deployment6_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'webapp1' of Deployment 'webapp1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-deployment6_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-deployment6_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "webapp1" of deployment "webapp1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-deployment6_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-deployment6_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment webapp1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-deployment6_1.yaml:4-7
────────────────────────────────────────
   4 ┌   name: webapp1
   5 │   labels:
   6 │     app: webapp-sql
   7 └     tier: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-deployment6_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-deployment6_1.yaml:20-25
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container webapp1 in deployment webapp1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 php-deployment6_1.yaml:21-25
────────────────────────────────────────
  21 ┌       - name: webapp1
  22 │         image: shawon10/ruetchatbot
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 └         - containerPort: 8081
────────────────────────────────────────



php-fpm-deployment.yaml (kubernetes)
====================================
Tests: 126 (SUCCESSES: 90, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 21, MEDIUM: 10, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'init-php-fpm' of Deployment 'php-fpm' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-fpm-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: init-php-fpm
  17 │           image: registry.local/stateful-app:latest
  18 │           imagePullPolicy: Never
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: docker-secret
  22 │           volumeMounts:
  23 │             - name: shared-volume
  24 └               mountPath: /app
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'php-fpm' of Deployment 'php-fpm' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-fpm-deployment.yaml:34-51
────────────────────────────────────────
  34 ┌         - name: php-fpm
  35 │           image: registry.local/stateful-app:latest
  36 │           imagePullPolicy: Never
  37 │           ports:
  38 │             - containerPort: 9000
  39 │           envFrom:
  40 │             - secretRef:
  41 │                 name: docker-secret
  42 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'init-php-fpm' of Deployment 'php-fpm' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-fpm-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: init-php-fpm
  17 │           image: registry.local/stateful-app:latest
  18 │           imagePullPolicy: Never
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: docker-secret
  22 │           volumeMounts:
  23 │             - name: shared-volume
  24 └               mountPath: /app
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-fpm' of Deployment 'php-fpm' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-fpm-deployment.yaml:34-51
────────────────────────────────────────
  34 ┌         - name: php-fpm
  35 │           image: registry.local/stateful-app:latest
  36 │           imagePullPolicy: Never
  37 │           ports:
  38 │             - containerPort: 9000
  39 │           envFrom:
  40 │             - secretRef:
  41 │                 name: docker-secret
  42 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'init-php-fpm' of 'deployment' 'php-fpm' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-fpm-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: init-php-fpm
  17 │           image: registry.local/stateful-app:latest
  18 │           imagePullPolicy: Never
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: docker-secret
  22 │           volumeMounts:
  23 │             - name: shared-volume
  24 └               mountPath: /app
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-fpm' of 'deployment' 'php-fpm' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-fpm-deployment.yaml:34-51
────────────────────────────────────────
  34 ┌         - name: php-fpm
  35 │           image: registry.local/stateful-app:latest
  36 │           imagePullPolicy: Never
  37 │           ports:
  38 │             - containerPort: 9000
  39 │           envFrom:
  40 │             - secretRef:
  41 │                 name: docker-secret
  42 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'init-php-fpm' of Deployment 'php-fpm' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 php-fpm-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: init-php-fpm
  17 │           image: registry.local/stateful-app:latest
  18 │           imagePullPolicy: Never
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: docker-secret
  22 │           volumeMounts:
  23 │             - name: shared-volume
  24 └               mountPath: /app
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'php-fpm' of Deployment 'php-fpm' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 php-fpm-deployment.yaml:34-51
────────────────────────────────────────
  34 ┌         - name: php-fpm
  35 │           image: registry.local/stateful-app:latest
  36 │           imagePullPolicy: Never
  37 │           ports:
  38 │             - containerPort: 9000
  39 │           envFrom:
  40 │             - secretRef:
  41 │                 name: docker-secret
  42 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'init-php-fpm' of Deployment 'php-fpm' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-fpm-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: init-php-fpm
  17 │           image: registry.local/stateful-app:latest
  18 │           imagePullPolicy: Never
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: docker-secret
  22 │           volumeMounts:
  23 │             - name: shared-volume
  24 └               mountPath: /app
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-fpm' of Deployment 'php-fpm' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-fpm-deployment.yaml:34-51
────────────────────────────────────────
  34 ┌         - name: php-fpm
  35 │           image: registry.local/stateful-app:latest
  36 │           imagePullPolicy: Never
  37 │           ports:
  38 │             - containerPort: 9000
  39 │           envFrom:
  40 │             - secretRef:
  41 │                 name: docker-secret
  42 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'init-php-fpm' of Deployment 'php-fpm' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-fpm-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: init-php-fpm
  17 │           image: registry.local/stateful-app:latest
  18 │           imagePullPolicy: Never
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: docker-secret
  22 │           volumeMounts:
  23 │             - name: shared-volume
  24 └               mountPath: /app
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'php-fpm' of Deployment 'php-fpm' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-fpm-deployment.yaml:34-51
────────────────────────────────────────
  34 ┌         - name: php-fpm
  35 │           image: registry.local/stateful-app:latest
  36 │           imagePullPolicy: Never
  37 │           ports:
  38 │             - containerPort: 9000
  39 │           envFrom:
  40 │             - secretRef:
  41 │                 name: docker-secret
  42 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'init-php-fpm' of Deployment 'php-fpm' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-fpm-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: init-php-fpm
  17 │           image: registry.local/stateful-app:latest
  18 │           imagePullPolicy: Never
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: docker-secret
  22 │           volumeMounts:
  23 │             - name: shared-volume
  24 └               mountPath: /app
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-fpm' of Deployment 'php-fpm' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-fpm-deployment.yaml:34-51
────────────────────────────────────────
  34 ┌         - name: php-fpm
  35 │           image: registry.local/stateful-app:latest
  36 │           imagePullPolicy: Never
  37 │           ports:
  38 │             - containerPort: 9000
  39 │           envFrom:
  40 │             - secretRef:
  41 │                 name: docker-secret
  42 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'init-php-fpm' of Deployment 'php-fpm' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 php-fpm-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: init-php-fpm
  17 │           image: registry.local/stateful-app:latest
  18 │           imagePullPolicy: Never
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: docker-secret
  22 │           volumeMounts:
  23 │             - name: shared-volume
  24 └               mountPath: /app
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'php-fpm' of Deployment 'php-fpm' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 php-fpm-deployment.yaml:34-51
────────────────────────────────────────
  34 ┌         - name: php-fpm
  35 │           image: registry.local/stateful-app:latest
  36 │           imagePullPolicy: Never
  37 │           ports:
  38 │             - containerPort: 9000
  39 │           envFrom:
  40 │             - secretRef:
  41 │                 name: docker-secret
  42 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'init-php-fpm' of Deployment 'php-fpm' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-fpm-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: init-php-fpm
  17 │           image: registry.local/stateful-app:latest
  18 │           imagePullPolicy: Never
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: docker-secret
  22 │           volumeMounts:
  23 │             - name: shared-volume
  24 └               mountPath: /app
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php-fpm' of Deployment 'php-fpm' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-fpm-deployment.yaml:34-51
────────────────────────────────────────
  34 ┌         - name: php-fpm
  35 │           image: registry.local/stateful-app:latest
  36 │           imagePullPolicy: Never
  37 │           ports:
  38 │             - containerPort: 9000
  39 │           envFrom:
  40 │             - secretRef:
  41 │                 name: docker-secret
  42 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'init-php-fpm' of Deployment 'php-fpm' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-fpm-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: init-php-fpm
  17 │           image: registry.local/stateful-app:latest
  18 │           imagePullPolicy: Never
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: docker-secret
  22 │           volumeMounts:
  23 │             - name: shared-volume
  24 └               mountPath: /app
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php-fpm' of Deployment 'php-fpm' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-fpm-deployment.yaml:34-51
────────────────────────────────────────
  34 ┌         - name: php-fpm
  35 │           image: registry.local/stateful-app:latest
  36 │           imagePullPolicy: Never
  37 │           ports:
  38 │             - containerPort: 9000
  39 │           envFrom:
  40 │             - secretRef:
  41 │                 name: docker-secret
  42 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'init-php-fpm' of Deployment 'php-fpm' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-fpm-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: init-php-fpm
  17 │           image: registry.local/stateful-app:latest
  18 │           imagePullPolicy: Never
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: docker-secret
  22 │           volumeMounts:
  23 │             - name: shared-volume
  24 └               mountPath: /app
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-fpm' of Deployment 'php-fpm' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-fpm-deployment.yaml:34-51
────────────────────────────────────────
  34 ┌         - name: php-fpm
  35 │           image: registry.local/stateful-app:latest
  36 │           imagePullPolicy: Never
  37 │           ports:
  38 │             - containerPort: 9000
  39 │           envFrom:
  40 │             - secretRef:
  41 │                 name: docker-secret
  42 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'init-php-fpm' of Deployment 'php-fpm' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-fpm-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: init-php-fpm
  17 │           image: registry.local/stateful-app:latest
  18 │           imagePullPolicy: Never
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: docker-secret
  22 │           volumeMounts:
  23 │             - name: shared-volume
  24 └               mountPath: /app
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-fpm' of Deployment 'php-fpm' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-fpm-deployment.yaml:34-51
────────────────────────────────────────
  34 ┌         - name: php-fpm
  35 │           image: registry.local/stateful-app:latest
  36 │           imagePullPolicy: Never
  37 │           ports:
  38 │             - containerPort: 9000
  39 │           envFrom:
  40 │             - secretRef:
  41 │                 name: docker-secret
  42 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-fpm-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: init-php-fpm
  17 │           image: registry.local/stateful-app:latest
  18 │           imagePullPolicy: Never
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: docker-secret
  22 │           volumeMounts:
  23 │             - name: shared-volume
  24 └               mountPath: /app
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-fpm-deployment.yaml:34-51
────────────────────────────────────────
  34 ┌         - name: php-fpm
  35 │           image: registry.local/stateful-app:latest
  36 │           imagePullPolicy: Never
  37 │           ports:
  38 │             - containerPort: 9000
  39 │           envFrom:
  40 │             - secretRef:
  41 │                 name: docker-secret
  42 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "init-php-fpm" of deployment "php-fpm" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-fpm-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: init-php-fpm
  17 │           image: registry.local/stateful-app:latest
  18 │           imagePullPolicy: Never
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: docker-secret
  22 │           volumeMounts:
  23 │             - name: shared-volume
  24 └               mountPath: /app
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-fpm" of deployment "php-fpm" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-fpm-deployment.yaml:34-51
────────────────────────────────────────
  34 ┌         - name: php-fpm
  35 │           image: registry.local/stateful-app:latest
  36 │           imagePullPolicy: Never
  37 │           ports:
  38 │             - containerPort: 9000
  39 │           envFrom:
  40 │             - secretRef:
  41 │                 name: docker-secret
  42 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-fpm-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: init-php-fpm
  17 │           image: registry.local/stateful-app:latest
  18 │           imagePullPolicy: Never
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: docker-secret
  22 │           volumeMounts:
  23 │             - name: shared-volume
  24 └               mountPath: /app
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-fpm-deployment.yaml:34-51
────────────────────────────────────────
  34 ┌         - name: php-fpm
  35 │           image: registry.local/stateful-app:latest
  36 │           imagePullPolicy: Never
  37 │           ports:
  38 │             - containerPort: 9000
  39 │           envFrom:
  40 │             - secretRef:
  41 │                 name: docker-secret
  42 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment php-fpm in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-fpm-deployment.yaml:4
────────────────────────────────────────
   4 [   name: php-fpm
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-fpm in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-fpm-deployment.yaml:34-51
────────────────────────────────────────
  34 ┌         - name: php-fpm
  35 │           image: registry.local/stateful-app:latest
  36 │           imagePullPolicy: Never
  37 │           ports:
  38 │             - containerPort: 9000
  39 │           envFrom:
  40 │             - secretRef:
  41 │                 name: docker-secret
  42 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-fpm in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-fpm-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: init-php-fpm
  17 │           image: registry.local/stateful-app:latest
  18 │           imagePullPolicy: Never
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: docker-secret
  22 │           volumeMounts:
  23 │             - name: shared-volume
  24 └               mountPath: /app
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-fpm in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-fpm-deployment.yaml:15-67
────────────────────────────────────────
  15 ┌       initContainers:
  16 │         - name: init-php-fpm
  17 │           image: registry.local/stateful-app:latest
  18 │           imagePullPolicy: Never
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: docker-secret
  22 │           volumeMounts:
  23 └             - name: shared-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container init-php-fpm in deployment php-fpm (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 php-fpm-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌         - name: init-php-fpm
  17 │           image: registry.local/stateful-app:latest
  18 │           imagePullPolicy: Never
  19 │           envFrom:
  20 │             - secretRef:
  21 │                 name: docker-secret
  22 │           volumeMounts:
  23 │             - name: shared-volume
  24 └               mountPath: /app
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container php-fpm in deployment php-fpm (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 php-fpm-deployment.yaml:34-51
────────────────────────────────────────
  34 ┌         - name: php-fpm
  35 │           image: registry.local/stateful-app:latest
  36 │           imagePullPolicy: Never
  37 │           ports:
  38 │             - containerPort: 9000
  39 │           envFrom:
  40 │             - secretRef:
  41 │                 name: docker-secret
  42 └           volumeMounts:
  ..   
────────────────────────────────────────



php-fpm.yaml (kubernetes)
=========================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'phpfpm' of Deployment 'phpfpm' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-fpm.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: phpfpm
  21 │           image: php:fpm-alpine
  22 │           ports:
  23 │             - containerPort: 9000
  24 │           volumeMounts:
  25 │             - mountPath: /var/www/html/
  26 └               name: contents
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'phpfpm' of Deployment 'phpfpm' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-fpm.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: phpfpm
  21 │           image: php:fpm-alpine
  22 │           ports:
  23 │             - containerPort: 9000
  24 │           volumeMounts:
  25 │             - mountPath: /var/www/html/
  26 └               name: contents
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'phpfpm' of 'deployment' 'phpfpm' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-fpm.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: phpfpm
  21 │           image: php:fpm-alpine
  22 │           ports:
  23 │             - containerPort: 9000
  24 │           volumeMounts:
  25 │             - mountPath: /var/www/html/
  26 └               name: contents
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'phpfpm' of Deployment 'phpfpm' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 php-fpm.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: phpfpm
  21 │           image: php:fpm-alpine
  22 │           ports:
  23 │             - containerPort: 9000
  24 │           volumeMounts:
  25 │             - mountPath: /var/www/html/
  26 └               name: contents
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'phpfpm' of Deployment 'phpfpm' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-fpm.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: phpfpm
  21 │           image: php:fpm-alpine
  22 │           ports:
  23 │             - containerPort: 9000
  24 │           volumeMounts:
  25 │             - mountPath: /var/www/html/
  26 └               name: contents
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'phpfpm' of Deployment 'phpfpm' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-fpm.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: phpfpm
  21 │           image: php:fpm-alpine
  22 │           ports:
  23 │             - containerPort: 9000
  24 │           volumeMounts:
  25 │             - mountPath: /var/www/html/
  26 └               name: contents
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'phpfpm' of Deployment 'phpfpm' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 php-fpm.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: phpfpm
  21 │           image: php:fpm-alpine
  22 │           ports:
  23 │             - containerPort: 9000
  24 │           volumeMounts:
  25 │             - mountPath: /var/www/html/
  26 └               name: contents
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'phpfpm' of Deployment 'phpfpm' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-fpm.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: phpfpm
  21 │           image: php:fpm-alpine
  22 │           ports:
  23 │             - containerPort: 9000
  24 │           volumeMounts:
  25 │             - mountPath: /var/www/html/
  26 └               name: contents
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'phpfpm' of Deployment 'phpfpm' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-fpm.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: phpfpm
  21 │           image: php:fpm-alpine
  22 │           ports:
  23 │             - containerPort: 9000
  24 │           volumeMounts:
  25 │             - mountPath: /var/www/html/
  26 └               name: contents
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'phpfpm' of Deployment 'phpfpm' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-fpm.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: phpfpm
  21 │           image: php:fpm-alpine
  22 │           ports:
  23 │             - containerPort: 9000
  24 │           volumeMounts:
  25 │             - mountPath: /var/www/html/
  26 └               name: contents
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'phpfpm' of Deployment 'phpfpm' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-fpm.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: phpfpm
  21 │           image: php:fpm-alpine
  22 │           ports:
  23 │             - containerPort: 9000
  24 │           volumeMounts:
  25 │             - mountPath: /var/www/html/
  26 └               name: contents
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'phpfpm' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 php-fpm.yaml:10-31
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   selector:
  12 │     matchLabels:
  13 │       app: phpfpm
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         app: phpfpm 
  18 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-fpm.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: phpfpm
  21 │           image: php:fpm-alpine
  22 │           ports:
  23 │             - containerPort: 9000
  24 │           volumeMounts:
  25 │             - mountPath: /var/www/html/
  26 └               name: contents
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "phpfpm" of deployment "phpfpm" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-fpm.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: phpfpm
  21 │           image: php:fpm-alpine
  22 │           ports:
  23 │             - containerPort: 9000
  24 │           volumeMounts:
  25 │             - mountPath: /var/www/html/
  26 └               name: contents
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-fpm.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: phpfpm
  21 │           image: php:fpm-alpine
  22 │           ports:
  23 │             - containerPort: 9000
  24 │           volumeMounts:
  25 │             - mountPath: /var/www/html/
  26 └               name: contents
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment phpfpm in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-fpm.yaml:5-8
────────────────────────────────────────
   5 ┌   name: phpfpm
   6 │   labels:
   7 │     app: phpfpm
   8 └     layer: backend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container phpfpm in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-fpm.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: phpfpm
  21 │           image: php:fpm-alpine
  22 │           ports:
  23 │             - containerPort: 9000
  24 │           volumeMounts:
  25 │             - mountPath: /var/www/html/
  26 └               name: contents
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment phpfpm in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-fpm.yaml:19-31
────────────────────────────────────────
  19 ┌       containers:
  20 │         - name: phpfpm
  21 │           image: php:fpm-alpine
  22 │           ports:
  23 │             - containerPort: 9000
  24 │           volumeMounts:
  25 │             - mountPath: /var/www/html/
  26 │               name: contents
  27 └       volumes:
  ..   
────────────────────────────────────────



php-ldap-client-deployment.yaml (kubernetes)
============================================
Tests: 140 (SUCCESSES: 92, FAILURES: 48)
Failures: 48 (UNKNOWN: 0, LOW: 30, MEDIUM: 11, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'init' of Deployment 'php-ldap-client' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-ldap-client-deployment.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: init
  31 │         image: alpine:3.19.1
  32 │         envFrom:
  33 │         - secretRef:
  34 │             name: ldap-secrets
  35 │         - secretRef:
  36 │             name: postgres-root-credentials
  37 │         volumeMounts:
  38 └         - name: init-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'php-ldap-client' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-ldap-client-deployment.yaml:76-83
────────────────────────────────────────
  76 ┌       - name: nginx
  77 │         image: nginx-image
  78 │         volumeMounts:
  79 │         - name: shared-files
  80 │           mountPath: /var/www/html
  81 │         - name: nginx-config-volume
  82 │           mountPath: /etc/nginx/nginx.conf
  83 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'php-ldap-client' of Deployment 'php-ldap-client' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-ldap-client-deployment.yaml:50-74
────────────────────────────────────────
  50 ┌       - name: php-ldap-client
  51 │         image: mamo-ldap-php-client
  52 │         volumeMounts:
  53 │         - name: shared-files
  54 │           mountPath: /var/www/html
  55 │         - name: ldap-server-certificates
  56 │           mountPath: /etc/ldap/certs/certificate.crt
  57 │           subPath: certificate.crt
  58 └         - name: ldap-server-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'init' of Deployment 'php-ldap-client' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-ldap-client-deployment.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: init
  31 │         image: alpine:3.19.1
  32 │         envFrom:
  33 │         - secretRef:
  34 │             name: ldap-secrets
  35 │         - secretRef:
  36 │             name: postgres-root-credentials
  37 │         volumeMounts:
  38 └         - name: init-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'php-ldap-client' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-ldap-client-deployment.yaml:76-83
────────────────────────────────────────
  76 ┌       - name: nginx
  77 │         image: nginx-image
  78 │         volumeMounts:
  79 │         - name: shared-files
  80 │           mountPath: /var/www/html
  81 │         - name: nginx-config-volume
  82 │           mountPath: /etc/nginx/nginx.conf
  83 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-ldap-client' of Deployment 'php-ldap-client' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-ldap-client-deployment.yaml:50-74
────────────────────────────────────────
  50 ┌       - name: php-ldap-client
  51 │         image: mamo-ldap-php-client
  52 │         volumeMounts:
  53 │         - name: shared-files
  54 │           mountPath: /var/www/html
  55 │         - name: ldap-server-certificates
  56 │           mountPath: /etc/ldap/certs/certificate.crt
  57 │           subPath: certificate.crt
  58 └         - name: ldap-server-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'init' of 'deployment' 'php-ldap-client' in 'mattermost-operator' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-ldap-client-deployment.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: init
  31 │         image: alpine:3.19.1
  32 │         envFrom:
  33 │         - secretRef:
  34 │             name: ldap-secrets
  35 │         - secretRef:
  36 │             name: postgres-root-credentials
  37 │         volumeMounts:
  38 └         - name: init-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'php-ldap-client' in 'mattermost-operator' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-ldap-client-deployment.yaml:76-83
────────────────────────────────────────
  76 ┌       - name: nginx
  77 │         image: nginx-image
  78 │         volumeMounts:
  79 │         - name: shared-files
  80 │           mountPath: /var/www/html
  81 │         - name: nginx-config-volume
  82 │           mountPath: /etc/nginx/nginx.conf
  83 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-ldap-client' of 'deployment' 'php-ldap-client' in 'mattermost-operator' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-ldap-client-deployment.yaml:50-74
────────────────────────────────────────
  50 ┌       - name: php-ldap-client
  51 │         image: mamo-ldap-php-client
  52 │         volumeMounts:
  53 │         - name: shared-files
  54 │           mountPath: /var/www/html
  55 │         - name: ldap-server-certificates
  56 │           mountPath: /etc/ldap/certs/certificate.crt
  57 │           subPath: certificate.crt
  58 └         - name: ldap-server-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'init' of Deployment 'php-ldap-client' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 php-ldap-client-deployment.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: init
  31 │         image: alpine:3.19.1
  32 │         envFrom:
  33 │         - secretRef:
  34 │             name: ldap-secrets
  35 │         - secretRef:
  36 │             name: postgres-root-credentials
  37 │         volumeMounts:
  38 └         - name: init-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'php-ldap-client' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 php-ldap-client-deployment.yaml:76-83
────────────────────────────────────────
  76 ┌       - name: nginx
  77 │         image: nginx-image
  78 │         volumeMounts:
  79 │         - name: shared-files
  80 │           mountPath: /var/www/html
  81 │         - name: nginx-config-volume
  82 │           mountPath: /etc/nginx/nginx.conf
  83 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'php-ldap-client' of Deployment 'php-ldap-client' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 php-ldap-client-deployment.yaml:50-74
────────────────────────────────────────
  50 ┌       - name: php-ldap-client
  51 │         image: mamo-ldap-php-client
  52 │         volumeMounts:
  53 │         - name: shared-files
  54 │           mountPath: /var/www/html
  55 │         - name: ldap-server-certificates
  56 │           mountPath: /etc/ldap/certs/certificate.crt
  57 │           subPath: certificate.crt
  58 └         - name: ldap-server-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'init' of Deployment 'php-ldap-client' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-ldap-client-deployment.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: init
  31 │         image: alpine:3.19.1
  32 │         envFrom:
  33 │         - secretRef:
  34 │             name: ldap-secrets
  35 │         - secretRef:
  36 │             name: postgres-root-credentials
  37 │         volumeMounts:
  38 └         - name: init-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'php-ldap-client' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-ldap-client-deployment.yaml:76-83
────────────────────────────────────────
  76 ┌       - name: nginx
  77 │         image: nginx-image
  78 │         volumeMounts:
  79 │         - name: shared-files
  80 │           mountPath: /var/www/html
  81 │         - name: nginx-config-volume
  82 │           mountPath: /etc/nginx/nginx.conf
  83 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-ldap-client' of Deployment 'php-ldap-client' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-ldap-client-deployment.yaml:50-74
────────────────────────────────────────
  50 ┌       - name: php-ldap-client
  51 │         image: mamo-ldap-php-client
  52 │         volumeMounts:
  53 │         - name: shared-files
  54 │           mountPath: /var/www/html
  55 │         - name: ldap-server-certificates
  56 │           mountPath: /etc/ldap/certs/certificate.crt
  57 │           subPath: certificate.crt
  58 └         - name: ldap-server-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'php-ldap-client' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-ldap-client-deployment.yaml:76-83
────────────────────────────────────────
  76 ┌       - name: nginx
  77 │         image: nginx-image
  78 │         volumeMounts:
  79 │         - name: shared-files
  80 │           mountPath: /var/www/html
  81 │         - name: nginx-config-volume
  82 │           mountPath: /etc/nginx/nginx.conf
  83 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'php-ldap-client' of Deployment 'php-ldap-client' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-ldap-client-deployment.yaml:50-74
────────────────────────────────────────
  50 ┌       - name: php-ldap-client
  51 │         image: mamo-ldap-php-client
  52 │         volumeMounts:
  53 │         - name: shared-files
  54 │           mountPath: /var/www/html
  55 │         - name: ldap-server-certificates
  56 │           mountPath: /etc/ldap/certs/certificate.crt
  57 │           subPath: certificate.crt
  58 └         - name: ldap-server-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'init' of Deployment 'php-ldap-client' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-ldap-client-deployment.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: init
  31 │         image: alpine:3.19.1
  32 │         envFrom:
  33 │         - secretRef:
  34 │             name: ldap-secrets
  35 │         - secretRef:
  36 │             name: postgres-root-credentials
  37 │         volumeMounts:
  38 └         - name: init-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'php-ldap-client' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-ldap-client-deployment.yaml:76-83
────────────────────────────────────────
  76 ┌       - name: nginx
  77 │         image: nginx-image
  78 │         volumeMounts:
  79 │         - name: shared-files
  80 │           mountPath: /var/www/html
  81 │         - name: nginx-config-volume
  82 │           mountPath: /etc/nginx/nginx.conf
  83 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-ldap-client' of Deployment 'php-ldap-client' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-ldap-client-deployment.yaml:50-74
────────────────────────────────────────
  50 ┌       - name: php-ldap-client
  51 │         image: mamo-ldap-php-client
  52 │         volumeMounts:
  53 │         - name: shared-files
  54 │           mountPath: /var/www/html
  55 │         - name: ldap-server-certificates
  56 │           mountPath: /etc/ldap/certs/certificate.crt
  57 │           subPath: certificate.crt
  58 └         - name: ldap-server-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'init' of Deployment 'php-ldap-client' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 php-ldap-client-deployment.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: init
  31 │         image: alpine:3.19.1
  32 │         envFrom:
  33 │         - secretRef:
  34 │             name: ldap-secrets
  35 │         - secretRef:
  36 │             name: postgres-root-credentials
  37 │         volumeMounts:
  38 └         - name: init-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'php-ldap-client' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 php-ldap-client-deployment.yaml:76-83
────────────────────────────────────────
  76 ┌       - name: nginx
  77 │         image: nginx-image
  78 │         volumeMounts:
  79 │         - name: shared-files
  80 │           mountPath: /var/www/html
  81 │         - name: nginx-config-volume
  82 │           mountPath: /etc/nginx/nginx.conf
  83 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'php-ldap-client' of Deployment 'php-ldap-client' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 php-ldap-client-deployment.yaml:50-74
────────────────────────────────────────
  50 ┌       - name: php-ldap-client
  51 │         image: mamo-ldap-php-client
  52 │         volumeMounts:
  53 │         - name: shared-files
  54 │           mountPath: /var/www/html
  55 │         - name: ldap-server-certificates
  56 │           mountPath: /etc/ldap/certs/certificate.crt
  57 │           subPath: certificate.crt
  58 └         - name: ldap-server-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'init' of Deployment 'php-ldap-client' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-ldap-client-deployment.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: init
  31 │         image: alpine:3.19.1
  32 │         envFrom:
  33 │         - secretRef:
  34 │             name: ldap-secrets
  35 │         - secretRef:
  36 │             name: postgres-root-credentials
  37 │         volumeMounts:
  38 └         - name: init-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'php-ldap-client' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-ldap-client-deployment.yaml:76-83
────────────────────────────────────────
  76 ┌       - name: nginx
  77 │         image: nginx-image
  78 │         volumeMounts:
  79 │         - name: shared-files
  80 │           mountPath: /var/www/html
  81 │         - name: nginx-config-volume
  82 │           mountPath: /etc/nginx/nginx.conf
  83 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php-ldap-client' of Deployment 'php-ldap-client' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-ldap-client-deployment.yaml:50-74
────────────────────────────────────────
  50 ┌       - name: php-ldap-client
  51 │         image: mamo-ldap-php-client
  52 │         volumeMounts:
  53 │         - name: shared-files
  54 │           mountPath: /var/www/html
  55 │         - name: ldap-server-certificates
  56 │           mountPath: /etc/ldap/certs/certificate.crt
  57 │           subPath: certificate.crt
  58 └         - name: ldap-server-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'init' of Deployment 'php-ldap-client' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-ldap-client-deployment.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: init
  31 │         image: alpine:3.19.1
  32 │         envFrom:
  33 │         - secretRef:
  34 │             name: ldap-secrets
  35 │         - secretRef:
  36 │             name: postgres-root-credentials
  37 │         volumeMounts:
  38 └         - name: init-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'php-ldap-client' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-ldap-client-deployment.yaml:76-83
────────────────────────────────────────
  76 ┌       - name: nginx
  77 │         image: nginx-image
  78 │         volumeMounts:
  79 │         - name: shared-files
  80 │           mountPath: /var/www/html
  81 │         - name: nginx-config-volume
  82 │           mountPath: /etc/nginx/nginx.conf
  83 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php-ldap-client' of Deployment 'php-ldap-client' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-ldap-client-deployment.yaml:50-74
────────────────────────────────────────
  50 ┌       - name: php-ldap-client
  51 │         image: mamo-ldap-php-client
  52 │         volumeMounts:
  53 │         - name: shared-files
  54 │           mountPath: /var/www/html
  55 │         - name: ldap-server-certificates
  56 │           mountPath: /etc/ldap/certs/certificate.crt
  57 │           subPath: certificate.crt
  58 └         - name: ldap-server-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'init' of Deployment 'php-ldap-client' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-ldap-client-deployment.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: init
  31 │         image: alpine:3.19.1
  32 │         envFrom:
  33 │         - secretRef:
  34 │             name: ldap-secrets
  35 │         - secretRef:
  36 │             name: postgres-root-credentials
  37 │         volumeMounts:
  38 └         - name: init-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'php-ldap-client' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-ldap-client-deployment.yaml:76-83
────────────────────────────────────────
  76 ┌       - name: nginx
  77 │         image: nginx-image
  78 │         volumeMounts:
  79 │         - name: shared-files
  80 │           mountPath: /var/www/html
  81 │         - name: nginx-config-volume
  82 │           mountPath: /etc/nginx/nginx.conf
  83 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-ldap-client' of Deployment 'php-ldap-client' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-ldap-client-deployment.yaml:50-74
────────────────────────────────────────
  50 ┌       - name: php-ldap-client
  51 │         image: mamo-ldap-php-client
  52 │         volumeMounts:
  53 │         - name: shared-files
  54 │           mountPath: /var/www/html
  55 │         - name: ldap-server-certificates
  56 │           mountPath: /etc/ldap/certs/certificate.crt
  57 │           subPath: certificate.crt
  58 └         - name: ldap-server-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'init' of Deployment 'php-ldap-client' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-ldap-client-deployment.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: init
  31 │         image: alpine:3.19.1
  32 │         envFrom:
  33 │         - secretRef:
  34 │             name: ldap-secrets
  35 │         - secretRef:
  36 │             name: postgres-root-credentials
  37 │         volumeMounts:
  38 └         - name: init-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'php-ldap-client' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-ldap-client-deployment.yaml:76-83
────────────────────────────────────────
  76 ┌       - name: nginx
  77 │         image: nginx-image
  78 │         volumeMounts:
  79 │         - name: shared-files
  80 │           mountPath: /var/www/html
  81 │         - name: nginx-config-volume
  82 │           mountPath: /etc/nginx/nginx.conf
  83 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-ldap-client' of Deployment 'php-ldap-client' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-ldap-client-deployment.yaml:50-74
────────────────────────────────────────
  50 ┌       - name: php-ldap-client
  51 │         image: mamo-ldap-php-client
  52 │         volumeMounts:
  53 │         - name: shared-files
  54 │           mountPath: /var/www/html
  55 │         - name: ldap-server-certificates
  56 │           mountPath: /etc/ldap/certs/certificate.crt
  57 │           subPath: certificate.crt
  58 └         - name: ldap-server-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-ldap-client-deployment.yaml:76-83
────────────────────────────────────────
  76 ┌       - name: nginx
  77 │         image: nginx-image
  78 │         volumeMounts:
  79 │         - name: shared-files
  80 │           mountPath: /var/www/html
  81 │         - name: nginx-config-volume
  82 │           mountPath: /etc/nginx/nginx.conf
  83 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-ldap-client-deployment.yaml:50-74
────────────────────────────────────────
  50 ┌       - name: php-ldap-client
  51 │         image: mamo-ldap-php-client
  52 │         volumeMounts:
  53 │         - name: shared-files
  54 │           mountPath: /var/www/html
  55 │         - name: ldap-server-certificates
  56 │           mountPath: /etc/ldap/certs/certificate.crt
  57 │           subPath: certificate.crt
  58 └         - name: ldap-server-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-ldap-client-deployment.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: init
  31 │         image: alpine:3.19.1
  32 │         envFrom:
  33 │         - secretRef:
  34 │             name: ldap-secrets
  35 │         - secretRef:
  36 │             name: postgres-root-credentials
  37 │         volumeMounts:
  38 └         - name: init-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "init" of deployment "php-ldap-client" in "mattermost-operator" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-ldap-client-deployment.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: init
  31 │         image: alpine:3.19.1
  32 │         envFrom:
  33 │         - secretRef:
  34 │             name: ldap-secrets
  35 │         - secretRef:
  36 │             name: postgres-root-credentials
  37 │         volumeMounts:
  38 └         - name: init-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "php-ldap-client" in "mattermost-operator" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-ldap-client-deployment.yaml:76-83
────────────────────────────────────────
  76 ┌       - name: nginx
  77 │         image: nginx-image
  78 │         volumeMounts:
  79 │         - name: shared-files
  80 │           mountPath: /var/www/html
  81 │         - name: nginx-config-volume
  82 │           mountPath: /etc/nginx/nginx.conf
  83 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-ldap-client" of deployment "php-ldap-client" in "mattermost-operator" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-ldap-client-deployment.yaml:50-74
────────────────────────────────────────
  50 ┌       - name: php-ldap-client
  51 │         image: mamo-ldap-php-client
  52 │         volumeMounts:
  53 │         - name: shared-files
  54 │           mountPath: /var/www/html
  55 │         - name: ldap-server-certificates
  56 │           mountPath: /etc/ldap/certs/certificate.crt
  57 │           subPath: certificate.crt
  58 └         - name: ldap-server-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-ldap-client-deployment.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: init
  31 │         image: alpine:3.19.1
  32 │         envFrom:
  33 │         - secretRef:
  34 │             name: ldap-secrets
  35 │         - secretRef:
  36 │             name: postgres-root-credentials
  37 │         volumeMounts:
  38 └         - name: init-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-ldap-client-deployment.yaml:50-74
────────────────────────────────────────
  50 ┌       - name: php-ldap-client
  51 │         image: mamo-ldap-php-client
  52 │         volumeMounts:
  53 │         - name: shared-files
  54 │           mountPath: /var/www/html
  55 │         - name: ldap-server-certificates
  56 │           mountPath: /etc/ldap/certs/certificate.crt
  57 │           subPath: certificate.crt
  58 └         - name: ldap-server-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-ldap-client-deployment.yaml:76-83
────────────────────────────────────────
  76 ┌       - name: nginx
  77 │         image: nginx-image
  78 │         volumeMounts:
  79 │         - name: shared-files
  80 │           mountPath: /var/www/html
  81 │         - name: nginx-config-volume
  82 │           mountPath: /etc/nginx/nginx.conf
  83 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-ldap-client in mattermost-operator namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-ldap-client-deployment.yaml:76-83
────────────────────────────────────────
  76 ┌       - name: nginx
  77 │         image: nginx-image
  78 │         volumeMounts:
  79 │         - name: shared-files
  80 │           mountPath: /var/www/html
  81 │         - name: nginx-config-volume
  82 │           mountPath: /etc/nginx/nginx.conf
  83 └           subPath: nginx.conf
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-ldap-client in mattermost-operator namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-ldap-client-deployment.yaml:50-74
────────────────────────────────────────
  50 ┌       - name: php-ldap-client
  51 │         image: mamo-ldap-php-client
  52 │         volumeMounts:
  53 │         - name: shared-files
  54 │           mountPath: /var/www/html
  55 │         - name: ldap-server-certificates
  56 │           mountPath: /etc/ldap/certs/certificate.crt
  57 │           subPath: certificate.crt
  58 └         - name: ldap-server-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-ldap-client in mattermost-operator namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-ldap-client-deployment.yaml:30-47
────────────────────────────────────────
  30 ┌       - name: init
  31 │         image: alpine:3.19.1
  32 │         envFrom:
  33 │         - secretRef:
  34 │             name: ldap-secrets
  35 │         - secretRef:
  36 │             name: postgres-root-credentials
  37 │         volumeMounts:
  38 └         - name: init-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-ldap-client in mattermost-operator namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-ldap-client-deployment.yaml:16-83
────────────────────────────────────────
  16 ┌       volumes:
  17 │       - name: shared-files
  18 │         emptyDir: {}
  19 │       - name: nginx-config-volume
  20 │         configMap:
  21 │           name: nginx-config
  22 │       - name: init-scripts
  23 │         configMap:
  24 └           name: init-scripts
  ..   
────────────────────────────────────────



php-onepage.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-onepage' of Deployment 'php-onepage' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-onepage.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: registry.digitalocean.com/unmutedtech/onepage:latest
  19 │         name: php-onepage
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-onepage' of Deployment 'php-onepage' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-onepage.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: registry.digitalocean.com/unmutedtech/onepage:latest
  19 │         name: php-onepage
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-onepage' of 'deployment' 'php-onepage' in 'onepage' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-onepage.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: registry.digitalocean.com/unmutedtech/onepage:latest
  19 │         name: php-onepage
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'php-onepage' of Deployment 'php-onepage' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 php-onepage.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: registry.digitalocean.com/unmutedtech/onepage:latest
  19 │         name: php-onepage
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-onepage' of Deployment 'php-onepage' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-onepage.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: registry.digitalocean.com/unmutedtech/onepage:latest
  19 │         name: php-onepage
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'php-onepage' of Deployment 'php-onepage' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php-onepage.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: registry.digitalocean.com/unmutedtech/onepage:latest
  19 │         name: php-onepage
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-onepage' of Deployment 'php-onepage' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-onepage.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: registry.digitalocean.com/unmutedtech/onepage:latest
  19 │         name: php-onepage
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'php-onepage' of Deployment 'php-onepage' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 php-onepage.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: registry.digitalocean.com/unmutedtech/onepage:latest
  19 │         name: php-onepage
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php-onepage' of Deployment 'php-onepage' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php-onepage.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: registry.digitalocean.com/unmutedtech/onepage:latest
  19 │         name: php-onepage
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php-onepage' of Deployment 'php-onepage' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php-onepage.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: registry.digitalocean.com/unmutedtech/onepage:latest
  19 │         name: php-onepage
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-onepage' of Deployment 'php-onepage' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-onepage.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: registry.digitalocean.com/unmutedtech/onepage:latest
  19 │         name: php-onepage
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-onepage' of Deployment 'php-onepage' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-onepage.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: registry.digitalocean.com/unmutedtech/onepage:latest
  19 │         name: php-onepage
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-onepage.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: registry.digitalocean.com/unmutedtech/onepage:latest
  19 │         name: php-onepage
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-onepage" of deployment "php-onepage" in "onepage" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-onepage.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: registry.digitalocean.com/unmutedtech/onepage:latest
  19 │         name: php-onepage
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-onepage.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: registry.digitalocean.com/unmutedtech/onepage:latest
  19 │         name: php-onepage
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment php-onepage in onepage namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-onepage in onepage namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-onepage.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: registry.digitalocean.com/unmutedtech/onepage:latest
  19 │         name: php-onepage
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-onepage in onepage namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-onepage.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: registry.digitalocean.com/unmutedtech/onepage:latest
  19 │         name: php-onepage
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container php-onepage in deployment php-onepage (namespace: onepage) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 php-onepage.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: registry.digitalocean.com/unmutedtech/onepage:latest
  19 │         name: php-onepage
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────



php-page-sec1_3.yaml (kubernetes)
=================================
Tests: 108 (SUCCESSES: 96, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-page' of Deployment 'php-page' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-page-sec1_3.yaml:26-36
────────────────────────────────────────
  26 ┌       - name: php-page
  27 │         image: alfesito/php-page:v1
  28 │         ports:
  29 │         - containerPort: 80
  30 │         resources:
  31 │           requests:
  32 │             memory: 128Mi
  33 │             cpu: 250m
  34 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-page' of Deployment 'php-page' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-page-sec1_3.yaml:26-36
────────────────────────────────────────
  26 ┌       - name: php-page
  27 │         image: alfesito/php-page:v1
  28 │         ports:
  29 │         - containerPort: 80
  30 │         resources:
  31 │           requests:
  32 │             memory: 128Mi
  33 │             cpu: 250m
  34 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-page' of 'deployment' 'php-page' in 'front' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-page-sec1_3.yaml:26-36
────────────────────────────────────────
  26 ┌       - name: php-page
  27 │         image: alfesito/php-page:v1
  28 │         ports:
  29 │         - containerPort: 80
  30 │         resources:
  31 │           requests:
  32 │             memory: 128Mi
  33 │             cpu: 250m
  34 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-page' of Deployment 'php-page' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-page-sec1_3.yaml:26-36
────────────────────────────────────────
  26 ┌       - name: php-page
  27 │         image: alfesito/php-page:v1
  28 │         ports:
  29 │         - containerPort: 80
  30 │         resources:
  31 │           requests:
  32 │             memory: 128Mi
  33 │             cpu: 250m
  34 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-page' of Deployment 'php-page' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-page-sec1_3.yaml:26-36
────────────────────────────────────────
  26 ┌       - name: php-page
  27 │         image: alfesito/php-page:v1
  28 │         ports:
  29 │         - containerPort: 80
  30 │         resources:
  31 │           requests:
  32 │             memory: 128Mi
  33 │             cpu: 250m
  34 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-page' of Deployment 'php-page' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-page-sec1_3.yaml:26-36
────────────────────────────────────────
  26 ┌       - name: php-page
  27 │         image: alfesito/php-page:v1
  28 │         ports:
  29 │         - containerPort: 80
  30 │         resources:
  31 │           requests:
  32 │             memory: 128Mi
  33 │             cpu: 250m
  34 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-page' of Deployment 'php-page' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-page-sec1_3.yaml:26-36
────────────────────────────────────────
  26 ┌       - name: php-page
  27 │         image: alfesito/php-page:v1
  28 │         ports:
  29 │         - containerPort: 80
  30 │         resources:
  31 │           requests:
  32 │             memory: 128Mi
  33 │             cpu: 250m
  34 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-page-sec1_3.yaml:26-36
────────────────────────────────────────
  26 ┌       - name: php-page
  27 │         image: alfesito/php-page:v1
  28 │         ports:
  29 │         - containerPort: 80
  30 │         resources:
  31 │           requests:
  32 │             memory: 128Mi
  33 │             cpu: 250m
  34 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-page" of deployment "php-page" in "front" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-page-sec1_3.yaml:26-36
────────────────────────────────────────
  26 ┌       - name: php-page
  27 │         image: alfesito/php-page:v1
  28 │         ports:
  29 │         - containerPort: 80
  30 │         resources:
  31 │           requests:
  32 │             memory: 128Mi
  33 │             cpu: 250m
  34 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-page-sec1_3.yaml:26-36
────────────────────────────────────────
  26 ┌       - name: php-page
  27 │         image: alfesito/php-page:v1
  28 │         ports:
  29 │         - containerPort: 80
  30 │         resources:
  31 │           requests:
  32 │             memory: 128Mi
  33 │             cpu: 250m
  34 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment php-page in front namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container php-page in deployment php-page (namespace: front) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 php-page-sec1_3.yaml:26-36
────────────────────────────────────────
  26 ┌       - name: php-page
  27 │         image: alfesito/php-page:v1
  28 │         ports:
  29 │         - containerPort: 80
  30 │         resources:
  31 │           requests:
  32 │             memory: 128Mi
  33 │             cpu: 250m
  34 └           limits:
  ..   
────────────────────────────────────────



php-page-sec_3.yaml (kubernetes)
================================
Tests: 108 (SUCCESSES: 96, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-page' of Deployment 'php-page' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-page-sec_3.yaml:26-36
────────────────────────────────────────
  26 ┌       - name: php-page
  27 │         image: alfesito/php-page:v1
  28 │         ports:
  29 │         - containerPort: 80
  30 │         resources:
  31 │           requests:
  32 │             memory: 128Mi
  33 │             cpu: 250m
  34 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-page' of Deployment 'php-page' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-page-sec_3.yaml:26-36
────────────────────────────────────────
  26 ┌       - name: php-page
  27 │         image: alfesito/php-page:v1
  28 │         ports:
  29 │         - containerPort: 80
  30 │         resources:
  31 │           requests:
  32 │             memory: 128Mi
  33 │             cpu: 250m
  34 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-page' of 'deployment' 'php-page' in 'front' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-page-sec_3.yaml:26-36
────────────────────────────────────────
  26 ┌       - name: php-page
  27 │         image: alfesito/php-page:v1
  28 │         ports:
  29 │         - containerPort: 80
  30 │         resources:
  31 │           requests:
  32 │             memory: 128Mi
  33 │             cpu: 250m
  34 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-page' of Deployment 'php-page' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-page-sec_3.yaml:26-36
────────────────────────────────────────
  26 ┌       - name: php-page
  27 │         image: alfesito/php-page:v1
  28 │         ports:
  29 │         - containerPort: 80
  30 │         resources:
  31 │           requests:
  32 │             memory: 128Mi
  33 │             cpu: 250m
  34 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-page' of Deployment 'php-page' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-page-sec_3.yaml:26-36
────────────────────────────────────────
  26 ┌       - name: php-page
  27 │         image: alfesito/php-page:v1
  28 │         ports:
  29 │         - containerPort: 80
  30 │         resources:
  31 │           requests:
  32 │             memory: 128Mi
  33 │             cpu: 250m
  34 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-page' of Deployment 'php-page' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-page-sec_3.yaml:26-36
────────────────────────────────────────
  26 ┌       - name: php-page
  27 │         image: alfesito/php-page:v1
  28 │         ports:
  29 │         - containerPort: 80
  30 │         resources:
  31 │           requests:
  32 │             memory: 128Mi
  33 │             cpu: 250m
  34 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-page' of Deployment 'php-page' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-page-sec_3.yaml:26-36
────────────────────────────────────────
  26 ┌       - name: php-page
  27 │         image: alfesito/php-page:v1
  28 │         ports:
  29 │         - containerPort: 80
  30 │         resources:
  31 │           requests:
  32 │             memory: 128Mi
  33 │             cpu: 250m
  34 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-page-sec_3.yaml:26-36
────────────────────────────────────────
  26 ┌       - name: php-page
  27 │         image: alfesito/php-page:v1
  28 │         ports:
  29 │         - containerPort: 80
  30 │         resources:
  31 │           requests:
  32 │             memory: 128Mi
  33 │             cpu: 250m
  34 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-page" of deployment "php-page" in "front" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-page-sec_3.yaml:26-36
────────────────────────────────────────
  26 ┌       - name: php-page
  27 │         image: alfesito/php-page:v1
  28 │         ports:
  29 │         - containerPort: 80
  30 │         resources:
  31 │           requests:
  32 │             memory: 128Mi
  33 │             cpu: 250m
  34 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-page-sec_3.yaml:26-36
────────────────────────────────────────
  26 ┌       - name: php-page
  27 │         image: alfesito/php-page:v1
  28 │         ports:
  29 │         - containerPort: 80
  30 │         resources:
  31 │           requests:
  32 │             memory: 128Mi
  33 │             cpu: 250m
  34 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment php-page in front namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container php-page in deployment php-page (namespace: front) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 php-page-sec_3.yaml:26-36
────────────────────────────────────────
  26 ┌       - name: php-page
  27 │         image: alfesito/php-page:v1
  28 │         ports:
  29 │         - containerPort: 80
  30 │         resources:
  31 │           requests:
  32 │             memory: 128Mi
  33 │             cpu: 250m
  34 └           limits:
  ..   
────────────────────────────────────────



php-page1_3.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 95, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-page' of Deployment 'php-page' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-page1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 │           requests:
  30 │             memory: 128Mi
  31 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-page' of Deployment 'php-page' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-page1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 │           requests:
  30 │             memory: 128Mi
  31 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-page' of 'deployment' 'php-page' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-page1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 │           requests:
  30 │             memory: 128Mi
  31 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-page' of Deployment 'php-page' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-page1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 │           requests:
  30 │             memory: 128Mi
  31 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-page' of Deployment 'php-page' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-page1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 │           requests:
  30 │             memory: 128Mi
  31 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-page' of Deployment 'php-page' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-page1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 │           requests:
  30 │             memory: 128Mi
  31 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-page' of Deployment 'php-page' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-page1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 │           requests:
  30 │             memory: 128Mi
  31 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-page1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 │           requests:
  30 │             memory: 128Mi
  31 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-page" of deployment "php-page" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-page1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 │           requests:
  30 │             memory: 128Mi
  31 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-page1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 │           requests:
  30 │             memory: 128Mi
  31 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment php-page in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-page1_3.yaml:4-8
────────────────────────────────────────
   4 ┌   name: php-page
   5 │   namespace: default
   6 │   labels:
   7 │     app: php-page
   8 └     version: v1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-page in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-page1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 │           requests:
  30 │             memory: 128Mi
  31 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-page in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-page1_3.yaml:21-34
────────────────────────────────────────
  21 ┌       serviceAccountName: web
  22 │       containers:
  23 │       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container php-page in deployment php-page (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 php-page1_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 │           requests:
  30 │             memory: 128Mi
  31 └             cpu: 250m
  ..   
────────────────────────────────────────



php-page_3.yaml (kubernetes)
============================
Tests: 109 (SUCCESSES: 95, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'php-page' of Deployment 'php-page' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php-page_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 │           requests:
  30 │             memory: 128Mi
  31 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php-page' of Deployment 'php-page' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php-page_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 │           requests:
  30 │             memory: 128Mi
  31 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php-page' of 'deployment' 'php-page' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php-page_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 │           requests:
  30 │             memory: 128Mi
  31 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php-page' of Deployment 'php-page' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php-page_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 │           requests:
  30 │             memory: 128Mi
  31 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php-page' of Deployment 'php-page' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php-page_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 │           requests:
  30 │             memory: 128Mi
  31 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php-page' of Deployment 'php-page' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php-page_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 │           requests:
  30 │             memory: 128Mi
  31 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php-page' of Deployment 'php-page' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php-page_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 │           requests:
  30 │             memory: 128Mi
  31 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php-page_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 │           requests:
  30 │             memory: 128Mi
  31 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php-page" of deployment "php-page" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php-page_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 │           requests:
  30 │             memory: 128Mi
  31 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php-page_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 │           requests:
  30 │             memory: 128Mi
  31 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment php-page in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php-page_3.yaml:4-8
────────────────────────────────────────
   4 ┌   name: php-page
   5 │   namespace: default
   6 │   labels:
   7 │     app: php-page
   8 └     version: v1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-page in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-page_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 │           requests:
  30 │             memory: 128Mi
  31 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-page in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php-page_3.yaml:21-34
────────────────────────────────────────
  21 ┌       serviceAccountName: web
  22 │       containers:
  23 │       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container php-page in deployment php-page (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 php-page_3.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: php-page
  24 │         image: alfesito/php-page:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         ports:
  27 │         - containerPort: 8080
  28 │         resources:
  29 │           requests:
  30 │             memory: 128Mi
  31 └             cpu: 250m
  ..   
────────────────────────────────────────



php_deployment1.yaml (kubernetes)
=================================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'phpmyadmin' of 'deployment' 'phpmyadmin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 php_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 php_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 php_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "phpmyadmin" of deployment "phpmyadmin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment phpmyadmin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php_deployment1.yaml:4
────────────────────────────────────────
   4 [   name: phpmyadmin
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment phpmyadmin in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container phpmyadmin in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment phpmyadmin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php_deployment1.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container phpmyadmin in deployment phpmyadmin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 php_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────



php_deployment_1.yaml (kubernetes)
==================================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'phpapp' of Deployment 'phpapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 php_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: phpapp
  18 │         image: php:8.4-alpine
  19 │         workingDir: /app
  20 │         command:
  21 │         - php
  22 │         - -S
  23 │         - 127.0.0.1:8080
  24 │         - index.php
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'phpapp' of Deployment 'phpapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 php_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: phpapp
  18 │         image: php:8.4-alpine
  19 │         workingDir: /app
  20 │         command:
  21 │         - php
  22 │         - -S
  23 │         - 127.0.0.1:8080
  24 │         - index.php
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'phpapp' of 'deployment' 'phpapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 php_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: phpapp
  18 │         image: php:8.4-alpine
  19 │         workingDir: /app
  20 │         command:
  21 │         - php
  22 │         - -S
  23 │         - 127.0.0.1:8080
  24 │         - index.php
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'phpapp' of Deployment 'phpapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 php_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: phpapp
  18 │         image: php:8.4-alpine
  19 │         workingDir: /app
  20 │         command:
  21 │         - php
  22 │         - -S
  23 │         - 127.0.0.1:8080
  24 │         - index.php
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'phpapp' of Deployment 'phpapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 php_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: phpapp
  18 │         image: php:8.4-alpine
  19 │         workingDir: /app
  20 │         command:
  21 │         - php
  22 │         - -S
  23 │         - 127.0.0.1:8080
  24 │         - index.php
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'phpapp' of Deployment 'phpapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 php_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: phpapp
  18 │         image: php:8.4-alpine
  19 │         workingDir: /app
  20 │         command:
  21 │         - php
  22 │         - -S
  23 │         - 127.0.0.1:8080
  24 │         - index.php
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'phpapp' of Deployment 'phpapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 php_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: phpapp
  18 │         image: php:8.4-alpine
  19 │         workingDir: /app
  20 │         command:
  21 │         - php
  22 │         - -S
  23 │         - 127.0.0.1:8080
  24 │         - index.php
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'phpapp' of Deployment 'phpapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 php_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: phpapp
  18 │         image: php:8.4-alpine
  19 │         workingDir: /app
  20 │         command:
  21 │         - php
  22 │         - -S
  23 │         - 127.0.0.1:8080
  24 │         - index.php
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'phpapp' of Deployment 'phpapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 php_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: phpapp
  18 │         image: php:8.4-alpine
  19 │         workingDir: /app
  20 │         command:
  21 │         - php
  22 │         - -S
  23 │         - 127.0.0.1:8080
  24 │         - index.php
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'phpapp' of Deployment 'phpapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 php_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: phpapp
  18 │         image: php:8.4-alpine
  19 │         workingDir: /app
  20 │         command:
  21 │         - php
  22 │         - -S
  23 │         - 127.0.0.1:8080
  24 │         - index.php
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'phpapp' of Deployment 'phpapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 php_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: phpapp
  18 │         image: php:8.4-alpine
  19 │         workingDir: /app
  20 │         command:
  21 │         - php
  22 │         - -S
  23 │         - 127.0.0.1:8080
  24 │         - index.php
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 php_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: phpapp
  18 │         image: php:8.4-alpine
  19 │         workingDir: /app
  20 │         command:
  21 │         - php
  22 │         - -S
  23 │         - 127.0.0.1:8080
  24 │         - index.php
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "phpapp" of deployment "phpapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 php_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: phpapp
  18 │         image: php:8.4-alpine
  19 │         workingDir: /app
  20 │         command:
  21 │         - php
  22 │         - -S
  23 │         - 127.0.0.1:8080
  24 │         - index.php
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 php_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: phpapp
  18 │         image: php:8.4-alpine
  19 │         workingDir: /app
  20 │         command:
  21 │         - php
  22 │         - -S
  23 │         - 127.0.0.1:8080
  24 │         - index.php
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment phpapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 php_deployment_1.yaml:4
────────────────────────────────────────
   4 [   name: phpapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container phpapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php_deployment_1.yaml:17-29
────────────────────────────────────────
  17 ┌       - name: phpapp
  18 │         image: php:8.4-alpine
  19 │         workingDir: /app
  20 │         command:
  21 │         - php
  22 │         - -S
  23 │         - 127.0.0.1:8080
  24 │         - index.php
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment phpapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 php_deployment_1.yaml:16-33
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: phpapp
  18 │         image: php:8.4-alpine
  19 │         workingDir: /app
  20 │         command:
  21 │         - php
  22 │         - -S
  23 │         - 127.0.0.1:8080
  24 └         - index.php
  ..   
────────────────────────────────────────



phpmmyadmin-deploy.yaml (kubernetes)
====================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 phpmmyadmin-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: bitnami/phpmyadmin:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: mariadb-configmap
  25 └               key: database_url
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 phpmmyadmin-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: bitnami/phpmyadmin:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: mariadb-configmap
  25 └               key: database_url
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'phpmyadmin' of 'deployment' 'phpmyadmin-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 phpmmyadmin-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: bitnami/phpmyadmin:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: mariadb-configmap
  25 └               key: database_url
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 phpmmyadmin-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: bitnami/phpmyadmin:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: mariadb-configmap
  25 └               key: database_url
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 phpmmyadmin-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: bitnami/phpmyadmin:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: mariadb-configmap
  25 └               key: database_url
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 phpmmyadmin-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: bitnami/phpmyadmin:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: mariadb-configmap
  25 └               key: database_url
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 phpmmyadmin-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: bitnami/phpmyadmin:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: mariadb-configmap
  25 └               key: database_url
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 phpmmyadmin-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: bitnami/phpmyadmin:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: mariadb-configmap
  25 └               key: database_url
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 phpmmyadmin-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: bitnami/phpmyadmin:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: mariadb-configmap
  25 └               key: database_url
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 phpmmyadmin-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: bitnami/phpmyadmin:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: mariadb-configmap
  25 └               key: database_url
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 phpmmyadmin-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: bitnami/phpmyadmin:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: mariadb-configmap
  25 └               key: database_url
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 phpmmyadmin-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: bitnami/phpmyadmin:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: mariadb-configmap
  25 └               key: database_url
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 phpmmyadmin-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: bitnami/phpmyadmin:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: mariadb-configmap
  25 └               key: database_url
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "phpmyadmin" of deployment "phpmyadmin-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 phpmmyadmin-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: bitnami/phpmyadmin:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: mariadb-configmap
  25 └               key: database_url
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 phpmmyadmin-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: bitnami/phpmyadmin:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: mariadb-configmap
  25 └               key: database_url
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment phpmyadmin-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 phpmmyadmin-deploy.yaml:4
────────────────────────────────────────
   4 [   name: phpmyadmin-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container phpmyadmin-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmmyadmin-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: bitnami/phpmyadmin:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: mariadb-configmap
  25 └               key: database_url
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment phpmyadmin-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmmyadmin-deploy.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: phpmyadmin
  17 │         image: bitnami/phpmyadmin:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container phpmyadmin in deployment phpmyadmin-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 phpmmyadmin-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: bitnami/phpmyadmin:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         env:
  21 │         - name: DATABASE_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: mariadb-configmap
  25 └               key: database_url
────────────────────────────────────────



phpmyadmin-deploy.yaml (kubernetes)
===================================
Tests: 109 (SUCCESSES: 95, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'phpmyadmin-container' of Deployment 'phpmyadmin-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 phpmyadmin-deploy.yaml:20-32
────────────────────────────────────────
  20 ┌         - envFrom:
  21 │             - configMapRef:
  22 │                 name: phpmyadmin-configmap
  23 │           image: olv04:5000/phpmyadmin:5.2.1-apache
  24 │           imagePullPolicy: Always
  25 │           name: phpmyadmin-container
  26 │           resources:
  27 │             limits:
  28 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'phpmyadmin-container' of Deployment 'phpmyadmin-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 phpmyadmin-deploy.yaml:20-32
────────────────────────────────────────
  20 ┌         - envFrom:
  21 │             - configMapRef:
  22 │                 name: phpmyadmin-configmap
  23 │           image: olv04:5000/phpmyadmin:5.2.1-apache
  24 │           imagePullPolicy: Always
  25 │           name: phpmyadmin-container
  26 │           resources:
  27 │             limits:
  28 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'phpmyadmin-container' of 'deployment' 'phpmyadmin-deploy' in 'olv' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 phpmyadmin-deploy.yaml:20-32
────────────────────────────────────────
  20 ┌         - envFrom:
  21 │             - configMapRef:
  22 │                 name: phpmyadmin-configmap
  23 │           image: olv04:5000/phpmyadmin:5.2.1-apache
  24 │           imagePullPolicy: Always
  25 │           name: phpmyadmin-container
  26 │           resources:
  27 │             limits:
  28 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'phpmyadmin-container' of Deployment 'phpmyadmin-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 phpmyadmin-deploy.yaml:20-32
────────────────────────────────────────
  20 ┌         - envFrom:
  21 │             - configMapRef:
  22 │                 name: phpmyadmin-configmap
  23 │           image: olv04:5000/phpmyadmin:5.2.1-apache
  24 │           imagePullPolicy: Always
  25 │           name: phpmyadmin-container
  26 │           resources:
  27 │             limits:
  28 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'phpmyadmin-container' of Deployment 'phpmyadmin-deploy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 phpmyadmin-deploy.yaml:20-32
────────────────────────────────────────
  20 ┌         - envFrom:
  21 │             - configMapRef:
  22 │                 name: phpmyadmin-configmap
  23 │           image: olv04:5000/phpmyadmin:5.2.1-apache
  24 │           imagePullPolicy: Always
  25 │           name: phpmyadmin-container
  26 │           resources:
  27 │             limits:
  28 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'phpmyadmin-container' of Deployment 'phpmyadmin-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 phpmyadmin-deploy.yaml:20-32
────────────────────────────────────────
  20 ┌         - envFrom:
  21 │             - configMapRef:
  22 │                 name: phpmyadmin-configmap
  23 │           image: olv04:5000/phpmyadmin:5.2.1-apache
  24 │           imagePullPolicy: Always
  25 │           name: phpmyadmin-container
  26 │           resources:
  27 │             limits:
  28 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'phpmyadmin-container' of Deployment 'phpmyadmin-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 phpmyadmin-deploy.yaml:20-32
────────────────────────────────────────
  20 ┌         - envFrom:
  21 │             - configMapRef:
  22 │                 name: phpmyadmin-configmap
  23 │           image: olv04:5000/phpmyadmin:5.2.1-apache
  24 │           imagePullPolicy: Always
  25 │           name: phpmyadmin-container
  26 │           resources:
  27 │             limits:
  28 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'phpmyadmin-container' of Deployment 'phpmyadmin-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 phpmyadmin-deploy.yaml:20-32
────────────────────────────────────────
  20 ┌         - envFrom:
  21 │             - configMapRef:
  22 │                 name: phpmyadmin-configmap
  23 │           image: olv04:5000/phpmyadmin:5.2.1-apache
  24 │           imagePullPolicy: Always
  25 │           name: phpmyadmin-container
  26 │           resources:
  27 │             limits:
  28 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 phpmyadmin-deploy.yaml:20-32
────────────────────────────────────────
  20 ┌         - envFrom:
  21 │             - configMapRef:
  22 │                 name: phpmyadmin-configmap
  23 │           image: olv04:5000/phpmyadmin:5.2.1-apache
  24 │           imagePullPolicy: Always
  25 │           name: phpmyadmin-container
  26 │           resources:
  27 │             limits:
  28 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "phpmyadmin-container" of deployment "phpmyadmin-deploy" in "olv" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 phpmyadmin-deploy.yaml:20-32
────────────────────────────────────────
  20 ┌         - envFrom:
  21 │             - configMapRef:
  22 │                 name: phpmyadmin-configmap
  23 │           image: olv04:5000/phpmyadmin:5.2.1-apache
  24 │           imagePullPolicy: Always
  25 │           name: phpmyadmin-container
  26 │           resources:
  27 │             limits:
  28 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 phpmyadmin-deploy.yaml:20-32
────────────────────────────────────────
  20 ┌         - envFrom:
  21 │             - configMapRef:
  22 │                 name: phpmyadmin-configmap
  23 │           image: olv04:5000/phpmyadmin:5.2.1-apache
  24 │           imagePullPolicy: Always
  25 │           name: phpmyadmin-container
  26 │           resources:
  27 │             limits:
  28 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container phpmyadmin-deploy in olv namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin-deploy.yaml:20-32
────────────────────────────────────────
  20 ┌         - envFrom:
  21 │             - configMapRef:
  22 │                 name: phpmyadmin-configmap
  23 │           image: olv04:5000/phpmyadmin:5.2.1-apache
  24 │           imagePullPolicy: Always
  25 │           name: phpmyadmin-container
  26 │           resources:
  27 │             limits:
  28 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment phpmyadmin-deploy in olv namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin-deploy.yaml:19-32
────────────────────────────────────────
  19 ┌       containers:
  20 │         - envFrom:
  21 │             - configMapRef:
  22 │                 name: phpmyadmin-configmap
  23 │           image: olv04:5000/phpmyadmin:5.2.1-apache
  24 │           imagePullPolicy: Always
  25 │           name: phpmyadmin-container
  26 │           resources:
  27 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container phpmyadmin-container in deployment phpmyadmin-deploy (namespace: olv) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 phpmyadmin-deploy.yaml:20-32
────────────────────────────────────────
  20 ┌         - envFrom:
  21 │             - configMapRef:
  22 │                 name: phpmyadmin-configmap
  23 │           image: olv04:5000/phpmyadmin:5.2.1-apache
  24 │           imagePullPolicy: Always
  25 │           name: phpmyadmin-container
  26 │           resources:
  27 │             limits:
  28 └               cpu: 100m
  ..   
────────────────────────────────────────



phpmyadmin-deploy1.yaml (kubernetes)
====================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 phpmyadmin-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 phpmyadmin-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'phpmyadmin' of 'deployment' 'phpmyadmin' in 'web-app' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 phpmyadmin-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 phpmyadmin-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 phpmyadmin-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 phpmyadmin-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 phpmyadmin-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 phpmyadmin-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 phpmyadmin-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 phpmyadmin-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 phpmyadmin-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 phpmyadmin-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 phpmyadmin-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "phpmyadmin" of deployment "phpmyadmin" in "web-app" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 phpmyadmin-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 phpmyadmin-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment phpmyadmin in web-app namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container phpmyadmin in web-app namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment phpmyadmin in web-app namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin-deploy1.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container phpmyadmin in deployment phpmyadmin (namespace: web-app) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 phpmyadmin-deploy1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │         - name: PMA_HOST
  20 │           value: mysql
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────



phpmyadmin-deployment-group.yaml (kubernetes)
=============================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 phpmyadmin-deployment-group.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service.database-group # mysql server
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 phpmyadmin-deployment-group.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service.database-group # mysql server
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'phpmyadmin' of 'deployment' 'phpmyadmin-deployment' in 'apps-group' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 phpmyadmin-deployment-group.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service.database-group # mysql server
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 phpmyadmin-deployment-group.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service.database-group # mysql server
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 phpmyadmin-deployment-group.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service.database-group # mysql server
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 phpmyadmin-deployment-group.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service.database-group # mysql server
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 phpmyadmin-deployment-group.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service.database-group # mysql server
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 phpmyadmin-deployment-group.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service.database-group # mysql server
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 phpmyadmin-deployment-group.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service.database-group # mysql server
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 phpmyadmin-deployment-group.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service.database-group # mysql server
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 phpmyadmin-deployment-group.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service.database-group # mysql server
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 phpmyadmin-deployment-group.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service.database-group # mysql server
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 phpmyadmin-deployment-group.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service.database-group # mysql server
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "phpmyadmin" of deployment "phpmyadmin-deployment" in "apps-group" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 phpmyadmin-deployment-group.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service.database-group # mysql server
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 phpmyadmin-deployment-group.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service.database-group # mysql server
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment phpmyadmin-deployment in apps-group namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container phpmyadmin-deployment in apps-group namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin-deployment-group.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service.database-group # mysql server
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment phpmyadmin-deployment in apps-group namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin-deployment-group.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service.database-group # mysql server
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container phpmyadmin in deployment phpmyadmin-deployment (namespace: apps-group) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 phpmyadmin-deployment-group.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service.database-group # mysql server
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────



phpmyadmin-deployment.yaml (kubernetes)
=======================================
Tests: 109 (SUCCESSES: 88, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 phpmyadmin-deployment.yaml:27-44
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: MYSQL_ROOT_PASSWORD
  29 │               value: changeme
  30 │             - name: MYSQL_USERNAME
  31 │               value: wp-user
  32 │             - name: PMA_HOST
  33 │               value: database
  34 │             - name: UPLOAD_LIMIT # Esta es la nueva variable de entorno
  35 └               value: "100M" # Ajusta este valor según tus necesidades
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 phpmyadmin-deployment.yaml:27-44
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: MYSQL_ROOT_PASSWORD
  29 │               value: changeme
  30 │             - name: MYSQL_USERNAME
  31 │               value: wp-user
  32 │             - name: PMA_HOST
  33 │               value: database
  34 │             - name: UPLOAD_LIMIT # Esta es la nueva variable de entorno
  35 └               value: "100M" # Ajusta este valor según tus necesidades
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'phpmyadmin' of 'deployment' 'phpmyadmin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 phpmyadmin-deployment.yaml:27-44
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: MYSQL_ROOT_PASSWORD
  29 │               value: changeme
  30 │             - name: MYSQL_USERNAME
  31 │               value: wp-user
  32 │             - name: PMA_HOST
  33 │               value: database
  34 │             - name: UPLOAD_LIMIT # Esta es la nueva variable de entorno
  35 └               value: "100M" # Ajusta este valor según tus necesidades
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 phpmyadmin-deployment.yaml:27-44
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: MYSQL_ROOT_PASSWORD
  29 │               value: changeme
  30 │             - name: MYSQL_USERNAME
  31 │               value: wp-user
  32 │             - name: PMA_HOST
  33 │               value: database
  34 │             - name: UPLOAD_LIMIT # Esta es la nueva variable de entorno
  35 └               value: "100M" # Ajusta este valor según tus necesidades
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 phpmyadmin-deployment.yaml:27-44
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: MYSQL_ROOT_PASSWORD
  29 │               value: changeme
  30 │             - name: MYSQL_USERNAME
  31 │               value: wp-user
  32 │             - name: PMA_HOST
  33 │               value: database
  34 │             - name: UPLOAD_LIMIT # Esta es la nueva variable de entorno
  35 └               value: "100M" # Ajusta este valor según tus necesidades
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 phpmyadmin-deployment.yaml:27-44
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: MYSQL_ROOT_PASSWORD
  29 │               value: changeme
  30 │             - name: MYSQL_USERNAME
  31 │               value: wp-user
  32 │             - name: PMA_HOST
  33 │               value: database
  34 │             - name: UPLOAD_LIMIT # Esta es la nueva variable de entorno
  35 └               value: "100M" # Ajusta este valor según tus necesidades
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 phpmyadmin-deployment.yaml:27-44
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: MYSQL_ROOT_PASSWORD
  29 │               value: changeme
  30 │             - name: MYSQL_USERNAME
  31 │               value: wp-user
  32 │             - name: PMA_HOST
  33 │               value: database
  34 │             - name: UPLOAD_LIMIT # Esta es la nueva variable de entorno
  35 └               value: "100M" # Ajusta este valor según tus necesidades
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 phpmyadmin-deployment.yaml:27-44
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: MYSQL_ROOT_PASSWORD
  29 │               value: changeme
  30 │             - name: MYSQL_USERNAME
  31 │               value: wp-user
  32 │             - name: PMA_HOST
  33 │               value: database
  34 │             - name: UPLOAD_LIMIT # Esta es la nueva variable de entorno
  35 └               value: "100M" # Ajusta este valor según tus necesidades
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 phpmyadmin-deployment.yaml:27-44
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: MYSQL_ROOT_PASSWORD
  29 │               value: changeme
  30 │             - name: MYSQL_USERNAME
  31 │               value: wp-user
  32 │             - name: PMA_HOST
  33 │               value: database
  34 │             - name: UPLOAD_LIMIT # Esta es la nueva variable de entorno
  35 └               value: "100M" # Ajusta este valor según tus necesidades
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 phpmyadmin-deployment.yaml:27-44
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: MYSQL_ROOT_PASSWORD
  29 │               value: changeme
  30 │             - name: MYSQL_USERNAME
  31 │               value: wp-user
  32 │             - name: PMA_HOST
  33 │               value: database
  34 │             - name: UPLOAD_LIMIT # Esta es la nueva variable de entorno
  35 └               value: "100M" # Ajusta este valor según tus necesidades
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 phpmyadmin-deployment.yaml:27-44
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: MYSQL_ROOT_PASSWORD
  29 │               value: changeme
  30 │             - name: MYSQL_USERNAME
  31 │               value: wp-user
  32 │             - name: PMA_HOST
  33 │               value: database
  34 │             - name: UPLOAD_LIMIT # Esta es la nueva variable de entorno
  35 └               value: "100M" # Ajusta este valor según tus necesidades
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 phpmyadmin-deployment.yaml:27-44
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: MYSQL_ROOT_PASSWORD
  29 │               value: changeme
  30 │             - name: MYSQL_USERNAME
  31 │               value: wp-user
  32 │             - name: PMA_HOST
  33 │               value: database
  34 │             - name: UPLOAD_LIMIT # Esta es la nueva variable de entorno
  35 └               value: "100M" # Ajusta este valor según tus necesidades
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'phpmyadmin' of Deployment 'phpmyadmin' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 phpmyadmin-deployment.yaml:27-44
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: MYSQL_ROOT_PASSWORD
  29 │               value: changeme
  30 │             - name: MYSQL_USERNAME
  31 │               value: wp-user
  32 │             - name: PMA_HOST
  33 │               value: database
  34 │             - name: UPLOAD_LIMIT # Esta es la nueva variable de entorno
  35 └               value: "100M" # Ajusta este valor según tus necesidades
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 phpmyadmin-deployment.yaml:27-44
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: MYSQL_ROOT_PASSWORD
  29 │               value: changeme
  30 │             - name: MYSQL_USERNAME
  31 │               value: wp-user
  32 │             - name: PMA_HOST
  33 │               value: database
  34 │             - name: UPLOAD_LIMIT # Esta es la nueva variable de entorno
  35 └               value: "100M" # Ajusta este valor según tus necesidades
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "phpmyadmin" of deployment "phpmyadmin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 phpmyadmin-deployment.yaml:27-44
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: MYSQL_ROOT_PASSWORD
  29 │               value: changeme
  30 │             - name: MYSQL_USERNAME
  31 │               value: wp-user
  32 │             - name: PMA_HOST
  33 │               value: database
  34 │             - name: UPLOAD_LIMIT # Esta es la nueva variable de entorno
  35 └               value: "100M" # Ajusta este valor según tus necesidades
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 phpmyadmin-deployment.yaml:27-44
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: MYSQL_ROOT_PASSWORD
  29 │               value: changeme
  30 │             - name: MYSQL_USERNAME
  31 │               value: wp-user
  32 │             - name: PMA_HOST
  33 │               value: database
  34 │             - name: UPLOAD_LIMIT # Esta es la nueva variable de entorno
  35 └               value: "100M" # Ajusta este valor según tus necesidades
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment phpmyadmin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 phpmyadmin-deployment.yaml:4-9
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert -f docker-compose.yml
   6 │     kompose.version: 1.32.0 (765fde254)
   7 │   labels:
   8 │     io.kompose.service: phpmyadmin
   9 └   name: phpmyadmin
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment phpmyadmin in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container phpmyadmin in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin-deployment.yaml:27-44
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: MYSQL_ROOT_PASSWORD
  29 │               value: changeme
  30 │             - name: MYSQL_USERNAME
  31 │               value: wp-user
  32 │             - name: PMA_HOST
  33 │               value: database
  34 │             - name: UPLOAD_LIMIT # Esta es la nueva variable de entorno
  35 └               value: "100M" # Ajusta este valor según tus necesidades
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment phpmyadmin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin-deployment.yaml:26-49
────────────────────────────────────────
  26 ┌       containers:
  27 │         - env:
  28 │             - name: MYSQL_ROOT_PASSWORD
  29 │               value: changeme
  30 │             - name: MYSQL_USERNAME
  31 │               value: wp-user
  32 │             - name: PMA_HOST
  33 │               value: database
  34 └             - name: UPLOAD_LIMIT # Esta es la nueva variable de entorno
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container phpmyadmin in deployment phpmyadmin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 phpmyadmin-deployment.yaml:27-44
────────────────────────────────────────
  27 ┌         - env:
  28 │             - name: MYSQL_ROOT_PASSWORD
  29 │               value: changeme
  30 │             - name: MYSQL_USERNAME
  31 │               value: wp-user
  32 │             - name: PMA_HOST
  33 │               value: database
  34 │             - name: UPLOAD_LIMIT # Esta es la nueva variable de entorno
  35 └               value: "100M" # Ajusta este valor según tus necesidades
  ..   
────────────────────────────────────────



phpmyadmin-deployment1.yaml (kubernetes)
========================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 phpmyadmin-deployment1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin:latest
  21 │         ports:
  22 │           - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: "mysql"  # Nombre del servicio MySQL en Kubernetes
  26 │         - name: PMA_PORT
  27 └           value: "3306"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 phpmyadmin-deployment1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin:latest
  21 │         ports:
  22 │           - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: "mysql"  # Nombre del servicio MySQL en Kubernetes
  26 │         - name: PMA_PORT
  27 └           value: "3306"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'phpmyadmin' of 'deployment' 'phpmyadmin-deployment' in 'microservicios' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 phpmyadmin-deployment1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin:latest
  21 │         ports:
  22 │           - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: "mysql"  # Nombre del servicio MySQL en Kubernetes
  26 │         - name: PMA_PORT
  27 └           value: "3306"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 phpmyadmin-deployment1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin:latest
  21 │         ports:
  22 │           - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: "mysql"  # Nombre del servicio MySQL en Kubernetes
  26 │         - name: PMA_PORT
  27 └           value: "3306"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 phpmyadmin-deployment1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin:latest
  21 │         ports:
  22 │           - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: "mysql"  # Nombre del servicio MySQL en Kubernetes
  26 │         - name: PMA_PORT
  27 └           value: "3306"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 phpmyadmin-deployment1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin:latest
  21 │         ports:
  22 │           - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: "mysql"  # Nombre del servicio MySQL en Kubernetes
  26 │         - name: PMA_PORT
  27 └           value: "3306"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 phpmyadmin-deployment1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin:latest
  21 │         ports:
  22 │           - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: "mysql"  # Nombre del servicio MySQL en Kubernetes
  26 │         - name: PMA_PORT
  27 └           value: "3306"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 phpmyadmin-deployment1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin:latest
  21 │         ports:
  22 │           - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: "mysql"  # Nombre del servicio MySQL en Kubernetes
  26 │         - name: PMA_PORT
  27 └           value: "3306"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 phpmyadmin-deployment1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin:latest
  21 │         ports:
  22 │           - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: "mysql"  # Nombre del servicio MySQL en Kubernetes
  26 │         - name: PMA_PORT
  27 └           value: "3306"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 phpmyadmin-deployment1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin:latest
  21 │         ports:
  22 │           - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: "mysql"  # Nombre del servicio MySQL en Kubernetes
  26 │         - name: PMA_PORT
  27 └           value: "3306"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 phpmyadmin-deployment1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin:latest
  21 │         ports:
  22 │           - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: "mysql"  # Nombre del servicio MySQL en Kubernetes
  26 │         - name: PMA_PORT
  27 └           value: "3306"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 phpmyadmin-deployment1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin:latest
  21 │         ports:
  22 │           - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: "mysql"  # Nombre del servicio MySQL en Kubernetes
  26 │         - name: PMA_PORT
  27 └           value: "3306"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 phpmyadmin-deployment1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin:latest
  21 │         ports:
  22 │           - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: "mysql"  # Nombre del servicio MySQL en Kubernetes
  26 │         - name: PMA_PORT
  27 └           value: "3306"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "phpmyadmin" of deployment "phpmyadmin-deployment" in "microservicios" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 phpmyadmin-deployment1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin:latest
  21 │         ports:
  22 │           - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: "mysql"  # Nombre del servicio MySQL en Kubernetes
  26 │         - name: PMA_PORT
  27 └           value: "3306"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 phpmyadmin-deployment1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin:latest
  21 │         ports:
  22 │           - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: "mysql"  # Nombre del servicio MySQL en Kubernetes
  26 │         - name: PMA_PORT
  27 └           value: "3306"
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment phpmyadmin-deployment in microservicios namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container phpmyadmin-deployment in microservicios namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin-deployment1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin:latest
  21 │         ports:
  22 │           - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: "mysql"  # Nombre del servicio MySQL en Kubernetes
  26 │         - name: PMA_PORT
  27 └           value: "3306"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment phpmyadmin-deployment in microservicios namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin-deployment1.yaml:18-27
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin:latest
  21 │         ports:
  22 │           - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: "mysql"  # Nombre del servicio MySQL en Kubernetes
  26 │         - name: PMA_PORT
  27 └           value: "3306"
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container phpmyadmin in deployment phpmyadmin-deployment (namespace: microservicios) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 phpmyadmin-deployment1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin:latest
  21 │         ports:
  22 │           - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: "mysql"  # Nombre del servicio MySQL en Kubernetes
  26 │         - name: PMA_PORT
  27 └           value: "3306"
────────────────────────────────────────



phpmyadmin-deployment3.yaml (kubernetes)
========================================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 phpmyadmin-deployment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service
  21 │         ports:
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 phpmyadmin-deployment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service
  21 │         ports:
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'phpmyadmin' of 'deployment' 'phpmyadmin-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 phpmyadmin-deployment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service
  21 │         ports:
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 phpmyadmin-deployment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service
  21 │         ports:
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 phpmyadmin-deployment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service
  21 │         ports:
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 phpmyadmin-deployment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service
  21 │         ports:
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 phpmyadmin-deployment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service
  21 │         ports:
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 phpmyadmin-deployment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service
  21 │         ports:
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 phpmyadmin-deployment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service
  21 │         ports:
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 phpmyadmin-deployment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service
  21 │         ports:
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 phpmyadmin-deployment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service
  21 │         ports:
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 phpmyadmin-deployment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service
  21 │         ports:
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 phpmyadmin-deployment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service
  21 │         ports:
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "phpmyadmin" of deployment "phpmyadmin-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 phpmyadmin-deployment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service
  21 │         ports:
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 phpmyadmin-deployment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service
  21 │         ports:
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment phpmyadmin-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 phpmyadmin-deployment3.yaml:4
────────────────────────────────────────
   4 [   name: phpmyadmin-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment phpmyadmin-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container phpmyadmin-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin-deployment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service
  21 │         ports:
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment phpmyadmin-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin-deployment3.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service
  21 │         ports:
  22 └           - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container phpmyadmin in deployment phpmyadmin-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 phpmyadmin-deployment3.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         env:
  19 │           - name: PMA_HOST
  20 │             value: mysql-service
  21 │         ports:
  22 └           - containerPort: 80
────────────────────────────────────────



phpmyadmin-deployment4.yaml (kubernetes)
========================================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 phpmyadmin-deployment4.yaml:15-29
────────────────────────────────────────
  15 ┌       - name: phpmyadmin
  16 │         image: phpmyadmin/phpmyadmin
  17 │         env:
  18 │         - name: PMA_HOST
  19 │           value: mysql
  20 │         - name: PMA_USER
  21 │           value: root
  22 │         - name: PMA_PASSWORD
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 phpmyadmin-deployment4.yaml:15-29
────────────────────────────────────────
  15 ┌       - name: phpmyadmin
  16 │         image: phpmyadmin/phpmyadmin
  17 │         env:
  18 │         - name: PMA_HOST
  19 │           value: mysql
  20 │         - name: PMA_USER
  21 │           value: root
  22 │         - name: PMA_PASSWORD
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'phpmyadmin' of 'deployment' 'phpmyadmin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 phpmyadmin-deployment4.yaml:15-29
────────────────────────────────────────
  15 ┌       - name: phpmyadmin
  16 │         image: phpmyadmin/phpmyadmin
  17 │         env:
  18 │         - name: PMA_HOST
  19 │           value: mysql
  20 │         - name: PMA_USER
  21 │           value: root
  22 │         - name: PMA_PASSWORD
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 phpmyadmin-deployment4.yaml:15-29
────────────────────────────────────────
  15 ┌       - name: phpmyadmin
  16 │         image: phpmyadmin/phpmyadmin
  17 │         env:
  18 │         - name: PMA_HOST
  19 │           value: mysql
  20 │         - name: PMA_USER
  21 │           value: root
  22 │         - name: PMA_PASSWORD
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 phpmyadmin-deployment4.yaml:15-29
────────────────────────────────────────
  15 ┌       - name: phpmyadmin
  16 │         image: phpmyadmin/phpmyadmin
  17 │         env:
  18 │         - name: PMA_HOST
  19 │           value: mysql
  20 │         - name: PMA_USER
  21 │           value: root
  22 │         - name: PMA_PASSWORD
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 phpmyadmin-deployment4.yaml:15-29
────────────────────────────────────────
  15 ┌       - name: phpmyadmin
  16 │         image: phpmyadmin/phpmyadmin
  17 │         env:
  18 │         - name: PMA_HOST
  19 │           value: mysql
  20 │         - name: PMA_USER
  21 │           value: root
  22 │         - name: PMA_PASSWORD
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 phpmyadmin-deployment4.yaml:15-29
────────────────────────────────────────
  15 ┌       - name: phpmyadmin
  16 │         image: phpmyadmin/phpmyadmin
  17 │         env:
  18 │         - name: PMA_HOST
  19 │           value: mysql
  20 │         - name: PMA_USER
  21 │           value: root
  22 │         - name: PMA_PASSWORD
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 phpmyadmin-deployment4.yaml:15-29
────────────────────────────────────────
  15 ┌       - name: phpmyadmin
  16 │         image: phpmyadmin/phpmyadmin
  17 │         env:
  18 │         - name: PMA_HOST
  19 │           value: mysql
  20 │         - name: PMA_USER
  21 │           value: root
  22 │         - name: PMA_PASSWORD
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 phpmyadmin-deployment4.yaml:15-29
────────────────────────────────────────
  15 ┌       - name: phpmyadmin
  16 │         image: phpmyadmin/phpmyadmin
  17 │         env:
  18 │         - name: PMA_HOST
  19 │           value: mysql
  20 │         - name: PMA_USER
  21 │           value: root
  22 │         - name: PMA_PASSWORD
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 phpmyadmin-deployment4.yaml:15-29
────────────────────────────────────────
  15 ┌       - name: phpmyadmin
  16 │         image: phpmyadmin/phpmyadmin
  17 │         env:
  18 │         - name: PMA_HOST
  19 │           value: mysql
  20 │         - name: PMA_USER
  21 │           value: root
  22 │         - name: PMA_PASSWORD
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 phpmyadmin-deployment4.yaml:15-29
────────────────────────────────────────
  15 ┌       - name: phpmyadmin
  16 │         image: phpmyadmin/phpmyadmin
  17 │         env:
  18 │         - name: PMA_HOST
  19 │           value: mysql
  20 │         - name: PMA_USER
  21 │           value: root
  22 │         - name: PMA_PASSWORD
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 phpmyadmin-deployment4.yaml:15-29
────────────────────────────────────────
  15 ┌       - name: phpmyadmin
  16 │         image: phpmyadmin/phpmyadmin
  17 │         env:
  18 │         - name: PMA_HOST
  19 │           value: mysql
  20 │         - name: PMA_USER
  21 │           value: root
  22 │         - name: PMA_PASSWORD
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 phpmyadmin-deployment4.yaml:15-29
────────────────────────────────────────
  15 ┌       - name: phpmyadmin
  16 │         image: phpmyadmin/phpmyadmin
  17 │         env:
  18 │         - name: PMA_HOST
  19 │           value: mysql
  20 │         - name: PMA_USER
  21 │           value: root
  22 │         - name: PMA_PASSWORD
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "phpmyadmin" of deployment "phpmyadmin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 phpmyadmin-deployment4.yaml:15-29
────────────────────────────────────────
  15 ┌       - name: phpmyadmin
  16 │         image: phpmyadmin/phpmyadmin
  17 │         env:
  18 │         - name: PMA_HOST
  19 │           value: mysql
  20 │         - name: PMA_USER
  21 │           value: root
  22 │         - name: PMA_PASSWORD
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 phpmyadmin-deployment4.yaml:15-29
────────────────────────────────────────
  15 ┌       - name: phpmyadmin
  16 │         image: phpmyadmin/phpmyadmin
  17 │         env:
  18 │         - name: PMA_HOST
  19 │           value: mysql
  20 │         - name: PMA_USER
  21 │           value: root
  22 │         - name: PMA_PASSWORD
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment phpmyadmin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 phpmyadmin-deployment4.yaml:4
────────────────────────────────────────
   4 [   name: phpmyadmin
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment phpmyadmin in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container phpmyadmin in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin-deployment4.yaml:15-29
────────────────────────────────────────
  15 ┌       - name: phpmyadmin
  16 │         image: phpmyadmin/phpmyadmin
  17 │         env:
  18 │         - name: PMA_HOST
  19 │           value: mysql
  20 │         - name: PMA_USER
  21 │           value: root
  22 │         - name: PMA_PASSWORD
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment phpmyadmin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin-deployment4.yaml:14-29
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: phpmyadmin
  16 │         image: phpmyadmin/phpmyadmin
  17 │         env:
  18 │         - name: PMA_HOST
  19 │           value: mysql
  20 │         - name: PMA_USER
  21 │           value: root
  22 └         - name: PMA_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container phpmyadmin in deployment phpmyadmin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 phpmyadmin-deployment4.yaml:15-29
────────────────────────────────────────
  15 ┌       - name: phpmyadmin
  16 │         image: phpmyadmin/phpmyadmin
  17 │         env:
  18 │         - name: PMA_HOST
  19 │           value: mysql
  20 │         - name: PMA_USER
  21 │           value: root
  22 │         - name: PMA_PASSWORD
  23 └           valueFrom:
  ..   
────────────────────────────────────────



phpmyadmin-deployment5.yaml (kubernetes)
========================================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 phpmyadmin-deployment5.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 phpmyadmin-deployment5.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'phpmyadmin' of 'deployment' 'phpmyadmin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 phpmyadmin-deployment5.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 phpmyadmin-deployment5.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 phpmyadmin-deployment5.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 phpmyadmin-deployment5.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 phpmyadmin-deployment5.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 phpmyadmin-deployment5.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 phpmyadmin-deployment5.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 phpmyadmin-deployment5.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 phpmyadmin-deployment5.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 phpmyadmin-deployment5.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 phpmyadmin-deployment5.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "phpmyadmin" of deployment "phpmyadmin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 phpmyadmin-deployment5.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 phpmyadmin-deployment5.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment phpmyadmin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 phpmyadmin-deployment5.yaml:4
────────────────────────────────────────
   4 [   name: phpmyadmin
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment phpmyadmin in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container phpmyadmin in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin-deployment5.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment phpmyadmin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin-deployment5.yaml:15-45
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container phpmyadmin in deployment phpmyadmin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 phpmyadmin-deployment5.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 └               name: app-configmap
  ..   
────────────────────────────────────────



phpmyadmin-deployment6.yaml (kubernetes)
========================================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 phpmyadmin-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 phpmyadmin-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'phpmyadmin' of 'deployment' 'phpmyadmin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 phpmyadmin-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 phpmyadmin-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 phpmyadmin-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 phpmyadmin-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 phpmyadmin-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 phpmyadmin-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 phpmyadmin-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 phpmyadmin-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 phpmyadmin-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 phpmyadmin-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 phpmyadmin-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "phpmyadmin" of deployment "phpmyadmin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 phpmyadmin-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 phpmyadmin-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment phpmyadmin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 phpmyadmin-deployment6.yaml:4
────────────────────────────────────────
   4 [   name: phpmyadmin
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment phpmyadmin in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container phpmyadmin in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment phpmyadmin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin-deployment6.yaml:15-45
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container phpmyadmin in deployment phpmyadmin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 phpmyadmin-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌       - name: phpmyadmin
  17 │         image: phpmyadmin/phpmyadmin
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: PMA_HOST
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: app-secrets
  ..   
────────────────────────────────────────



phpmyadmin-deployment7.yaml (kubernetes)
========================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 phpmyadmin-deployment7.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: phpmyadmin
  18 │         image: phpmyadmin/phpmyadmin
  19 │         ports:
  20 │           - containerPort: 80
  21 │         env:
  22 │           - name: PMA_HOST
  23 │             value: mysql
  24 │           - name: PMA_PORT
  25 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 phpmyadmin-deployment7.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: phpmyadmin
  18 │         image: phpmyadmin/phpmyadmin
  19 │         ports:
  20 │           - containerPort: 80
  21 │         env:
  22 │           - name: PMA_HOST
  23 │             value: mysql
  24 │           - name: PMA_PORT
  25 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'phpmyadmin' of 'deployment' 'phpmyadmin' in 'mysql' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 phpmyadmin-deployment7.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: phpmyadmin
  18 │         image: phpmyadmin/phpmyadmin
  19 │         ports:
  20 │           - containerPort: 80
  21 │         env:
  22 │           - name: PMA_HOST
  23 │             value: mysql
  24 │           - name: PMA_PORT
  25 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 phpmyadmin-deployment7.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: phpmyadmin
  18 │         image: phpmyadmin/phpmyadmin
  19 │         ports:
  20 │           - containerPort: 80
  21 │         env:
  22 │           - name: PMA_HOST
  23 │             value: mysql
  24 │           - name: PMA_PORT
  25 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 phpmyadmin-deployment7.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: phpmyadmin
  18 │         image: phpmyadmin/phpmyadmin
  19 │         ports:
  20 │           - containerPort: 80
  21 │         env:
  22 │           - name: PMA_HOST
  23 │             value: mysql
  24 │           - name: PMA_PORT
  25 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 phpmyadmin-deployment7.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: phpmyadmin
  18 │         image: phpmyadmin/phpmyadmin
  19 │         ports:
  20 │           - containerPort: 80
  21 │         env:
  22 │           - name: PMA_HOST
  23 │             value: mysql
  24 │           - name: PMA_PORT
  25 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 phpmyadmin-deployment7.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: phpmyadmin
  18 │         image: phpmyadmin/phpmyadmin
  19 │         ports:
  20 │           - containerPort: 80
  21 │         env:
  22 │           - name: PMA_HOST
  23 │             value: mysql
  24 │           - name: PMA_PORT
  25 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 phpmyadmin-deployment7.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: phpmyadmin
  18 │         image: phpmyadmin/phpmyadmin
  19 │         ports:
  20 │           - containerPort: 80
  21 │         env:
  22 │           - name: PMA_HOST
  23 │             value: mysql
  24 │           - name: PMA_PORT
  25 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 phpmyadmin-deployment7.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: phpmyadmin
  18 │         image: phpmyadmin/phpmyadmin
  19 │         ports:
  20 │           - containerPort: 80
  21 │         env:
  22 │           - name: PMA_HOST
  23 │             value: mysql
  24 │           - name: PMA_PORT
  25 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 phpmyadmin-deployment7.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: phpmyadmin
  18 │         image: phpmyadmin/phpmyadmin
  19 │         ports:
  20 │           - containerPort: 80
  21 │         env:
  22 │           - name: PMA_HOST
  23 │             value: mysql
  24 │           - name: PMA_PORT
  25 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 phpmyadmin-deployment7.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: phpmyadmin
  18 │         image: phpmyadmin/phpmyadmin
  19 │         ports:
  20 │           - containerPort: 80
  21 │         env:
  22 │           - name: PMA_HOST
  23 │             value: mysql
  24 │           - name: PMA_PORT
  25 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 phpmyadmin-deployment7.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: phpmyadmin
  18 │         image: phpmyadmin/phpmyadmin
  19 │         ports:
  20 │           - containerPort: 80
  21 │         env:
  22 │           - name: PMA_HOST
  23 │             value: mysql
  24 │           - name: PMA_PORT
  25 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 phpmyadmin-deployment7.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: phpmyadmin
  18 │         image: phpmyadmin/phpmyadmin
  19 │         ports:
  20 │           - containerPort: 80
  21 │         env:
  22 │           - name: PMA_HOST
  23 │             value: mysql
  24 │           - name: PMA_PORT
  25 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "phpmyadmin" of deployment "phpmyadmin" in "mysql" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 phpmyadmin-deployment7.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: phpmyadmin
  18 │         image: phpmyadmin/phpmyadmin
  19 │         ports:
  20 │           - containerPort: 80
  21 │         env:
  22 │           - name: PMA_HOST
  23 │             value: mysql
  24 │           - name: PMA_PORT
  25 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 phpmyadmin-deployment7.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: phpmyadmin
  18 │         image: phpmyadmin/phpmyadmin
  19 │         ports:
  20 │           - containerPort: 80
  21 │         env:
  22 │           - name: PMA_HOST
  23 │             value: mysql
  24 │           - name: PMA_PORT
  25 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment phpmyadmin in mysql namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container phpmyadmin in mysql namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin-deployment7.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: phpmyadmin
  18 │         image: phpmyadmin/phpmyadmin
  19 │         ports:
  20 │           - containerPort: 80
  21 │         env:
  22 │           - name: PMA_HOST
  23 │             value: mysql
  24 │           - name: PMA_PORT
  25 └             value: "3306"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment phpmyadmin in mysql namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin-deployment7.yaml:16-30
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: phpmyadmin
  18 │         image: phpmyadmin/phpmyadmin
  19 │         ports:
  20 │           - containerPort: 80
  21 │         env:
  22 │           - name: PMA_HOST
  23 │             value: mysql
  24 └           - name: PMA_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container phpmyadmin in deployment phpmyadmin (namespace: mysql) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 phpmyadmin-deployment7.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: phpmyadmin
  18 │         image: phpmyadmin/phpmyadmin
  19 │         ports:
  20 │           - containerPort: 80
  21 │         env:
  22 │           - name: PMA_HOST
  23 │             value: mysql
  24 │           - name: PMA_PORT
  25 └             value: "3306"
  ..   
────────────────────────────────────────



phpmyadmin-mysql8_2.yaml (kubernetes)
=====================================
Tests: 109 (SUCCESSES: 94, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'phpmyadmin' of Deployment 'mysql-phpmyadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 phpmyadmin-mysql8_2.yaml:26-55
────────────────────────────────────────
  26 ┌       - name: phpmyadmin
  27 │         securityContext: {}
  28 │         image: docker.io/library/phpmyadmin:5.2.1-apache
  29 │         imagePullPolicy: IfNotPresent
  30 │         ports:
  31 │         - name: http
  32 │           containerPort: 80
  33 │           protocol: TCP
  34 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'phpmyadmin' of Deployment 'mysql-phpmyadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 phpmyadmin-mysql8_2.yaml:26-55
────────────────────────────────────────
  26 ┌       - name: phpmyadmin
  27 │         securityContext: {}
  28 │         image: docker.io/library/phpmyadmin:5.2.1-apache
  29 │         imagePullPolicy: IfNotPresent
  30 │         ports:
  31 │         - name: http
  32 │           containerPort: 80
  33 │           protocol: TCP
  34 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'phpmyadmin' of 'deployment' 'mysql-phpmyadmin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 phpmyadmin-mysql8_2.yaml:26-55
────────────────────────────────────────
  26 ┌       - name: phpmyadmin
  27 │         securityContext: {}
  28 │         image: docker.io/library/phpmyadmin:5.2.1-apache
  29 │         imagePullPolicy: IfNotPresent
  30 │         ports:
  31 │         - name: http
  32 │           containerPort: 80
  33 │           protocol: TCP
  34 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'phpmyadmin' of Deployment 'mysql-phpmyadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 phpmyadmin-mysql8_2.yaml:26-55
────────────────────────────────────────
  26 ┌       - name: phpmyadmin
  27 │         securityContext: {}
  28 │         image: docker.io/library/phpmyadmin:5.2.1-apache
  29 │         imagePullPolicy: IfNotPresent
  30 │         ports:
  31 │         - name: http
  32 │           containerPort: 80
  33 │           protocol: TCP
  34 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'phpmyadmin' of Deployment 'mysql-phpmyadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 phpmyadmin-mysql8_2.yaml:26-55
────────────────────────────────────────
  26 ┌       - name: phpmyadmin
  27 │         securityContext: {}
  28 │         image: docker.io/library/phpmyadmin:5.2.1-apache
  29 │         imagePullPolicy: IfNotPresent
  30 │         ports:
  31 │         - name: http
  32 │           containerPort: 80
  33 │           protocol: TCP
  34 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'phpmyadmin' of Deployment 'mysql-phpmyadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 phpmyadmin-mysql8_2.yaml:26-55
────────────────────────────────────────
  26 ┌       - name: phpmyadmin
  27 │         securityContext: {}
  28 │         image: docker.io/library/phpmyadmin:5.2.1-apache
  29 │         imagePullPolicy: IfNotPresent
  30 │         ports:
  31 │         - name: http
  32 │           containerPort: 80
  33 │           protocol: TCP
  34 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'phpmyadmin' of Deployment 'mysql-phpmyadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 phpmyadmin-mysql8_2.yaml:26-55
────────────────────────────────────────
  26 ┌       - name: phpmyadmin
  27 │         securityContext: {}
  28 │         image: docker.io/library/phpmyadmin:5.2.1-apache
  29 │         imagePullPolicy: IfNotPresent
  30 │         ports:
  31 │         - name: http
  32 │           containerPort: 80
  33 │           protocol: TCP
  34 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 phpmyadmin-mysql8_2.yaml:26-55
────────────────────────────────────────
  26 ┌       - name: phpmyadmin
  27 │         securityContext: {}
  28 │         image: docker.io/library/phpmyadmin:5.2.1-apache
  29 │         imagePullPolicy: IfNotPresent
  30 │         ports:
  31 │         - name: http
  32 │           containerPort: 80
  33 │           protocol: TCP
  34 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "phpmyadmin" of deployment "mysql-phpmyadmin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 phpmyadmin-mysql8_2.yaml:26-55
────────────────────────────────────────
  26 ┌       - name: phpmyadmin
  27 │         securityContext: {}
  28 │         image: docker.io/library/phpmyadmin:5.2.1-apache
  29 │         imagePullPolicy: IfNotPresent
  30 │         ports:
  31 │         - name: http
  32 │           containerPort: 80
  33 │           protocol: TCP
  34 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 phpmyadmin-mysql8_2.yaml:26-55
────────────────────────────────────────
  26 ┌       - name: phpmyadmin
  27 │         securityContext: {}
  28 │         image: docker.io/library/phpmyadmin:5.2.1-apache
  29 │         imagePullPolicy: IfNotPresent
  30 │         ports:
  31 │         - name: http
  32 │           containerPort: 80
  33 │           protocol: TCP
  34 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql-phpmyadmin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 phpmyadmin-mysql8_2.yaml:4-10
────────────────────────────────────────
   4 ┌   name: mysql-phpmyadmin
   5 │   labels:
   6 │     helm.sh/chart: phpmyadmin-0.1.0
   7 │     app.kubernetes.io/name: phpmyadmin
   8 │     app.kubernetes.io/instance: mysql
   9 │     app.kubernetes.io/version: 5.2.1-apache
  10 └     app.kubernetes.io/managed-by: Helm
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mysql-phpmyadmin in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-phpmyadmin in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin-mysql8_2.yaml:26-55
────────────────────────────────────────
  26 ┌       - name: phpmyadmin
  27 │         securityContext: {}
  28 │         image: docker.io/library/phpmyadmin:5.2.1-apache
  29 │         imagePullPolicy: IfNotPresent
  30 │         ports:
  31 │         - name: http
  32 │           containerPort: 80
  33 │           protocol: TCP
  34 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql-phpmyadmin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin-mysql8_2.yaml:23-68
────────────────────────────────────────
  23 ┌       serviceAccountName: default
  24 │       securityContext: {}
  25 │       containers:
  26 │       - name: phpmyadmin
  27 │         securityContext: {}
  28 │         image: docker.io/library/phpmyadmin:5.2.1-apache
  29 │         imagePullPolicy: IfNotPresent
  30 │         ports:
  31 └         - name: http
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container phpmyadmin in deployment mysql-phpmyadmin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 phpmyadmin-mysql8_2.yaml:26-55
────────────────────────────────────────
  26 ┌       - name: phpmyadmin
  27 │         securityContext: {}
  28 │         image: docker.io/library/phpmyadmin:5.2.1-apache
  29 │         imagePullPolicy: IfNotPresent
  30 │         ports:
  31 │         - name: http
  32 │           containerPort: 80
  33 │           protocol: TCP
  34 └         env:
  ..   
────────────────────────────────────────



phpmyadmin.yaml (kubernetes)
============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 phpmyadmin.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin
  21 │         ports:
  22 │         - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: mysql-service.mysql.svc.cluster.local
  26 │         - name: PMA_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 phpmyadmin.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin
  21 │         ports:
  22 │         - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: mysql-service.mysql.svc.cluster.local
  26 │         - name: PMA_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'phpmyadmin' of 'deployment' 'phpmyadmin-deployment' in 'mysql' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 phpmyadmin.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin
  21 │         ports:
  22 │         - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: mysql-service.mysql.svc.cluster.local
  26 │         - name: PMA_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 phpmyadmin.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin
  21 │         ports:
  22 │         - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: mysql-service.mysql.svc.cluster.local
  26 │         - name: PMA_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 phpmyadmin.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin
  21 │         ports:
  22 │         - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: mysql-service.mysql.svc.cluster.local
  26 │         - name: PMA_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 phpmyadmin.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin
  21 │         ports:
  22 │         - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: mysql-service.mysql.svc.cluster.local
  26 │         - name: PMA_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 phpmyadmin.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin
  21 │         ports:
  22 │         - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: mysql-service.mysql.svc.cluster.local
  26 │         - name: PMA_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 phpmyadmin.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin
  21 │         ports:
  22 │         - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: mysql-service.mysql.svc.cluster.local
  26 │         - name: PMA_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 phpmyadmin.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin
  21 │         ports:
  22 │         - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: mysql-service.mysql.svc.cluster.local
  26 │         - name: PMA_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 phpmyadmin.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin
  21 │         ports:
  22 │         - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: mysql-service.mysql.svc.cluster.local
  26 │         - name: PMA_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 phpmyadmin.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin
  21 │         ports:
  22 │         - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: mysql-service.mysql.svc.cluster.local
  26 │         - name: PMA_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 phpmyadmin.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin
  21 │         ports:
  22 │         - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: mysql-service.mysql.svc.cluster.local
  26 │         - name: PMA_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 phpmyadmin.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin
  21 │         ports:
  22 │         - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: mysql-service.mysql.svc.cluster.local
  26 │         - name: PMA_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "phpmyadmin" of deployment "phpmyadmin-deployment" in "mysql" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 phpmyadmin.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin
  21 │         ports:
  22 │         - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: mysql-service.mysql.svc.cluster.local
  26 │         - name: PMA_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 phpmyadmin.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin
  21 │         ports:
  22 │         - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: mysql-service.mysql.svc.cluster.local
  26 │         - name: PMA_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment phpmyadmin-deployment in mysql namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container phpmyadmin-deployment in mysql namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin
  21 │         ports:
  22 │         - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: mysql-service.mysql.svc.cluster.local
  26 │         - name: PMA_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment phpmyadmin-deployment in mysql namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin.yaml:18-31
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin
  21 │         ports:
  22 │         - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: mysql-service.mysql.svc.cluster.local
  26 └         - name: PMA_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container phpmyadmin in deployment phpmyadmin-deployment (namespace: mysql) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 phpmyadmin.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: phpmyadmin
  20 │         image: phpmyadmin/phpmyadmin
  21 │         ports:
  22 │         - containerPort: 80
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           value: mysql-service.mysql.svc.cluster.local
  26 │         - name: PMA_PORT
  27 └           value: '3306'
  ..   
────────────────────────────────────────



phpmyadmin1.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 phpmyadmin1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin:5
  20 │         ports:
  21 │         - containerPort: 80
  22 │           protocol: TCP
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 phpmyadmin1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin:5
  20 │         ports:
  21 │         - containerPort: 80
  22 │           protocol: TCP
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'phpmyadmin' of 'deployment' 'phpmyadmin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 phpmyadmin1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin:5
  20 │         ports:
  21 │         - containerPort: 80
  22 │           protocol: TCP
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 phpmyadmin1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin:5
  20 │         ports:
  21 │         - containerPort: 80
  22 │           protocol: TCP
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 phpmyadmin1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin:5
  20 │         ports:
  21 │         - containerPort: 80
  22 │           protocol: TCP
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 phpmyadmin1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin:5
  20 │         ports:
  21 │         - containerPort: 80
  22 │           protocol: TCP
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 phpmyadmin1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin:5
  20 │         ports:
  21 │         - containerPort: 80
  22 │           protocol: TCP
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 phpmyadmin1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin:5
  20 │         ports:
  21 │         - containerPort: 80
  22 │           protocol: TCP
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 phpmyadmin1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin:5
  20 │         ports:
  21 │         - containerPort: 80
  22 │           protocol: TCP
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 phpmyadmin1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin:5
  20 │         ports:
  21 │         - containerPort: 80
  22 │           protocol: TCP
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 phpmyadmin1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin:5
  20 │         ports:
  21 │         - containerPort: 80
  22 │           protocol: TCP
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 phpmyadmin1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin:5
  20 │         ports:
  21 │         - containerPort: 80
  22 │           protocol: TCP
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "phpmyadmin" of deployment "phpmyadmin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 phpmyadmin1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin:5
  20 │         ports:
  21 │         - containerPort: 80
  22 │           protocol: TCP
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 phpmyadmin1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin:5
  20 │         ports:
  21 │         - containerPort: 80
  22 │           protocol: TCP
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment phpmyadmin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 phpmyadmin1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: phpmyadmin
   5 │   labels:
   6 └     app: phpmyadmin
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment phpmyadmin in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container phpmyadmin in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin:5
  20 │         ports:
  21 │         - containerPort: 80
  22 │           protocol: TCP
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment phpmyadmin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin1.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin:5
  20 │         ports:
  21 │         - containerPort: 80
  22 │           protocol: TCP
  23 │         env:
  24 │         - name: PMA_HOST
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container phpmyadmin in deployment phpmyadmin (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 phpmyadmin1.yaml:18-33
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin:5
  20 │         ports:
  21 │         - containerPort: 80
  22 │           protocol: TCP
  23 │         env:
  24 │         - name: PMA_HOST
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────



phpmyadmin2_1.yaml (kubernetes)
===============================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 phpmyadmin2_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: PMA_HOST
  24 │           value: wordpress-mysql
  25 │         - name: PMA_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 phpmyadmin2_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: PMA_HOST
  24 │           value: wordpress-mysql
  25 │         - name: PMA_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'phpmyadmin' of 'deployment' 'phpmyadmin-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 phpmyadmin2_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: PMA_HOST
  24 │           value: wordpress-mysql
  25 │         - name: PMA_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 phpmyadmin2_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: PMA_HOST
  24 │           value: wordpress-mysql
  25 │         - name: PMA_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 phpmyadmin2_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: PMA_HOST
  24 │           value: wordpress-mysql
  25 │         - name: PMA_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 phpmyadmin2_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: PMA_HOST
  24 │           value: wordpress-mysql
  25 │         - name: PMA_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 phpmyadmin2_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: PMA_HOST
  24 │           value: wordpress-mysql
  25 │         - name: PMA_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 phpmyadmin2_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: PMA_HOST
  24 │           value: wordpress-mysql
  25 │         - name: PMA_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 phpmyadmin2_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: PMA_HOST
  24 │           value: wordpress-mysql
  25 │         - name: PMA_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 phpmyadmin2_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: PMA_HOST
  24 │           value: wordpress-mysql
  25 │         - name: PMA_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 phpmyadmin2_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: PMA_HOST
  24 │           value: wordpress-mysql
  25 │         - name: PMA_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'phpmyadmin' of Deployment 'phpmyadmin-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 phpmyadmin2_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: PMA_HOST
  24 │           value: wordpress-mysql
  25 │         - name: PMA_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 phpmyadmin2_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: PMA_HOST
  24 │           value: wordpress-mysql
  25 │         - name: PMA_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "phpmyadmin" of deployment "phpmyadmin-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 phpmyadmin2_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: PMA_HOST
  24 │           value: wordpress-mysql
  25 │         - name: PMA_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 phpmyadmin2_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: PMA_HOST
  24 │           value: wordpress-mysql
  25 │         - name: PMA_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment phpmyadmin-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 phpmyadmin2_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: phpmyadmin-deployment
   5 │   labels:
   6 └     app: phpmyadmin
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment phpmyadmin-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container phpmyadmin-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin2_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: PMA_HOST
  24 │           value: wordpress-mysql
  25 │         - name: PMA_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment phpmyadmin-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin2_1.yaml:17-28
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: PMA_HOST
  24 │           value: wordpress-mysql
  25 └         - name: PMA_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container phpmyadmin in deployment phpmyadmin-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 phpmyadmin2_1.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: phpmyadmin
  19 │         image: phpmyadmin/phpmyadmin
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: PMA_HOST
  24 │           value: wordpress-mysql
  25 │         - name: PMA_PORT
  26 └           value: '3306'
  ..   
────────────────────────────────────────



phpmyadmin3.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'admin-net' of Deployment 'admin-net' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 phpmyadmin3.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: admin-net
  20 │         image: udeccolima/net:phpmyadmin
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 80
  24 │         env:
  25 │         - name: PMA_HOST
  26 │           value: mysql-net
  27 └         - name: PMA_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'admin-net' of Deployment 'admin-net' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 phpmyadmin3.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: admin-net
  20 │         image: udeccolima/net:phpmyadmin
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 80
  24 │         env:
  25 │         - name: PMA_HOST
  26 │           value: mysql-net
  27 └         - name: PMA_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'admin-net' of 'deployment' 'admin-net' in 'net-haep' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 phpmyadmin3.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: admin-net
  20 │         image: udeccolima/net:phpmyadmin
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 80
  24 │         env:
  25 │         - name: PMA_HOST
  26 │           value: mysql-net
  27 └         - name: PMA_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'admin-net' of Deployment 'admin-net' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 phpmyadmin3.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: admin-net
  20 │         image: udeccolima/net:phpmyadmin
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 80
  24 │         env:
  25 │         - name: PMA_HOST
  26 │           value: mysql-net
  27 └         - name: PMA_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'admin-net' of Deployment 'admin-net' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 phpmyadmin3.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: admin-net
  20 │         image: udeccolima/net:phpmyadmin
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 80
  24 │         env:
  25 │         - name: PMA_HOST
  26 │           value: mysql-net
  27 └         - name: PMA_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'admin-net' of Deployment 'admin-net' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 phpmyadmin3.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: admin-net
  20 │         image: udeccolima/net:phpmyadmin
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 80
  24 │         env:
  25 │         - name: PMA_HOST
  26 │           value: mysql-net
  27 └         - name: PMA_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'admin-net' of Deployment 'admin-net' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 phpmyadmin3.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: admin-net
  20 │         image: udeccolima/net:phpmyadmin
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 80
  24 │         env:
  25 │         - name: PMA_HOST
  26 │           value: mysql-net
  27 └         - name: PMA_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'admin-net' of Deployment 'admin-net' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 phpmyadmin3.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: admin-net
  20 │         image: udeccolima/net:phpmyadmin
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 80
  24 │         env:
  25 │         - name: PMA_HOST
  26 │           value: mysql-net
  27 └         - name: PMA_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'admin-net' of Deployment 'admin-net' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 phpmyadmin3.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: admin-net
  20 │         image: udeccolima/net:phpmyadmin
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 80
  24 │         env:
  25 │         - name: PMA_HOST
  26 │           value: mysql-net
  27 └         - name: PMA_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'admin-net' of Deployment 'admin-net' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 phpmyadmin3.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: admin-net
  20 │         image: udeccolima/net:phpmyadmin
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 80
  24 │         env:
  25 │         - name: PMA_HOST
  26 │           value: mysql-net
  27 └         - name: PMA_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'admin-net' of Deployment 'admin-net' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 phpmyadmin3.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: admin-net
  20 │         image: udeccolima/net:phpmyadmin
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 80
  24 │         env:
  25 │         - name: PMA_HOST
  26 │           value: mysql-net
  27 └         - name: PMA_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 phpmyadmin3.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: admin-net
  20 │         image: udeccolima/net:phpmyadmin
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 80
  24 │         env:
  25 │         - name: PMA_HOST
  26 │           value: mysql-net
  27 └         - name: PMA_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "admin-net" of deployment "admin-net" in "net-haep" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 phpmyadmin3.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: admin-net
  20 │         image: udeccolima/net:phpmyadmin
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 80
  24 │         env:
  25 │         - name: PMA_HOST
  26 │           value: mysql-net
  27 └         - name: PMA_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 phpmyadmin3.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: admin-net
  20 │         image: udeccolima/net:phpmyadmin
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 80
  24 │         env:
  25 │         - name: PMA_HOST
  26 │           value: mysql-net
  27 └         - name: PMA_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment admin-net in net-haep namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container admin-net in net-haep namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin3.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: admin-net
  20 │         image: udeccolima/net:phpmyadmin
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 80
  24 │         env:
  25 │         - name: PMA_HOST
  26 │           value: mysql-net
  27 └         - name: PMA_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment admin-net in net-haep namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin3.yaml:16-37
────────────────────────────────────────
  16 ┌       imagePullSecrets:
  17 │       - name: my-docker-credentials
  18 │       containers:
  19 │       - name: admin-net
  20 │         image: udeccolima/net:phpmyadmin
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 80
  24 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container admin-net in deployment admin-net (namespace: net-haep) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 phpmyadmin3.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: admin-net
  20 │         image: udeccolima/net:phpmyadmin
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - containerPort: 80
  24 │         env:
  25 │         - name: PMA_HOST
  26 │           value: mysql-net
  27 └         - name: PMA_PASSWORD
  ..   
────────────────────────────────────────



phpmyadmin4.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'phpmyadmin' of Pod 'phpmyadmin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 phpmyadmin4.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: phpmyadmin
  10 │     name: phpmyadmin
  11 │     env:
  12 │     - name: PMA_HOST
  13 └       value: mysql-svc
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'phpmyadmin' of Pod 'phpmyadmin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 phpmyadmin4.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: phpmyadmin
  10 │     name: phpmyadmin
  11 │     env:
  12 │     - name: PMA_HOST
  13 └       value: mysql-svc
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'phpmyadmin' of 'pod' 'phpmyadmin' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 phpmyadmin4.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: phpmyadmin
  10 │     name: phpmyadmin
  11 │     env:
  12 │     - name: PMA_HOST
  13 └       value: mysql-svc
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'phpmyadmin' of Pod 'phpmyadmin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 phpmyadmin4.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: phpmyadmin
  10 │     name: phpmyadmin
  11 │     env:
  12 │     - name: PMA_HOST
  13 └       value: mysql-svc
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'phpmyadmin' of Pod 'phpmyadmin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 phpmyadmin4.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: phpmyadmin
  10 │     name: phpmyadmin
  11 │     env:
  12 │     - name: PMA_HOST
  13 └       value: mysql-svc
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'phpmyadmin' of Pod 'phpmyadmin' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 phpmyadmin4.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: phpmyadmin
  10 │     name: phpmyadmin
  11 │     env:
  12 │     - name: PMA_HOST
  13 └       value: mysql-svc
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'phpmyadmin' of Pod 'phpmyadmin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 phpmyadmin4.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: phpmyadmin
  10 │     name: phpmyadmin
  11 │     env:
  12 │     - name: PMA_HOST
  13 └       value: mysql-svc
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'phpmyadmin' of Pod 'phpmyadmin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 phpmyadmin4.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: phpmyadmin
  10 │     name: phpmyadmin
  11 │     env:
  12 │     - name: PMA_HOST
  13 └       value: mysql-svc
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'phpmyadmin' of Pod 'phpmyadmin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 phpmyadmin4.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: phpmyadmin
  10 │     name: phpmyadmin
  11 │     env:
  12 │     - name: PMA_HOST
  13 └       value: mysql-svc
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'phpmyadmin' of Pod 'phpmyadmin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 phpmyadmin4.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: phpmyadmin
  10 │     name: phpmyadmin
  11 │     env:
  12 │     - name: PMA_HOST
  13 └       value: mysql-svc
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'phpmyadmin' of Pod 'phpmyadmin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 phpmyadmin4.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: phpmyadmin
  10 │     name: phpmyadmin
  11 │     env:
  12 │     - name: PMA_HOST
  13 └       value: mysql-svc
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'phpmyadmin' of Pod 'phpmyadmin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 phpmyadmin4.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: phpmyadmin
  10 │     name: phpmyadmin
  11 │     env:
  12 │     - name: PMA_HOST
  13 └       value: mysql-svc
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 phpmyadmin4.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: phpmyadmin
  10 │     name: phpmyadmin
  11 │     env:
  12 │     - name: PMA_HOST
  13 └       value: mysql-svc
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "phpmyadmin" of pod "phpmyadmin" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 phpmyadmin4.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: phpmyadmin
  10 │     name: phpmyadmin
  11 │     env:
  12 │     - name: PMA_HOST
  13 └       value: mysql-svc
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 phpmyadmin4.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: phpmyadmin
  10 │     name: phpmyadmin
  11 │     env:
  12 │     - name: PMA_HOST
  13 └       value: mysql-svc
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod phpmyadmin in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 phpmyadmin4.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: phpmyadmin
   6 └   name: phpmyadmin
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container phpmyadmin in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin4.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: phpmyadmin
  10 │     name: phpmyadmin
  11 │     env:
  12 │     - name: PMA_HOST
  13 └       value: mysql-svc
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod phpmyadmin in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 phpmyadmin4.yaml:8-13
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: phpmyadmin
  10 │     name: phpmyadmin
  11 │     env:
  12 │     - name: PMA_HOST
  13 └       value: mysql-svc
────────────────────────────────────────



pi-controller-job.yaml (kubernetes)
===================================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pi' of Job 'pi' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi-controller-job.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: pi
  10 │         image: perl:5.34.0
  11 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pi' of Job 'pi' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi-controller-job.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: pi
  10 │         image: perl:5.34.0
  11 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pi' of 'job' 'pi' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi-controller-job.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: pi
  10 │         image: perl:5.34.0
  11 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pi' of Job 'pi' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi-controller-job.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: pi
  10 │         image: perl:5.34.0
  11 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pi' of Job 'pi' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi-controller-job.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: pi
  10 │         image: perl:5.34.0
  11 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pi' of Job 'pi' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi-controller-job.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: pi
  10 │         image: perl:5.34.0
  11 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pi' of Job 'pi' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi-controller-job.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: pi
  10 │         image: perl:5.34.0
  11 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pi' of Job 'pi' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi-controller-job.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: pi
  10 │         image: perl:5.34.0
  11 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pi' of Job 'pi' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi-controller-job.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: pi
  10 │         image: perl:5.34.0
  11 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pi' of Job 'pi' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi-controller-job.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: pi
  10 │         image: perl:5.34.0
  11 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pi' of Job 'pi' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi-controller-job.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: pi
  10 │         image: perl:5.34.0
  11 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi-controller-job.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: pi
  10 │         image: perl:5.34.0
  11 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pi" of job "pi" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi-controller-job.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: pi
  10 │         image: perl:5.34.0
  11 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi-controller-job.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: pi
  10 │         image: perl:5.34.0
  11 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): job pi in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi-controller-job.yaml:4
────────────────────────────────────────
   4 [   name: pi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-controller-job.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: pi
  10 │         image: perl:5.34.0
  11 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job pi in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-controller-job.yaml:8-12
────────────────────────────────────────
   8 ┌       containers:
   9 │       - name: pi
  10 │         image: perl:5.34.0
  11 │         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
  12 └       restartPolicy: Never
────────────────────────────────────────



pi-job-500dp.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pi' of Job 'pi-job-one' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi-job-500dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "500"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pi' of Job 'pi-job-one' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi-job-500dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "500"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pi' of 'job' 'pi-job-one' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi-job-500dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "500"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pi' of Job 'pi-job-one' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi-job-500dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "500"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pi' of Job 'pi-job-one' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi-job-500dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "500"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pi' of Job 'pi-job-one' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi-job-500dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "500"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pi' of Job 'pi-job-one' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi-job-500dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "500"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pi' of Job 'pi-job-one' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi-job-500dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "500"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pi' of Job 'pi-job-one' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi-job-500dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "500"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pi' of Job 'pi-job-one' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi-job-500dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "500"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pi' of Job 'pi-job-one' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi-job-500dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "500"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pi' of Job 'pi-job-one' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi-job-500dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "500"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi-job-500dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "500"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pi" of job "pi-job-one" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi-job-500dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "500"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi-job-500dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "500"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): job pi-job-one in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi-job-500dp.yaml:4-8
────────────────────────────────────────
   4 ┌   name: pi-job-one
   5 │   labels:
   6 │     kubernetes.courselabs.co: jobs
   7 │     app: pi-one 
   8 └     dp: '500'       
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-job-one in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job-500dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "500"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job pi-job-one in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job-500dp.yaml:12-16
────────────────────────────────────────
  12 ┌       containers:
  13 │         - name: pi
  14 │           image: kiamol/ch05-pi
  15 │           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "500"]
  16 └       restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pi in job pi-job-one (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi-job-500dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "500"]
────────────────────────────────────────



pi-job-50dp.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pi' of Job 'pi-job-one' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi-job-50dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pi' of Job 'pi-job-one' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi-job-50dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pi' of 'job' 'pi-job-one' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi-job-50dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pi' of Job 'pi-job-one' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi-job-50dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pi' of Job 'pi-job-one' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi-job-50dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pi' of Job 'pi-job-one' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi-job-50dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pi' of Job 'pi-job-one' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi-job-50dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pi' of Job 'pi-job-one' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi-job-50dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pi' of Job 'pi-job-one' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi-job-50dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pi' of Job 'pi-job-one' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi-job-50dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pi' of Job 'pi-job-one' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi-job-50dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pi' of Job 'pi-job-one' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi-job-50dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi-job-50dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pi" of job "pi-job-one" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi-job-50dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi-job-50dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): job pi-job-one in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi-job-50dp.yaml:4-8
────────────────────────────────────────
   4 ┌   name: pi-job-one
   5 │   labels:
   6 │     kubernetes.courselabs.co: jobs
   7 │     app: pi-one
   8 └     dp: '50'    
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-job-one in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job-50dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job pi-job-one in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job-50dp.yaml:12-16
────────────────────────────────────────
  12 ┌       containers:
  13 │         - name: pi
  14 │           image: kiamol/ch05-pi
  15 │           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
  16 └       restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pi in job pi-job-one (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi-job-50dp.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────



pi-job-random.yaml (kubernetes)
===============================
Tests: 126 (SUCCESSES: 90, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 21, MEDIUM: 10, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'init-dp' of Job 'pi-job-random' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi-job-random.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'pi' of Job 'pi-job-random' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi-job-random.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'init-dp' of Job 'pi-job-random' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi-job-random.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pi' of Job 'pi-job-random' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi-job-random.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'init-dp' of 'job' 'pi-job-random' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi-job-random.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pi' of 'job' 'pi-job-random' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi-job-random.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'init-dp' of Job 'pi-job-random' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi-job-random.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pi' of Job 'pi-job-random' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi-job-random.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'init-dp' of Job 'pi-job-random' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi-job-random.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pi' of Job 'pi-job-random' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi-job-random.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'init-dp' of Job 'pi-job-random' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi-job-random.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pi' of Job 'pi-job-random' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi-job-random.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'init-dp' of Job 'pi-job-random' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi-job-random.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pi' of Job 'pi-job-random' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi-job-random.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'init-dp' of Job 'pi-job-random' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi-job-random.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pi' of Job 'pi-job-random' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi-job-random.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'init-dp' of Job 'pi-job-random' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi-job-random.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pi' of Job 'pi-job-random' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi-job-random.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'init-dp' of Job 'pi-job-random' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi-job-random.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pi' of Job 'pi-job-random' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi-job-random.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'init-dp' of Job 'pi-job-random' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi-job-random.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pi' of Job 'pi-job-random' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi-job-random.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'init-dp' of Job 'pi-job-random' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi-job-random.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pi' of Job 'pi-job-random' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi-job-random.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi-job-random.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi-job-random.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "init-dp" of job "pi-job-random" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi-job-random.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pi" of job "pi-job-random" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi-job-random.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi-job-random.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi-job-random.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): job pi-job-random in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi-job-random.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pi-job-random
   5 │   labels:
   6 └     kiamol: ch08
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-job-random in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job-random.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-job-random in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job-random.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job pi-job-random in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job-random.yaml:12-30
────────────────────────────────────────
  12 ┌       initContainers:
  13 │         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 │               mountPath: /init
  19 │       containers:
  20 └         - name: pi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container init-dp in job pi-job-random (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi-job-random.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pi in job pi-job-random (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi-job-random.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────



pi-job-random1.yaml (kubernetes)
================================
Tests: 126 (SUCCESSES: 90, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 21, MEDIUM: 10, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'init-dp' of Job 'pi-job-random' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi-job-random1.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'pi' of Job 'pi-job-random' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi-job-random1.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'init-dp' of Job 'pi-job-random' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi-job-random1.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pi' of Job 'pi-job-random' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi-job-random1.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'init-dp' of 'job' 'pi-job-random' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi-job-random1.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pi' of 'job' 'pi-job-random' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi-job-random1.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'init-dp' of Job 'pi-job-random' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi-job-random1.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pi' of Job 'pi-job-random' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi-job-random1.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'init-dp' of Job 'pi-job-random' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi-job-random1.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pi' of Job 'pi-job-random' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi-job-random1.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'init-dp' of Job 'pi-job-random' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi-job-random1.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pi' of Job 'pi-job-random' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi-job-random1.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'init-dp' of Job 'pi-job-random' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi-job-random1.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pi' of Job 'pi-job-random' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi-job-random1.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'init-dp' of Job 'pi-job-random' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi-job-random1.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pi' of Job 'pi-job-random' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi-job-random1.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'init-dp' of Job 'pi-job-random' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi-job-random1.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pi' of Job 'pi-job-random' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi-job-random1.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'init-dp' of Job 'pi-job-random' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi-job-random1.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pi' of Job 'pi-job-random' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi-job-random1.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'init-dp' of Job 'pi-job-random' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi-job-random1.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pi' of Job 'pi-job-random' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi-job-random1.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'init-dp' of Job 'pi-job-random' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi-job-random1.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pi' of Job 'pi-job-random' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi-job-random1.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi-job-random1.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi-job-random1.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "init-dp" of job "pi-job-random" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi-job-random1.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pi" of job "pi-job-random" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi-job-random1.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi-job-random1.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi-job-random1.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): job pi-job-random in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi-job-random1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pi-job-random
   5 │   labels:
   6 └     kiamol: ch08
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-job-random in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job-random1.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-job-random in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job-random1.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job pi-job-random in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job-random1.yaml:12-30
────────────────────────────────────────
  12 ┌       initContainers:
  13 │         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 │               mountPath: /init
  19 │       containers:
  20 └         - name: pi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container init-dp in job pi-job-random (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi-job-random1.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pi in job pi-job-random (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi-job-random1.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────



pi-job-random2.yaml (kubernetes)
================================
Tests: 126 (SUCCESSES: 90, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 21, MEDIUM: 10, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'init-dp' of Job 'pi-job-many' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi-job-random2.yaml:14-19
────────────────────────────────────────
  14 ┌         - name: init-dp
  15 │           image: kiamol/ch03-sleep
  16 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  17 │           volumeMounts:
  18 │             - name: init
  19 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'pi' of Job 'pi-job-many' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi-job-random2.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: pi
  22 │           image: kiamol/ch05-pi
  23 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  24 │           volumeMounts:
  25 │             - name: init
  26 │               mountPath: /init
  27 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'init-dp' of Job 'pi-job-many' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi-job-random2.yaml:14-19
────────────────────────────────────────
  14 ┌         - name: init-dp
  15 │           image: kiamol/ch03-sleep
  16 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  17 │           volumeMounts:
  18 │             - name: init
  19 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pi' of Job 'pi-job-many' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi-job-random2.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: pi
  22 │           image: kiamol/ch05-pi
  23 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  24 │           volumeMounts:
  25 │             - name: init
  26 │               mountPath: /init
  27 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'init-dp' of 'job' 'pi-job-many' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi-job-random2.yaml:14-19
────────────────────────────────────────
  14 ┌         - name: init-dp
  15 │           image: kiamol/ch03-sleep
  16 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  17 │           volumeMounts:
  18 │             - name: init
  19 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pi' of 'job' 'pi-job-many' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi-job-random2.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: pi
  22 │           image: kiamol/ch05-pi
  23 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  24 │           volumeMounts:
  25 │             - name: init
  26 │               mountPath: /init
  27 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'init-dp' of Job 'pi-job-many' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi-job-random2.yaml:14-19
────────────────────────────────────────
  14 ┌         - name: init-dp
  15 │           image: kiamol/ch03-sleep
  16 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  17 │           volumeMounts:
  18 │             - name: init
  19 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pi' of Job 'pi-job-many' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi-job-random2.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: pi
  22 │           image: kiamol/ch05-pi
  23 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  24 │           volumeMounts:
  25 │             - name: init
  26 │               mountPath: /init
  27 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'init-dp' of Job 'pi-job-many' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi-job-random2.yaml:14-19
────────────────────────────────────────
  14 ┌         - name: init-dp
  15 │           image: kiamol/ch03-sleep
  16 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  17 │           volumeMounts:
  18 │             - name: init
  19 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pi' of Job 'pi-job-many' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi-job-random2.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: pi
  22 │           image: kiamol/ch05-pi
  23 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  24 │           volumeMounts:
  25 │             - name: init
  26 │               mountPath: /init
  27 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'init-dp' of Job 'pi-job-many' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi-job-random2.yaml:14-19
────────────────────────────────────────
  14 ┌         - name: init-dp
  15 │           image: kiamol/ch03-sleep
  16 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  17 │           volumeMounts:
  18 │             - name: init
  19 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pi' of Job 'pi-job-many' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi-job-random2.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: pi
  22 │           image: kiamol/ch05-pi
  23 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  24 │           volumeMounts:
  25 │             - name: init
  26 │               mountPath: /init
  27 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'init-dp' of Job 'pi-job-many' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi-job-random2.yaml:14-19
────────────────────────────────────────
  14 ┌         - name: init-dp
  15 │           image: kiamol/ch03-sleep
  16 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  17 │           volumeMounts:
  18 │             - name: init
  19 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pi' of Job 'pi-job-many' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi-job-random2.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: pi
  22 │           image: kiamol/ch05-pi
  23 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  24 │           volumeMounts:
  25 │             - name: init
  26 │               mountPath: /init
  27 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'init-dp' of Job 'pi-job-many' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi-job-random2.yaml:14-19
────────────────────────────────────────
  14 ┌         - name: init-dp
  15 │           image: kiamol/ch03-sleep
  16 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  17 │           volumeMounts:
  18 │             - name: init
  19 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pi' of Job 'pi-job-many' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi-job-random2.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: pi
  22 │           image: kiamol/ch05-pi
  23 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  24 │           volumeMounts:
  25 │             - name: init
  26 │               mountPath: /init
  27 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'init-dp' of Job 'pi-job-many' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi-job-random2.yaml:14-19
────────────────────────────────────────
  14 ┌         - name: init-dp
  15 │           image: kiamol/ch03-sleep
  16 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  17 │           volumeMounts:
  18 │             - name: init
  19 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pi' of Job 'pi-job-many' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi-job-random2.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: pi
  22 │           image: kiamol/ch05-pi
  23 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  24 │           volumeMounts:
  25 │             - name: init
  26 │               mountPath: /init
  27 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'init-dp' of Job 'pi-job-many' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi-job-random2.yaml:14-19
────────────────────────────────────────
  14 ┌         - name: init-dp
  15 │           image: kiamol/ch03-sleep
  16 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  17 │           volumeMounts:
  18 │             - name: init
  19 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pi' of Job 'pi-job-many' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi-job-random2.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: pi
  22 │           image: kiamol/ch05-pi
  23 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  24 │           volumeMounts:
  25 │             - name: init
  26 │               mountPath: /init
  27 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'init-dp' of Job 'pi-job-many' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi-job-random2.yaml:14-19
────────────────────────────────────────
  14 ┌         - name: init-dp
  15 │           image: kiamol/ch03-sleep
  16 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  17 │           volumeMounts:
  18 │             - name: init
  19 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pi' of Job 'pi-job-many' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi-job-random2.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: pi
  22 │           image: kiamol/ch05-pi
  23 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  24 │           volumeMounts:
  25 │             - name: init
  26 │               mountPath: /init
  27 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'init-dp' of Job 'pi-job-many' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi-job-random2.yaml:14-19
────────────────────────────────────────
  14 ┌         - name: init-dp
  15 │           image: kiamol/ch03-sleep
  16 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  17 │           volumeMounts:
  18 │             - name: init
  19 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pi' of Job 'pi-job-many' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi-job-random2.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: pi
  22 │           image: kiamol/ch05-pi
  23 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  24 │           volumeMounts:
  25 │             - name: init
  26 │               mountPath: /init
  27 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi-job-random2.yaml:14-19
────────────────────────────────────────
  14 ┌         - name: init-dp
  15 │           image: kiamol/ch03-sleep
  16 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  17 │           volumeMounts:
  18 │             - name: init
  19 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi-job-random2.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: pi
  22 │           image: kiamol/ch05-pi
  23 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  24 │           volumeMounts:
  25 │             - name: init
  26 │               mountPath: /init
  27 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "init-dp" of job "pi-job-many" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi-job-random2.yaml:14-19
────────────────────────────────────────
  14 ┌         - name: init-dp
  15 │           image: kiamol/ch03-sleep
  16 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  17 │           volumeMounts:
  18 │             - name: init
  19 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pi" of job "pi-job-many" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi-job-random2.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: pi
  22 │           image: kiamol/ch05-pi
  23 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  24 │           volumeMounts:
  25 │             - name: init
  26 │               mountPath: /init
  27 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi-job-random2.yaml:14-19
────────────────────────────────────────
  14 ┌         - name: init-dp
  15 │           image: kiamol/ch03-sleep
  16 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  17 │           volumeMounts:
  18 │             - name: init
  19 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi-job-random2.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: pi
  22 │           image: kiamol/ch05-pi
  23 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  24 │           volumeMounts:
  25 │             - name: init
  26 │               mountPath: /init
  27 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): job pi-job-many in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi-job-random2.yaml:4-7
────────────────────────────────────────
   4 ┌   name: pi-job-many
   5 │   labels:
   6 │     kubernetes.courselabs.co: jobs
   7 └     app: pi-many
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-job-many in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job-random2.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: pi
  22 │           image: kiamol/ch05-pi
  23 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  24 │           volumeMounts:
  25 │             - name: init
  26 │               mountPath: /init
  27 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-job-many in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job-random2.yaml:14-19
────────────────────────────────────────
  14 ┌         - name: init-dp
  15 │           image: kiamol/ch03-sleep
  16 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  17 │           volumeMounts:
  18 │             - name: init
  19 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job pi-job-many in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job-random2.yaml:13-31
────────────────────────────────────────
  13 ┌       initContainers:
  14 │         - name: init-dp
  15 │           image: kiamol/ch03-sleep
  16 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  17 │           volumeMounts:
  18 │             - name: init
  19 │               mountPath: /init
  20 │       containers:
  21 └         - name: pi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container init-dp in job pi-job-many (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi-job-random2.yaml:14-19
────────────────────────────────────────
  14 ┌         - name: init-dp
  15 │           image: kiamol/ch03-sleep
  16 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  17 │           volumeMounts:
  18 │             - name: init
  19 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pi in job pi-job-many (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi-job-random2.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: pi
  22 │           image: kiamol/ch05-pi
  23 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  24 │           volumeMounts:
  25 │             - name: init
  26 │               mountPath: /init
  27 └               readOnly: true
────────────────────────────────────────



pi-job-random3.yaml (kubernetes)
================================
Tests: 126 (SUCCESSES: 90, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 21, MEDIUM: 10, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'init-dp' of Job 'pi-job-random' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi-job-random3.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'pi' of Job 'pi-job-random' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi-job-random3.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'init-dp' of Job 'pi-job-random' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi-job-random3.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pi' of Job 'pi-job-random' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi-job-random3.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'init-dp' of 'job' 'pi-job-random' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi-job-random3.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pi' of 'job' 'pi-job-random' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi-job-random3.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'init-dp' of Job 'pi-job-random' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi-job-random3.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pi' of Job 'pi-job-random' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi-job-random3.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'init-dp' of Job 'pi-job-random' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi-job-random3.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pi' of Job 'pi-job-random' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi-job-random3.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'init-dp' of Job 'pi-job-random' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi-job-random3.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pi' of Job 'pi-job-random' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi-job-random3.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'init-dp' of Job 'pi-job-random' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi-job-random3.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pi' of Job 'pi-job-random' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi-job-random3.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'init-dp' of Job 'pi-job-random' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi-job-random3.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pi' of Job 'pi-job-random' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi-job-random3.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'init-dp' of Job 'pi-job-random' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi-job-random3.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pi' of Job 'pi-job-random' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi-job-random3.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'init-dp' of Job 'pi-job-random' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi-job-random3.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pi' of Job 'pi-job-random' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi-job-random3.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'init-dp' of Job 'pi-job-random' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi-job-random3.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pi' of Job 'pi-job-random' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi-job-random3.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'init-dp' of Job 'pi-job-random' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi-job-random3.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pi' of Job 'pi-job-random' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi-job-random3.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi-job-random3.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi-job-random3.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "init-dp" of job "pi-job-random" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi-job-random3.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pi" of job "pi-job-random" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi-job-random3.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi-job-random3.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi-job-random3.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): job pi-job-random in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi-job-random3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pi-job-random
   5 │   labels:
   6 └     kiamol: ch08
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-job-random in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job-random3.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-job-random in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job-random3.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job pi-job-random in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job-random3.yaml:12-30
────────────────────────────────────────
  12 ┌       initContainers:
  13 │         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 │               mountPath: /init
  19 │       containers:
  20 └         - name: pi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container init-dp in job pi-job-random (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi-job-random3.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pi in job pi-job-random (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi-job-random3.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────



pi-job-random4.yaml (kubernetes)
================================
Tests: 126 (SUCCESSES: 90, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 21, MEDIUM: 10, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'init-dp' of Job 'pi-job-random' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi-job-random4.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'pi' of Job 'pi-job-random' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi-job-random4.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'init-dp' of Job 'pi-job-random' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi-job-random4.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pi' of Job 'pi-job-random' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi-job-random4.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'init-dp' of 'job' 'pi-job-random' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi-job-random4.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pi' of 'job' 'pi-job-random' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi-job-random4.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'init-dp' of Job 'pi-job-random' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi-job-random4.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pi' of Job 'pi-job-random' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi-job-random4.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'init-dp' of Job 'pi-job-random' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi-job-random4.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pi' of Job 'pi-job-random' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi-job-random4.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'init-dp' of Job 'pi-job-random' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi-job-random4.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pi' of Job 'pi-job-random' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi-job-random4.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'init-dp' of Job 'pi-job-random' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi-job-random4.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pi' of Job 'pi-job-random' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi-job-random4.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'init-dp' of Job 'pi-job-random' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi-job-random4.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pi' of Job 'pi-job-random' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi-job-random4.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'init-dp' of Job 'pi-job-random' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi-job-random4.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pi' of Job 'pi-job-random' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi-job-random4.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'init-dp' of Job 'pi-job-random' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi-job-random4.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pi' of Job 'pi-job-random' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi-job-random4.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'init-dp' of Job 'pi-job-random' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi-job-random4.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pi' of Job 'pi-job-random' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi-job-random4.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'init-dp' of Job 'pi-job-random' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi-job-random4.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pi' of Job 'pi-job-random' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi-job-random4.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi-job-random4.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi-job-random4.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "init-dp" of job "pi-job-random" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi-job-random4.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pi" of job "pi-job-random" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi-job-random4.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi-job-random4.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi-job-random4.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): job pi-job-random in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi-job-random4.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pi-job-random
   5 │   labels:
   6 └     kiamol: ch08
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-job-random in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job-random4.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-job-random in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job-random4.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job pi-job-random in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job-random4.yaml:12-30
────────────────────────────────────────
  12 ┌       initContainers:
  13 │         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 │               mountPath: /init
  19 │       containers:
  20 └         - name: pi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container init-dp in job pi-job-random (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi-job-random4.yaml:13-18
────────────────────────────────────────
  13 ┌         - name: init-dp
  14 │           image: kiamol/ch03-sleep
  15 │           command: ['sh', '-c', 'echo $RANDOM > /init/dp']
  16 │           volumeMounts:
  17 │             - name: init
  18 └               mountPath: /init
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pi in job pi-job-random (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi-job-random4.yaml:20-26
────────────────────────────────────────
  20 ┌         - name: pi
  21 │           image: kiamol/ch05-pi
  22 │           command: ['sh', '-c', 'dotnet Pi.Web.dll -m console -dp $(cat /init/dp)']
  23 │           volumeMounts:
  24 │             - name: init
  25 │               mountPath: /init
  26 └               readOnly: true
────────────────────────────────────────



pi-job-restart.yaml (kubernetes)
================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pi' of Job 'pi-job-one-failing' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi-job-restart.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pi' of Job 'pi-job-one-failing' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi-job-restart.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pi' of 'job' 'pi-job-one-failing' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi-job-restart.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pi' of Job 'pi-job-one-failing' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi-job-restart.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pi' of Job 'pi-job-one-failing' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi-job-restart.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pi' of Job 'pi-job-one-failing' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi-job-restart.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pi' of Job 'pi-job-one-failing' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi-job-restart.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pi' of Job 'pi-job-one-failing' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi-job-restart.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pi' of Job 'pi-job-one-failing' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi-job-restart.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pi' of Job 'pi-job-one-failing' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi-job-restart.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pi' of Job 'pi-job-one-failing' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi-job-restart.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pi' of Job 'pi-job-one-failing' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi-job-restart.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi-job-restart.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pi" of job "pi-job-one-failing" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi-job-restart.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi-job-restart.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): job pi-job-one-failing in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi-job-restart.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pi-job-one-failing
   5 │   labels:
   6 └     kubernetes.courselabs.co: jobs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-job-one-failing in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job-restart.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job pi-job-one-failing in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job-restart.yaml:12-16
────────────────────────────────────────
  12 ┌       containers:
  13 │         - name: pi
  14 │           image: kiamol/ch05-pi
  15 │           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
  16 └       restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pi in job pi-job-one-failing (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi-job-restart.yaml:13-15
────────────────────────────────────────
  13 ┌         - name: pi
  14 │           image: kiamol/ch05-pi
  15 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────



pi-job.yaml (kubernetes)
========================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pi' of Job 'pi-job' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi-job.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pi' of Job 'pi-job' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi-job.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pi' of 'job' 'pi-job' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi-job.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pi' of Job 'pi-job' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi-job.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pi' of Job 'pi-job' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi-job.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pi' of Job 'pi-job' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi-job.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pi' of Job 'pi-job' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi-job.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pi' of Job 'pi-job' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi-job.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pi' of Job 'pi-job' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi-job.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pi' of Job 'pi-job' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi-job.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pi' of Job 'pi-job' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi-job.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pi' of Job 'pi-job' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi-job.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi-job.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pi" of job "pi-job" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi-job.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi-job.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): job pi-job in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi-job.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pi-job
   5 │   labels:
   6 └     kiamol: ch08
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-job in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job pi-job in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job.yaml:10-14
────────────────────────────────────────
  10 ┌       containers:
  11 │         - name: pi
  12 │           image: kiamol/ch05-pi
  13 │           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
  14 └       restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pi in job pi-job (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi-job.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────



pi-job1.yaml (kubernetes)
=========================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pi' of Job 'pi-job' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi-job1.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pi' of Job 'pi-job' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi-job1.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pi' of 'job' 'pi-job' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi-job1.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pi' of Job 'pi-job' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi-job1.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pi' of Job 'pi-job' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi-job1.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pi' of Job 'pi-job' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi-job1.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pi' of Job 'pi-job' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi-job1.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pi' of Job 'pi-job' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi-job1.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pi' of Job 'pi-job' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi-job1.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pi' of Job 'pi-job' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi-job1.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pi' of Job 'pi-job' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi-job1.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pi' of Job 'pi-job' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi-job1.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi-job1.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pi" of job "pi-job" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi-job1.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi-job1.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): job pi-job in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi-job1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pi-job
   5 │   labels:
   6 └     kiamol: ch08
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-job in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job1.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job pi-job in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job1.yaml:10-14
────────────────────────────────────────
  10 ┌       containers:
  11 │         - name: pi
  12 │           image: kiamol/ch05-pi
  13 │           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
  14 └       restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pi in job pi-job (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi-job1.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────



pi-job2.yaml (kubernetes)
=========================
Tests: 108 (SUCCESSES: 92, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pi' of Job 'pi' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi-job2.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"] 
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pi' of Job 'pi' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi-job2.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"] 
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pi' of 'job' 'pi' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi-job2.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"] 
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pi' of Job 'pi' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi-job2.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"] 
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pi' of Job 'pi' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi-job2.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"] 
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pi' of Job 'pi' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi-job2.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"] 
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pi' of Job 'pi' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi-job2.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"] 
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pi' of Job 'pi' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi-job2.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"] 
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pi' of Job 'pi' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi-job2.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"] 
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pi' of Job 'pi' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi-job2.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"] 
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pi' of Job 'pi' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi-job2.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"] 
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pi' of Job 'pi' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi-job2.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"] 
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi-job2.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"] 
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pi" of job "pi" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi-job2.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"] 
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi-job2.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"] 
────────────────────────────────────────


AVD-KSV-0110 (LOW): job pi in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi-job2.yaml:4
────────────────────────────────────────
   4 [   name: pi
────────────────────────────────────────



pi-job3.yaml (kubernetes)
=========================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pi' of Job 'pi-job-one-failing' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi-job3.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pi' of Job 'pi-job-one-failing' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi-job3.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pi' of 'job' 'pi-job-one-failing' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi-job3.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pi' of Job 'pi-job-one-failing' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi-job3.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pi' of Job 'pi-job-one-failing' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi-job3.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pi' of Job 'pi-job-one-failing' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi-job3.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pi' of Job 'pi-job-one-failing' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi-job3.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pi' of Job 'pi-job-one-failing' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi-job3.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pi' of Job 'pi-job-one-failing' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi-job3.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pi' of Job 'pi-job-one-failing' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi-job3.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pi' of Job 'pi-job-one-failing' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi-job3.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pi' of Job 'pi-job-one-failing' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi-job3.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi-job3.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pi" of job "pi-job-one-failing" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi-job3.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi-job3.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): job pi-job-one-failing in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi-job3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pi-job-one-failing
   5 │   labels:
   6 └     kubernetes.courselabs.co: jobs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-job-one-failing in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job3.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job pi-job-one-failing in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job3.yaml:10-14
────────────────────────────────────────
  10 ┌       containers:
  11 │         - name: pi
  12 │           image: kiamol/ch05-pi
  13 │           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
  14 └       restartPolicy: OnFailure
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pi in job pi-job-one-failing (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi-job3.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["donet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────



pi-job4.yaml (kubernetes)
=========================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pi' of Job 'pi' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi-job4.yaml:17-19
────────────────────────────────────────
  17 ┌       - name: pi
  18 │         image: perl
  19 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pi' of Job 'pi' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi-job4.yaml:17-19
────────────────────────────────────────
  17 ┌       - name: pi
  18 │         image: perl
  19 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pi' of 'job' 'pi' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi-job4.yaml:17-19
────────────────────────────────────────
  17 ┌       - name: pi
  18 │         image: perl
  19 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pi' of Job 'pi' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi-job4.yaml:17-19
────────────────────────────────────────
  17 ┌       - name: pi
  18 │         image: perl
  19 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pi' of Job 'pi' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi-job4.yaml:17-19
────────────────────────────────────────
  17 ┌       - name: pi
  18 │         image: perl
  19 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pi' of Job 'pi' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi-job4.yaml:17-19
────────────────────────────────────────
  17 ┌       - name: pi
  18 │         image: perl
  19 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pi' of Job 'pi' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi-job4.yaml:17-19
────────────────────────────────────────
  17 ┌       - name: pi
  18 │         image: perl
  19 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pi' of Job 'pi' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi-job4.yaml:17-19
────────────────────────────────────────
  17 ┌       - name: pi
  18 │         image: perl
  19 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pi' of Job 'pi' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi-job4.yaml:17-19
────────────────────────────────────────
  17 ┌       - name: pi
  18 │         image: perl
  19 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pi' of Job 'pi' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi-job4.yaml:17-19
────────────────────────────────────────
  17 ┌       - name: pi
  18 │         image: perl
  19 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pi' of Job 'pi' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi-job4.yaml:17-19
────────────────────────────────────────
  17 ┌       - name: pi
  18 │         image: perl
  19 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pi' of Job 'pi' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi-job4.yaml:17-19
────────────────────────────────────────
  17 ┌       - name: pi
  18 │         image: perl
  19 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi-job4.yaml:17-19
────────────────────────────────────────
  17 ┌       - name: pi
  18 │         image: perl
  19 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pi" of job "pi" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi-job4.yaml:17-19
────────────────────────────────────────
  17 ┌       - name: pi
  18 │         image: perl
  19 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi-job4.yaml:17-19
────────────────────────────────────────
  17 ┌       - name: pi
  18 │         image: perl
  19 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): job pi in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi-job4.yaml:10
────────────────────────────────────────
  10 [   name: pi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job4.yaml:17-19
────────────────────────────────────────
  17 ┌       - name: pi
  18 │         image: perl
  19 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job pi in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job4.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: pi
  18 │         image: perl
  19 │         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
  20 └       restartPolicy: Never
────────────────────────────────────────



pi-job5.yaml (kubernetes)
=========================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pi' of Job 'pi-job' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi-job5.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pi' of Job 'pi-job' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi-job5.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pi' of 'job' 'pi-job' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi-job5.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pi' of Job 'pi-job' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi-job5.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pi' of Job 'pi-job' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi-job5.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pi' of Job 'pi-job' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi-job5.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pi' of Job 'pi-job' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi-job5.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pi' of Job 'pi-job' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi-job5.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pi' of Job 'pi-job' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi-job5.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pi' of Job 'pi-job' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi-job5.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pi' of Job 'pi-job' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi-job5.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pi' of Job 'pi-job' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi-job5.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi-job5.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pi" of job "pi-job" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi-job5.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi-job5.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): job pi-job in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi-job5.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pi-job
   5 │   labels:
   6 └     kiamol: ch08
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-job in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job5.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job pi-job in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job5.yaml:10-14
────────────────────────────────────────
  10 ┌       containers:
  11 │         - name: pi
  12 │           image: kiamol/ch05-pi
  13 │           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
  14 └       restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pi in job pi-job (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi-job5.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────



pi-job6.yaml (kubernetes)
=========================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pi' of Job 'pi-job' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi-job6.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pi' of Job 'pi-job' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi-job6.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pi' of 'job' 'pi-job' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi-job6.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pi' of Job 'pi-job' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi-job6.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pi' of Job 'pi-job' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi-job6.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pi' of Job 'pi-job' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi-job6.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pi' of Job 'pi-job' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi-job6.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pi' of Job 'pi-job' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi-job6.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pi' of Job 'pi-job' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi-job6.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pi' of Job 'pi-job' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi-job6.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pi' of Job 'pi-job' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi-job6.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pi' of Job 'pi-job' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi-job6.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi-job6.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pi" of job "pi-job" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi-job6.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi-job6.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): job pi-job in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi-job6.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pi-job
   5 │   labels:
   6 └     kiamol: ch08
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-job in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job6.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job pi-job in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-job6.yaml:10-14
────────────────────────────────────────
  10 ┌       containers:
  11 │         - name: pi
  12 │           image: kiamol/ch05-pi
  13 │           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
  14 └       restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pi in job pi-job (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi-job6.yaml:11-13
────────────────────────────────────────
  11 ┌         - name: pi
  12 │           image: kiamol/ch05-pi
  13 └           command: ["dotnet", "Pi.Web.dll", "-m", "console", "-dp", "50"]
────────────────────────────────────────



pi-led-api-deploy.yaml (kubernetes)
===================================
Tests: 109 (SUCCESSES: 94, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pi-led-api' of Deployment 'pi-led-api' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi-led-api-deploy.yaml:37-54
────────────────────────────────────────
  37 ┌         - name: pi-led-api
  38 │           image: harbor.local.abbottland.io/library/pi-led-api:0.1.0 # {"$imagepolicy": "flux-system:pi-led-api"}
  39 │           ports:
  40 │             - containerPort: 4001
  41 │           volumeMounts:
  42 │             - name: home-monitor
  43 │               mountPath: /pironman_monitor
  44 │             - name: opt-pironman
  45 └               mountPath: /opt/pironman
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pi-led-api' of Deployment 'pi-led-api' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi-led-api-deploy.yaml:37-54
────────────────────────────────────────
  37 ┌         - name: pi-led-api
  38 │           image: harbor.local.abbottland.io/library/pi-led-api:0.1.0 # {"$imagepolicy": "flux-system:pi-led-api"}
  39 │           ports:
  40 │             - containerPort: 4001
  41 │           volumeMounts:
  42 │             - name: home-monitor
  43 │               mountPath: /pironman_monitor
  44 │             - name: opt-pironman
  45 └               mountPath: /opt/pironman
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pi-led-api' of 'deployment' 'pi-led-api' in 'home-hud' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi-led-api-deploy.yaml:37-54
────────────────────────────────────────
  37 ┌         - name: pi-led-api
  38 │           image: harbor.local.abbottland.io/library/pi-led-api:0.1.0 # {"$imagepolicy": "flux-system:pi-led-api"}
  39 │           ports:
  40 │             - containerPort: 4001
  41 │           volumeMounts:
  42 │             - name: home-monitor
  43 │               mountPath: /pironman_monitor
  44 │             - name: opt-pironman
  45 └               mountPath: /opt/pironman
  ..   
────────────────────────────────────────


AVD-KSV-0010 (HIGH): Deployment 'pi-led-api' should not set 'spec.template.spec.hostPID' to true
════════════════════════════════════════
Sharing the host’s PID namespace allows visibility on host processes, potentially leaking information such as environment variables and configuration.

See https://avd.aquasec.com/misconfig/ksv010
────────────────────────────────────────
 pi-led-api-deploy.yaml:9-54
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: pi-led-api
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: pi-led-api
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pi-led-api' of Deployment 'pi-led-api' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi-led-api-deploy.yaml:37-54
────────────────────────────────────────
  37 ┌         - name: pi-led-api
  38 │           image: harbor.local.abbottland.io/library/pi-led-api:0.1.0 # {"$imagepolicy": "flux-system:pi-led-api"}
  39 │           ports:
  40 │             - containerPort: 4001
  41 │           volumeMounts:
  42 │             - name: home-monitor
  43 │               mountPath: /pironman_monitor
  44 │             - name: opt-pironman
  45 └               mountPath: /opt/pironman
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pi-led-api' of Deployment 'pi-led-api' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi-led-api-deploy.yaml:37-54
────────────────────────────────────────
  37 ┌         - name: pi-led-api
  38 │           image: harbor.local.abbottland.io/library/pi-led-api:0.1.0 # {"$imagepolicy": "flux-system:pi-led-api"}
  39 │           ports:
  40 │             - containerPort: 4001
  41 │           volumeMounts:
  42 │             - name: home-monitor
  43 │               mountPath: /pironman_monitor
  44 │             - name: opt-pironman
  45 └               mountPath: /opt/pironman
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pi-led-api' of Deployment 'pi-led-api' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi-led-api-deploy.yaml:37-54
────────────────────────────────────────
  37 ┌         - name: pi-led-api
  38 │           image: harbor.local.abbottland.io/library/pi-led-api:0.1.0 # {"$imagepolicy": "flux-system:pi-led-api"}
  39 │           ports:
  40 │             - containerPort: 4001
  41 │           volumeMounts:
  42 │             - name: home-monitor
  43 │               mountPath: /pironman_monitor
  44 │             - name: opt-pironman
  45 └               mountPath: /opt/pironman
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pi-led-api' of Deployment 'pi-led-api' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi-led-api-deploy.yaml:37-54
────────────────────────────────────────
  37 ┌         - name: pi-led-api
  38 │           image: harbor.local.abbottland.io/library/pi-led-api:0.1.0 # {"$imagepolicy": "flux-system:pi-led-api"}
  39 │           ports:
  40 │             - containerPort: 4001
  41 │           volumeMounts:
  42 │             - name: home-monitor
  43 │               mountPath: /pironman_monitor
  44 │             - name: opt-pironman
  45 └               mountPath: /opt/pironman
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'pi-led-api' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 pi-led-api-deploy.yaml:9-54
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: pi-led-api
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: pi-led-api
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi-led-api-deploy.yaml:37-54
────────────────────────────────────────
  37 ┌         - name: pi-led-api
  38 │           image: harbor.local.abbottland.io/library/pi-led-api:0.1.0 # {"$imagepolicy": "flux-system:pi-led-api"}
  39 │           ports:
  40 │             - containerPort: 4001
  41 │           volumeMounts:
  42 │             - name: home-monitor
  43 │               mountPath: /pironman_monitor
  44 │             - name: opt-pironman
  45 └               mountPath: /opt/pironman
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pi-led-api" of deployment "pi-led-api" in "home-hud" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi-led-api-deploy.yaml:37-54
────────────────────────────────────────
  37 ┌         - name: pi-led-api
  38 │           image: harbor.local.abbottland.io/library/pi-led-api:0.1.0 # {"$imagepolicy": "flux-system:pi-led-api"}
  39 │           ports:
  40 │             - containerPort: 4001
  41 │           volumeMounts:
  42 │             - name: home-monitor
  43 │               mountPath: /pironman_monitor
  44 │             - name: opt-pironman
  45 └               mountPath: /opt/pironman
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi-led-api-deploy.yaml:37-54
────────────────────────────────────────
  37 ┌         - name: pi-led-api
  38 │           image: harbor.local.abbottland.io/library/pi-led-api:0.1.0 # {"$imagepolicy": "flux-system:pi-led-api"}
  39 │           ports:
  40 │             - containerPort: 4001
  41 │           volumeMounts:
  42 │             - name: home-monitor
  43 │               mountPath: /pironman_monitor
  44 │             - name: opt-pironman
  45 └               mountPath: /opt/pironman
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-led-api in home-hud namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-led-api-deploy.yaml:37-54
────────────────────────────────────────
  37 ┌         - name: pi-led-api
  38 │           image: harbor.local.abbottland.io/library/pi-led-api:0.1.0 # {"$imagepolicy": "flux-system:pi-led-api"}
  39 │           ports:
  40 │             - containerPort: 4001
  41 │           volumeMounts:
  42 │             - name: home-monitor
  43 │               mountPath: /pironman_monitor
  44 │             - name: opt-pironman
  45 └               mountPath: /opt/pironman
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pi-led-api in home-hud namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi-led-api-deploy.yaml:18-54
────────────────────────────────────────
  18 ┌       imagePullSecrets:
  19 │         - name: regcred
  20 │       nodeSelector:
  21 │         kubernetes.io/hostname: dumbledore
  22 │       hostPID: true
  23 │       volumes:
  24 │         - name: home-monitor
  25 │           hostPath:
  26 └             path: /home/albus/pironman_monitor
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pi-led-api in deployment pi-led-api (namespace: home-hud) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi-led-api-deploy.yaml:37-54
────────────────────────────────────────
  37 ┌         - name: pi-led-api
  38 │           image: harbor.local.abbottland.io/library/pi-led-api:0.1.0 # {"$imagepolicy": "flux-system:pi-led-api"}
  39 │           ports:
  40 │             - containerPort: 4001
  41 │           volumeMounts:
  42 │             - name: home-monitor
  43 │               mountPath: /pironman_monitor
  44 │             - name: opt-pironman
  45 └               mountPath: /opt/pironman
  ..   
────────────────────────────────────────



pi-nonroot.yaml (kubernetes)
============================
Tests: 108 (SUCCESSES: 92, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'pi-web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi-nonroot.yaml:21-29
────────────────────────────────────────
  21 ┌         - image: kiamol/ch05-pi
  22 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  23 │           name: web
  24 │           env:
  25 │             - name: ASPNETCORE_URLS
  26 │               value: http://+:5001
  27 │           ports:
  28 │             - name: http
  29 └               containerPort: 5001
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'pi-web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi-nonroot.yaml:21-29
────────────────────────────────────────
  21 ┌         - image: kiamol/ch05-pi
  22 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  23 │           name: web
  24 │           env:
  25 │             - name: ASPNETCORE_URLS
  26 │               value: http://+:5001
  27 │           ports:
  28 │             - name: http
  29 └               containerPort: 5001
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'pi-web' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi-nonroot.yaml:21-29
────────────────────────────────────────
  21 ┌         - image: kiamol/ch05-pi
  22 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  23 │           name: web
  24 │           env:
  25 │             - name: ASPNETCORE_URLS
  26 │               value: http://+:5001
  27 │           ports:
  28 │             - name: http
  29 └               containerPort: 5001
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Deployment 'pi-web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi-nonroot.yaml:21-29
────────────────────────────────────────
  21 ┌         - image: kiamol/ch05-pi
  22 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  23 │           name: web
  24 │           env:
  25 │             - name: ASPNETCORE_URLS
  26 │               value: http://+:5001
  27 │           ports:
  28 │             - name: http
  29 └               containerPort: 5001
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'pi-web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi-nonroot.yaml:21-29
────────────────────────────────────────
  21 ┌         - image: kiamol/ch05-pi
  22 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  23 │           name: web
  24 │           env:
  25 │             - name: ASPNETCORE_URLS
  26 │               value: http://+:5001
  27 │           ports:
  28 │             - name: http
  29 └               containerPort: 5001
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'web' of Deployment 'pi-web' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi-nonroot.yaml:21-29
────────────────────────────────────────
  21 ┌         - image: kiamol/ch05-pi
  22 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  23 │           name: web
  24 │           env:
  25 │             - name: ASPNETCORE_URLS
  26 │               value: http://+:5001
  27 │           ports:
  28 │             - name: http
  29 └               containerPort: 5001
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'pi-web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi-nonroot.yaml:21-29
────────────────────────────────────────
  21 ┌         - image: kiamol/ch05-pi
  22 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  23 │           name: web
  24 │           env:
  25 │             - name: ASPNETCORE_URLS
  26 │               value: http://+:5001
  27 │           ports:
  28 │             - name: http
  29 └               containerPort: 5001
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'pi-web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi-nonroot.yaml:21-29
────────────────────────────────────────
  21 ┌         - image: kiamol/ch05-pi
  22 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  23 │           name: web
  24 │           env:
  25 │             - name: ASPNETCORE_URLS
  26 │               value: http://+:5001
  27 │           ports:
  28 │             - name: http
  29 └               containerPort: 5001
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'pi-web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi-nonroot.yaml:21-29
────────────────────────────────────────
  21 ┌         - image: kiamol/ch05-pi
  22 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  23 │           name: web
  24 │           env:
  25 │             - name: ASPNETCORE_URLS
  26 │               value: http://+:5001
  27 │           ports:
  28 │             - name: http
  29 └               containerPort: 5001
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'pi-web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi-nonroot.yaml:21-29
────────────────────────────────────────
  21 ┌         - image: kiamol/ch05-pi
  22 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  23 │           name: web
  24 │           env:
  25 │             - name: ASPNETCORE_URLS
  26 │               value: http://+:5001
  27 │           ports:
  28 │             - name: http
  29 └               containerPort: 5001
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'pi-web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi-nonroot.yaml:21-29
────────────────────────────────────────
  21 ┌         - image: kiamol/ch05-pi
  22 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  23 │           name: web
  24 │           env:
  25 │             - name: ASPNETCORE_URLS
  26 │               value: http://+:5001
  27 │           ports:
  28 │             - name: http
  29 └               containerPort: 5001
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi-nonroot.yaml:21-29
────────────────────────────────────────
  21 ┌         - image: kiamol/ch05-pi
  22 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  23 │           name: web
  24 │           env:
  25 │             - name: ASPNETCORE_URLS
  26 │               value: http://+:5001
  27 │           ports:
  28 │             - name: http
  29 └               containerPort: 5001
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "pi-web" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi-nonroot.yaml:21-29
────────────────────────────────────────
  21 ┌         - image: kiamol/ch05-pi
  22 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  23 │           name: web
  24 │           env:
  25 │             - name: ASPNETCORE_URLS
  26 │               value: http://+:5001
  27 │           ports:
  28 │             - name: http
  29 └               containerPort: 5001
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi-nonroot.yaml:21-29
────────────────────────────────────────
  21 ┌         - image: kiamol/ch05-pi
  22 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  23 │           name: web
  24 │           env:
  25 │             - name: ASPNETCORE_URLS
  26 │               value: http://+:5001
  27 │           ports:
  28 │             - name: http
  29 └               containerPort: 5001
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pi-web in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi-nonroot.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pi-web
   5 │   labels:
   6 └     kubernetes.courselabs.co: admission
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment pi-web (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi-nonroot.yaml:21-29
────────────────────────────────────────
  21 ┌         - image: kiamol/ch05-pi
  22 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  23 │           name: web
  24 │           env:
  25 │             - name: ASPNETCORE_URLS
  26 │               value: http://+:5001
  27 │           ports:
  28 │             - name: http
  29 └               containerPort: 5001
────────────────────────────────────────



pi1.yaml (kubernetes)
=====================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 9, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'pi-web-lab' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'pi-web-lab' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'web' of Deployment 'pi-web-lab' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "pi-web-lab" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pi-web-lab in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pi-web-lab
   5 │   labels:
   6 └     kiamol: ch19-lab
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pi-web-lab in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-web-lab in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pi-web-lab in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi1.yaml:17-48
────────────────────────────────────────
  17 ┌       containers:
  18 │         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment pi-web-lab (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi1.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────



pi10.yaml (kubernetes)
======================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 9, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi10.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'pi-web-lab' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi10.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'pi-web-lab' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi10.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi10.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'web' of Deployment 'pi-web-lab' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi10.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi10.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi10.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi10.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi10.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi10.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi10.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "pi-web-lab" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi10.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi10.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pi-web-lab in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi10.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pi-web-lab
   5 │   labels:
   6 └     kiamol: ch19-lab
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pi-web-lab in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-web-lab in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi10.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pi-web-lab in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi10.yaml:17-48
────────────────────────────────────────
  17 ┌       containers:
  18 │         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment pi-web-lab (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi10.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────



pi2_1.yaml (kubernetes)
=======================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi2_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'pi-web-lab' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi2_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'pi-web-lab' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi2_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi2_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'web' of Deployment 'pi-web-lab' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi2_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi2_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi2_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi2_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi2_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi2_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi2_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi2_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "pi-web-lab" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi2_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi2_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pi-web-lab in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi2_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pi-web-lab
   5 │   labels:
   6 └     kiamol: ch19-lab
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pi-web-lab in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-web-lab in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi2_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pi-web-lab in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi2_1.yaml:17-30
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment pi-web-lab (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi2_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────



pi3.yaml (kubernetes)
=====================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 9, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'pi-web-lab' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'pi-web-lab' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'web' of Deployment 'pi-web-lab' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "pi-web-lab" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pi-web-lab in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pi-web-lab
   5 │   labels:
   6 └     kiamol: ch19-lab
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pi-web-lab in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-web-lab in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pi-web-lab in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi3.yaml:17-48
────────────────────────────────────────
  17 ┌       containers:
  18 │         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment pi-web-lab (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi3.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────



pi5_1.yaml (kubernetes)
=======================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pi-web' of Deployment 'pi-web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pi-web' of Deployment 'pi-web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pi-web' of 'deployment' 'pi-web' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pi-web' of Deployment 'pi-web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pi-web' of Deployment 'pi-web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pi-web' of Deployment 'pi-web' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pi-web' of Deployment 'pi-web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pi-web' of Deployment 'pi-web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pi-web' of Deployment 'pi-web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pi-web' of Deployment 'pi-web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pi-web' of Deployment 'pi-web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pi-web' of Deployment 'pi-web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pi-web" of deployment "pi-web" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pi-web in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi5_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pi-web
   5 │   labels:
   6 └     kubernetes.courselabs.co: admission
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pi-web in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-web in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pi-web in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi5_1.yaml:16-27
────────────────────────────────────────
  16 ┌       automountServiceAccountToken: false
  17 │       containers:
  18 │       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 └         name: pi-web
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pi-web in deployment pi-web (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi5_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────



pi6_1.yaml (kubernetes)
=======================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pi-web' of Deployment 'pi-web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi6_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pi-web' of Deployment 'pi-web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi6_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pi-web' of 'deployment' 'pi-web' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi6_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pi-web' of Deployment 'pi-web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi6_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pi-web' of Deployment 'pi-web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi6_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pi-web' of Deployment 'pi-web' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi6_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pi-web' of Deployment 'pi-web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi6_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pi-web' of Deployment 'pi-web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi6_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pi-web' of Deployment 'pi-web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi6_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pi-web' of Deployment 'pi-web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi6_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pi-web' of Deployment 'pi-web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi6_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pi-web' of Deployment 'pi-web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi6_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi6_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pi-web" of deployment "pi-web" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi6_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi6_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pi-web in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi6_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pi-web
   5 │   labels:
   6 └     kubernetes.courselabs.co: ingress
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pi-web in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-web in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi6_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pi-web in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi6_1.yaml:17-27
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pi-web in deployment pi-web (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi6_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: pi-web
  25 │         ports:
  26 │         - name: http
  27 └           containerPort: 80
────────────────────────────────────────



pi7_1.yaml (kubernetes)
=======================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi7_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'pi-web-lab' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi7_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'pi-web-lab' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi7_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi7_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'web' of Deployment 'pi-web-lab' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi7_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi7_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi7_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi7_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi7_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi7_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi7_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi7_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "pi-web-lab" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi7_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi7_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pi-web-lab in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi7_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pi-web-lab
   5 │   labels:
   6 └     kiamol: ch19-lab
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pi-web-lab in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-web-lab in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi7_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pi-web-lab in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi7_1.yaml:17-30
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment pi-web-lab (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi7_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────



pi8.yaml (kubernetes)
=====================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 9, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi8.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'pi-web-lab' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi8.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'pi-web-lab' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi8.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi8.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'web' of Deployment 'pi-web-lab' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi8.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi8.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi8.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi8.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi8.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi8.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi8.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "pi-web-lab" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi8.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi8.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pi-web-lab in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi8.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pi-web-lab
   5 │   labels:
   6 └     kiamol: ch19-lab
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pi-web-lab in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-web-lab in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi8.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pi-web-lab in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi8.yaml:17-48
────────────────────────────────────────
  17 ┌       containers:
  18 │         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment pi-web-lab (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi8.yaml:18-28
────────────────────────────────────────
  18 ┌         - image: kiamol/ch05-pi
  19 │           command: ["dotnet", "Pi.Web.dll", "-m", "web"]
  20 │           name: web
  21 │           ports:
  22 │             - containerPort: 80
  23 │               name: http
  24 │           resources:
  25 │             limits:
  26 └               cpu: 200m
  ..   
────────────────────────────────────────



pi9_1.yaml (kubernetes)
=======================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi9_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'pi-web-lab' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi9_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'pi-web-lab' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi9_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi9_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'web' of Deployment 'pi-web-lab' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi9_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi9_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi9_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi9_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi9_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi9_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi9_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi9_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "pi-web-lab" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi9_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi9_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pi-web-lab in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi9_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pi-web-lab
   5 │   labels:
   6 └     kiamol: ch19-lab
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pi-web-lab in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-web-lab in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi9_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pi-web-lab in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi9_1.yaml:17-30
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment pi-web-lab (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi9_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────



pi_1.yaml (kubernetes)
======================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'pi-web-lab' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'pi-web-lab' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'web' of Deployment 'pi-web-lab' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'pi-web-lab' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "pi-web-lab" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pi-web-lab in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pi-web-lab
   5 │   labels:
   6 └     kiamol: ch19-lab
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pi-web-lab in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi-web-lab in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pi-web-lab in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi_1.yaml:17-30
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment pi-web-lab (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pi_1.yaml:18-30
────────────────────────────────────────
  18 ┌       - image: kiamol/ch05-pi
  19 │         command:
  20 │         - dotnet
  21 │         - Pi.Web.dll
  22 │         - -m
  23 │         - web
  24 │         name: web
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────



pi_jobs.yaml (kubernetes)
=========================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pi' of Job 'my-pi' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pi_jobs.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pi' of Job 'my-pi' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pi_jobs.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pi' of 'job' 'my-pi' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pi_jobs.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pi' of Job 'my-pi' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pi_jobs.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pi' of Job 'my-pi' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pi_jobs.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pi' of Job 'my-pi' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pi_jobs.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pi' of Job 'my-pi' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pi_jobs.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pi' of Job 'my-pi' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pi_jobs.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pi' of Job 'my-pi' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pi_jobs.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pi' of Job 'my-pi' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pi_jobs.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pi' of Job 'my-pi' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pi_jobs.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pi' of Job 'my-pi' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pi_jobs.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pi_jobs.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pi" of job "my-pi" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pi_jobs.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pi_jobs.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): job my-pi in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pi_jobs.yaml:4
────────────────────────────────────────
   4 [   name: my-pi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pi in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi_jobs.yaml:13-15
────────────────────────────────────────
  13 ┌       - name: pi
  14 │         image: perl
  15 └         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job my-pi in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pi_jobs.yaml:12-16
────────────────────────────────────────
  12 ┌       containers:
  13 │       - name: pi
  14 │         image: perl
  15 │         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
  16 └       restartPolicy: Never
────────────────────────────────────────



picture-gallery-deployment_4.yaml (kubernetes)
==============================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'picture-gallery' of Deployment 'picture-gallery' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 picture-gallery-deployment_4.yaml:20-38
────────────────────────────────────────
  20 ┌       - image: kastenio/picturegallery:3fbc5be
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 80
  25 │             scheme: HTTP
  26 │           initialDelaySeconds: 30
  27 │           timeoutSeconds: 5
  28 └         name: picture-gallery
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'picture-gallery' of Deployment 'picture-gallery' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 picture-gallery-deployment_4.yaml:20-38
────────────────────────────────────────
  20 ┌       - image: kastenio/picturegallery:3fbc5be
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 80
  25 │             scheme: HTTP
  26 │           initialDelaySeconds: 30
  27 │           timeoutSeconds: 5
  28 └         name: picture-gallery
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'picture-gallery' of 'deployment' 'picture-gallery' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 picture-gallery-deployment_4.yaml:20-38
────────────────────────────────────────
  20 ┌       - image: kastenio/picturegallery:3fbc5be
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 80
  25 │             scheme: HTTP
  26 │           initialDelaySeconds: 30
  27 │           timeoutSeconds: 5
  28 └         name: picture-gallery
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'picture-gallery' of Deployment 'picture-gallery' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 picture-gallery-deployment_4.yaml:20-38
────────────────────────────────────────
  20 ┌       - image: kastenio/picturegallery:3fbc5be
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 80
  25 │             scheme: HTTP
  26 │           initialDelaySeconds: 30
  27 │           timeoutSeconds: 5
  28 └         name: picture-gallery
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'picture-gallery' of Deployment 'picture-gallery' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 picture-gallery-deployment_4.yaml:20-38
────────────────────────────────────────
  20 ┌       - image: kastenio/picturegallery:3fbc5be
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 80
  25 │             scheme: HTTP
  26 │           initialDelaySeconds: 30
  27 │           timeoutSeconds: 5
  28 └         name: picture-gallery
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'picture-gallery' of Deployment 'picture-gallery' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 picture-gallery-deployment_4.yaml:20-38
────────────────────────────────────────
  20 ┌       - image: kastenio/picturegallery:3fbc5be
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 80
  25 │             scheme: HTTP
  26 │           initialDelaySeconds: 30
  27 │           timeoutSeconds: 5
  28 └         name: picture-gallery
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'picture-gallery' of Deployment 'picture-gallery' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 picture-gallery-deployment_4.yaml:20-38
────────────────────────────────────────
  20 ┌       - image: kastenio/picturegallery:3fbc5be
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 80
  25 │             scheme: HTTP
  26 │           initialDelaySeconds: 30
  27 │           timeoutSeconds: 5
  28 └         name: picture-gallery
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'picture-gallery' of Deployment 'picture-gallery' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 picture-gallery-deployment_4.yaml:20-38
────────────────────────────────────────
  20 ┌       - image: kastenio/picturegallery:3fbc5be
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 80
  25 │             scheme: HTTP
  26 │           initialDelaySeconds: 30
  27 │           timeoutSeconds: 5
  28 └         name: picture-gallery
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'picture-gallery' of Deployment 'picture-gallery' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 picture-gallery-deployment_4.yaml:20-38
────────────────────────────────────────
  20 ┌       - image: kastenio/picturegallery:3fbc5be
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 80
  25 │             scheme: HTTP
  26 │           initialDelaySeconds: 30
  27 │           timeoutSeconds: 5
  28 └         name: picture-gallery
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'picture-gallery' of Deployment 'picture-gallery' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 picture-gallery-deployment_4.yaml:20-38
────────────────────────────────────────
  20 ┌       - image: kastenio/picturegallery:3fbc5be
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 80
  25 │             scheme: HTTP
  26 │           initialDelaySeconds: 30
  27 │           timeoutSeconds: 5
  28 └         name: picture-gallery
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'picture-gallery' of Deployment 'picture-gallery' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 picture-gallery-deployment_4.yaml:20-38
────────────────────────────────────────
  20 ┌       - image: kastenio/picturegallery:3fbc5be
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 80
  25 │             scheme: HTTP
  26 │           initialDelaySeconds: 30
  27 │           timeoutSeconds: 5
  28 └         name: picture-gallery
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 picture-gallery-deployment_4.yaml:20-38
────────────────────────────────────────
  20 ┌       - image: kastenio/picturegallery:3fbc5be
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 80
  25 │             scheme: HTTP
  26 │           initialDelaySeconds: 30
  27 │           timeoutSeconds: 5
  28 └         name: picture-gallery
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "picture-gallery" of deployment "picture-gallery" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 picture-gallery-deployment_4.yaml:20-38
────────────────────────────────────────
  20 ┌       - image: kastenio/picturegallery:3fbc5be
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 80
  25 │             scheme: HTTP
  26 │           initialDelaySeconds: 30
  27 │           timeoutSeconds: 5
  28 └         name: picture-gallery
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 picture-gallery-deployment_4.yaml:20-38
────────────────────────────────────────
  20 ┌       - image: kastenio/picturegallery:3fbc5be
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 80
  25 │             scheme: HTTP
  26 │           initialDelaySeconds: 30
  27 │           timeoutSeconds: 5
  28 └         name: picture-gallery
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment picture-gallery in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 picture-gallery-deployment_4.yaml:4-6
────────────────────────────────────────
   4 ┌   name: picture-gallery
   5 │   labels:
   6 └     app: picture-gallery
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment picture-gallery in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container picture-gallery in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 picture-gallery-deployment_4.yaml:20-38
────────────────────────────────────────
  20 ┌       - image: kastenio/picturegallery:3fbc5be
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 80
  25 │             scheme: HTTP
  26 │           initialDelaySeconds: 30
  27 │           timeoutSeconds: 5
  28 └         name: picture-gallery
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment picture-gallery in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 picture-gallery-deployment_4.yaml:19-48
────────────────────────────────────────
  19 ┌       containers:
  20 │       - image: kastenio/picturegallery:3fbc5be
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 80
  25 │             scheme: HTTP
  26 │           initialDelaySeconds: 30
  27 └           timeoutSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container picture-gallery in deployment picture-gallery (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 picture-gallery-deployment_4.yaml:20-38
────────────────────────────────────────
  20 ┌       - image: kastenio/picturegallery:3fbc5be
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 80
  25 │             scheme: HTTP
  26 │           initialDelaySeconds: 30
  27 │           timeoutSeconds: 5
  28 └         name: picture-gallery
  ..   
────────────────────────────────────────



piehole.yaml (kubernetes)
=========================
Tests: 108 (SUCCESSES: 89, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pihole' of Deployment 'pihole' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 piehole.yaml:22-42
────────────────────────────────────────
  22 ┌       - name: pihole
  23 │         image: docker.io/pihole/pihole
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: TZ
  27 │           value: Pacific/Auckland
  28 │         - name: WEBPASSWORD
  29 │           value: change_me_123
  30 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pihole' of Deployment 'pihole' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 piehole.yaml:22-42
────────────────────────────────────────
  22 ┌       - name: pihole
  23 │         image: docker.io/pihole/pihole
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: TZ
  27 │           value: Pacific/Auckland
  28 │         - name: WEBPASSWORD
  29 │           value: change_me_123
  30 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pihole' of 'deployment' 'pihole' in 'tools' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 piehole.yaml:22-42
────────────────────────────────────────
  22 ┌       - name: pihole
  23 │         image: docker.io/pihole/pihole
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: TZ
  27 │           value: Pacific/Auckland
  28 │         - name: WEBPASSWORD
  29 │           value: change_me_123
  30 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pihole' of Deployment 'pihole' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 piehole.yaml:22-42
────────────────────────────────────────
  22 ┌       - name: pihole
  23 │         image: docker.io/pihole/pihole
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: TZ
  27 │           value: Pacific/Auckland
  28 │         - name: WEBPASSWORD
  29 │           value: change_me_123
  30 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pihole' of Deployment 'pihole' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 piehole.yaml:22-42
────────────────────────────────────────
  22 ┌       - name: pihole
  23 │         image: docker.io/pihole/pihole
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: TZ
  27 │           value: Pacific/Auckland
  28 │         - name: WEBPASSWORD
  29 │           value: change_me_123
  30 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pihole' of Deployment 'pihole' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 piehole.yaml:22-42
────────────────────────────────────────
  22 ┌       - name: pihole
  23 │         image: docker.io/pihole/pihole
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: TZ
  27 │           value: Pacific/Auckland
  28 │         - name: WEBPASSWORD
  29 │           value: change_me_123
  30 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pihole' of Deployment 'pihole' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 piehole.yaml:22-42
────────────────────────────────────────
  22 ┌       - name: pihole
  23 │         image: docker.io/pihole/pihole
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: TZ
  27 │           value: Pacific/Auckland
  28 │         - name: WEBPASSWORD
  29 │           value: change_me_123
  30 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pihole' of Deployment 'pihole' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 piehole.yaml:22-42
────────────────────────────────────────
  22 ┌       - name: pihole
  23 │         image: docker.io/pihole/pihole
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: TZ
  27 │           value: Pacific/Auckland
  28 │         - name: WEBPASSWORD
  29 │           value: change_me_123
  30 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pihole' of Deployment 'pihole' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 piehole.yaml:22-42
────────────────────────────────────────
  22 ┌       - name: pihole
  23 │         image: docker.io/pihole/pihole
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: TZ
  27 │           value: Pacific/Auckland
  28 │         - name: WEBPASSWORD
  29 │           value: change_me_123
  30 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'pihole' of Deployment 'pihole' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 piehole.yaml:22-42
────────────────────────────────────────
  22 ┌       - name: pihole
  23 │         image: docker.io/pihole/pihole
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: TZ
  27 │           value: Pacific/Auckland
  28 │         - name: WEBPASSWORD
  29 │           value: change_me_123
  30 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pihole' of Deployment 'pihole' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 piehole.yaml:22-42
────────────────────────────────────────
  22 ┌       - name: pihole
  23 │         image: docker.io/pihole/pihole
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: TZ
  27 │           value: Pacific/Auckland
  28 │         - name: WEBPASSWORD
  29 │           value: change_me_123
  30 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pihole' of Deployment 'pihole' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 piehole.yaml:22-42
────────────────────────────────────────
  22 ┌       - name: pihole
  23 │         image: docker.io/pihole/pihole
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: TZ
  27 │           value: Pacific/Auckland
  28 │         - name: WEBPASSWORD
  29 │           value: change_me_123
  30 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pihole' of Deployment 'pihole' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 piehole.yaml:22-42
────────────────────────────────────────
  22 ┌       - name: pihole
  23 │         image: docker.io/pihole/pihole
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: TZ
  27 │           value: Pacific/Auckland
  28 │         - name: WEBPASSWORD
  29 │           value: change_me_123
  30 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 piehole.yaml:22-42
────────────────────────────────────────
  22 ┌       - name: pihole
  23 │         image: docker.io/pihole/pihole
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: TZ
  27 │           value: Pacific/Auckland
  28 │         - name: WEBPASSWORD
  29 │           value: change_me_123
  30 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pihole" of deployment "pihole" in "tools" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 piehole.yaml:22-42
────────────────────────────────────────
  22 ┌       - name: pihole
  23 │         image: docker.io/pihole/pihole
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: TZ
  27 │           value: Pacific/Auckland
  28 │         - name: WEBPASSWORD
  29 │           value: change_me_123
  30 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 piehole.yaml:22-42
────────────────────────────────────────
  22 ┌       - name: pihole
  23 │         image: docker.io/pihole/pihole
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: TZ
  27 │           value: Pacific/Auckland
  28 │         - name: WEBPASSWORD
  29 │           value: change_me_123
  30 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pihole in tools namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pihole in tools namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 piehole.yaml:16-42
────────────────────────────────────────
  16 ┌       dnsPolicy: None
  17 │       dnsConfig:
  18 │         nameservers:
  19 │         - 1.1.1.1
  20 │         - 8.8.8.8
  21 │       containers:
  22 │       - name: pihole
  23 │         image: docker.io/pihole/pihole
  24 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pihole in deployment pihole (namespace: tools) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 piehole.yaml:22-42
────────────────────────────────────────
  22 ┌       - name: pihole
  23 │         image: docker.io/pihole/pihole
  24 │         imagePullPolicy: IfNotPresent
  25 │         env:
  26 │         - name: TZ
  27 │           value: Pacific/Auckland
  28 │         - name: WEBPASSWORD
  29 │           value: change_me_123
  30 └         securityContext:
  ..   
────────────────────────────────────────



pihole-deployment.yaml (kubernetes)
===================================
Tests: 108 (SUCCESSES: 89, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pihole' of Deployment 'pihole' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pihole-deployment.yaml:30-50
────────────────────────────────────────
  30 ┌         - env:
  31 │             # - name: DNS1
  32 │             #   value: 10.2.0.200
  33 │             # - name: DNS2
  34 │             #   value: 10.2.0.200
  35 │             # - name: ServerIP
  36 │             #   value: 10.1.0.100
  37 │             - name: WEBPASSWORD
  38 └               value: ""
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pihole' of Deployment 'pihole' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pihole-deployment.yaml:30-50
────────────────────────────────────────
  30 ┌         - env:
  31 │             # - name: DNS1
  32 │             #   value: 10.2.0.200
  33 │             # - name: DNS2
  34 │             #   value: 10.2.0.200
  35 │             # - name: ServerIP
  36 │             #   value: 10.1.0.100
  37 │             - name: WEBPASSWORD
  38 └               value: ""
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pihole' of 'deployment' 'pihole' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pihole-deployment.yaml:30-50
────────────────────────────────────────
  30 ┌         - env:
  31 │             # - name: DNS1
  32 │             #   value: 10.2.0.200
  33 │             # - name: DNS2
  34 │             #   value: 10.2.0.200
  35 │             # - name: ServerIP
  36 │             #   value: 10.1.0.100
  37 │             - name: WEBPASSWORD
  38 └               value: ""
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pihole' of Deployment 'pihole' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pihole-deployment.yaml:30-50
────────────────────────────────────────
  30 ┌         - env:
  31 │             # - name: DNS1
  32 │             #   value: 10.2.0.200
  33 │             # - name: DNS2
  34 │             #   value: 10.2.0.200
  35 │             # - name: ServerIP
  36 │             #   value: 10.1.0.100
  37 │             - name: WEBPASSWORD
  38 └               value: ""
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pihole' of Deployment 'pihole' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pihole-deployment.yaml:30-50
────────────────────────────────────────
  30 ┌         - env:
  31 │             # - name: DNS1
  32 │             #   value: 10.2.0.200
  33 │             # - name: DNS2
  34 │             #   value: 10.2.0.200
  35 │             # - name: ServerIP
  36 │             #   value: 10.1.0.100
  37 │             - name: WEBPASSWORD
  38 └               value: ""
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pihole' of Deployment 'pihole' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pihole-deployment.yaml:30-50
────────────────────────────────────────
  30 ┌         - env:
  31 │             # - name: DNS1
  32 │             #   value: 10.2.0.200
  33 │             # - name: DNS2
  34 │             #   value: 10.2.0.200
  35 │             # - name: ServerIP
  36 │             #   value: 10.1.0.100
  37 │             - name: WEBPASSWORD
  38 └               value: ""
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pihole' of Deployment 'pihole' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pihole-deployment.yaml:30-50
────────────────────────────────────────
  30 ┌         - env:
  31 │             # - name: DNS1
  32 │             #   value: 10.2.0.200
  33 │             # - name: DNS2
  34 │             #   value: 10.2.0.200
  35 │             # - name: ServerIP
  36 │             #   value: 10.1.0.100
  37 │             - name: WEBPASSWORD
  38 └               value: ""
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pihole' of Deployment 'pihole' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pihole-deployment.yaml:30-50
────────────────────────────────────────
  30 ┌         - env:
  31 │             # - name: DNS1
  32 │             #   value: 10.2.0.200
  33 │             # - name: DNS2
  34 │             #   value: 10.2.0.200
  35 │             # - name: ServerIP
  36 │             #   value: 10.1.0.100
  37 │             - name: WEBPASSWORD
  38 └               value: ""
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pihole' of Deployment 'pihole' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pihole-deployment.yaml:30-50
────────────────────────────────────────
  30 ┌         - env:
  31 │             # - name: DNS1
  32 │             #   value: 10.2.0.200
  33 │             # - name: DNS2
  34 │             #   value: 10.2.0.200
  35 │             # - name: ServerIP
  36 │             #   value: 10.1.0.100
  37 │             - name: WEBPASSWORD
  38 └               value: ""
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pihole' of Deployment 'pihole' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pihole-deployment.yaml:30-50
────────────────────────────────────────
  30 ┌         - env:
  31 │             # - name: DNS1
  32 │             #   value: 10.2.0.200
  33 │             # - name: DNS2
  34 │             #   value: 10.2.0.200
  35 │             # - name: ServerIP
  36 │             #   value: 10.1.0.100
  37 │             - name: WEBPASSWORD
  38 └               value: ""
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pihole' of Deployment 'pihole' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pihole-deployment.yaml:30-50
────────────────────────────────────────
  30 ┌         - env:
  31 │             # - name: DNS1
  32 │             #   value: 10.2.0.200
  33 │             # - name: DNS2
  34 │             #   value: 10.2.0.200
  35 │             # - name: ServerIP
  36 │             #   value: 10.1.0.100
  37 │             - name: WEBPASSWORD
  38 └               value: ""
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pihole' of Deployment 'pihole' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pihole-deployment.yaml:30-50
────────────────────────────────────────
  30 ┌         - env:
  31 │             # - name: DNS1
  32 │             #   value: 10.2.0.200
  33 │             # - name: DNS2
  34 │             #   value: 10.2.0.200
  35 │             # - name: ServerIP
  36 │             #   value: 10.1.0.100
  37 │             - name: WEBPASSWORD
  38 └               value: ""
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'pihole' of Deployment 'pihole' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 pihole-deployment.yaml:30-50
────────────────────────────────────────
  30 ┌         - env:
  31 │             # - name: DNS1
  32 │             #   value: 10.2.0.200
  33 │             # - name: DNS2
  34 │             #   value: 10.2.0.200
  35 │             # - name: ServerIP
  36 │             #   value: 10.1.0.100
  37 │             - name: WEBPASSWORD
  38 └               value: ""
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pihole-deployment.yaml:30-50
────────────────────────────────────────
  30 ┌         - env:
  31 │             # - name: DNS1
  32 │             #   value: 10.2.0.200
  33 │             # - name: DNS2
  34 │             #   value: 10.2.0.200
  35 │             # - name: ServerIP
  36 │             #   value: 10.1.0.100
  37 │             - name: WEBPASSWORD
  38 └               value: ""
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pihole" of deployment "pihole" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pihole-deployment.yaml:30-50
────────────────────────────────────────
  30 ┌         - env:
  31 │             # - name: DNS1
  32 │             #   value: 10.2.0.200
  33 │             # - name: DNS2
  34 │             #   value: 10.2.0.200
  35 │             # - name: ServerIP
  36 │             #   value: 10.1.0.100
  37 │             - name: WEBPASSWORD
  38 └               value: ""
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pihole-deployment.yaml:30-50
────────────────────────────────────────
  30 ┌         - env:
  31 │             # - name: DNS1
  32 │             #   value: 10.2.0.200
  33 │             # - name: DNS2
  34 │             #   value: 10.2.0.200
  35 │             # - name: ServerIP
  36 │             #   value: 10.1.0.100
  37 │             - name: WEBPASSWORD
  38 └               value: ""
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pihole in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pihole-deployment.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert
   6 │     kompose.version: 1.22.0 (955b78124)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: pihole
  10 └   name: pihole
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pihole in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pihole-deployment.yaml:29-59
────────────────────────────────────────
  29 ┌       containers:
  30 │         - env:
  31 │             # - name: DNS1
  32 │             #   value: 10.2.0.200
  33 │             # - name: DNS2
  34 │             #   value: 10.2.0.200
  35 │             # - name: ServerIP
  36 │             #   value: 10.1.0.100
  37 └             - name: WEBPASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pihole in deployment pihole (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pihole-deployment.yaml:30-50
────────────────────────────────────────
  30 ┌         - env:
  31 │             # - name: DNS1
  32 │             #   value: 10.2.0.200
  33 │             # - name: DNS2
  34 │             #   value: 10.2.0.200
  35 │             # - name: ServerIP
  36 │             #   value: 10.1.0.100
  37 │             - name: WEBPASSWORD
  38 └               value: ""
  ..   
────────────────────────────────────────



pihole1_4.yaml (kubernetes)
===========================
Tests: 125 (SUCCESSES: 89, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 20, MEDIUM: 12, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cloudflared' of Deployment 'pihole' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pihole1_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'pihole' of Deployment 'pihole' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pihole1_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cloudflared' of Deployment 'pihole' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pihole1_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pihole' of Deployment 'pihole' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pihole1_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cloudflared' of 'deployment' 'pihole' in 'pihole' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pihole1_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pihole' of 'deployment' 'pihole' in 'pihole' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pihole1_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cloudflared' of Deployment 'pihole' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pihole1_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pihole' of Deployment 'pihole' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pihole1_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cloudflared' of Deployment 'pihole' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pihole1_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pihole' of Deployment 'pihole' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pihole1_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cloudflared' of Deployment 'pihole' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pihole1_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pihole' of Deployment 'pihole' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pihole1_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cloudflared' of Deployment 'pihole' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pihole1_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pihole' of Deployment 'pihole' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pihole1_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cloudflared' of Deployment 'pihole' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pihole1_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pihole' of Deployment 'pihole' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pihole1_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cloudflared' of Deployment 'pihole' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pihole1_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pihole' of Deployment 'pihole' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pihole1_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cloudflared' of Deployment 'pihole' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pihole1_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pihole' of Deployment 'pihole' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pihole1_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cloudflared' of Deployment 'pihole' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pihole1_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pihole' of Deployment 'pihole' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pihole1_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cloudflared' of Deployment 'pihole' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pihole1_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pihole' of Deployment 'pihole' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pihole1_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'pihole' of Deployment 'pihole' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 pihole1_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pihole1_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pihole1_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cloudflared" of deployment "pihole" in "pihole" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pihole1_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pihole" of deployment "pihole" in "pihole" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pihole1_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pihole1_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pihole1_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pihole in pihole namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pihole in pihole namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pihole1_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pihole in pihole namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pihole1_4.yaml:19-74
────────────────────────────────────────
  19 ┌       nodeSelector:
  20 │         worker: 'true'
  21 │       containers:
  22 │       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 └           name: dns
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cloudflared in deployment pihole (namespace: pihole) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pihole1_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pihole in deployment pihole (namespace: pihole) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pihole1_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────



pihole5.yaml (kubernetes)
=========================
Tests: 108 (SUCCESSES: 89, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 7, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pihole' of Deployment 'pihole' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pihole5.yaml:28-67
────────────────────────────────────────
  28 ┌       - name: pihole
  29 │         image: pihole/pihole:latest
  30 │         ports:
  31 │         - containerPort: 53
  32 │           name: dns-tcp
  33 │           protocol: TCP
  34 │         - containerPort: 53
  35 │           name: dns-udp
  36 └           protocol: UDP
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pihole' of Deployment 'pihole' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pihole5.yaml:28-67
────────────────────────────────────────
  28 ┌       - name: pihole
  29 │         image: pihole/pihole:latest
  30 │         ports:
  31 │         - containerPort: 53
  32 │           name: dns-tcp
  33 │           protocol: TCP
  34 │         - containerPort: 53
  35 │           name: dns-udp
  36 └           protocol: UDP
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pihole' of 'deployment' 'pihole' in 'pihole' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pihole5.yaml:28-67
────────────────────────────────────────
  28 ┌       - name: pihole
  29 │         image: pihole/pihole:latest
  30 │         ports:
  31 │         - containerPort: 53
  32 │           name: dns-tcp
  33 │           protocol: TCP
  34 │         - containerPort: 53
  35 │           name: dns-udp
  36 └           protocol: UDP
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pihole' of Deployment 'pihole' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pihole5.yaml:28-67
────────────────────────────────────────
  28 ┌       - name: pihole
  29 │         image: pihole/pihole:latest
  30 │         ports:
  31 │         - containerPort: 53
  32 │           name: dns-tcp
  33 │           protocol: TCP
  34 │         - containerPort: 53
  35 │           name: dns-udp
  36 └           protocol: UDP
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pihole' of Deployment 'pihole' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pihole5.yaml:28-67
────────────────────────────────────────
  28 ┌       - name: pihole
  29 │         image: pihole/pihole:latest
  30 │         ports:
  31 │         - containerPort: 53
  32 │           name: dns-tcp
  33 │           protocol: TCP
  34 │         - containerPort: 53
  35 │           name: dns-udp
  36 └           protocol: UDP
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pihole' of Deployment 'pihole' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pihole5.yaml:28-67
────────────────────────────────────────
  28 ┌       - name: pihole
  29 │         image: pihole/pihole:latest
  30 │         ports:
  31 │         - containerPort: 53
  32 │           name: dns-tcp
  33 │           protocol: TCP
  34 │         - containerPort: 53
  35 │           name: dns-udp
  36 └           protocol: UDP
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pihole' of Deployment 'pihole' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pihole5.yaml:28-67
────────────────────────────────────────
  28 ┌       - name: pihole
  29 │         image: pihole/pihole:latest
  30 │         ports:
  31 │         - containerPort: 53
  32 │           name: dns-tcp
  33 │           protocol: TCP
  34 │         - containerPort: 53
  35 │           name: dns-udp
  36 └           protocol: UDP
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pihole' of Deployment 'pihole' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pihole5.yaml:28-67
────────────────────────────────────────
  28 ┌       - name: pihole
  29 │         image: pihole/pihole:latest
  30 │         ports:
  31 │         - containerPort: 53
  32 │           name: dns-tcp
  33 │           protocol: TCP
  34 │         - containerPort: 53
  35 │           name: dns-udp
  36 └           protocol: UDP
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pihole' of Deployment 'pihole' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pihole5.yaml:28-67
────────────────────────────────────────
  28 ┌       - name: pihole
  29 │         image: pihole/pihole:latest
  30 │         ports:
  31 │         - containerPort: 53
  32 │           name: dns-tcp
  33 │           protocol: TCP
  34 │         - containerPort: 53
  35 │           name: dns-udp
  36 └           protocol: UDP
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pihole' of Deployment 'pihole' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pihole5.yaml:28-67
────────────────────────────────────────
  28 ┌       - name: pihole
  29 │         image: pihole/pihole:latest
  30 │         ports:
  31 │         - containerPort: 53
  32 │           name: dns-tcp
  33 │           protocol: TCP
  34 │         - containerPort: 53
  35 │           name: dns-udp
  36 └           protocol: UDP
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pihole' of Deployment 'pihole' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pihole5.yaml:28-67
────────────────────────────────────────
  28 ┌       - name: pihole
  29 │         image: pihole/pihole:latest
  30 │         ports:
  31 │         - containerPort: 53
  32 │           name: dns-tcp
  33 │           protocol: TCP
  34 │         - containerPort: 53
  35 │           name: dns-udp
  36 └           protocol: UDP
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pihole' of Deployment 'pihole' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pihole5.yaml:28-67
────────────────────────────────────────
  28 ┌       - name: pihole
  29 │         image: pihole/pihole:latest
  30 │         ports:
  31 │         - containerPort: 53
  32 │           name: dns-tcp
  33 │           protocol: TCP
  34 │         - containerPort: 53
  35 │           name: dns-udp
  36 └           protocol: UDP
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'pihole' of Deployment 'pihole' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 pihole5.yaml:28-67
────────────────────────────────────────
  28 ┌       - name: pihole
  29 │         image: pihole/pihole:latest
  30 │         ports:
  31 │         - containerPort: 53
  32 │           name: dns-tcp
  33 │           protocol: TCP
  34 │         - containerPort: 53
  35 │           name: dns-udp
  36 └           protocol: UDP
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pihole5.yaml:28-67
────────────────────────────────────────
  28 ┌       - name: pihole
  29 │         image: pihole/pihole:latest
  30 │         ports:
  31 │         - containerPort: 53
  32 │           name: dns-tcp
  33 │           protocol: TCP
  34 │         - containerPort: 53
  35 │           name: dns-udp
  36 └           protocol: UDP
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pihole" of deployment "pihole" in "pihole" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pihole5.yaml:28-67
────────────────────────────────────────
  28 ┌       - name: pihole
  29 │         image: pihole/pihole:latest
  30 │         ports:
  31 │         - containerPort: 53
  32 │           name: dns-tcp
  33 │           protocol: TCP
  34 │         - containerPort: 53
  35 │           name: dns-udp
  36 └           protocol: UDP
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pihole5.yaml:28-67
────────────────────────────────────────
  28 ┌       - name: pihole
  29 │         image: pihole/pihole:latest
  30 │         ports:
  31 │         - containerPort: 53
  32 │           name: dns-tcp
  33 │           protocol: TCP
  34 │         - containerPort: 53
  35 │           name: dns-udp
  36 └           protocol: UDP
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pihole in pihole namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pihole in pihole namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pihole5.yaml:16-75
────────────────────────────────────────
  16 ┌       nodeSelector:
  17 │         kubernetes.io/hostname: server-master
  18 │       affinity:
  19 │         nodeAffinity:
  20 │           requiredDuringSchedulingIgnoredDuringExecution:
  21 │             nodeSelectorTerms:
  22 │             - matchExpressions:
  23 │               - key: role
  24 └                 operator: In
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pihole in deployment pihole (namespace: pihole) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pihole5.yaml:28-67
────────────────────────────────────────
  28 ┌       - name: pihole
  29 │         image: pihole/pihole:latest
  30 │         ports:
  31 │         - containerPort: 53
  32 │           name: dns-tcp
  33 │           protocol: TCP
  34 │         - containerPort: 53
  35 │           name: dns-udp
  36 └           protocol: UDP
  ..   
────────────────────────────────────────



pihole_4.yaml (kubernetes)
==========================
Tests: 125 (SUCCESSES: 89, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 20, MEDIUM: 12, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cloudflared' of Deployment 'pihole' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pihole_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'pihole' of Deployment 'pihole' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pihole_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cloudflared' of Deployment 'pihole' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pihole_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pihole' of Deployment 'pihole' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pihole_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cloudflared' of 'deployment' 'pihole' in 'pihole' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pihole_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pihole' of 'deployment' 'pihole' in 'pihole' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pihole_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cloudflared' of Deployment 'pihole' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pihole_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pihole' of Deployment 'pihole' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pihole_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cloudflared' of Deployment 'pihole' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pihole_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pihole' of Deployment 'pihole' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pihole_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cloudflared' of Deployment 'pihole' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pihole_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pihole' of Deployment 'pihole' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pihole_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cloudflared' of Deployment 'pihole' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pihole_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pihole' of Deployment 'pihole' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pihole_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cloudflared' of Deployment 'pihole' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pihole_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pihole' of Deployment 'pihole' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pihole_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cloudflared' of Deployment 'pihole' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pihole_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pihole' of Deployment 'pihole' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pihole_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cloudflared' of Deployment 'pihole' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pihole_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pihole' of Deployment 'pihole' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pihole_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cloudflared' of Deployment 'pihole' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pihole_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pihole' of Deployment 'pihole' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pihole_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cloudflared' of Deployment 'pihole' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pihole_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pihole' of Deployment 'pihole' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pihole_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'pihole' of Deployment 'pihole' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 pihole_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pihole_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pihole_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cloudflared" of deployment "pihole" in "pihole" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pihole_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pihole" of deployment "pihole" in "pihole" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pihole_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pihole_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pihole_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pihole in pihole namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pihole in pihole namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pihole_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pihole in pihole namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pihole_4.yaml:19-74
────────────────────────────────────────
  19 ┌       nodeSelector:
  20 │         worker: 'true'
  21 │       containers:
  22 │       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 └           name: dns
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cloudflared in deployment pihole (namespace: pihole) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pihole_4.yaml:22-34
────────────────────────────────────────
  22 ┌       - image: visibilityspots/cloudflared
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: cloudflared
  25 │         ports:
  26 │         - containerPort: 53
  27 │           name: dns
  28 │           protocol: TCP
  29 │         - containerPort: 67
  30 └           name: dns-udp
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pihole in deployment pihole (namespace: pihole) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pihole_4.yaml:35-69
────────────────────────────────────────
  35 ┌       - env:
  36 │         - name: TZ
  37 │           value: $pihole_timezone
  38 │         - name: WEBPASSWORD
  39 │           value: $pihole_webpassword
  40 │         - name: FTLCONF_REPLY_ADDR4
  41 │           value: pihole
  42 │         - name: PIHOLE_DNS_
  43 └           value: 127.0.0.1#5054
  ..   
────────────────────────────────────────



pilot_k8s_settings.golden.yaml (kubernetes)
===========================================
Tests: 108 (SUCCESSES: 100, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'discovery' of Deployment 'istiod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pilot_k8s_settings.golden.yaml:37-133
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 30m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'discovery' of Deployment 'istiod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pilot_k8s_settings.golden.yaml:37-133
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 30m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'discovery' of Deployment 'istiod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pilot_k8s_settings.golden.yaml:37-133
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 30m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'discovery' of Deployment 'istiod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pilot_k8s_settings.golden.yaml:37-133
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 30m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pilot_k8s_settings.golden.yaml:37-133
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 30m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "discovery" of deployment "istiod" in "istio-control" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pilot_k8s_settings.golden.yaml:37-133
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 30m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment istiod in istio-control namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pilot_k8s_settings.golden.yaml:36-164
────────────────────────────────────────
  36 ┌       containers:
  37 │       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 └         - 30m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container discovery in deployment istiod (namespace: istio-control) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pilot_k8s_settings.golden.yaml:37-133
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 30m
  45 └         env:
  ..   
────────────────────────────────────────



pilot_override_kubernetes.golden_2.yaml (kubernetes)
====================================================
Tests: 109 (SUCCESSES: 94, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'discovery' of Deployment 'istiod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pilot_override_kubernetes.golden_2.yaml:37-120
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 60m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'discovery' of Deployment 'istiod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pilot_override_kubernetes.golden_2.yaml:37-120
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 60m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'discovery' of 'deployment' 'istiod' in 'istio-control' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pilot_override_kubernetes.golden_2.yaml:37-120
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 60m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'discovery' of Deployment 'istiod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pilot_override_kubernetes.golden_2.yaml:37-120
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 60m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'discovery' of Deployment 'istiod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pilot_override_kubernetes.golden_2.yaml:37-120
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 60m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'discovery' of Deployment 'istiod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pilot_override_kubernetes.golden_2.yaml:37-120
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 60m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'discovery' of Deployment 'istiod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pilot_override_kubernetes.golden_2.yaml:37-120
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 60m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'discovery' of Deployment 'istiod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pilot_override_kubernetes.golden_2.yaml:37-120
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 60m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'discovery' of Deployment 'istiod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pilot_override_kubernetes.golden_2.yaml:37-120
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 60m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pilot_override_kubernetes.golden_2.yaml:37-120
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 60m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "discovery" of deployment "istiod" in "istio-control" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pilot_override_kubernetes.golden_2.yaml:37-120
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 60m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pilot_override_kubernetes.golden_2.yaml:37-120
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 60m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container istiod in istio-control namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pilot_override_kubernetes.golden_2.yaml:37-120
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 60m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment istiod in istio-control namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pilot_override_kubernetes.golden_2.yaml:36-149
────────────────────────────────────────
  36 ┌       containers:
  37 │       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 └         - 60m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container discovery in deployment istiod (namespace: istio-control) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pilot_override_kubernetes.golden_2.yaml:37-120
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 60m
  45 └         env:
  ..   
────────────────────────────────────────



pilot_override_values.golden.yaml (kubernetes)
==============================================
Tests: 108 (SUCCESSES: 100, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'discovery' of Deployment 'istiod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pilot_override_values.golden.yaml:37-129
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 30m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'discovery' of Deployment 'istiod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pilot_override_values.golden.yaml:37-129
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 30m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'discovery' of Deployment 'istiod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pilot_override_values.golden.yaml:37-129
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 30m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'discovery' of Deployment 'istiod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pilot_override_values.golden.yaml:37-129
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 30m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pilot_override_values.golden.yaml:37-129
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 30m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "discovery" of deployment "istiod" in "istio-control" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pilot_override_values.golden.yaml:37-129
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 30m
  45 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment istiod in istio-control namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pilot_override_values.golden.yaml:36-160
────────────────────────────────────────
  36 ┌       containers:
  37 │       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 └         - 30m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container discovery in deployment istiod (namespace: istio-control) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pilot_override_values.golden.yaml:37-129
────────────────────────────────────────
  37 ┌       - args:
  38 │         - discovery
  39 │         - --monitoringAddr=:15014
  40 │         - --log_output_level=default:info
  41 │         - --domain
  42 │         - cluster.local
  43 │         - --keepaliveMaxServerConnectionAge
  44 │         - 30m
  45 └         env:
  ..   
────────────────────────────────────────



ping-deployment.yaml (kubernetes)
=================================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ping-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: lapalmerjack/pingpong:newest
  18 │         ports:
  19 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ping-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: lapalmerjack/pingpong:newest
  18 │         ports:
  19 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ping-pong' of 'deployment' 'ping-pong-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ping-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: lapalmerjack/pingpong:newest
  18 │         ports:
  19 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ping-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: lapalmerjack/pingpong:newest
  18 │         ports:
  19 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ping-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: lapalmerjack/pingpong:newest
  18 │         ports:
  19 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ping-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: lapalmerjack/pingpong:newest
  18 │         ports:
  19 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ping-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: lapalmerjack/pingpong:newest
  18 │         ports:
  19 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ping-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: lapalmerjack/pingpong:newest
  18 │         ports:
  19 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ping-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: lapalmerjack/pingpong:newest
  18 │         ports:
  19 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ping-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: lapalmerjack/pingpong:newest
  18 │         ports:
  19 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ping-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: lapalmerjack/pingpong:newest
  18 │         ports:
  19 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ping-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: lapalmerjack/pingpong:newest
  18 │         ports:
  19 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ping-pong" of deployment "ping-pong-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ping-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: lapalmerjack/pingpong:newest
  18 │         ports:
  19 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ping-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: lapalmerjack/pingpong:newest
  18 │         ports:
  19 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment ping-pong-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ping-deployment.yaml:4
────────────────────────────────────────
   4 [   name: ping-pong-dep
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ping-pong-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ping-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: lapalmerjack/pingpong:newest
  18 │         ports:
  19 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ping-pong-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ping-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: ping-pong
  17 │         image: lapalmerjack/pingpong:newest
  18 │         ports:
  19 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ping-pong in deployment ping-pong-dep (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ping-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: lapalmerjack/pingpong:newest
  18 │         ports:
  19 └         - containerPort: 8083
────────────────────────────────────────



ping-deployment1.yaml (kubernetes)
==================================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ping-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ping-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ping-pong' of 'deployment' 'ping-pong-dep' in 'ping-pong-uuid' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ping-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ping-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ping-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ping-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ping-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ping-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ping-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ping-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ping-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ping-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ping-pong" of deployment "ping-pong-dep" in "ping-pong-uuid" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ping-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ping-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ping-pong-dep in ping-pong-uuid namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ping-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ping-pong-dep in ping-pong-uuid namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ping-deployment1.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ping-pong in deployment ping-pong-dep (namespace: ping-pong-uuid) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ping-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────



ping-deployment2.yaml (kubernetes)
==================================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ping-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ping-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ping-pong' of 'deployment' 'ping-pong-dep' in 'ping-pong-uuid' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ping-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ping-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ping-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ping-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ping-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ping-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ping-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ping-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ping-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ping-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ping-pong" of deployment "ping-pong-dep" in "ping-pong-uuid" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ping-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ping-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ping-pong-dep in ping-pong-uuid namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ping-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ping-pong-dep in ping-pong-uuid namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ping-deployment2.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ping-pong in deployment ping-pong-dep (namespace: ping-pong-uuid) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ping-deployment2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:newest
  19 │         ports:
  20 └         - containerPort: 8083
────────────────────────────────────────



ping-deployment3.yaml (kubernetes)
==================================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ping-deployment3.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ping-deployment3.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ping-pong' of 'deployment' 'ping-pong-dep' in 'ping-pong-uuid' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ping-deployment3.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ping-deployment3.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ping-deployment3.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ping-deployment3.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ping-deployment3.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ping-deployment3.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ping-deployment3.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ping-deployment3.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ping-deployment3.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ping-deployment3.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ping-pong" of deployment "ping-pong-dep" in "ping-pong-uuid" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ping-deployment3.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ping-deployment3.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ping-pong-dep in ping-pong-uuid namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ping-deployment3.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ping-pong-dep in ping-pong-uuid namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ping-deployment3.yaml:16-36
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ping-pong in deployment ping-pong-dep (namespace: ping-pong-uuid) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ping-deployment3.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────



ping-deployment4.yaml (kubernetes)
==================================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ping-deployment4.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ping-deployment4.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ping-pong' of 'deployment' 'ping-pong-dep' in 'ping-pong-uuid' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ping-deployment4.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ping-deployment4.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ping-deployment4.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ping-deployment4.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ping-deployment4.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ping-deployment4.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ping-deployment4.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ping-deployment4.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ping-deployment4.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ping-deployment4.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ping-pong" of deployment "ping-pong-dep" in "ping-pong-uuid" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ping-deployment4.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ping-deployment4.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ping-pong-dep in ping-pong-uuid namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ping-deployment4.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ping-pong-dep in ping-pong-uuid namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ping-deployment4.yaml:16-36
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ping-pong in deployment ping-pong-dep (namespace: ping-pong-uuid) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ping-deployment4.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:2.3000
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────



ping-deployment5.yaml (kubernetes)
==================================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ping-deployment5.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ping-deployment5.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ping-pong' of 'deployment' 'ping-pong-dep' in 'ping-pong-uuid' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ping-deployment5.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ping-deployment5.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ping-deployment5.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ping-deployment5.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ping-deployment5.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ping-deployment5.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ping-deployment5.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ping-deployment5.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ping-deployment5.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ping-deployment5.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ping-pong" of deployment "ping-pong-dep" in "ping-pong-uuid" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ping-deployment5.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ping-deployment5.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ping-pong-dep in ping-pong-uuid namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ping-deployment5.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ping-pong-dep in ping-pong-uuid namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ping-deployment5.yaml:16-36
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ping-pong in deployment ping-pong-dep (namespace: ping-pong-uuid) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ping-deployment5.yaml:17-36
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: USERNAME
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: postgres-secrets
  ..   
────────────────────────────────────────



ping-deployment6.yaml (kubernetes)
==================================
Tests: 109 (SUCCESSES: 94, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ping-deployment6.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 350Mi
  23 │         ports:
  24 │         - containerPort: 8083
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ping-deployment6.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 350Mi
  23 │         ports:
  24 │         - containerPort: 8083
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ping-pong' of 'deployment' 'ping-pong-dep' in 'ping-pong-uuid' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ping-deployment6.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 350Mi
  23 │         ports:
  24 │         - containerPort: 8083
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ping-deployment6.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 350Mi
  23 │         ports:
  24 │         - containerPort: 8083
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ping-deployment6.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 350Mi
  23 │         ports:
  24 │         - containerPort: 8083
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ping-deployment6.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 350Mi
  23 │         ports:
  24 │         - containerPort: 8083
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ping-deployment6.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 350Mi
  23 │         ports:
  24 │         - containerPort: 8083
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ping-deployment6.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 350Mi
  23 │         ports:
  24 │         - containerPort: 8083
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ping-pong' of Deployment 'ping-pong-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ping-deployment6.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 350Mi
  23 │         ports:
  24 │         - containerPort: 8083
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ping-deployment6.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 350Mi
  23 │         ports:
  24 │         - containerPort: 8083
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ping-pong" of deployment "ping-pong-dep" in "ping-pong-uuid" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ping-deployment6.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 350Mi
  23 │         ports:
  24 │         - containerPort: 8083
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ping-deployment6.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 350Mi
  23 │         ports:
  24 │         - containerPort: 8083
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ping-pong-dep in ping-pong-uuid namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ping-deployment6.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 350Mi
  23 │         ports:
  24 │         - containerPort: 8083
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ping-pong-dep in ping-pong-uuid namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ping-deployment6.yaml:16-40
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 350Mi
  23 │         ports:
  24 └         - containerPort: 8083
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ping-pong in deployment ping-pong-dep (namespace: ping-pong-uuid) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ping-deployment6.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: lapalmerjack/pingpong:3.02v4
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 350Mi
  23 │         ports:
  24 │         - containerPort: 8083
  25 └         env:
  ..   
────────────────────────────────────────



ping-pong-deployment.yaml (kubernetes)
======================================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ping-pong-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: ping-pong:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: shared-data
  23 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ping-pong' of Deployment 'ping-pong' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ping-pong-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: ping-pong:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: shared-data
  23 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ping-pong' of 'deployment' 'ping-pong' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ping-pong-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: ping-pong:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: shared-data
  23 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ping-pong' of Deployment 'ping-pong' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ping-pong-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: ping-pong:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: shared-data
  23 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ping-pong-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: ping-pong:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: shared-data
  23 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ping-pong-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: ping-pong:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: shared-data
  23 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ping-pong' of Deployment 'ping-pong' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ping-pong-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: ping-pong:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: shared-data
  23 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ping-pong' of Deployment 'ping-pong' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ping-pong-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: ping-pong:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: shared-data
  23 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ping-pong' of Deployment 'ping-pong' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ping-pong-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: ping-pong:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: shared-data
  23 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ping-pong' of Deployment 'ping-pong' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ping-pong-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: ping-pong:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: shared-data
  23 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ping-pong' of Deployment 'ping-pong' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ping-pong-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: ping-pong:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: shared-data
  23 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ping-pong' of Deployment 'ping-pong' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ping-pong-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: ping-pong:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: shared-data
  23 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ping-pong-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: ping-pong:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: shared-data
  23 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ping-pong" of deployment "ping-pong" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ping-pong-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: ping-pong:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: shared-data
  23 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ping-pong-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: ping-pong:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: shared-data
  23 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment ping-pong in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ping-pong-deployment.yaml:4
────────────────────────────────────────
   4 [   name: ping-pong
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ping-pong in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ping-pong-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: ping-pong
  17 │         image: ping-pong:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: shared-data
  23 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ping-pong in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ping-pong-deployment.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: ping-pong
  17 │         image: ping-pong:latest
  18 │         imagePullPolicy: Never
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: shared-data
  23 └           mountPath: /data
  ..   
────────────────────────────────────────



ping-pong-deployment1.yaml (kubernetes)
=======================================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ping-pong-deployment1.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: ping-pong:latest
  19 │         imagePullPolicy: Never
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: PORT
  24 │           value: "3000"
  25 └         - name: POSTGRES_USER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ping-pong' of Deployment 'ping-pong' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ping-pong-deployment1.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: ping-pong:latest
  19 │         imagePullPolicy: Never
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: PORT
  24 │           value: "3000"
  25 └         - name: POSTGRES_USER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ping-pong' of 'deployment' 'ping-pong' in 'devops-apps' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ping-pong-deployment1.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: ping-pong:latest
  19 │         imagePullPolicy: Never
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: PORT
  24 │           value: "3000"
  25 └         - name: POSTGRES_USER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ping-pong' of Deployment 'ping-pong' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ping-pong-deployment1.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: ping-pong:latest
  19 │         imagePullPolicy: Never
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: PORT
  24 │           value: "3000"
  25 └         - name: POSTGRES_USER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ping-pong-deployment1.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: ping-pong:latest
  19 │         imagePullPolicy: Never
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: PORT
  24 │           value: "3000"
  25 └         - name: POSTGRES_USER
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ping-pong-deployment1.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: ping-pong:latest
  19 │         imagePullPolicy: Never
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: PORT
  24 │           value: "3000"
  25 └         - name: POSTGRES_USER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ping-pong' of Deployment 'ping-pong' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ping-pong-deployment1.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: ping-pong:latest
  19 │         imagePullPolicy: Never
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: PORT
  24 │           value: "3000"
  25 └         - name: POSTGRES_USER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ping-pong' of Deployment 'ping-pong' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ping-pong-deployment1.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: ping-pong:latest
  19 │         imagePullPolicy: Never
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: PORT
  24 │           value: "3000"
  25 └         - name: POSTGRES_USER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ping-pong' of Deployment 'ping-pong' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ping-pong-deployment1.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: ping-pong:latest
  19 │         imagePullPolicy: Never
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: PORT
  24 │           value: "3000"
  25 └         - name: POSTGRES_USER
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ping-pong' of Deployment 'ping-pong' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ping-pong-deployment1.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: ping-pong:latest
  19 │         imagePullPolicy: Never
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: PORT
  24 │           value: "3000"
  25 └         - name: POSTGRES_USER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ping-pong' of Deployment 'ping-pong' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ping-pong-deployment1.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: ping-pong:latest
  19 │         imagePullPolicy: Never
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: PORT
  24 │           value: "3000"
  25 └         - name: POSTGRES_USER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ping-pong' of Deployment 'ping-pong' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ping-pong-deployment1.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: ping-pong:latest
  19 │         imagePullPolicy: Never
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: PORT
  24 │           value: "3000"
  25 └         - name: POSTGRES_USER
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ping-pong-deployment1.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: ping-pong:latest
  19 │         imagePullPolicy: Never
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: PORT
  24 │           value: "3000"
  25 └         - name: POSTGRES_USER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ping-pong" of deployment "ping-pong" in "devops-apps" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ping-pong-deployment1.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: ping-pong:latest
  19 │         imagePullPolicy: Never
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: PORT
  24 │           value: "3000"
  25 └         - name: POSTGRES_USER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ping-pong-deployment1.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: ping-pong:latest
  19 │         imagePullPolicy: Never
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: PORT
  24 │           value: "3000"
  25 └         - name: POSTGRES_USER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ping-pong in devops-apps namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ping-pong-deployment1.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: ping-pong:latest
  19 │         imagePullPolicy: Never
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: PORT
  24 │           value: "3000"
  25 └         - name: POSTGRES_USER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ping-pong in devops-apps namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ping-pong-deployment1.yaml:16-40
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: ping-pong
  18 │         image: ping-pong:latest
  19 │         imagePullPolicy: Never
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: PORT
  24 └           value: "3000"
  ..   
────────────────────────────────────────



ping-pong-deployment2.yaml (kubernetes)
=======================================
Tests: 109 (SUCCESSES: 95, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ping-pong-deployment2.yaml:17-47
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ping-pong' of Deployment 'ping-pong' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ping-pong-deployment2.yaml:17-47
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ping-pong' of 'deployment' 'ping-pong' in 'devops-apps' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ping-pong-deployment2.yaml:17-47
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ping-pong-deployment2.yaml:17-47
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ping-pong-deployment2.yaml:17-47
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ping-pong' of Deployment 'ping-pong' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ping-pong-deployment2.yaml:17-47
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ping-pong' of Deployment 'ping-pong' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ping-pong-deployment2.yaml:17-47
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ping-pong' of Deployment 'ping-pong' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ping-pong-deployment2.yaml:17-47
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ping-pong-deployment2.yaml:17-47
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ping-pong" of deployment "ping-pong" in "devops-apps" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ping-pong-deployment2.yaml:17-47
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ping-pong-deployment2.yaml:17-47
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ping-pong in devops-apps namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ping-pong-deployment2.yaml:17-47
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ping-pong in devops-apps namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ping-pong-deployment2.yaml:16-47
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 └             memory: "32Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ping-pong in deployment ping-pong (namespace: devops-apps) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ping-pong-deployment2.yaml:17-47
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────



ping-pong-deployment3.yaml (kubernetes)
=======================================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ping-pong-deployment3.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         readinessProbe:
  21 │             initialDelaySeconds: 10 # Initial delay until the readiness is tested
  22 │             periodSeconds: 5 # How often to test
  23 │             httpGet:
  24 │                path: /health
  25 └                port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ping-pong' of Deployment 'ping-pong' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ping-pong-deployment3.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         readinessProbe:
  21 │             initialDelaySeconds: 10 # Initial delay until the readiness is tested
  22 │             periodSeconds: 5 # How often to test
  23 │             httpGet:
  24 │                path: /health
  25 └                port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ping-pong' of 'deployment' 'ping-pong' in 'devops-apps' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ping-pong-deployment3.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         readinessProbe:
  21 │             initialDelaySeconds: 10 # Initial delay until the readiness is tested
  22 │             periodSeconds: 5 # How often to test
  23 │             httpGet:
  24 │                path: /health
  25 └                port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ping-pong' of Deployment 'ping-pong' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ping-pong-deployment3.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         readinessProbe:
  21 │             initialDelaySeconds: 10 # Initial delay until the readiness is tested
  22 │             periodSeconds: 5 # How often to test
  23 │             httpGet:
  24 │                path: /health
  25 └                port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ping-pong-deployment3.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         readinessProbe:
  21 │             initialDelaySeconds: 10 # Initial delay until the readiness is tested
  22 │             periodSeconds: 5 # How often to test
  23 │             httpGet:
  24 │                path: /health
  25 └                port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ping-pong' of Deployment 'ping-pong' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ping-pong-deployment3.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         readinessProbe:
  21 │             initialDelaySeconds: 10 # Initial delay until the readiness is tested
  22 │             periodSeconds: 5 # How often to test
  23 │             httpGet:
  24 │                path: /health
  25 └                port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ping-pong' of Deployment 'ping-pong' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ping-pong-deployment3.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         readinessProbe:
  21 │             initialDelaySeconds: 10 # Initial delay until the readiness is tested
  22 │             periodSeconds: 5 # How often to test
  23 │             httpGet:
  24 │                path: /health
  25 └                port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ping-pong' of Deployment 'ping-pong' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ping-pong-deployment3.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         readinessProbe:
  21 │             initialDelaySeconds: 10 # Initial delay until the readiness is tested
  22 │             periodSeconds: 5 # How often to test
  23 │             httpGet:
  24 │                path: /health
  25 └                port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ping-pong' of Deployment 'ping-pong' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ping-pong-deployment3.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         readinessProbe:
  21 │             initialDelaySeconds: 10 # Initial delay until the readiness is tested
  22 │             periodSeconds: 5 # How often to test
  23 │             httpGet:
  24 │                path: /health
  25 └                port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ping-pong' of Deployment 'ping-pong' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ping-pong-deployment3.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         readinessProbe:
  21 │             initialDelaySeconds: 10 # Initial delay until the readiness is tested
  22 │             periodSeconds: 5 # How often to test
  23 │             httpGet:
  24 │                path: /health
  25 └                port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ping-pong' of Deployment 'ping-pong' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ping-pong-deployment3.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         readinessProbe:
  21 │             initialDelaySeconds: 10 # Initial delay until the readiness is tested
  22 │             periodSeconds: 5 # How often to test
  23 │             httpGet:
  24 │                path: /health
  25 └                port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ping-pong' of Deployment 'ping-pong' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ping-pong-deployment3.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         readinessProbe:
  21 │             initialDelaySeconds: 10 # Initial delay until the readiness is tested
  22 │             periodSeconds: 5 # How often to test
  23 │             httpGet:
  24 │                path: /health
  25 └                port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ping-pong-deployment3.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         readinessProbe:
  21 │             initialDelaySeconds: 10 # Initial delay until the readiness is tested
  22 │             periodSeconds: 5 # How often to test
  23 │             httpGet:
  24 │                path: /health
  25 └                port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ping-pong" of deployment "ping-pong" in "devops-apps" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ping-pong-deployment3.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         readinessProbe:
  21 │             initialDelaySeconds: 10 # Initial delay until the readiness is tested
  22 │             periodSeconds: 5 # How often to test
  23 │             httpGet:
  24 │                path: /health
  25 └                port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ping-pong-deployment3.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         readinessProbe:
  21 │             initialDelaySeconds: 10 # Initial delay until the readiness is tested
  22 │             periodSeconds: 5 # How often to test
  23 │             httpGet:
  24 │                path: /health
  25 └                port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ping-pong in devops-apps namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ping-pong-deployment3.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         readinessProbe:
  21 │             initialDelaySeconds: 10 # Initial delay until the readiness is tested
  22 │             periodSeconds: 5 # How often to test
  23 │             httpGet:
  24 │                path: /health
  25 └                port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ping-pong in devops-apps namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ping-pong-deployment3.yaml:16-46
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         readinessProbe:
  21 │             initialDelaySeconds: 10 # Initial delay until the readiness is tested
  22 │             periodSeconds: 5 # How often to test
  23 │             httpGet:
  24 └                path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ping-pong in deployment ping-pong (namespace: devops-apps) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ping-pong-deployment3.yaml:17-46
────────────────────────────────────────
  17 ┌       - name: ping-pong
  18 │         image: yuc217/ping-pong:latest
  19 │         imagePullPolicy: "Always"
  20 │         readinessProbe:
  21 │             initialDelaySeconds: 10 # Initial delay until the readiness is tested
  22 │             periodSeconds: 5 # How often to test
  23 │             httpGet:
  24 │                path: /health
  25 └                port: 3000
  ..   
────────────────────────────────────────



ping-service.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Deployment 'ping-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ping-service.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: 6014560/ping-service
  20 │         env:
  21 │           - name: PING_URLS
  22 └             value: https://google.com
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Deployment 'ping-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ping-service.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: 6014560/ping-service
  20 │         env:
  21 │           - name: PING_URLS
  22 └             value: https://google.com
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'deployment' 'ping-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ping-service.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: 6014560/ping-service
  20 │         env:
  21 │           - name: PING_URLS
  22 └             value: https://google.com
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Deployment 'ping-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ping-service.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: 6014560/ping-service
  20 │         env:
  21 │           - name: PING_URLS
  22 └             value: https://google.com
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Deployment 'ping-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ping-service.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: 6014560/ping-service
  20 │         env:
  21 │           - name: PING_URLS
  22 └             value: https://google.com
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app' of Deployment 'ping-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ping-service.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: 6014560/ping-service
  20 │         env:
  21 │           - name: PING_URLS
  22 └             value: https://google.com
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Deployment 'ping-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ping-service.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: 6014560/ping-service
  20 │         env:
  21 │           - name: PING_URLS
  22 └             value: https://google.com
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Deployment 'ping-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ping-service.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: 6014560/ping-service
  20 │         env:
  21 │           - name: PING_URLS
  22 └             value: https://google.com
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Deployment 'ping-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ping-service.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: 6014560/ping-service
  20 │         env:
  21 │           - name: PING_URLS
  22 └             value: https://google.com
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Deployment 'ping-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ping-service.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: 6014560/ping-service
  20 │         env:
  21 │           - name: PING_URLS
  22 └             value: https://google.com
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Deployment 'ping-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ping-service.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: 6014560/ping-service
  20 │         env:
  21 │           - name: PING_URLS
  22 └             value: https://google.com
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Deployment 'ping-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ping-service.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: 6014560/ping-service
  20 │         env:
  21 │           - name: PING_URLS
  22 └             value: https://google.com
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ping-service.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: 6014560/ping-service
  20 │         env:
  21 │           - name: PING_URLS
  22 └             value: https://google.com
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of deployment "ping-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ping-service.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: 6014560/ping-service
  20 │         env:
  21 │           - name: PING_URLS
  22 └             value: https://google.com
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ping-service.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: 6014560/ping-service
  20 │         env:
  21 │           - name: PING_URLS
  22 └             value: https://google.com
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment ping-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ping-service.yaml:4-6
────────────────────────────────────────
   4 ┌   name: ping-service
   5 │   labels:
   6 └     app: ping-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ping-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ping-service.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: 6014560/ping-service
  20 │         env:
  21 │           - name: PING_URLS
  22 └             value: https://google.com
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ping-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ping-service.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: app
  19 │         image: 6014560/ping-service
  20 │         env:
  21 │           - name: PING_URLS
  22 └             value: https://google.com
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container app in deployment ping-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ping-service.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: 6014560/ping-service
  20 │         env:
  21 │           - name: PING_URLS
  22 └             value: https://google.com
────────────────────────────────────────



pinkapp-deploy.yaml (kubernetes)
================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pinkapp' of Deployment 'pinkapp-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pinkapp-deploy.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: pinkapp
  20 │         image: p771000/pink-app:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pinkapp' of Deployment 'pinkapp-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pinkapp-deploy.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: pinkapp
  20 │         image: p771000/pink-app:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pinkapp' of 'deployment' 'pinkapp-deployment' in 'pinkapp' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pinkapp-deploy.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: pinkapp
  20 │         image: p771000/pink-app:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pinkapp' of Deployment 'pinkapp-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pinkapp-deploy.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: pinkapp
  20 │         image: p771000/pink-app:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pinkapp' of Deployment 'pinkapp-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pinkapp-deploy.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: pinkapp
  20 │         image: p771000/pink-app:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pinkapp' of Deployment 'pinkapp-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pinkapp-deploy.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: pinkapp
  20 │         image: p771000/pink-app:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pinkapp' of Deployment 'pinkapp-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pinkapp-deploy.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: pinkapp
  20 │         image: p771000/pink-app:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pinkapp' of Deployment 'pinkapp-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pinkapp-deploy.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: pinkapp
  20 │         image: p771000/pink-app:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pinkapp' of Deployment 'pinkapp-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pinkapp-deploy.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: pinkapp
  20 │         image: p771000/pink-app:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pinkapp' of Deployment 'pinkapp-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pinkapp-deploy.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: pinkapp
  20 │         image: p771000/pink-app:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pinkapp' of Deployment 'pinkapp-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pinkapp-deploy.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: pinkapp
  20 │         image: p771000/pink-app:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pinkapp' of Deployment 'pinkapp-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pinkapp-deploy.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: pinkapp
  20 │         image: p771000/pink-app:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pinkapp-deploy.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: pinkapp
  20 │         image: p771000/pink-app:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pinkapp" of deployment "pinkapp-deployment" in "pinkapp" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pinkapp-deploy.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: pinkapp
  20 │         image: p771000/pink-app:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pinkapp-deploy.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: pinkapp
  20 │         image: p771000/pink-app:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment pinkapp-deployment in pinkapp namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pinkapp-deployment in pinkapp namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pinkapp-deploy.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: pinkapp
  20 │         image: p771000/pink-app:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pinkapp-deployment in pinkapp namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pinkapp-deploy.yaml:18-22
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: pinkapp
  20 │         image: p771000/pink-app:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pinkapp in deployment pinkapp-deployment (namespace: pinkapp) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pinkapp-deploy.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: pinkapp
  20 │         image: p771000/pink-app:latest
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────



pinkapp.yaml (kubernetes)
=========================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'app-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pinkapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/pink:1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'app-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pinkapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/pink:1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'app-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pinkapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/pink:1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'app-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pinkapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/pink:1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'app-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pinkapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/pink:1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'app-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pinkapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/pink:1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'app-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pinkapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/pink:1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'app-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pinkapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/pink:1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'app-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pinkapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/pink:1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'app-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pinkapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/pink:1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'app-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pinkapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/pink:1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pinkapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/pink:1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "app-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pinkapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/pink:1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pinkapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/pink:1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment app-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pinkapp.yaml:4-6
────────────────────────────────────────
   4 ┌   name: app-deployment
   5 │   labels:
   6 └     app: registration-pink
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment app-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container app-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pinkapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/pink:1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment app-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pinkapp.yaml:17-23
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: rvsivadocker/pink:1.0
  20 │         ports:
  21 │         - containerPort: 80
  22 │       imagePullSecrets:
  23 └         - name: myregistrykey
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx in deployment app-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pinkapp.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: rvsivadocker/pink:1.0
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



pinnwand-deployment.yaml (kubernetes)
=====================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pinnwand' of Deployment 'pinnwand' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pinnwand-deployment.yaml:38-40
────────────────────────────────────────
  38 ┌         - image: ghcr.io/supakeen/pinnwand:latest
  39 │           name: pinnwand
  40 └           resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pinnwand' of Deployment 'pinnwand' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pinnwand-deployment.yaml:38-40
────────────────────────────────────────
  38 ┌         - image: ghcr.io/supakeen/pinnwand:latest
  39 │           name: pinnwand
  40 └           resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pinnwand' of 'deployment' 'pinnwand' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pinnwand-deployment.yaml:38-40
────────────────────────────────────────
  38 ┌         - image: ghcr.io/supakeen/pinnwand:latest
  39 │           name: pinnwand
  40 └           resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pinnwand' of Deployment 'pinnwand' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pinnwand-deployment.yaml:38-40
────────────────────────────────────────
  38 ┌         - image: ghcr.io/supakeen/pinnwand:latest
  39 │           name: pinnwand
  40 └           resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pinnwand' of Deployment 'pinnwand' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pinnwand-deployment.yaml:38-40
────────────────────────────────────────
  38 ┌         - image: ghcr.io/supakeen/pinnwand:latest
  39 │           name: pinnwand
  40 └           resources: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pinnwand' of Deployment 'pinnwand' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pinnwand-deployment.yaml:38-40
────────────────────────────────────────
  38 ┌         - image: ghcr.io/supakeen/pinnwand:latest
  39 │           name: pinnwand
  40 └           resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pinnwand' of Deployment 'pinnwand' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pinnwand-deployment.yaml:38-40
────────────────────────────────────────
  38 ┌         - image: ghcr.io/supakeen/pinnwand:latest
  39 │           name: pinnwand
  40 └           resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pinnwand' of Deployment 'pinnwand' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pinnwand-deployment.yaml:38-40
────────────────────────────────────────
  38 ┌         - image: ghcr.io/supakeen/pinnwand:latest
  39 │           name: pinnwand
  40 └           resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pinnwand' of Deployment 'pinnwand' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pinnwand-deployment.yaml:38-40
────────────────────────────────────────
  38 ┌         - image: ghcr.io/supakeen/pinnwand:latest
  39 │           name: pinnwand
  40 └           resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pinnwand' of Deployment 'pinnwand' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pinnwand-deployment.yaml:38-40
────────────────────────────────────────
  38 ┌         - image: ghcr.io/supakeen/pinnwand:latest
  39 │           name: pinnwand
  40 └           resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pinnwand' of Deployment 'pinnwand' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pinnwand-deployment.yaml:38-40
────────────────────────────────────────
  38 ┌         - image: ghcr.io/supakeen/pinnwand:latest
  39 │           name: pinnwand
  40 └           resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pinnwand' of Deployment 'pinnwand' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pinnwand-deployment.yaml:38-40
────────────────────────────────────────
  38 ┌         - image: ghcr.io/supakeen/pinnwand:latest
  39 │           name: pinnwand
  40 └           resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pinnwand-deployment.yaml:38-40
────────────────────────────────────────
  38 ┌         - image: ghcr.io/supakeen/pinnwand:latest
  39 │           name: pinnwand
  40 └           resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pinnwand" of deployment "pinnwand" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pinnwand-deployment.yaml:38-40
────────────────────────────────────────
  38 ┌         - image: ghcr.io/supakeen/pinnwand:latest
  39 │           name: pinnwand
  40 └           resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pinnwand-deployment.yaml:38-40
────────────────────────────────────────
  38 ┌         - image: ghcr.io/supakeen/pinnwand:latest
  39 │           name: pinnwand
  40 └           resources: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pinnwand in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pinnwand-deployment.yaml:4-15
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert
   6 │     kompose.version: 1.22.0 (955b78124)
   7 │     traefik.enable: "true"
   8 │     traefik.pinnwand.routers.main.entrypoints: websecure
   9 │     traefik.pinnwand.routers.main.middlewares: security-headers@file, error-pages-middleware@docker, ratelimit@file, geoblock@file
  10 │     traefik.pinnwand.routers.main.rule: Host(`paste.`)
  11 │     traefik.pinnwand.routers.main.tls.certresolver: leresolver
  12 └   creationTimestamp: null
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pinnwand in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pinnwand-deployment.yaml:38-40
────────────────────────────────────────
  38 ┌         - image: ghcr.io/supakeen/pinnwand:latest
  39 │           name: pinnwand
  40 └           resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pinnwand in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pinnwand-deployment.yaml:37-41
────────────────────────────────────────
  37 ┌       containers:
  38 │         - image: ghcr.io/supakeen/pinnwand:latest
  39 │           name: pinnwand
  40 │           resources: {}
  41 └       restartPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pinnwand in deployment pinnwand (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pinnwand-deployment.yaml:38-40
────────────────────────────────────────
  38 ┌         - image: ghcr.io/supakeen/pinnwand:latest
  39 │           name: pinnwand
  40 └           resources: {}
────────────────────────────────────────



piped-ingress.yaml (kubernetes)
===============================
Tests: 108 (SUCCESSES: 107, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'piped' in 'apps' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



piped-ingress_2.yaml (kubernetes)
=================================
Tests: 108 (SUCCESSES: 107, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'pipedapi' in 'apps' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



piped-ingress_4.yaml (kubernetes)
=================================
Tests: 108 (SUCCESSES: 107, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'pipedproxy' in 'apps' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



pixelfed-env-configmap.yaml (kubernetes)
========================================
Tests: 108 (SUCCESSES: 106, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'pixelfed-env' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"APP_KEY", "APP_TIMEZONE", "DB_PORT", "DB_USERNAME", "ENFORCE_EMAIL_VERIFICATION", "MAIL_FROM_ADDRESS", "MAIL_PORT", "MAIL_USERNAME", "MAX_ACCOUNT_SIZE", "MAX_AVATAR_SIZE", "MAX_BIO_LENGTH", "MAX_CAPTION_LENGTH", "MAX_PHOTO_SIZE", "PF_MAX_USERS", "REDIS_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'pixelfed-env' in 'default' namespace stores secrets in key(s) or value(s) '{"DB_PASSWORD", "MAIL_PASSWORD", "MYSQL_PASSWORD", "MYSQL_RANDOM_ROOT_PASSWORD", "REDIS_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



pixelfed-env-configmap1.yaml (kubernetes)
=========================================
Tests: 108 (SUCCESSES: 106, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'pixelfed-env' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"APP_KEY", "APP_TIMEZONE", "DB_PORT", "DB_USERNAME", "ENFORCE_EMAIL_VERIFICATION", "MAIL_FROM_ADDRESS", "MAIL_PORT", "MAIL_USERNAME", "MAX_ACCOUNT_SIZE", "MAX_AVATAR_SIZE", "MAX_BIO_LENGTH", "MAX_CAPTION_LENGTH", "MAX_PHOTO_SIZE", "PF_MAX_USERS", "REDIS_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'pixelfed-env' in 'default' namespace stores secrets in key(s) or value(s) '{"DB_PASSWORD", "MAIL_PASSWORD", "MYSQL_PASSWORD", "MYSQL_RANDOM_ROOT_PASSWORD", "REDIS_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



pizza1_1.yaml (kubernetes)
==========================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'gilsdav-pizza' of Deployment 'gilsdav-pizza' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pizza1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'gilsdav-pizza' of Deployment 'gilsdav-pizza' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pizza1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'gilsdav-pizza' of 'deployment' 'gilsdav-pizza' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pizza1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'gilsdav-pizza' of Deployment 'gilsdav-pizza' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pizza1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'gilsdav-pizza' of Deployment 'gilsdav-pizza' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pizza1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'gilsdav-pizza' of Deployment 'gilsdav-pizza' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pizza1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'gilsdav-pizza' of Deployment 'gilsdav-pizza' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pizza1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'gilsdav-pizza' of Deployment 'gilsdav-pizza' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pizza1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'gilsdav-pizza' of Deployment 'gilsdav-pizza' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pizza1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'gilsdav-pizza' of Deployment 'gilsdav-pizza' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pizza1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'gilsdav-pizza' of Deployment 'gilsdav-pizza' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pizza1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pizza1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "gilsdav-pizza" of deployment "gilsdav-pizza" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pizza1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pizza1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment gilsdav-pizza in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pizza1_1.yaml:4
────────────────────────────────────────
   4 [   name: gilsdav-pizza
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment gilsdav-pizza in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container gilsdav-pizza in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pizza1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment gilsdav-pizza in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pizza1_1.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container gilsdav-pizza in deployment gilsdav-pizza (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pizza1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



pizza_1.yaml (kubernetes)
=========================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'gilsdav-pizza' of Deployment 'gilsdav-pizza' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pizza_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'gilsdav-pizza' of Deployment 'gilsdav-pizza' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pizza_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'gilsdav-pizza' of 'deployment' 'gilsdav-pizza' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pizza_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'gilsdav-pizza' of Deployment 'gilsdav-pizza' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pizza_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'gilsdav-pizza' of Deployment 'gilsdav-pizza' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pizza_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'gilsdav-pizza' of Deployment 'gilsdav-pizza' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pizza_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'gilsdav-pizza' of Deployment 'gilsdav-pizza' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pizza_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'gilsdav-pizza' of Deployment 'gilsdav-pizza' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pizza_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'gilsdav-pizza' of Deployment 'gilsdav-pizza' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pizza_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'gilsdav-pizza' of Deployment 'gilsdav-pizza' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pizza_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'gilsdav-pizza' of Deployment 'gilsdav-pizza' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pizza_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pizza_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "gilsdav-pizza" of deployment "gilsdav-pizza" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pizza_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pizza_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment gilsdav-pizza in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pizza_1.yaml:4
────────────────────────────────────────
   4 [   name: gilsdav-pizza
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment gilsdav-pizza in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container gilsdav-pizza in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pizza_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment gilsdav-pizza in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pizza_1.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container gilsdav-pizza in deployment gilsdav-pizza (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pizza_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gilsdav-pizza
  17 │         image: harbor.192.168.0.216.nip.io/gilsdav/pizza:v2
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



placeholder-deploy.yaml (kubernetes)
====================================
Tests: 109 (SUCCESSES: 93, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ubuntu' of Deployment 'placeholder' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 placeholder-deploy.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: ubuntu
  19 │         image: ubuntu
  20 │         command: ["sleep"]
  21 │         args: ["infinity"]
  22 │         resources:
  23 │           requests:
  24 │             cpu: 200m
  25 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ubuntu' of Deployment 'placeholder' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 placeholder-deploy.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: ubuntu
  19 │         image: ubuntu
  20 │         command: ["sleep"]
  21 │         args: ["infinity"]
  22 │         resources:
  23 │           requests:
  24 │             cpu: 200m
  25 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ubuntu' of 'deployment' 'placeholder' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 placeholder-deploy.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: ubuntu
  19 │         image: ubuntu
  20 │         command: ["sleep"]
  21 │         args: ["infinity"]
  22 │         resources:
  23 │           requests:
  24 │             cpu: 200m
  25 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ubuntu' of Deployment 'placeholder' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 placeholder-deploy.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: ubuntu
  19 │         image: ubuntu
  20 │         command: ["sleep"]
  21 │         args: ["infinity"]
  22 │         resources:
  23 │           requests:
  24 │             cpu: 200m
  25 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ubuntu' of Deployment 'placeholder' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 placeholder-deploy.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: ubuntu
  19 │         image: ubuntu
  20 │         command: ["sleep"]
  21 │         args: ["infinity"]
  22 │         resources:
  23 │           requests:
  24 │             cpu: 200m
  25 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ubuntu' of Deployment 'placeholder' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 placeholder-deploy.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: ubuntu
  19 │         image: ubuntu
  20 │         command: ["sleep"]
  21 │         args: ["infinity"]
  22 │         resources:
  23 │           requests:
  24 │             cpu: 200m
  25 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ubuntu' of Deployment 'placeholder' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 placeholder-deploy.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: ubuntu
  19 │         image: ubuntu
  20 │         command: ["sleep"]
  21 │         args: ["infinity"]
  22 │         resources:
  23 │           requests:
  24 │             cpu: 200m
  25 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ubuntu' of Deployment 'placeholder' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 placeholder-deploy.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: ubuntu
  19 │         image: ubuntu
  20 │         command: ["sleep"]
  21 │         args: ["infinity"]
  22 │         resources:
  23 │           requests:
  24 │             cpu: 200m
  25 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ubuntu' of Deployment 'placeholder' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 placeholder-deploy.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: ubuntu
  19 │         image: ubuntu
  20 │         command: ["sleep"]
  21 │         args: ["infinity"]
  22 │         resources:
  23 │           requests:
  24 │             cpu: 200m
  25 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ubuntu' of Deployment 'placeholder' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 placeholder-deploy.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: ubuntu
  19 │         image: ubuntu
  20 │         command: ["sleep"]
  21 │         args: ["infinity"]
  22 │         resources:
  23 │           requests:
  24 │             cpu: 200m
  25 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 placeholder-deploy.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: ubuntu
  19 │         image: ubuntu
  20 │         command: ["sleep"]
  21 │         args: ["infinity"]
  22 │         resources:
  23 │           requests:
  24 │             cpu: 200m
  25 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ubuntu" of deployment "placeholder" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 placeholder-deploy.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: ubuntu
  19 │         image: ubuntu
  20 │         command: ["sleep"]
  21 │         args: ["infinity"]
  22 │         resources:
  23 │           requests:
  24 │             cpu: 200m
  25 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 placeholder-deploy.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: ubuntu
  19 │         image: ubuntu
  20 │         command: ["sleep"]
  21 │         args: ["infinity"]
  22 │         resources:
  23 │           requests:
  24 │             cpu: 200m
  25 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment placeholder in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 placeholder-deploy.yaml:4
────────────────────────────────────────
   4 [   name: placeholder
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container placeholder in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 placeholder-deploy.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: ubuntu
  19 │         image: ubuntu
  20 │         command: ["sleep"]
  21 │         args: ["infinity"]
  22 │         resources:
  23 │           requests:
  24 │             cpu: 200m
  25 └             memory: 250Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment placeholder in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 placeholder-deploy.yaml:15-25
────────────────────────────────────────
  15 ┌       priorityClassName: placeholder-priority
  16 │       terminationGracePeriodSeconds: 0
  17 │       containers:
  18 │       - name: ubuntu
  19 │         image: ubuntu
  20 │         command: ["sleep"]
  21 │         args: ["infinity"]
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


