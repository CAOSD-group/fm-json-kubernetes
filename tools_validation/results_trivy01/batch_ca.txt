
Report Summary

┌──────────────────────────────────────────────┬────────────┬───────────────────┐
│                    Target                    │    Type    │ Misconfigurations │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap-volume1.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap.file-like-keys.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap.property-like-keys.yaml            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap1239.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap1289.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap1290.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap1291.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap1292.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap1293.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap1294.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap1295.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap1296.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap1297.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap1384.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap1531.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap1532.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap1725.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap1787.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ Configmap1190.yaml                           │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap-sample.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap-virt.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1.yaml                              │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1036.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1041.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1041_1.yaml                         │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1061.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1077.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap113.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1131.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1155.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap116.yaml                            │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1172.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap118.yaml                            │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1180.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap119.yaml                            │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1195.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap120.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap121.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap122.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap123.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap124.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap127.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap13.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1301.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1303.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1334.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1340.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1466.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1471.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap153.yaml                            │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap154.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1553.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1562.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap161.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap161_1.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap161_2.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1633.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1638.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1638_1.yaml                         │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap165.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1710.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1760.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap180.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap180_1.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap180_2.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap183.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap183_1.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap183_2.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1852.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1888.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1910.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1912.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1912_1.yaml                         │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap194.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1951.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1952.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1953.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1954.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1955.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1956.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap1957.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap2.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap207.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap2105.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap2105_1.yaml                         │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap264.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap268.yaml                            │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap270.yaml                            │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap271.yaml                            │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap272.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap273.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap274.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap275.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap276.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap279.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap28.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap28_1.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap28_2.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-pod.yaml                           │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-pod1.yaml                          │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-pod10.yaml                         │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-pod11.yaml                         │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-pod12.yaml                         │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-pod1_1.yaml                        │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-pod2.yaml                          │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-pod3.yaml                          │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-pod3_1.yaml                        │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-pod4.yaml                          │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-pod5.yaml                          │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-pod6.yaml                          │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-pod7.yaml                          │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-pod8.yaml                          │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-pod9.yaml                          │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-portal-noticias.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-postgres-initbd.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-postgres-initbd1.yaml              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-postgres-initbd2.yaml              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-postgres.yaml                      │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-postgres1.yaml                     │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-postgres2.yaml                     │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-postgresql.yaml                    │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-pre.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-products.yaml                      │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-provisioning-dashboards.yaml       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-qa.yaml                            │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-rabbitmq.yaml                      │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-realm-example.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-role.yaml                          │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-rolebinding.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-rook-ceph-mon-endpoints.yaml       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-scripts2.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-secret-app.yaml                    │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-secret-app_1.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-secret-db.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-secret-db_1.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-senhas.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-serviceaccount.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-sistema-noticias.yaml              │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-ssl-keys-invalid.yaml              │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-ssl-keys.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-statefulset.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-statefulset1.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-task.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-telegraf.yaml                      │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-telegraf1.yaml                     │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-test_1.yaml                        │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-usage-pod.yaml                     │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-v1.yaml                            │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-validation-keys-invalid-oss.yaml   │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-validation-keys-invalid.yaml       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-validation-keys-oss.yaml           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-validation-keys.yaml               │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-vault-integration.yaml             │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-vault.yaml                         │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-volume.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-volume_1.yaml                      │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-web-features.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-windows.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-windows1.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-with-grpc.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-with-keys.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-with-keys1.yaml                    │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-with-keys2.yaml                    │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-wp.yaml                            │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-x1.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap-y1.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap.empty-owner-reference-desired.yaml │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap.empty-owner-reference.yaml         │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap.env.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap.sops.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap.template.yaml                      │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap.template1.yaml                     │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap.template1_1.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap.template_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap10.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1005.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap10110.yaml                          │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap10110_1.yaml                        │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1022.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap103.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1031.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1032.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1033.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1034.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1035.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1045.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1046.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1047.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1048.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap105.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1053.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1055.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1056.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1057.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1058.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1059.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap106.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1063.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1066.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1067.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1068.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1069.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap106_1.yaml                          │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap106_2.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap107.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1070.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1071.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1074.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1075.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1076.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1078.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1079.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1081.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1082.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1083.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1084.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1085.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1086.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1087.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1088.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1089.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1090.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1091.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1092.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1093.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1094.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1095.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1096.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap11.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap110.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1100.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1101.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1106.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1107.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1108.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1109.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap111.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1111.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1115.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1116.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1117.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1118.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1119.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap111_1.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1120.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1121.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1135.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1136.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1144.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap115.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1150.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1152.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1153.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1154.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1156.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1157.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1158.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1159.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1160.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1161.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1162.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1163.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1163_1.yaml                         │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1163_2.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1164.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1166.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1167.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1168.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1169.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap117.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1170.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1171.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1173.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1174.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1175.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1176.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1177.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1178.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1179.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap117_1.yaml                          │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap117_2.yaml                          │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap117_3.yaml                          │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1181.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1182.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1183.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1184.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1184_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1185.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1185_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1186.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1187.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1188.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1189.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1193.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1194.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1199.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1200.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1201.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1203.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1205.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1210.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1214.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1215.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1216.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1217.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1218.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1219.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1221.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1225.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1226.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1227.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1228.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1229.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1230.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1231.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1232.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1233.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1234.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1235.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1236.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1237.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1241.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1242.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1243.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1244.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1244_1.yaml                         │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1245.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1246.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1246_1.yaml                         │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1247.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1248.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1248_1.yaml                         │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap125.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap126.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1260.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1261.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1262.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1262_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1263.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1263_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1264.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1265.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1266.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1267.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1268.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1269.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1270.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1271.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1272.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1273.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1274.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1275.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1276.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1277.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1278.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1279.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap128.yaml                            │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1280.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1281.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1282.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1283.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1285.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1286.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1300.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1304.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1305.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1312.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1313.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1314.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1315.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1317.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1318.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1319.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap132.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1320.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1321.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1322.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1323.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1325.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1327.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1328.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1329.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1331.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1332.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1333.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1335.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1336.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1337.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1338.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1352.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1353.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1354.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1355.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1356.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1356_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1357.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1357_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1358.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1359.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap136.yaml                            │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1360.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1361.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1385.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1388.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap139.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1394.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1395.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1396.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1399.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap14.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap140.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap141.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap142.yaml                            │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1422.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1423.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1424.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1425.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1426.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1427.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1428.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1429.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap143.yaml                            │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1430.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1431.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1432.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1433.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1434.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1435.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1436.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1437.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1438.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1439.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap144.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1440.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1441.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1442.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1443.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1444.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1445.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1446.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1447.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1448.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap145.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1453.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1454.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1456.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1457.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1458.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1459.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap146.yaml                            │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1460.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1461.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1462.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1463.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1464.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1465.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1467.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1468.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1469.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap146_1.yaml                          │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap147.yaml                            │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1470.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1472.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1473.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1474.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1475.yaml                           │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1475_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1476.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1477.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1479.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap148.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1480.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1481.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1482.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1484.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1486.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1487.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1487_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap149.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap15.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap150.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1506.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1507.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1508.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1509.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap151.yaml                            │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1510.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1511.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1542.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1555.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1556.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1559.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1560.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1561.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1563.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1564.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1565.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1566.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1567.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1567_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1568.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1569.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1570.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1570_1.yaml                         │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1571.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1572.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1573.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1578.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1579.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap158.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1580.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1581.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1582.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1584.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1585.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1586.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1587.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1588.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1589.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1590.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1591.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1592.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1593.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1594.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1595.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1596.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1597.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1598.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1598_1.yaml                         │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1599.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap160.yaml                            │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1600.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1600_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1601.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1601_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1602.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1603.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1618.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1619.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap162.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1620.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1621.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1622.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1623.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1624.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1625.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1626.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1627.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1627_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1629.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap163.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1635.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1636.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1637.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1639.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1643.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap166.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1663.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1664.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1665.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1666.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap167.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1671.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1677.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1678.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1679.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1680.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1681.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1682.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1683.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1684.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1685.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1686.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1687.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1693.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1697.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1701.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1701_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1704.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1711.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1713.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1715.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap172.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1727.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap173.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap174.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1742.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1743.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1744.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap175.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1752.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1756.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1757.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1758.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1759.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap176.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1761.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1762.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1763.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1765.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1766.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1767.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap177.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1770.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1771.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1772.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1773.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1774.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1775.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1776.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1777.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1779.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap178.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1780.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1781.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1783.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1784.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1784_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1786.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1788.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1789.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1790.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1791.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1792.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1793.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1797.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1798.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1801.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1803.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1804.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1804_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1805.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1806.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1807.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1808.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1809.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1810.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1811.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1812.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1813.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1814.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap182.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1821.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1822.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1823.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1824.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1825.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1825_1.yaml                         │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1829.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1830.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1834.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1835.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1838.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1838_1.yaml                         │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1838_2.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1849.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1850.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1851.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1853.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1854.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1855.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1856.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1867.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1868.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1869.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1870.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1871.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1872.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1878.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1879.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1880.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1881.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1882.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1885.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1886.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1887.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1889.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1890.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1891.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1892.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1893.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1894.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1895.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1896.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1897.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1898.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1899.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap190.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1900.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1902.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1903.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1904.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1905.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1906.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1907.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1908.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1908_1.yaml                         │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1909.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap190_1.yaml                          │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap190_2.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap191.yaml                            │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1911.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1913.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1916.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1916_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1917.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1917_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1918.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1919.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap192.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1920.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1921.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1922.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1923.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1924.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1925.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1926.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1927.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1928.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1929.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap193.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1930.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1931.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1932.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1935.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1936.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1937.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1938.yaml                           │ kubernetes │        18         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1938_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1939.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1940.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1942.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1943.yaml                           │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1944.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1945.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1946.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1947.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1948.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1949.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap195.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1950.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1958.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap196.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap1965.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap197.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap198.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap199.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap20.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap200.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap201.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap202.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap204.yaml                            │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap205.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap206.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap208.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap209.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap21.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap2100.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap2102.yaml                           │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap2104.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap211.yaml                            │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap214.yaml                            │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap215.yaml                            │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap216.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap217.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap218.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap219.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap22.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap221.yaml                            │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap23.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap234.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap235.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap236.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap237.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap238.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap239.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap24.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap25.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap255.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap257.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap258.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap258_1.yaml                          │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap258_2.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap259.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap26.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap262.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap263.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap263_1.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap267.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap269.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap269_1.yaml                          │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap269_2.yaml                          │ kubernetes │        17         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap269_3.yaml                          │ kubernetes │        19         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap277.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap278.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap280.yaml                            │ kubernetes │         1         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap287.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap288.yaml                            │ kubernetes │         2         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap291.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap292.yaml                            │ kubernetes │         0         │
└──────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


ConfigMap1239.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'app-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"HTTPS_PORT", "HTTP_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



ConfigMap1292.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'api-gateway' in 'microservices' namespace stores sensitive contents in key(s) or value(s) '{"HTTP_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



ConfigMap1293.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'authentication-service' in 'microservices' namespace stores sensitive contents in key(s) or value(s) '{"GRPC_PORT", "JWT_EXPIRY", "PROMETHEUS_METRICS_PORT", "REDIS_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



ConfigMap1294.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'encode-service' in 'microservices' namespace stores sensitive contents in key(s) or value(s) '{"AMQP_PORT", "GRPC_PORT", "PROMETHEUS_METRICS_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



ConfigMap1295.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'upload-service' in 'microservices' namespace stores sensitive contents in key(s) or value(s) '{"AMQP_PORT", "GRPC_PORT", "PROMETHEUS_METRICS_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



ConfigMap1296.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'user-service' in 'microservices' namespace stores sensitive contents in key(s) or value(s) '{"DB_PORT", "GRPC_PORT", "PROMETHEUS_METRICS_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



ConfigMap1297.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'video-catalog-service' in 'microservices' namespace stores sensitive contents in key(s) or value(s) '{"AMQP_PORT", "DB_PORT", "DB_TIMEZONE", "GRPC_PORT", "PROMETHEUS_METRICS_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



ConfigMap1532.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'load-generator-config' in 'demo-app' namespace stores sensitive contents in key(s) or value(s) '{"DELAY_MS"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



ConfigMap1787.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'mongodb-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"    const username "}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'mongodb-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"      pwd", "    const password ", "const rootPass "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



Configmap1190.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Configmap1190.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     envFrom:
  11 │     - configMapRef:
  12 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Configmap1190.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     envFrom:
  11 │     - configMapRef:
  12 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Configmap1190.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     envFrom:
  11 │     - configMapRef:
  12 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Configmap1190.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     envFrom:
  11 │     - configMapRef:
  12 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Configmap1190.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     envFrom:
  11 │     - configMapRef:
  12 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 Configmap1190.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     envFrom:
  11 │     - configMapRef:
  12 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Configmap1190.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     envFrom:
  11 │     - configMapRef:
  12 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Configmap1190.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     envFrom:
  11 │     - configMapRef:
  12 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Configmap1190.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     envFrom:
  11 │     - configMapRef:
  12 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Configmap1190.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     envFrom:
  11 │     - configMapRef:
  12 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Configmap1190.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     envFrom:
  11 │     - configMapRef:
  12 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Configmap1190.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     envFrom:
  11 │     - configMapRef:
  12 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Configmap1190.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     envFrom:
  11 │     - configMapRef:
  12 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Configmap1190.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     envFrom:
  11 │     - configMapRef:
  12 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Configmap1190.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     envFrom:
  11 │     - configMapRef:
  12 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Configmap1190.yaml:5
────────────────────────────────────────
   5 [   name: configmap-demo-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Configmap1190.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     envFrom:
  11 │     - configMapRef:
  12 └        name: configmap-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Configmap1190.yaml:7-12
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: demo-container
   9 │     image: nginx
  10 │     envFrom:
  11 │     - configMapRef:
  12 └        name: configmap-1
────────────────────────────────────────



configMap1.yaml (kubernetes)
============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'coturn-conf' in 'synapse' namespace stores sensitive contents in key(s) or value(s) '{"pkey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'coturn-conf' in 'synapse' namespace stores secrets in key(s) or value(s) '{"static-auth-secret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configMap1036.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'my-var' in 'default' namespace stores secrets in key(s) or value(s) '{"PASS"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configMap1041.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'my-var' in 'default' namespace stores secrets in key(s) or value(s) '{"pass"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configMap1041_1.yaml (kubernetes)
=================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'my-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configMap1041_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'my-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configMap1041_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'my-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configMap1041_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configMap1041_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configMap1041_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'my-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configMap1041_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'my-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configMap1041_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configMap1041_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configMap1041_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configMap1041_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configMap1041_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configMap1041_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configMap1041_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "my-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configMap1041_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configMap1041_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod my-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configMap1041_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: my-pod
   5 │   labels:
   6 └     app: xyz-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configMap1041_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configMap1041_1.yaml:8-23
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 └         configMapKeyRef:
  ..   
────────────────────────────────────────



configMap116.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'env-bookwyrm' in 'bookwyrm' namespace stores sensitive contents in key(s) or value(s) '{"EMAIL", "EMAIL_HOST", "EMAIL_HOST_USER", "EMAIL_PORT", "EMAIL_SENDER_DOMAIN", "EMAIL_SENDER_NAME", "EMAIL_USE_SSL", "EMAIL_USE_TLS", "FLOWER_PORT", "MAX_STREAM_LENGTH", "PGPORT", "REDIS_ACTIVITY_PORT", "REDIS_BROKER_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configMap118.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'assets' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configMap119.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'carts' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'carts' in 'default' namespace stores secrets in key(s) or value(s) '{"AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configMap1301.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'learnwisefrontend-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"VITE_REACT_APP_API_KEY", "VITE_REACT_APP_APPID", "VITE_REACT_APP_PRESET_KEY"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'learnwisefrontend-config' in 'default' namespace stores secrets in key(s) or value(s) '{"VITE_REACT_APP_API_SECRET", "VITE_REACT_APP_SERVERSECRET"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configMap1303.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'my-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"elasticsearch_port", "redis_port"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configMap1471.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'my-cm' in 'default' namespace stores secrets in key(s) or value(s) '{"password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configMap153.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'coturn-conf' in 'synapse' namespace stores sensitive contents in key(s) or value(s) '{"pkey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'coturn-conf' in 'synapse' namespace stores secrets in key(s) or value(s) '{"static-auth-secret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configMap1553.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kibana-config' in 'production' namespace stores sensitive contents in key(s) or value(s) '{"kibana.yml", "xpack.encryptedSavedObjects.encryptionKey", "xpack.security.encryptionKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configMap1633.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kibana-config' in 'production' namespace stores sensitive contents in key(s) or value(s) '{"kibana.yml", "xpack.encryptedSavedObjects.encryptionKey", "xpack.security.encryptionKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configMap1638_1.yaml (kubernetes)
=================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'c1' of Pod 'pod1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configMap1638_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: alpine
   9 │     env:
  10 │     - name: PARAMS
  11 │       value: ProjectName ProjectComponent ProjectVersion ProjectApp
  12 │     envFrom:
  13 │     - configMapRef:
  14 │         name: configmap1
  15 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'c1' of Pod 'pod1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configMap1638_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: alpine
   9 │     env:
  10 │     - name: PARAMS
  11 │       value: ProjectName ProjectComponent ProjectVersion ProjectApp
  12 │     envFrom:
  13 │     - configMapRef:
  14 │         name: configmap1
  15 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'c1' of 'pod' 'pod1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configMap1638_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: alpine
   9 │     env:
  10 │     - name: PARAMS
  11 │       value: ProjectName ProjectComponent ProjectVersion ProjectApp
  12 │     envFrom:
  13 │     - configMapRef:
  14 │         name: configmap1
  15 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'c1' of Pod 'pod1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configMap1638_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: alpine
   9 │     env:
  10 │     - name: PARAMS
  11 │       value: ProjectName ProjectComponent ProjectVersion ProjectApp
  12 │     envFrom:
  13 │     - configMapRef:
  14 │         name: configmap1
  15 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'c1' of Pod 'pod1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configMap1638_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: alpine
   9 │     env:
  10 │     - name: PARAMS
  11 │       value: ProjectName ProjectComponent ProjectVersion ProjectApp
  12 │     envFrom:
  13 │     - configMapRef:
  14 │         name: configmap1
  15 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'c1' of Pod 'pod1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configMap1638_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: alpine
   9 │     env:
  10 │     - name: PARAMS
  11 │       value: ProjectName ProjectComponent ProjectVersion ProjectApp
  12 │     envFrom:
  13 │     - configMapRef:
  14 │         name: configmap1
  15 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'c1' of Pod 'pod1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configMap1638_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: alpine
   9 │     env:
  10 │     - name: PARAMS
  11 │       value: ProjectName ProjectComponent ProjectVersion ProjectApp
  12 │     envFrom:
  13 │     - configMapRef:
  14 │         name: configmap1
  15 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'c1' of Pod 'pod1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configMap1638_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: alpine
   9 │     env:
  10 │     - name: PARAMS
  11 │       value: ProjectName ProjectComponent ProjectVersion ProjectApp
  12 │     envFrom:
  13 │     - configMapRef:
  14 │         name: configmap1
  15 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'c1' of Pod 'pod1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configMap1638_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: alpine
   9 │     env:
  10 │     - name: PARAMS
  11 │       value: ProjectName ProjectComponent ProjectVersion ProjectApp
  12 │     envFrom:
  13 │     - configMapRef:
  14 │         name: configmap1
  15 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'c1' of Pod 'pod1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configMap1638_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: alpine
   9 │     env:
  10 │     - name: PARAMS
  11 │       value: ProjectName ProjectComponent ProjectVersion ProjectApp
  12 │     envFrom:
  13 │     - configMapRef:
  14 │         name: configmap1
  15 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'c1' of Pod 'pod1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configMap1638_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: alpine
   9 │     env:
  10 │     - name: PARAMS
  11 │       value: ProjectName ProjectComponent ProjectVersion ProjectApp
  12 │     envFrom:
  13 │     - configMapRef:
  14 │         name: configmap1
  15 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'c1' of Pod 'pod1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configMap1638_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: alpine
   9 │     env:
  10 │     - name: PARAMS
  11 │       value: ProjectName ProjectComponent ProjectVersion ProjectApp
  12 │     envFrom:
  13 │     - configMapRef:
  14 │         name: configmap1
  15 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configMap1638_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: alpine
   9 │     env:
  10 │     - name: PARAMS
  11 │       value: ProjectName ProjectComponent ProjectVersion ProjectApp
  12 │     envFrom:
  13 │     - configMapRef:
  14 │         name: configmap1
  15 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "c1" of pod "pod1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configMap1638_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: alpine
   9 │     env:
  10 │     - name: PARAMS
  11 │       value: ProjectName ProjectComponent ProjectVersion ProjectApp
  12 │     envFrom:
  13 │     - configMapRef:
  14 │         name: configmap1
  15 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configMap1638_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: alpine
   9 │     env:
  10 │     - name: PARAMS
  11 │       value: ProjectName ProjectComponent ProjectVersion ProjectApp
  12 │     envFrom:
  13 │     - configMapRef:
  14 │         name: configmap1
  15 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pod1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configMap1638_1.yaml:4
────────────────────────────────────────
   4 [   name: pod1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configMap1638_1.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: alpine
   9 │     env:
  10 │     - name: PARAMS
  11 │       value: ProjectName ProjectComponent ProjectVersion ProjectApp
  12 │     envFrom:
  13 │     - configMapRef:
  14 │         name: configmap1
  15 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configMap1638_1.yaml:6-19
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: c1
   8 │     image: alpine
   9 │     env:
  10 │     - name: PARAMS
  11 │       value: ProjectName ProjectComponent ProjectVersion ProjectApp
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: configmap1
  ..   
────────────────────────────────────────



configMap1710.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'ocm-placement' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"matchKey", "statusListKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 configMap1710.yaml:2
────────────────────────────────────────
   2 [ ---
────────────────────────────────────────



configMap1912.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'my-var' in 'default' namespace stores secrets in key(s) or value(s) '{"pass"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configMap1912_1.yaml (kubernetes)
=================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'my-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configMap1912_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'my-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configMap1912_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'my-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configMap1912_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configMap1912_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configMap1912_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'my-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configMap1912_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'my-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configMap1912_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configMap1912_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configMap1912_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configMap1912_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configMap1912_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configMap1912_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configMap1912_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "my-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configMap1912_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configMap1912_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod my-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configMap1912_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: my-pod
   5 │   labels:
   6 └     app: xyz-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configMap1912_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configMap1912_1.yaml:8-23
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 └         configMapKeyRef:
  ..   
────────────────────────────────────────



configMap2105_1.yaml (kubernetes)
=================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'c1' of Pod 'pod1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configMap2105_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 │         name: configmap1
  12 │     volumeMounts:
  13 │     - name: config-vol1
  14 │       mountPath: /tmp/config/ProjectApp
  15 └       subPath: ProjectApp
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'c1' of Pod 'pod1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configMap2105_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 │         name: configmap1
  12 │     volumeMounts:
  13 │     - name: config-vol1
  14 │       mountPath: /tmp/config/ProjectApp
  15 └       subPath: ProjectApp
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'c1' of 'pod' 'pod1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configMap2105_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 │         name: configmap1
  12 │     volumeMounts:
  13 │     - name: config-vol1
  14 │       mountPath: /tmp/config/ProjectApp
  15 └       subPath: ProjectApp
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'c1' of Pod 'pod1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configMap2105_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 │         name: configmap1
  12 │     volumeMounts:
  13 │     - name: config-vol1
  14 │       mountPath: /tmp/config/ProjectApp
  15 └       subPath: ProjectApp
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'c1' of Pod 'pod1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configMap2105_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 │         name: configmap1
  12 │     volumeMounts:
  13 │     - name: config-vol1
  14 │       mountPath: /tmp/config/ProjectApp
  15 └       subPath: ProjectApp
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'c1' of Pod 'pod1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configMap2105_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 │         name: configmap1
  12 │     volumeMounts:
  13 │     - name: config-vol1
  14 │       mountPath: /tmp/config/ProjectApp
  15 └       subPath: ProjectApp
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'c1' of Pod 'pod1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configMap2105_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 │         name: configmap1
  12 │     volumeMounts:
  13 │     - name: config-vol1
  14 │       mountPath: /tmp/config/ProjectApp
  15 └       subPath: ProjectApp
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'c1' of Pod 'pod1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configMap2105_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 │         name: configmap1
  12 │     volumeMounts:
  13 │     - name: config-vol1
  14 │       mountPath: /tmp/config/ProjectApp
  15 └       subPath: ProjectApp
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'c1' of Pod 'pod1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configMap2105_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 │         name: configmap1
  12 │     volumeMounts:
  13 │     - name: config-vol1
  14 │       mountPath: /tmp/config/ProjectApp
  15 └       subPath: ProjectApp
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'c1' of Pod 'pod1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configMap2105_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 │         name: configmap1
  12 │     volumeMounts:
  13 │     - name: config-vol1
  14 │       mountPath: /tmp/config/ProjectApp
  15 └       subPath: ProjectApp
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'c1' of Pod 'pod1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configMap2105_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 │         name: configmap1
  12 │     volumeMounts:
  13 │     - name: config-vol1
  14 │       mountPath: /tmp/config/ProjectApp
  15 └       subPath: ProjectApp
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'c1' of Pod 'pod1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configMap2105_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 │         name: configmap1
  12 │     volumeMounts:
  13 │     - name: config-vol1
  14 │       mountPath: /tmp/config/ProjectApp
  15 └       subPath: ProjectApp
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configMap2105_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 │         name: configmap1
  12 │     volumeMounts:
  13 │     - name: config-vol1
  14 │       mountPath: /tmp/config/ProjectApp
  15 └       subPath: ProjectApp
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "c1" of pod "pod1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configMap2105_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 │         name: configmap1
  12 │     volumeMounts:
  13 │     - name: config-vol1
  14 │       mountPath: /tmp/config/ProjectApp
  15 └       subPath: ProjectApp
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configMap2105_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 │         name: configmap1
  12 │     volumeMounts:
  13 │     - name: config-vol1
  14 │       mountPath: /tmp/config/ProjectApp
  15 └       subPath: ProjectApp
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pod1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configMap2105_1.yaml:4
────────────────────────────────────────
   4 [   name: pod1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configMap2105_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: c1
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 │         name: configmap1
  12 │     volumeMounts:
  13 │     - name: config-vol1
  14 │       mountPath: /tmp/config/ProjectApp
  15 └       subPath: ProjectApp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configMap2105_1.yaml:6-19
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: c1
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 │         name: configmap1
  12 │     volumeMounts:
  13 │     - name: config-vol1
  14 └       mountPath: /tmp/config/ProjectApp
  ..   
────────────────────────────────────────



configMap268.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'env-bookwyrm' in 'bookwyrm' namespace stores sensitive contents in key(s) or value(s) '{"EMAIL", "EMAIL_HOST", "EMAIL_HOST_USER", "EMAIL_PORT", "EMAIL_SENDER_DOMAIN", "EMAIL_SENDER_NAME", "EMAIL_USE_SSL", "EMAIL_USE_TLS", "FLOWER_PORT", "MAX_STREAM_LENGTH", "PGPORT", "REDIS_ACTIVITY_PORT", "REDIS_BROKER_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configMap270.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'assets' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configMap271.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'carts' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'carts' in 'default' namespace stores secrets in key(s) or value(s) '{"AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-pod.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'cm-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-pod.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'cm-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-pod.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'cm-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-pod.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'cm-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-pod.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'cm-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-pod.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'cm-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-pod.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'cm-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-pod.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'cm-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-pod.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'cm-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-pod.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'cm-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-pod.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'cm-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-pod.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'cm-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-pod.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-pod.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "cm-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-pod.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-pod.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cm-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-pod.yaml:4
────────────────────────────────────────
   4 [   name: cm-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod cm-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cm-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cm-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 └           configMapKeyRef: 
  ..   
────────────────────────────────────────



configmap-pod1.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'webapp' of Pod 'webapp-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'webapp' of Pod 'webapp-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'webapp' of 'pod' 'webapp-1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'webapp' of Pod 'webapp-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'webapp' of Pod 'webapp-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'webapp' of Pod 'webapp-1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'webapp' of Pod 'webapp-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'webapp' of Pod 'webapp-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'webapp' of Pod 'webapp-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'webapp' of Pod 'webapp-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'webapp' of Pod 'webapp-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'webapp' of Pod 'webapp-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "webapp" of pod "webapp-1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod webapp-1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-pod1.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: webapp-1
   6 │   name: webapp-1
   7 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod1.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod webapp-1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod1.yaml:9-16
────────────────────────────────────────
   9 ┌   containers:
  10 │   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────



configmap-pod10.yaml (kubernetes)
=================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-pod10.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'configmap-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-pod10.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'configmap-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-pod10.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-pod10.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-pod10.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-pod10.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-pod10.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-pod10.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-pod10.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-pod10.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-pod10.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-pod10.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-pod10.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "configmap-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-pod10.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-pod10.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-pod10.yaml:4
────────────────────────────────────────
   4 [   name: configmap-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod configmap-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod10.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod10.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 └           configMapKeyRef: 
  ..   
────────────────────────────────────────



configmap-pod11.yaml (kubernetes)
=================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-pod11.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'configmap-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-pod11.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'configmap-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-pod11.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-pod11.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-pod11.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-pod11.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-pod11.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-pod11.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-pod11.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-pod11.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-pod11.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-pod11.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-pod11.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "configmap-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-pod11.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-pod11.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-pod11.yaml:4
────────────────────────────────────────
   4 [   name: configmap-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod configmap-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod11.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod11.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 └           configMapKeyRef: 
  ..   
────────────────────────────────────────



configmap-pod12.yaml (kubernetes)
=================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-pod12.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'configmap-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-pod12.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'configmap-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-pod12.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-pod12.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-pod12.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-pod12.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-pod12.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-pod12.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-pod12.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-pod12.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-pod12.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-pod12.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-pod12.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "configmap-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-pod12.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-pod12.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-pod12.yaml:4
────────────────────────────────────────
   4 [   name: configmap-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod configmap-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod12.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod12.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 └           configMapKeyRef: 
  ..   
────────────────────────────────────────



configmap-pod1_1.yaml (kubernetes)
==================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'webapp-pod' of Pod 'webapp-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'webapp-pod' of Pod 'webapp-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'webapp-pod' of 'pod' 'webapp-2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'webapp-pod' of Pod 'webapp-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'webapp-pod' of Pod 'webapp-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'webapp-pod' of Pod 'webapp-2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'webapp-pod' of Pod 'webapp-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'webapp-pod' of Pod 'webapp-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'webapp-pod' of Pod 'webapp-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'webapp-pod' of Pod 'webapp-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'webapp-pod' of Pod 'webapp-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'webapp-pod' of Pod 'webapp-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "webapp-pod" of pod "webapp-2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod webapp-2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-pod1_1.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: webapp-2
   6 │   name: webapp-2
   7 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod1_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod webapp-2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod1_1.yaml:9-19
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 └         configMapKeyRef:
  ..   
────────────────────────────────────────



configmap-pod2.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'cm-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-pod2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'cm-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-pod2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'cm-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-pod2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'cm-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-pod2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'cm-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-pod2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'cm-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-pod2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'cm-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-pod2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'cm-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-pod2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'cm-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-pod2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'cm-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-pod2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'cm-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-pod2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'cm-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-pod2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-pod2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "cm-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-pod2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-pod2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cm-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-pod2.yaml:4
────────────────────────────────────────
   4 [   name: cm-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod cm-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cm-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-config 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cm-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod2.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 └           configMapKeyRef: 
  ..   
────────────────────────────────────────



configmap-pod3.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'webapp' of Pod 'webapp-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-pod3.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'webapp' of Pod 'webapp-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-pod3.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'webapp' of 'pod' 'webapp-1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-pod3.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'webapp' of Pod 'webapp-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-pod3.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'webapp' of Pod 'webapp-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-pod3.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'webapp' of Pod 'webapp-1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-pod3.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'webapp' of Pod 'webapp-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-pod3.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'webapp' of Pod 'webapp-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-pod3.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'webapp' of Pod 'webapp-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-pod3.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'webapp' of Pod 'webapp-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-pod3.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'webapp' of Pod 'webapp-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-pod3.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'webapp' of Pod 'webapp-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-pod3.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-pod3.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "webapp" of pod "webapp-1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-pod3.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-pod3.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod webapp-1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-pod3.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: webapp-1
   6 │   name: webapp-1
   7 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod3.yaml:10-16
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod webapp-1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod3.yaml:9-16
────────────────────────────────────────
   9 ┌   containers:
  10 │   - image: nginx
  11 │     name: webapp
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: app-config
────────────────────────────────────────



configmap-pod3_1.yaml (kubernetes)
==================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'webapp-pod' of Pod 'webapp-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-pod3_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'webapp-pod' of Pod 'webapp-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-pod3_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'webapp-pod' of 'pod' 'webapp-2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-pod3_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'webapp-pod' of Pod 'webapp-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-pod3_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'webapp-pod' of Pod 'webapp-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-pod3_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'webapp-pod' of Pod 'webapp-2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-pod3_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'webapp-pod' of Pod 'webapp-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-pod3_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'webapp-pod' of Pod 'webapp-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-pod3_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'webapp-pod' of Pod 'webapp-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-pod3_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'webapp-pod' of Pod 'webapp-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-pod3_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'webapp-pod' of Pod 'webapp-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-pod3_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'webapp-pod' of Pod 'webapp-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-pod3_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-pod3_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "webapp-pod" of pod "webapp-2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-pod3_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-pod3_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod webapp-2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-pod3_1.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: webapp-2
   6 │   name: webapp-2
   7 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod3_1.yaml:10-19
────────────────────────────────────────
  10 ┌   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 │         configMapKeyRef:
  18 │           name: app-config
  19 └           key: APP_GROUP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod webapp-2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod3_1.yaml:9-19
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: webapp-pod
  11 │     image: nginx
  12 │     ports:
  13 │     - containerPort: 8080
  14 │     env:
  15 │     - name: APP_GROUP
  16 │       valueFrom:
  17 └         configMapKeyRef:
  ..   
────────────────────────────────────────



configmap-pod4.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-pod4.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'configmap-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-pod4.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'configmap-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-pod4.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-pod4.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-pod4.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-pod4.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-pod4.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-pod4.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-pod4.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-pod4.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-pod4.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-pod4.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-pod4.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "configmap-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-pod4.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-pod4.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-pod4.yaml:4
────────────────────────────────────────
   4 [   name: configmap-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod configmap-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod4.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod4.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 └           configMapKeyRef: 
  ..   
────────────────────────────────────────



configmap-pod5.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-pod5.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'configmap-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-pod5.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'configmap-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-pod5.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-pod5.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-pod5.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-pod5.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-pod5.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-pod5.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-pod5.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-pod5.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-pod5.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-pod5.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-pod5.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "configmap-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-pod5.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-pod5.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-pod5.yaml:4
────────────────────────────────────────
   4 [   name: configmap-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod configmap-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod5.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod5.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 └           configMapKeyRef: 
  ..   
────────────────────────────────────────



configmap-pod6.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-pod6.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'configmap-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-pod6.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'configmap-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-pod6.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-pod6.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-pod6.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-pod6.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-pod6.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-pod6.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-pod6.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-pod6.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-pod6.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-pod6.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-pod6.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "configmap-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-pod6.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-pod6.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-pod6.yaml:4
────────────────────────────────────────
   4 [   name: configmap-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod configmap-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod6.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod6.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 └           configMapKeyRef: 
  ..   
────────────────────────────────────────



configmap-pod7.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-pod7.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'configmap-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-pod7.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'configmap-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-pod7.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-pod7.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-pod7.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-pod7.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-pod7.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-pod7.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-pod7.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-pod7.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-pod7.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-pod7.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-pod7.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "configmap-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-pod7.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-pod7.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-pod7.yaml:4
────────────────────────────────────────
   4 [   name: configmap-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod configmap-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod7.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod7.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 └           configMapKeyRef: 
  ..   
────────────────────────────────────────



configmap-pod8.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-pod8.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'configmap-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-pod8.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'configmap-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-pod8.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-pod8.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-pod8.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-pod8.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-pod8.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-pod8.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-pod8.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-pod8.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-pod8.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-pod8.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-pod8.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "configmap-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-pod8.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-pod8.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-pod8.yaml:4
────────────────────────────────────────
   4 [   name: configmap-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod configmap-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod8.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod8.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 └           configMapKeyRef: 
  ..   
────────────────────────────────────────



configmap-pod9.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-pod9.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'configmap-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-pod9.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'configmap-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-pod9.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-pod9.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-pod9.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-pod9.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-pod9.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-pod9.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-pod9.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-pod9.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-pod9.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-pod9.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-pod9.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "configmap-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-pod9.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-pod9.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-pod9.yaml:4
────────────────────────────────────────
   4 [   name: configmap-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod configmap-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod9.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 │           configMapKeyRef: 
  15 │             name: my-configmap 
  16 └             key: mydata
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-pod9.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx
   8 │     image: nginx
   9 │     ports:
  10 │     - containerPort: 80
  11 │     env:
  12 │       - name: cm
  13 │         valueFrom:
  14 └           configMapKeyRef: 
  ..   
────────────────────────────────────────



configmap-postgres.yaml (kubernetes)
====================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'postgres-secret' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-postgres1.yaml (kubernetes)
=====================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'postgres-secret' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-postgres2.yaml (kubernetes)
=====================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'database-config' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-postgresql.yaml (kubernetes)
======================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'postgresql-config' in 'mini-ecommerce' namespace stores sensitive contents in key(s) or value(s) '{"POSTGRES_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-products.yaml (kubernetes)
====================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'products-config' in 'mini-ecommerce' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-qa.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'devops-app' in 'devops-qa' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT", "PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 configmap-qa.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



configmap-rabbitmq.yaml (kubernetes)
====================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-config' in 'mini-ecommerce' namespace stores sensitive contents in key(s) or value(s) '{"RABBITMQ_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-role.yaml (kubernetes)
================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'config-updater-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 configmap-role.yaml:7-9
────────────────────────────────────────
   7 ┌ - apiGroups: [""]
   8 │   resources: ["configmaps"]
   9 └   verbs: ["get", "list", "watch", "update"]
────────────────────────────────────────



configmap-secret-app.yaml (kubernetes)
======================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'app-cm' in 'events-ns' namespace stores sensitive contents in key(s) or value(s) '{"SUPERUSER_EMAIL", "SUPERUSER_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-sistema-noticias.yaml (kubernetes)
============================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'cm-sistema-noticias' in 'default' namespace stores secrets in key(s) or value(s) '{"PASS_DB"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-telegraf.yaml (kubernetes)
====================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'telegraf-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"  username "}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'telegraf-config' in 'default' namespace stores secrets in key(s) or value(s) '{"  password "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-telegraf1.yaml (kubernetes)
=====================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'telegraf-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"  username "}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'telegraf-config' in 'default' namespace stores secrets in key(s) or value(s) '{"  password "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-test_1.yaml (kubernetes)
==================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'special-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"log_level"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-usage-pod.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'configmap-usage' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-usage-pod.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: my-container
  14 │       image: nginx:latest 
  15 │       env:
  16 │         - name: envname
  17 │           valueFrom:
  18 │             configMapKeyRef:
  19 │               name: cm-one
  20 └               key: name
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'configmap-usage' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-usage-pod.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: my-container
  14 │       image: nginx:latest 
  15 │       env:
  16 │         - name: envname
  17 │           valueFrom:
  18 │             configMapKeyRef:
  19 │               name: cm-one
  20 └               key: name
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'configmap-usage' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-usage-pod.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: my-container
  14 │       image: nginx:latest 
  15 │       env:
  16 │         - name: envname
  17 │           valueFrom:
  18 │             configMapKeyRef:
  19 │               name: cm-one
  20 └               key: name
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'configmap-usage' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-usage-pod.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: my-container
  14 │       image: nginx:latest 
  15 │       env:
  16 │         - name: envname
  17 │           valueFrom:
  18 │             configMapKeyRef:
  19 │               name: cm-one
  20 └               key: name
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'configmap-usage' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-usage-pod.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: my-container
  14 │       image: nginx:latest 
  15 │       env:
  16 │         - name: envname
  17 │           valueFrom:
  18 │             configMapKeyRef:
  19 │               name: cm-one
  20 └               key: name
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'configmap-usage' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap-usage-pod.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: my-container
  14 │       image: nginx:latest 
  15 │       env:
  16 │         - name: envname
  17 │           valueFrom:
  18 │             configMapKeyRef:
  19 │               name: cm-one
  20 └               key: name
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'configmap-usage' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-usage-pod.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: my-container
  14 │       image: nginx:latest 
  15 │       env:
  16 │         - name: envname
  17 │           valueFrom:
  18 │             configMapKeyRef:
  19 │               name: cm-one
  20 └               key: name
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'configmap-usage' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-usage-pod.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: my-container
  14 │       image: nginx:latest 
  15 │       env:
  16 │         - name: envname
  17 │           valueFrom:
  18 │             configMapKeyRef:
  19 │               name: cm-one
  20 └               key: name
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'configmap-usage' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-usage-pod.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: my-container
  14 │       image: nginx:latest 
  15 │       env:
  16 │         - name: envname
  17 │           valueFrom:
  18 │             configMapKeyRef:
  19 │               name: cm-one
  20 └               key: name
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'configmap-usage' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-usage-pod.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: my-container
  14 │       image: nginx:latest 
  15 │       env:
  16 │         - name: envname
  17 │           valueFrom:
  18 │             configMapKeyRef:
  19 │               name: cm-one
  20 └               key: name
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'configmap-usage' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-usage-pod.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: my-container
  14 │       image: nginx:latest 
  15 │       env:
  16 │         - name: envname
  17 │           valueFrom:
  18 │             configMapKeyRef:
  19 │               name: cm-one
  20 └               key: name
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'configmap-usage' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-usage-pod.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: my-container
  14 │       image: nginx:latest 
  15 │       env:
  16 │         - name: envname
  17 │           valueFrom:
  18 │             configMapKeyRef:
  19 │               name: cm-one
  20 └               key: name
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-usage-pod.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: my-container
  14 │       image: nginx:latest 
  15 │       env:
  16 │         - name: envname
  17 │           valueFrom:
  18 │             configMapKeyRef:
  19 │               name: cm-one
  20 └               key: name
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "configmap-usage" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-usage-pod.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: my-container
  14 │       image: nginx:latest 
  15 │       env:
  16 │         - name: envname
  17 │           valueFrom:
  18 │             configMapKeyRef:
  19 │               name: cm-one
  20 └               key: name
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-usage-pod.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: my-container
  14 │       image: nginx:latest 
  15 │       env:
  16 │         - name: envname
  17 │           valueFrom:
  18 │             configMapKeyRef:
  19 │               name: cm-one
  20 └               key: name
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-usage in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-usage-pod.yaml:10
────────────────────────────────────────
  10 [   name: configmap-usage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-usage in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-usage-pod.yaml:13-20
────────────────────────────────────────
  13 ┌     - name: my-container
  14 │       image: nginx:latest 
  15 │       env:
  16 │         - name: envname
  17 │           valueFrom:
  18 │             configMapKeyRef:
  19 │               name: cm-one
  20 └               key: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-usage in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-usage-pod.yaml:12-20
────────────────────────────────────────
  12 ┌   containers:
  13 │     - name: my-container
  14 │       image: nginx:latest 
  15 │       env:
  16 │         - name: envname
  17 │           valueFrom:
  18 │             configMapKeyRef:
  19 │               name: cm-one
  20 └               key: name
────────────────────────────────────────



configmap-v1.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'mysql-config' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-validation-keys-invalid-oss.yaml (kubernetes)
=======================================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'nginx-config' in 'nginx-ingress' namespace stores secrets in key(s) or value(s) '{"server-tokens"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-validation-keys-oss.yaml (kubernetes)
===============================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'nginx-config' in 'nginx-ingress' namespace stores secrets in key(s) or value(s) '{"server-tokens"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-validation-keys.yaml (kubernetes)
===========================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nginx-config' in 'nginx-ingress' namespace stores sensitive contents in key(s) or value(s) '{"variables-hash-bucket-size", "variables-hash-max-size"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'nginx-config' in 'nginx-ingress' namespace stores secrets in key(s) or value(s) '{"server-tokens"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-vault-integration.yaml (kubernetes)
=============================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'vault-integration-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"                # echo \"Exporting variable", "                echo \"$key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'vault-integration-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"        echo \"Incorrect token", "    HTTP_STATUS_CODE=$(curl -s --location \"$VAULT_ADDRESS\" --header \"X-Vault-Token", "    VAULT_HEADER=\"X-Vault-Token", "    VAULT_TOKEN"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-vault.yaml (kubernetes)
=================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-configmap-vault' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"AWS_ACCESS_KEY_ID", "aws-access-key-id", "aws-access-key-id-formatted", "aws-access-key-id-inline"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'test-configmap-vault' in 'default' namespace stores secrets in key(s) or value(s) '{"AWS_ACCESS_KEY_ID"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap-volume_1.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web-server' of Pod 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap-volume_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: nginx:alpine
   8 │     name: web-server
   9 │     volumeMounts:
  10 │     - mountPath: /etc/nginx/conf.d
  11 │       name: config
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web-server' of Pod 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap-volume_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: nginx:alpine
   8 │     name: web-server
   9 │     volumeMounts:
  10 │     - mountPath: /etc/nginx/conf.d
  11 │       name: config
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web-server' of 'pod' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap-volume_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: nginx:alpine
   8 │     name: web-server
   9 │     volumeMounts:
  10 │     - mountPath: /etc/nginx/conf.d
  11 │       name: config
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web-server' of Pod 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap-volume_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: nginx:alpine
   8 │     name: web-server
   9 │     volumeMounts:
  10 │     - mountPath: /etc/nginx/conf.d
  11 │       name: config
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web-server' of Pod 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap-volume_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: nginx:alpine
   8 │     name: web-server
   9 │     volumeMounts:
  10 │     - mountPath: /etc/nginx/conf.d
  11 │       name: config
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web-server' of Pod 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap-volume_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: nginx:alpine
   8 │     name: web-server
   9 │     volumeMounts:
  10 │     - mountPath: /etc/nginx/conf.d
  11 │       name: config
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web-server' of Pod 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap-volume_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: nginx:alpine
   8 │     name: web-server
   9 │     volumeMounts:
  10 │     - mountPath: /etc/nginx/conf.d
  11 │       name: config
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web-server' of Pod 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap-volume_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: nginx:alpine
   8 │     name: web-server
   9 │     volumeMounts:
  10 │     - mountPath: /etc/nginx/conf.d
  11 │       name: config
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web-server' of Pod 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap-volume_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: nginx:alpine
   8 │     name: web-server
   9 │     volumeMounts:
  10 │     - mountPath: /etc/nginx/conf.d
  11 │       name: config
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web-server' of Pod 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap-volume_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: nginx:alpine
   8 │     name: web-server
   9 │     volumeMounts:
  10 │     - mountPath: /etc/nginx/conf.d
  11 │       name: config
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web-server' of Pod 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap-volume_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: nginx:alpine
   8 │     name: web-server
   9 │     volumeMounts:
  10 │     - mountPath: /etc/nginx/conf.d
  11 │       name: config
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap-volume_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: nginx:alpine
   8 │     name: web-server
   9 │     volumeMounts:
  10 │     - mountPath: /etc/nginx/conf.d
  11 │       name: config
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web-server" of pod "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap-volume_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: nginx:alpine
   8 │     name: web-server
   9 │     volumeMounts:
  10 │     - mountPath: /etc/nginx/conf.d
  11 │       name: config
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap-volume_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: nginx:alpine
   8 │     name: web-server
   9 │     volumeMounts:
  10 │     - mountPath: /etc/nginx/conf.d
  11 │       name: config
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap-volume_1.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-volume_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: nginx:alpine
   8 │     name: web-server
   9 │     volumeMounts:
  10 │     - mountPath: /etc/nginx/conf.d
  11 │       name: config
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap-volume_1.yaml:6-19
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: nginx:alpine
   8 │     name: web-server
   9 │     volumeMounts:
  10 │     - mountPath: /etc/nginx/conf.d
  11 │       name: config
  12 │       readOnly: true
  13 │   volumes:
  14 └   - name: config
  ..   
────────────────────────────────────────



configmap-with-keys1.yaml (kubernetes)
======================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nginx-config' in 'nginx-ingress' namespace stores sensitive contents in key(s) or value(s) '{"keepalive", "max-conns"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-with-keys2.yaml (kubernetes)
======================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nginx-config' in 'nginx-ingress' namespace stores sensitive contents in key(s) or value(s) '{"keepalive", "max-conns"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap-wp.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'configmap-wp' in 'wordpress' namespace stores secrets in key(s) or value(s) '{"WORDPRESS_DB_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap.empty-owner-reference-desired.yaml (kubernetes)
=========================================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test1' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key1"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap.empty-owner-reference.yaml (kubernetes)
=================================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test1' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key1"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap.template.yaml (kubernetes)
====================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'invoiceninja-env' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"APP_KEY", "DB_USERNAME1", "MAIL_ENCRYPTION", "MAIL_FROM_ADDRESS", "MAIL_PORT", "MAIL_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'invoiceninja-env' in 'default' namespace stores secrets in key(s) or value(s) '{"DB_PASSWORD1", "MAIL_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap.template1.yaml (kubernetes)
=====================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'invoiceninja-env' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"APP_KEY", "DB_USERNAME1", "MAIL_ENCRYPTION", "MAIL_FROM_ADDRESS", "MAIL_PORT", "MAIL_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'invoiceninja-env' in 'default' namespace stores secrets in key(s) or value(s) '{"DB_PASSWORD1", "MAIL_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1005.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'postgres-config' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap10110.yaml (kubernetes)
================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'db-config-1' in 'default' namespace stores secrets in key(s) or value(s) '{"DB_PASSWD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap10110_1.yaml (kubernetes)
==================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'configmap-pod-container' of Pod 'configmap-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap10110_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: configmap-pod-container
   8 │     image: mongo:latest
   9 │     env:
  10 │     - name: db_host
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: db-config-1
  14 │           key: DB_HOST
  15 └     - name: db_user
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'configmap-pod-container' of Pod 'configmap-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap10110_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: configmap-pod-container
   8 │     image: mongo:latest
   9 │     env:
  10 │     - name: db_host
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: db-config-1
  14 │           key: DB_HOST
  15 └     - name: db_user
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'configmap-pod-container' of 'pod' 'configmap-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap10110_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: configmap-pod-container
   8 │     image: mongo:latest
   9 │     env:
  10 │     - name: db_host
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: db-config-1
  14 │           key: DB_HOST
  15 └     - name: db_user
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'configmap-pod-container' of Pod 'configmap-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap10110_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: configmap-pod-container
   8 │     image: mongo:latest
   9 │     env:
  10 │     - name: db_host
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: db-config-1
  14 │           key: DB_HOST
  15 └     - name: db_user
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'configmap-pod-container' of Pod 'configmap-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap10110_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: configmap-pod-container
   8 │     image: mongo:latest
   9 │     env:
  10 │     - name: db_host
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: db-config-1
  14 │           key: DB_HOST
  15 └     - name: db_user
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'configmap-pod-container' of Pod 'configmap-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap10110_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: configmap-pod-container
   8 │     image: mongo:latest
   9 │     env:
  10 │     - name: db_host
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: db-config-1
  14 │           key: DB_HOST
  15 └     - name: db_user
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'configmap-pod-container' of Pod 'configmap-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap10110_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: configmap-pod-container
   8 │     image: mongo:latest
   9 │     env:
  10 │     - name: db_host
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: db-config-1
  14 │           key: DB_HOST
  15 └     - name: db_user
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'configmap-pod-container' of Pod 'configmap-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap10110_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: configmap-pod-container
   8 │     image: mongo:latest
   9 │     env:
  10 │     - name: db_host
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: db-config-1
  14 │           key: DB_HOST
  15 └     - name: db_user
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'configmap-pod-container' of Pod 'configmap-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap10110_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: configmap-pod-container
   8 │     image: mongo:latest
   9 │     env:
  10 │     - name: db_host
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: db-config-1
  14 │           key: DB_HOST
  15 └     - name: db_user
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'configmap-pod-container' of Pod 'configmap-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap10110_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: configmap-pod-container
   8 │     image: mongo:latest
   9 │     env:
  10 │     - name: db_host
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: db-config-1
  14 │           key: DB_HOST
  15 └     - name: db_user
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'configmap-pod-container' of Pod 'configmap-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap10110_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: configmap-pod-container
   8 │     image: mongo:latest
   9 │     env:
  10 │     - name: db_host
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: db-config-1
  14 │           key: DB_HOST
  15 └     - name: db_user
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'configmap-pod-container' of Pod 'configmap-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap10110_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: configmap-pod-container
   8 │     image: mongo:latest
   9 │     env:
  10 │     - name: db_host
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: db-config-1
  14 │           key: DB_HOST
  15 └     - name: db_user
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap10110_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: configmap-pod-container
   8 │     image: mongo:latest
   9 │     env:
  10 │     - name: db_host
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: db-config-1
  14 │           key: DB_HOST
  15 └     - name: db_user
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "configmap-pod-container" of pod "configmap-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap10110_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: configmap-pod-container
   8 │     image: mongo:latest
   9 │     env:
  10 │     - name: db_host
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: db-config-1
  14 │           key: DB_HOST
  15 └     - name: db_user
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap10110_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: configmap-pod-container
   8 │     image: mongo:latest
   9 │     env:
  10 │     - name: db_host
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: db-config-1
  14 │           key: DB_HOST
  15 └     - name: db_user
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap10110_1.yaml:4
────────────────────────────────────────
   4 [   name: configmap-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap10110_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: configmap-pod-container
   8 │     image: mongo:latest
   9 │     env:
  10 │     - name: db_host
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: db-config-1
  14 │           key: DB_HOST
  15 └     - name: db_user
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap10110_1.yaml:6-26
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: configmap-pod-container
   8 │     image: mongo:latest
   9 │     env:
  10 │     - name: db_host
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: db-config-1
  14 └           key: DB_HOST
  ..   
────────────────────────────────────────



configmap1022.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'ecr-login-script' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"  --docker-username", "echo -e \"[dvc]\\naws_access_key_id"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'ecr-login-script' in 'default' namespace stores secrets in key(s) or value(s) '{"  --docker-password", "echo -e \"[dvc]\\naws_access_key_id"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1031.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'api-tester-3211-properties' in 'anotherclass-321' namespace stores sensitive contents in key(s) or value(s) '{"application_role"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'api-tester-3211-properties' in 'anotherclass-321' namespace stores secrets in key(s) or value(s) '{"api-token_cluster-url", "api-token_filepath"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1032.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'api-tester-3212-properties' in 'anotherclass-321' namespace stores sensitive contents in key(s) or value(s) '{"application_role"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1033.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'api-tester-3221-properties' in 'anotherclass-322' namespace stores sensitive contents in key(s) or value(s) '{"application_role"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1034.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'api-tester-3222-properties' in 'anotherclass-322' namespace stores sensitive contents in key(s) or value(s) '{"application_role"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1035.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'api-tester-3231-properties' in 'anotherclass-323' namespace stores sensitive contents in key(s) or value(s) '{"application_role", "minio_access_key", "minio_secret_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'api-tester-3231-properties' in 'anotherclass-323' namespace stores secrets in key(s) or value(s) '{"minio_secret_key"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1053.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'infra-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"      USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'infra-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"      PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1056.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'betanin-config' in 'app-betanin' namespace stores sensitive contents in key(s) or value(s) '{"BETANIN_API_KEY", "GID", "UID"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1059.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'slskd-configmap' in 'app-slskd' namespace stores sensitive contents in key(s) or value(s) '{"    #     key", "    #   key", "    #   my_api_key", "    username", "  username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'slskd-configmap' in 'app-slskd' namespace stores secrets in key(s) or value(s) '{"    password", "  password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1066.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'my-config' in 'dev' namespace stores sensitive contents in key(s) or value(s) '{"API_KEY"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1069.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'my-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"dataDeploya"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap106_1.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap106_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap106_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nodejs-env' of 'replicaset' 'nodejs-env' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap106_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap106_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap106_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap106_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap106_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap106_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap106_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap106_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap106_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap106_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap106_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nodejs-env" of replicaset "nodejs-env" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap106_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap106_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nodejs-env in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap106_1.yaml:4
────────────────────────────────────────
   4 [   name: nodejs-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodejs-env in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap106_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nodejs-env in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap106_1.yaml:16-23
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nodejs-env in replicaset nodejs-env (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 configmap106_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────



configmap1070.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'mongodb-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1071.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'mongodb-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1074.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-set-env-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key-1", "key-2"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1081.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'adservice' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1082.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cartservice' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"ASPNETCORE_HTTP_PORTS", "PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1083.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'checkoutservice' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"EMAIL_SERVICE_ADDR", "PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1084.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'currencyservice' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1085.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'emailservice' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1087.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'paymentservice' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1088.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'productcatalogservice' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1089.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'recommendationservice' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1090.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'shippingservice' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1091.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'gitea-config' in 'default' namespace stores secrets in key(s) or value(s) '{"GITEA__database__PASSWD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1096.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-configmap' in 'test' namespace stores sensitive contents in key(s) or value(s) '{"key1", "key2"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1100.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nginx-cm' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MY_KEY"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1106.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'postgres-config' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1108.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'coworking-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"DB_PORT", "DB_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1109.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1115.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1119.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1120.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'crud-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1121.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'crud-configmap' in 'crud-node' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1135.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'clinic-configmap' in 'clinic-system' namespace stores sensitive contents in key(s) or value(s) '{"LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_DATA_MONGODB_CORE_MONGOTEMPLATE", "SPRING_DATA_MONGODB_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1144.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"mongodb+srv"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1152.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-set-env-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key-1", "key-2"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1163_1.yaml (kubernetes)
=================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap1163_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap1163_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nodejs-env' of 'replicaset' 'nodejs-env' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap1163_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap1163_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap1163_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap1163_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap1163_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap1163_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap1163_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap1163_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap1163_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap1163_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap1163_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nodejs-env" of replicaset "nodejs-env" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap1163_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap1163_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nodejs-env in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap1163_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nodejs-env
   5 │   labels:
   6 └     name: nodejs-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodejs-env in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap1163_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nodejs-env in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap1163_1.yaml:18-25
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nodejs-env in replicaset nodejs-env (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 configmap1163_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: nodejs-env-config
────────────────────────────────────────



configmap1168.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'multimap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"department"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1169.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-set-env-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key-1", "key-2"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1176.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'multimap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"department"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1177.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-set-env-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key-1", "key-2"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap117_1.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap117_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap117_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'podinfo' of 'deployment' 'podinfo-configmap-env' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap117_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap117_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap117_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-configmap-env' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap117_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap117_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap117_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap117_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap117_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap117_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap117_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap117_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "podinfo" of deployment "podinfo-configmap-env" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap117_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap117_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment podinfo-configmap-env in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap117_1.yaml:4
────────────────────────────────────────
   4 [   name: podinfo-configmap-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container podinfo-configmap-env in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap117_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment podinfo-configmap-env in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap117_1.yaml:15-28
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 └               key: CONFIG_VALUE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container podinfo in deployment podinfo-configmap-env (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 configmap117_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────



configmap117_2.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap117_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap117_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'podinfo' of 'deployment' 'podinfo-configmap-env' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap117_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap117_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap117_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap117_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap117_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap117_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap117_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap117_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap117_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap117_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "podinfo" of deployment "podinfo-configmap-env" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap117_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap117_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment podinfo-configmap-env in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap117_2.yaml:4
────────────────────────────────────────
   4 [   name: podinfo-configmap-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container podinfo-configmap-env in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap117_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment podinfo-configmap-env in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap117_2.yaml:15-28
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 └               key: CONFIG_VALUE
  ..   
────────────────────────────────────────



configmap117_3.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-configmap-volume' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap117_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-volume' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap117_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'podinfo' of 'deployment' 'podinfo-configmap-volume' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap117_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-volume' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap117_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-configmap-volume' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap117_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-configmap-volume' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap117_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'podinfo' of Deployment 'podinfo-configmap-volume' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap117_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-volume' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap117_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-volume' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap117_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-volume' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap117_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-volume' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap117_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-volume' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap117_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap117_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "podinfo" of deployment "podinfo-configmap-volume" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap117_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap117_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment podinfo-configmap-volume in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap117_3.yaml:4
────────────────────────────────────────
   4 [   name: podinfo-configmap-volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container podinfo-configmap-volume in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap117_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment podinfo-configmap-volume in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap117_3.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 │           subPath: config.json
  22 │       volumes:
  23 └       - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container podinfo in deployment podinfo-configmap-volume (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 configmap117_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────



configmap1184.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'springappconfig' in 'test-ns' namespace stores sensitive contents in key(s) or value(s) '{"mongodbusername"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1185.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'springappconfig' in 'test-ns' namespace stores sensitive contents in key(s) or value(s) '{"mongodbusername"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1188.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'netbox-env' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"REDIS_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'netbox-env' in 'default' namespace stores secrets in key(s) or value(s) '{"DB_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1189.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'postgres-secret' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1199.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'payment-config-2' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key", "keyother"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1200.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'postgres-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"POSTGRES_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'postgres-config' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1201.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'api-tester-1231-properties' in 'anotherclass-123' namespace stores sensitive contents in key(s) or value(s) '{"application_role"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1214.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'lab602-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"LISTEN_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1215.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'lab602-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"LISTEN_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1216.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'quotes-api-config' in 'default' namespace stores secrets in key(s) or value(s) '{"DATABASE_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1225.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1230.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'mongodb-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"      const username "}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'mongodb-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"        pwd", "      const password ", "const rootPass "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1231.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1242.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'mysql-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_PASSWORD", "MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1243.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'nginx-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1244_1.yaml (kubernetes)
=================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'configmapcontainer' of Pod 'configmappod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap1244_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'configmapcontainer' of Pod 'configmappod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap1244_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'configmapcontainer' of 'pod' 'configmappod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap1244_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'configmapcontainer' of Pod 'configmappod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap1244_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'configmapcontainer' of Pod 'configmappod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap1244_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'configmapcontainer' of Pod 'configmappod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap1244_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'configmapcontainer' of Pod 'configmappod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap1244_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'configmapcontainer' of Pod 'configmappod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap1244_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'configmapcontainer' of Pod 'configmappod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap1244_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'configmapcontainer' of Pod 'configmappod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap1244_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'configmapcontainer' of Pod 'configmappod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap1244_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'configmapcontainer' of Pod 'configmappod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap1244_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap1244_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "configmapcontainer" of pod "configmappod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap1244_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap1244_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmappod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap1244_1.yaml:4
────────────────────────────────────────
   4 [   name: configmappod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmappod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap1244_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmappod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap1244_1.yaml:6-27
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 └           key: db_server
  ..   
────────────────────────────────────────



configmap1246.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'my-var' in 'default' namespace stores secrets in key(s) or value(s) '{"pass"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1246_1.yaml (kubernetes)
=================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'my-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap1246_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'my-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap1246_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'my-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap1246_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap1246_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap1246_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'my-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap1246_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'my-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap1246_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap1246_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap1246_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap1246_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap1246_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap1246_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap1246_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "my-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap1246_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap1246_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod my-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap1246_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: my-pod
   5 │   labels:
   6 └     app: xyz-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap1246_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         configMapKeyRef:
  17 └           name: my-var
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap1246_1.yaml:8-23
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 └         configMapKeyRef:
  ..   
────────────────────────────────────────



configmap1247.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'backend-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MONGO_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1248_1.yaml (kubernetes)
=================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap1248_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap1248_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'dapi-test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap1248_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap1248_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap1248_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap1248_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap1248_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap1248_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap1248_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap1248_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap1248_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap1248_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap1248_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "dapi-test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap1248_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap1248_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod dapi-test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap1248_1.yaml:4
────────────────────────────────────────
   4 [   name: dapi-test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dapi-test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap1248_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod dapi-test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap1248_1.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 └     - configMapRef:
  ..   
────────────────────────────────────────



configmap1265.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'my-cm' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MY_KEY"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1269.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'mongodb-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"      const username "}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'mongodb-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"        pwd", "      const password ", "const rootPass "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1270.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1275.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'mongodb-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"      const username "}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'mongodb-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"        pwd", "      const password ", "const rootPass "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1276.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap128.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'app-config' in 'development' namespace stores secrets in key(s) or value(s) '{"jwt_secret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1286.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'postgres-secret' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1300.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'app-config' in 'backend' namespace stores sensitive contents in key(s) or value(s) '{"KAFKA_KEY_FILE", "MONGO_KEY_FILE", "MONGO_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1314.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'mongodb-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'mongodb-config' in 'default' namespace stores secrets in key(s) or value(s) '{"password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1320.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'env-injector-webhook-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"        - key", "      - key", "    topologyKey", "  - key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1331.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-set-env-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key-1", "key-2"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1337.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nest-kubernetes-app-config' in 'nest-kubernetes-app' namespace stores sensitive contents in key(s) or value(s) '{"APP_PORT", "DB_PORT", "PGADMIN_DEFAULT_EMAIL"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1352.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'grpc-client' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"JAEGER_AGENT_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1353.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'grpc-server' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"JAEGER_AGENT_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1354.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'http-client' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"JAEGER_AGENT_PORT", "REST_SERVER_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1355.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'http-server' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"JAEGER_AGENT_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap136.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'auth-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1385.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'falco' in 'falco' namespace stores sensitive contents in key(s) or value(s) '{"  client_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1394.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'ingress-nginx-controller' in 'ingress-nginx' namespace stores sensitive contents in key(s) or value(s) '{"proxy-read-timeout", "proxy-send-timeout"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap142.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'db-config' in 'md2pdf' namespace stores sensitive contents in key(s) or value(s) '{"postgres"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1423.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'bifrost-listener-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"LOG_LEVEL"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1424.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'bifrost-queue-broker-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"LOG_LEVEL"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1425.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'bifrost-queue-broker-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"LOG_LEVEL"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1426.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'bifrost-queue-broker-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"LOG_LEVEL"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1427.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'bifrost-queue-broker-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"LOG_LEVEL"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1429.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'microreact-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT", "SMTP_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'microreact-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"SMTP_PASS"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap143.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'queue-config' in 'md2pdf' namespace stores sensitive contents in key(s) or value(s) '{"QUEUE_JOBS_ROUTING_KEY", "QUEUE_STATUS_ROUTING_KEY", "RABBITMQ_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'queue-config' in 'md2pdf' namespace stores secrets in key(s) or value(s) '{"RABBITMQ_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1432.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'sap-web-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1433.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'bifrost-listener-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"LOG_LEVEL"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1434.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'bifrost-queue-broker-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"LOG_LEVEL"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1436.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'microreact-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT", "SMTP_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'microreact-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"SMTP_PASS"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1438.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'sap-web-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1439.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'bifrost-listener-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"LOG_LEVEL"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1440.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'bifrost-queue-broker-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"LOG_LEVEL"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1442.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'microreact-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT", "SMTP_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'microreact-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"SMTP_PASS"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1444.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'sap-web-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1454.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap '' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1458.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap146.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'msvc-usuarios' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"port"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1462.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1463.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-set-env-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key-1", "key-2"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1469.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'odoo-conf' in 'default' namespace stores secrets in key(s) or value(s) '{"admin_passwd ", "db_password "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap146_1.yaml (kubernetes)
================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'msvc-cursos' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"port"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap147.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1470.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'my-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key3"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1472.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cm-sample-python-app' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"db-port"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1475.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'volumes-configmap-pod-container' of Pod 'volumes-configmap-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap1475.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'volumes-configmap-pod-container' of Pod 'volumes-configmap-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap1475.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'volumes-configmap-pod-container' of 'pod' 'volumes-configmap-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap1475.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'volumes-configmap-pod-container' of Pod 'volumes-configmap-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap1475.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'volumes-configmap-pod-container' of Pod 'volumes-configmap-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap1475.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'volumes-configmap-pod-container' of Pod 'volumes-configmap-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap1475.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'volumes-configmap-pod-container' of Pod 'volumes-configmap-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap1475.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'volumes-configmap-pod-container' of Pod 'volumes-configmap-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap1475.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'volumes-configmap-pod-container' of Pod 'volumes-configmap-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap1475.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'volumes-configmap-pod-container' of Pod 'volumes-configmap-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap1475.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'volumes-configmap-pod-container' of Pod 'volumes-configmap-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap1475.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'volumes-configmap-pod-container' of Pod 'volumes-configmap-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap1475.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap1475.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "volumes-configmap-pod-container" of pod "volumes-configmap-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap1475.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap1475.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod volumes-configmap-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap1475.yaml:4
────────────────────────────────────────
   4 [   name: volumes-configmap-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container volumes-configmap-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap1475.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod volumes-configmap-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap1475.yaml:6-21
────────────────────────────────────────
   6 ┌   containers:
   7 │   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
  ..   
────────────────────────────────────────



configmap1482.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'minio-kes-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"  key", "server-config.yaml"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 configmap1482.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



configmap1486.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'my-vars' in 'default' namespace stores secrets in key(s) or value(s) '{"DB_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1487.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'udacity-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"DB_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1506.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1507.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap151.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1511.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1555.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1559.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-set-env-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key-1", "key-2"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1565.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MONGO_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1566.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'tsu-coworking-config-map' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"DB_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1569.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'my-vars' in 'default' namespace stores secrets in key(s) or value(s) '{"DB_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1570_1.yaml (kubernetes)
=================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'configmapcontainer' of Pod 'configmappod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap1570_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'configmapcontainer' of Pod 'configmappod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap1570_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'configmapcontainer' of 'pod' 'configmappod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap1570_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'configmapcontainer' of Pod 'configmappod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap1570_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'configmapcontainer' of Pod 'configmappod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap1570_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'configmapcontainer' of Pod 'configmappod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap1570_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'configmapcontainer' of Pod 'configmappod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap1570_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'configmapcontainer' of Pod 'configmappod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap1570_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'configmapcontainer' of Pod 'configmappod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap1570_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'configmapcontainer' of Pod 'configmappod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap1570_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'configmapcontainer' of Pod 'configmappod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap1570_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'configmapcontainer' of Pod 'configmappod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap1570_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap1570_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "configmapcontainer" of pod "configmappod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap1570_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap1570_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmappod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap1570_1.yaml:4
────────────────────────────────────────
   4 [   name: configmappod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmappod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap1570_1.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 │           key: db_server
  15 └     - name: DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmappod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap1570_1.yaml:6-27
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: configmapcontainer
   8 │     image: nginx
   9 │     env:
  10 │     - name: DB_SERVER
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: myconfigmap
  14 └           key: db_server
  ..   
────────────────────────────────────────



configmap1571.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1573.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1578.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'global-database-config-v2' in 'default' namespace stores secrets in key(s) or value(s) '{"database.password "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1579.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1584.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'my-configmap-pgadmin' in 'kustomize' namespace stores sensitive contents in key(s) or value(s) '{"email"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1585.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'my-configmap' in 'kustomize' namespace stores secrets in key(s) or value(s) '{"pwd"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1586.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'my-configmap' in 'standard' namespace stores sensitive contents in key(s) or value(s) '{"email"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1587.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1591.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1592.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'search-app-config' in 'distributed-systems' namespace stores sensitive contents in key(s) or value(s) '{"MONGO_PORT", "MONGO_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'search-app-config' in 'distributed-systems' namespace stores secrets in key(s) or value(s) '{"MONGO_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1593.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'dispatcher-config' in 'distributed-systems' namespace stores sensitive contents in key(s) or value(s) '{"mongodb"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1594.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'server-1-config' in 'distributed-systems' namespace stores sensitive contents in key(s) or value(s) '{"MONGO_USERNAME", "mongodb"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'server-1-config' in 'distributed-systems' namespace stores secrets in key(s) or value(s) '{"MONGO_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1595.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'server-2-config' in 'distributed-systems' namespace stores sensitive contents in key(s) or value(s) '{"MONGO_USERNAME", "mongodb"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'server-2-config' in 'distributed-systems' namespace stores secrets in key(s) or value(s) '{"MONGO_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1596.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'server-3-config' in 'distributed-systems' namespace stores sensitive contents in key(s) or value(s) '{"MONGO_USERNAME", "mongodb"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'server-3-config' in 'distributed-systems' namespace stores secrets in key(s) or value(s) '{"MONGO_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1598.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'zookeeper-config' in 'kafka' namespace stores sensitive contents in key(s) or value(s) '{"ZOOKEEPER_CLIENT_PORT", "ZOOKEEPER_TICK_TIME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1598_1.yaml (kubernetes)
=================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kafka-config' in 'kafka' namespace stores sensitive contents in key(s) or value(s) '{"KAFKA_ADVERTISED_LISTENERS", "KAFKA_LISTENER_SECURITY_PROTOCOL_MAP"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap160.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'simplebank-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"postgresql"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1600.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'db-env' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"DB_PORT", "DB_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1618.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1622.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1635.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'app-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PMA_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'app-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_PASSWORD", "MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1636.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'mysql-config' in 'web-app' namespace stores secrets in key(s) or value(s) '{"database-password", "database-root-password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1637.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'my-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"mykey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1639.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'envoy-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"  #               key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1666.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kube-lego' in 'kube-lego' namespace stores sensitive contents in key(s) or value(s) '{"lego.email"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1671.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'api-golang-cm' in 'golang-course' namespace stores sensitive contents in key(s) or value(s) '{"REDIS_PORT", "SERVER_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1677.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'mongodb-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1681.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1682.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'mongodb-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"      const username "}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'mongodb-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"        pwd", "      const password ", "const rootPass "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1683.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1693.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'app-config' in 'kubenet' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1701.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'gitlab-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"GITLAB_EMAIL", "GITLAB_EMAIL_REPLY_TO", "GITLAB_INCOMING_EMAIL_ADDRESS", "IMAP_PORT", "REDIS_PORT", "SMTP_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1756.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'customer-config-map' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"db-username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'customer-config-map' in 'default' namespace stores secrets in key(s) or value(s) '{"db-password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1757.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-set-env-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key-1", "key-2"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1763.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'my-vars' in 'default' namespace stores secrets in key(s) or value(s) '{"DB_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1775.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'mongodb-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"      const username "}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'mongodb-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"        pwd", "      const password ", "const rootPass "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1777.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1779.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'my-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"my-config-key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1780.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'node-app' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1781.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'my-vars' in 'default' namespace stores secrets in key(s) or value(s) '{"DB_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1803.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'coworking-env' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"DB_PORT", "DB_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1805.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1808.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1809.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'mongodb-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"      const username "}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'mongodb-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"        pwd", "      const password ", "const rootPass "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1810.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1821.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1824.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1825.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'msvc-usuarios' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"port"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1825_1.yaml (kubernetes)
=================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'msvc-cursos' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"port"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1829.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'auth-backend-env-config' in 'default' namespace stores secrets in key(s) or value(s) '{"JWT_ACCESS_SECRET", "JWT_REFRESH_SECRET", "POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1830.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'chat-backend-env-config' in 'default' namespace stores secrets in key(s) or value(s) '{"MONGO_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1834.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'mailserver-env' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"POSTMASTER_ADDRESS", "SSL_KEY_PATH"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1835.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'env' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"DJANGO_SECRET_KEY"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'env' in 'default' namespace stores secrets in key(s) or value(s) '{"DJANGO_SECRET_KEY", "POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1838_1.yaml (kubernetes)
=================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap1838_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap1838_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nodejs-env' of 'replicaset' 'nodejs-env' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap1838_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap1838_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap1838_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap1838_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap1838_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap1838_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap1838_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap1838_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap1838_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap1838_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap1838_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nodejs-env" of replicaset "nodejs-env" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap1838_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap1838_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nodejs-env in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap1838_1.yaml:4
────────────────────────────────────────
   4 [   name: nodejs-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodejs-env in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap1838_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nodejs-env in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap1838_1.yaml:16-23
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nodejs-env in replicaset nodejs-env (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 configmap1838_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────



configmap1849.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-set-env-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key-1", "key-2"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1856.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'app-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"SPRING_DATASOURCE_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1878.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'my-config' in 'dev' namespace stores sensitive contents in key(s) or value(s) '{"API_KEY"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1885.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-set-env-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key-1", "key-2"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1892.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'todo-app-config' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1894.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cs2-cm' in 'cs2-server' namespace stores sensitive contents in key(s) or value(s) '{"CS2_PORT", "PGID", "PUID", "TV_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 configmap1894.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



configmap1895.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'g5api-cm' in 'get5' namespace stores sensitive contents in key(s) or value(s) '{"PORT", "SQLPORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 configmap1895.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



configmap1897.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'palworld-cm' in 'palworld-server' namespace stores sensitive contents in key(s) or value(s) '{"PGID", "PORT", "PUID", "RCON_PORT", "TZ"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 configmap1897.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



configmap1899.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'mysql' in 'default' namespace stores secrets in key(s) or value(s) '{"#loose-innodb-ft-default-stopword"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1903.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'mysql' in 'default' namespace stores secrets in key(s) or value(s) '{"#loose-innodb-ft-default-stopword"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1904.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nacos' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"nacos.core.auth.default.token.secret.key", "nacos.core.auth.server.identity.key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'nacos' in 'default' namespace stores secrets in key(s) or value(s) '{"db.password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1908_1.yaml (kubernetes)
=================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo' of Pod 'configmap-demo-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap1908_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: demo
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 │     - '3600'
  12 │     env:
  13 │     - name: PLAYER_INITIAL_LIVES
  14 │       valueFrom:
  15 └         configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap1908_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: demo
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 │     - '3600'
  12 │     env:
  13 │     - name: PLAYER_INITIAL_LIVES
  14 │       valueFrom:
  15 └         configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo' of 'pod' 'configmap-demo-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap1908_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: demo
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 │     - '3600'
  12 │     env:
  13 │     - name: PLAYER_INITIAL_LIVES
  14 │       valueFrom:
  15 └         configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap1908_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: demo
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 │     - '3600'
  12 │     env:
  13 │     - name: PLAYER_INITIAL_LIVES
  14 │       valueFrom:
  15 └         configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo' of Pod 'configmap-demo-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap1908_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: demo
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 │     - '3600'
  12 │     env:
  13 │     - name: PLAYER_INITIAL_LIVES
  14 │       valueFrom:
  15 └         configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo' of Pod 'configmap-demo-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap1908_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: demo
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 │     - '3600'
  12 │     env:
  13 │     - name: PLAYER_INITIAL_LIVES
  14 │       valueFrom:
  15 └         configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo' of Pod 'configmap-demo-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap1908_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: demo
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 │     - '3600'
  12 │     env:
  13 │     - name: PLAYER_INITIAL_LIVES
  14 │       valueFrom:
  15 └         configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap1908_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: demo
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 │     - '3600'
  12 │     env:
  13 │     - name: PLAYER_INITIAL_LIVES
  14 │       valueFrom:
  15 └         configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap1908_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: demo
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 │     - '3600'
  12 │     env:
  13 │     - name: PLAYER_INITIAL_LIVES
  14 │       valueFrom:
  15 └         configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap1908_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: demo
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 │     - '3600'
  12 │     env:
  13 │     - name: PLAYER_INITIAL_LIVES
  14 │       valueFrom:
  15 └         configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap1908_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: demo
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 │     - '3600'
  12 │     env:
  13 │     - name: PLAYER_INITIAL_LIVES
  14 │       valueFrom:
  15 └         configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap1908_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: demo
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 │     - '3600'
  12 │     env:
  13 │     - name: PLAYER_INITIAL_LIVES
  14 │       valueFrom:
  15 └         configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap1908_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: demo
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 │     - '3600'
  12 │     env:
  13 │     - name: PLAYER_INITIAL_LIVES
  14 │       valueFrom:
  15 └         configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo" of pod "configmap-demo-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap1908_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: demo
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 │     - '3600'
  12 │     env:
  13 │     - name: PLAYER_INITIAL_LIVES
  14 │       valueFrom:
  15 └         configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap1908_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: demo
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 │     - '3600'
  12 │     env:
  13 │     - name: PLAYER_INITIAL_LIVES
  14 │       valueFrom:
  15 └         configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap1908_1.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap1908_1.yaml:7-26
────────────────────────────────────────
   7 ┌   - name: demo
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 │     - '3600'
  12 │     env:
  13 │     - name: PLAYER_INITIAL_LIVES
  14 │       valueFrom:
  15 └         configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap1908_1.yaml:6-35
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: demo
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 │     - '3600'
  12 │     env:
  13 │     - name: PLAYER_INITIAL_LIVES
  14 └       valueFrom:
  ..   
────────────────────────────────────────



configmap190_1.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap190_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap190_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nodejs-env' of 'replicaset' 'nodejs-env' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap190_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap190_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap190_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap190_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap190_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap190_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap190_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap190_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap190_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap190_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap190_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nodejs-env" of replicaset "nodejs-env" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap190_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap190_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nodejs-env in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap190_1.yaml:4
────────────────────────────────────────
   4 [   name: nodejs-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodejs-env in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap190_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nodejs-env in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap190_1.yaml:16-23
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nodejs-env in replicaset nodejs-env (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 configmap190_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────



configmap191.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-set-env-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key-1", "key-2"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1911.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'db-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"DB_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1913.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'fullstack-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"fakeVal", "username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1916.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'postgresql-cm' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"DB_PORT", "DB_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1929.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'postgres-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'postgres-config' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1938.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'volumes-configmap-pod-container' of Pod 'volumes-configmap-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap1938.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'volumes-configmap-pod-container' of Pod 'volumes-configmap-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap1938.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'volumes-configmap-pod-container' of 'pod' 'volumes-configmap-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap1938.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'volumes-configmap-pod-container' of Pod 'volumes-configmap-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap1938.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'volumes-configmap-pod-container' of Pod 'volumes-configmap-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap1938.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'volumes-configmap-pod-container' of Pod 'volumes-configmap-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap1938.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'volumes-configmap-pod-container' of Pod 'volumes-configmap-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap1938.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'volumes-configmap-pod-container' of Pod 'volumes-configmap-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap1938.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'volumes-configmap-pod-container' of Pod 'volumes-configmap-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap1938.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'volumes-configmap-pod-container' of Pod 'volumes-configmap-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap1938.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'volumes-configmap-pod-container' of Pod 'volumes-configmap-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap1938.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'volumes-configmap-pod-container' of Pod 'volumes-configmap-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap1938.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap1938.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "volumes-configmap-pod-container" of pod "volumes-configmap-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap1938.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap1938.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod volumes-configmap-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap1938.yaml:4
────────────────────────────────────────
   4 [   name: volumes-configmap-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container volumes-configmap-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap1938.yaml:7-14
────────────────────────────────────────
   7 ┌   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod volumes-configmap-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap1938.yaml:6-21
────────────────────────────────────────
   6 ┌   containers:
   7 │   - command:
   8 │     - sleep
   9 │     - '3600'
  10 │     image: busybox
  11 │     name: volumes-configmap-pod-container
  12 │     volumeMounts:
  13 │     - name: volumes-configmap-volume
  14 └       mountPath: /etc/config
  ..   
────────────────────────────────────────



configmap1940.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'example-config' in 'example-namespace' namespace stores sensitive contents in key(s) or value(s) '{"config-key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1943.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'harbor-core' in 'harbor' namespace stores sensitive contents in key(s) or value(s) '{"PORT", "POSTGRESQL_MAX_IDLE_CONNS", "POSTGRESQL_MAX_OPEN_CONNS", "POSTGRESQL_PORT", "POSTGRESQL_USERNAME", "REGISTRY_CREDENTIAL_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'harbor-core' in 'harbor' namespace stores secrets in key(s) or value(s) '{"TOKEN_SERVICE_URL"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1946.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'harbor-registry' in 'harbor' namespace stores secrets in key(s) or value(s) '{"  secret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap1948.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1950.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap1958.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'app-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"APP_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap204.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-set-env-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key-1", "key-2"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap2102.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-configmap2' in 'test2' namespace stores sensitive contents in key(s) or value(s) '{"key1", "key2"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap211.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'ihotraco-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MONGO_INITDB_ROOT_USERNAME", "finance_email", "hotraco_email"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'ihotraco-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"mail-password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap214.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'mongodb-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"      const username "}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'mongodb-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"        pwd", "      const password ", "const rootPass "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap215.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap221.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap258_1.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap258_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap258_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nodejs-env' of 'replicaset' 'nodejs-env' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap258_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap258_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap258_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap258_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap258_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap258_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap258_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap258_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap258_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap258_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap258_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nodejs-env" of replicaset "nodejs-env" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap258_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap258_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nodejs-env in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap258_1.yaml:4
────────────────────────────────────────
   4 [   name: nodejs-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodejs-env in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap258_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nodejs-env in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap258_1.yaml:16-23
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nodejs-env in replicaset nodejs-env (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 configmap258_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────



configmap269_1.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap269_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap269_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'podinfo' of 'deployment' 'podinfo-configmap-env' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap269_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap269_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap269_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-configmap-env' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap269_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap269_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap269_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap269_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap269_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap269_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap269_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap269_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "podinfo" of deployment "podinfo-configmap-env" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap269_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap269_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment podinfo-configmap-env in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap269_1.yaml:4
────────────────────────────────────────
   4 [   name: podinfo-configmap-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container podinfo-configmap-env in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap269_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment podinfo-configmap-env in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap269_1.yaml:15-28
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 └               key: CONFIG_VALUE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container podinfo in deployment podinfo-configmap-env (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 configmap269_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────



configmap269_2.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap269_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap269_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'podinfo' of 'deployment' 'podinfo-configmap-env' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap269_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap269_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap269_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap269_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap269_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap269_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap269_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap269_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-env' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap269_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap269_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "podinfo" of deployment "podinfo-configmap-env" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap269_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap269_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment podinfo-configmap-env in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap269_2.yaml:4
────────────────────────────────────────
   4 [   name: podinfo-configmap-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container podinfo-configmap-env in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap269_2.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: CONFIG_VALUE
  24 └         - name: ANOTHER_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment podinfo-configmap-env in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap269_2.yaml:15-28
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: podinfo
  17 │         image: podinfo:1.17
  18 │         env:
  19 │         - name: CONFIG_VALUE
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 └               key: CONFIG_VALUE
  ..   
────────────────────────────────────────



configmap269_3.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-configmap-volume' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap269_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-volume' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap269_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'podinfo' of 'deployment' 'podinfo-configmap-volume' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap269_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-volume' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap269_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-configmap-volume' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap269_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-configmap-volume' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap269_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'podinfo' of Deployment 'podinfo-configmap-volume' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap269_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-volume' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap269_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-volume' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap269_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-volume' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap269_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-volume' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap269_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'podinfo' of Deployment 'podinfo-configmap-volume' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap269_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap269_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "podinfo" of deployment "podinfo-configmap-volume" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap269_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap269_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment podinfo-configmap-volume in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap269_3.yaml:4
────────────────────────────────────────
   4 [   name: podinfo-configmap-volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container podinfo-configmap-volume in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap269_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment podinfo-configmap-volume in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap269_3.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 │           subPath: config.json
  22 │       volumes:
  23 └       - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container podinfo in deployment podinfo-configmap-volume (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 configmap269_3.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: config-volume
  20 │           mountPath: /etc/config
  21 └           subPath: config.json
────────────────────────────────────────



configmap280.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'app-config' in 'development' namespace stores secrets in key(s) or value(s) '{"jwt_secret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap288.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'auth-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────


