
Report Summary

┌──────────────────────────────────────────────────────┬────────────┬───────────────────┐
│                        Target                        │    Type    │ Misconfigurations │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ .rc-template.yaml                                    │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ .rs-template.yaml                                    │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ .serviceaccount.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ .template.yaml                                       │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ .template1.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-add-node-labels.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-app-configmap.yaml                                 │ kubernetes │         2         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-app-configmap1.yaml                                │ kubernetes │         2         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-app-configmap2.yaml                                │ kubernetes │         2         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-app-configmap3.yaml                                │ kubernetes │         2         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-cluster-autoscaler.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-cluster-autoscaler1.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-cluster-autoscaler1_1.yaml                         │ kubernetes │         3         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-cluster-autoscaler1_2.yaml                         │ kubernetes │         2         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-cluster-autoscaler1_3.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-cluster-autoscaler1_4.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-cluster-autoscaler1_5.yaml                         │ kubernetes │        14         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-cluster-autoscaler_1.yaml                          │ kubernetes │         3         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-cluster-autoscaler_2.yaml                          │ kubernetes │         2         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-cluster-autoscaler_3.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-cluster-autoscaler_4.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-cluster-autoscaler_5.yaml                          │ kubernetes │        14         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-cluster-role.yaml                                  │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-cluster-role1.yaml                                 │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-config.yaml                                        │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-config1.yaml                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-config2.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-config3.yaml                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-config5.yaml                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-config6.yaml                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-config7.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-config8.yaml                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-configmap.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-cronjob.yaml                                       │ kubernetes │        17         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-cronjob1.yaml                                      │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-cronjob2.yaml                                      │ kubernetes │        17         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard1_1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard1_10.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard1_11.yaml                                 │ kubernetes │        14         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard1_12.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard1_13.yaml                                 │ kubernetes │        13         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard1_2.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard1_3.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard1_4.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard1_5.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard1_6.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard1_7.yaml                                  │ kubernetes │         2         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard1_8.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard1_9.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard_10.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard_11.yaml                                  │ kubernetes │        14         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard_12.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard_13.yaml                                  │ kubernetes │        13         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard_2.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard_3.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard_4.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard_5.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard_6.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard_7.yaml                                   │ kubernetes │         2         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard_8.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dashboard_9.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-default-deny-all.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-default-deny-all1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-demo.pv.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-demo.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-demo1.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-demo2.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deny-traffic-inside-namespace1_1.yaml              │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deny-traffic-inside-namespace1_2.yaml              │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deny-traffic-inside-namespace1_3.yaml              │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deny-traffic-inside-namespace_1.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deny-traffic-inside-namespace_2.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deny-traffic-inside-namespace_3.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dep-vn.yaml                                        │ kubernetes │        16         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-dep-vn1.yaml                                       │ kubernetes │        16         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment.yaml                                    │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment1.yaml                                   │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment10.yaml                                  │ kubernetes │        14         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment11.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment12.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment13.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment14.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment15.yaml                                  │ kubernetes │        14         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment16.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment17.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment18.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment19.yaml                                  │ kubernetes │        14         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment2.yaml                                   │ kubernetes │        14         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment20.yaml                                  │ kubernetes │        13         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment21.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment22.yaml                                  │ kubernetes │        13         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment23.yaml                                  │ kubernetes │        17         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment24.yaml                                  │ kubernetes │        16         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment25.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment26.yaml                                  │ kubernetes │        14         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment27.yaml                                  │ kubernetes │        14         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment28.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment29.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment3.yaml                                   │ kubernetes │        13         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment30.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment31.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment32.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment33.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment34.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment35.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment36.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment37.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment38.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment39.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment4.yaml                                   │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment40.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment41.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment42.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment43.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment44.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment5.yaml                                   │ kubernetes │        13         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment6.yaml                                   │ kubernetes │        17         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment7.yaml                                   │ kubernetes │        16         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment8.yaml                                   │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-deployment9.yaml                                   │ kubernetes │        14         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-foo-ns.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-foo-ns1.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-go-client-deployment.yaml                          │ kubernetes │        14         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-go-client-deployment1.yaml                         │ kubernetes │        14         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-go-client-deployment2.yaml                         │ kubernetes │        14         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-go-client-deployment3.yaml                         │ kubernetes │        14         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-high-priority.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-high-priority1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-job.yaml                                           │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-job1.yaml                                          │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-linkerd-deployment.yaml                            │ kubernetes │        14         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-linkerd-deployment1.yaml                           │ kubernetes │        14         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-linkerd-job.yaml                                   │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-linkerd-job1.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-linkerd-job2.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-linkerd-job3.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metric-server.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metric-server_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metric-server_2.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metric-server_3.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metric-server_4.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metric-server_5.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metric-server_6.yaml                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metric-server_7.yaml                               │ kubernetes │        13         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metric-server_8.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metrics-server.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metrics-server1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metrics-server1_1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metrics-server1_2.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metrics-server1_3.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metrics-server1_4.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metrics-server1_5.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metrics-server1_6.yaml                             │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metrics-server1_7.yaml                             │ kubernetes │        13         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metrics-server1_8.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metrics-server_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metrics-server_2.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metrics-server_3.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metrics-server_4.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metrics-server_5.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metrics-server_6.yaml                              │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metrics-server_7.yaml                              │ kubernetes │        13         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-metrics-server_8.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-mongo-secret-sts.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-mongo-secret-sts_1.yaml                            │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-mongo-secret-sts_2.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-mongo-secret.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-mongo-sts.yaml                                     │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-monitoring-ns.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-monitoring-ns1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-monitoring-ns2.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-monitoring-ns3.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-monitoring-ns4.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-mysql-secret.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-mysql-secret1.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-mysql-secret2.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-mysql-secret3.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace10.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace11.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace12.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace13.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace14.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace15.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace16.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace17.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace18.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace19.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace2.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace20.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace21.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace22.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace23.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace24.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace25.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace26.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace27.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace28.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace29.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace3.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace30.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace31.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace32.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace33.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace34.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace35.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace36.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace37.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace38.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace39.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace4.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace40.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace41.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace42.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace43.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace44.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace45.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace46.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace47.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace48.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace49.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace5.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace50.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace51.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace52.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace53.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace54.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace55.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace56.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace57.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace58.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace59.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace6.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace60.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace61.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace62.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace63.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace64.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace65.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace66.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace67.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace68.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace69.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace7.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace70.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace71.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace72.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace73.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace74.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace75.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace76.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace77.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace78.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace79.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace8.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace80.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace81.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace82.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace83.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace84.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace85.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace86.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace87.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace88.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace89.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace9.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace90.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace91.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace92.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace93.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace94.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace95.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace96.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace97.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace98.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace99.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace9_1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespace9_2.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces10.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces10_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces11.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces11_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces12.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces12_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces12_2.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces12_3.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces13.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces13_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces14.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces14_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces14_2.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces14_3.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces14_4.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces15.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces15_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces16.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces16_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces16_2.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces16_3.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces17.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces17_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces18.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces18_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces19.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces19_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces19_2.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces19_3.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces1_1.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces1_2.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces1_3.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces2.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces20.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces20_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces21.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces21_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces22.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces22_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces23.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces23_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces24.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces24_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces24_2.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces24_3.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces25.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces25_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces26.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces26_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces27.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces27_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces27_2.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces27_3.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces28.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces28_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces29.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces29_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces2_1.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces3.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces30.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces30_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces30_2.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces30_3.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces31.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces31_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces32.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces32_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces33.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces33_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces33_2.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces33_3.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces34.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces34_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces35.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces35_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces36.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces36_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces36_2.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces36_3.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces37.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces37_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces3_1.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces3_2.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces3_3.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces4.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces4_1.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces5.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces5_1.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces5_2.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces5_3.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces6.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces6_1.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces7.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces7_1.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces7_2.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces7_3.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces8.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces8_1.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces9.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces9_1.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces9_2.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces9_3.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-namespaces_1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-nginx.pod.yaml                                     │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-nginx.serviceaccount.yaml                          │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-node-selector.yaml                                 │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-node-selector1.yaml                                │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-ns.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-ns1.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-pod.yaml                                           │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-pod1.yaml                                          │ kubernetes │        34         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-pod10.yaml                                         │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-pod2.yaml                                          │ kubernetes │        33         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-pod3.yaml                                          │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-pod3_1.yaml                                        │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-pod3_2.yaml                                        │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-pod3_3.yaml                                        │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-pod3_4.yaml                                        │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-pod4.yaml                                          │ kubernetes │        17         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-pod5.yaml                                          │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-pod6.yaml                                          │ kubernetes │        34         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-pod7.yaml                                          │ kubernetes │        33         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-pod8.yaml                                          │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-pod8_1.yaml                                        │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-pod8_2.yaml                                        │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-pod8_3.yaml                                        │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-pod8_4.yaml                                        │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-pod9.yaml                                          │ kubernetes │        17         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-pv-for-pg-ha.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-pv-hostpath.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-pvc.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-pvc1.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac1.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac10.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac10_1.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac10_2.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac10_3.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac10_4.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac11.yaml                                        │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac11_1.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac12.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac12_1.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac13.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac13_1.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac13_2.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac14.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac14_1.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac15.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac15_1.yaml                                      │ kubernetes │         7         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac15_2.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac16.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac16_1.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac16_2.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac17.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac17_1.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac17_2.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac17_3.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac17_4.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac18.yaml                                        │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac18_1.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac19.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac19_1.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac1_1.yaml                                       │ kubernetes │         7         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac1_2.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac2.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac20.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac20_1.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac20_2.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac2_1.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac2_2.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac3.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac3_1.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac3_2.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac3_3.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac3_4.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac4.yaml                                         │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac4_1.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac5.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac5_1.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac6.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac6_1.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac6_2.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac7.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac7_1.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac8.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac8_1.yaml                                       │ kubernetes │         7         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac8_2.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac9.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac9_1.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac9_2.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-rbac_1.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-req-limits.yaml                                    │ kubernetes │        13         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-req-limits1.yaml                                   │ kubernetes │        13         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-role-binding.yaml                                  │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-role-binding1.yaml                                 │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-role.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-role1.yaml                                         │ kubernetes │         2         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-role2.yaml                                         │ kubernetes │         2         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-role3.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-role4.yaml                                         │ kubernetes │         2         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-role5.yaml                                         │ kubernetes │         2         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-secret.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-secret1.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-secret2.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-secret3.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-secret4.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-secret5.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-secret6.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-sercret.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-a-linkerd.yaml                             │ kubernetes │        14         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-a-linkerd1.yaml                            │ kubernetes │        14         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-a-ns.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-a-ns1.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account10.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account11.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account12.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account13.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account14.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account15.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account16.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account17.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account18.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account19.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account2.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account20.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account21.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account22.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account23.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account24.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account25.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account26.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account27.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account28.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account29.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account3.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account30.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account31.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account32.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account33.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account34.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account35.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account36.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account37.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account38.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account39.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account4.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account40.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account41.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account42.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account43.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account44.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account45.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account46.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account47.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account48.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account49.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account5.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account50.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account51.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account52.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account53.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account54.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account55.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account56.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account57.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account58.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account59.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account6.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account60.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account61.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account62.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account63.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account64.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account65.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account66.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account67.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account68.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account69.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account7.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account70.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account71.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account72.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account73.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account74.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account75.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account76.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account77.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account78.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account79.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account8.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account80.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account81.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account82.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account83.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account84.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-service-account9.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-serviceaccount.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-serviceaccount1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-staging-ns.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-staging-ns1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-staging-ns2.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-staging-ns3.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-statefulset.yaml                                   │ kubernetes │        19         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-statefulset1.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-statefulset2.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-statefulset3.yaml                                  │ kubernetes │        19         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-statefulset4.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-statefulset5.yaml                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-storage.kafka.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-storage.kafka_1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-storage.kafka_2.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-storageclass.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-storageclass1.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-toleration.yaml                                    │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-toleration1.yaml                                   │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-volumes.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-volumes_1.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-volumes_2.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 0-volumes_3.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-DeplyExternalDNS.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-DeplyExternalDNS_1.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-DeplyExternalDNS_2.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-DeplyExternalDNS_3.yaml                           │ kubernetes │        16         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-EFS-StorageClass.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-all-custom-namespaces.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-all-custom-namespaces_1.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-app-namespace.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert1.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert10.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert10_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert10_2.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert11.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert11_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert11_2.yaml                                   │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert12.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert12_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert12_2.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert1_1.yaml                                    │ kubernetes │         2         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert21_1.yaml                                   │ kubernetes │        16         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert22_1.yaml                                   │ kubernetes │        16         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert23_1.yaml                                   │ kubernetes │        16         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert24.yaml                                     │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert25_1.yaml                                   │ kubernetes │        16         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert3.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert3_1.yaml                                    │ kubernetes │         2         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert4.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert4_1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert4_2.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert5.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert5_1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert5_2.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert5_3.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert5_4.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert5_5.yaml                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert5_6.yaml                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert5_7.yaml                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-assert5_8.yaml                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-busybox.yaml                                      │ kubernetes │        17         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-caddy.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-caddy1.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-caddy1_1.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-caddy1_2.yaml                                     │ kubernetes │        16         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-caddy1_3.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-caddy1_4.yaml                                     │ kubernetes │        17         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-caddy_1.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-caddy_2.yaml                                      │ kubernetes │        16         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-caddy_3.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-caddy_4.yaml                                      │ kubernetes │        17         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-common.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-common1.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-common1_1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-common_1.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-common_2.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-config.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-config1.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-config2.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-config3.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-config4.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-configmap-currency-conversion.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-configmap-currency-conversion1.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-configmap-currency-conversion3.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-configmap-currency-conversion4.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-configmap-currency-conversion6.yaml               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-configmap.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-db-secret.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-db.yaml                                           │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-db_1.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-db_2.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-db_3.yaml                                         │ kubernetes │        15         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-deployment.yaml                                   │ kubernetes │        16         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-env-configmap.yaml                                │ kubernetes │         1         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-exporter.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-exporter_1.yaml                                   │ kubernetes │        14         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-filestore-storage-class.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-filestore-storage-class1.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-filestore-storage-class2.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-filestore-storage-class3.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-gauca-namespace.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-helloworld.yaml                                   │ kubernetes │        20         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-helloworld1.yaml                                  │ kubernetes │        20         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-helloworld2.yaml                                  │ kubernetes │        20         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-ingress-class.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-ingress-class1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-ingress-class2.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-ingress-class3.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-ingress-class4.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-ingress-class5.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-ingress-class6.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-ingress-class7.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-kubernetes-namespace.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-kubernetes-namespace1.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-kubernetes-namespace2.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-kubernetes-namespace3.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-kubernetes-namespace4.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-mi-nginx.yaml                                     │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-minio-deployment.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-minio-deployment1.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-minio-deployment1_1.yaml                          │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-minio-deployment1_2.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-minio-deployment1_3.yaml                          │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-minio-deployment2.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-minio-deployment2_1.yaml                          │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-minio-deployment2_2.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-minio-deployment2_3.yaml                          │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-minio-deployment3.yaml                            │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-minio-deployment3_1.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-minio-deployment3_2.yaml                          │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-minio-deployment_1.yaml                           │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-minio-deployment_2.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-minio-deployment_3.yaml                           │ kubernetes │        18         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-monitoring-ns.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-monitoring-ns1.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-monitoring-ns2.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-monitoring-ns3.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-monitoring-ns4.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-monitoring-ns5.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace-limit-range-resource-quota-default.yaml │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace17.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace18.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace19.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace2.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace20.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace21.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace22.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace23.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace24.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace25.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace26.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace27.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace28.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace29.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace3.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace30.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace31.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace32.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace33.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace34.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace35.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace36.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace37.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace38.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace39.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace4.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace40.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace41.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace42.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace43.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace44.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespace45.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespaces2.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-namespaces2_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-openshift-monitoring-user-projects.yaml           │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-openshift-monitoring-user-projects1.yaml          │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-persistent-volume.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-persistent-volume1.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-persistent-volume2.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-persistent-volume3.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-persistent-volume4.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-pod.yaml                                          │ kubernetes │        17         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-pod1.yaml                                         │ kubernetes │        17         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-pod2.yaml                                         │ kubernetes │        17         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-pod3.yaml                                         │ kubernetes │        17         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-pod4.yaml                                         │ kubernetes │        17         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-pod5.yaml                                         │ kubernetes │        17         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-postgress-namespace.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prepare.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prepare_1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prereqs.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prereqs1.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prereqs1_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prereqs1_2.yaml                                   │ kubernetes │         6         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prereqs1_3.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prereqs1_4.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prereqs1_5.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prereqs2.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prereqs2_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prereqs2_2.yaml                                   │ kubernetes │         6         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prereqs2_3.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prereqs2_4.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prereqs2_5.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prereqs3.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prereqs3_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prereqs3_2.yaml                                   │ kubernetes │         6         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prereqs3_3.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prereqs3_4.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prereqs3_5.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prereqs4.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prereqs4_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prereqs4_2.yaml                                   │ kubernetes │         6         │
├──────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ 00-prereqs4_3.yaml                                   │ kubernetes │         0         │
└──────────────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


.rc-template.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 .rc-template.yaml:26-27
────────────────────────────────────────
  26 ┌         - name: nginx-container
  27 └           image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 .rc-template.yaml:26-27
────────────────────────────────────────
  26 ┌         - name: nginx-container
  27 └           image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'replicationcontroller' 'myapp-rc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 .rc-template.yaml:26-27
────────────────────────────────────────
  26 ┌         - name: nginx-container
  27 └           image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 .rc-template.yaml:26-27
────────────────────────────────────────
  26 ┌         - name: nginx-container
  27 └           image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 .rc-template.yaml:26-27
────────────────────────────────────────
  26 ┌         - name: nginx-container
  27 └           image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of ReplicationController 'myapp-rc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 .rc-template.yaml:26-27
────────────────────────────────────────
  26 ┌         - name: nginx-container
  27 └           image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 .rc-template.yaml:26-27
────────────────────────────────────────
  26 ┌         - name: nginx-container
  27 └           image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 .rc-template.yaml:26-27
────────────────────────────────────────
  26 ┌         - name: nginx-container
  27 └           image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 .rc-template.yaml:26-27
────────────────────────────────────────
  26 ┌         - name: nginx-container
  27 └           image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 .rc-template.yaml:26-27
────────────────────────────────────────
  26 ┌         - name: nginx-container
  27 └           image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 .rc-template.yaml:26-27
────────────────────────────────────────
  26 ┌         - name: nginx-container
  27 └           image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of ReplicationController 'myapp-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 .rc-template.yaml:26-27
────────────────────────────────────────
  26 ┌         - name: nginx-container
  27 └           image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 .rc-template.yaml:26-27
────────────────────────────────────────
  26 ┌         - name: nginx-container
  27 └           image: nginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of replicationcontroller "myapp-rc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 .rc-template.yaml:26-27
────────────────────────────────────────
  26 ┌         - name: nginx-container
  27 └           image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 .rc-template.yaml:26-27
────────────────────────────────────────
  26 ┌         - name: nginx-container
  27 └           image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller myapp-rc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 .rc-template.yaml:11-14
────────────────────────────────────────
  11 ┌   name: myapp-rc
  12 │   labels:
  13 │     app: myapp
  14 └     type: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-rc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 .rc-template.yaml:26-27
────────────────────────────────────────
  26 ┌         - name: nginx-container
  27 └           image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller myapp-rc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 .rc-template.yaml:25-27
────────────────────────────────────────
  25 ┌       containers:
  26 │         - name: nginx-container
  27 └           image: nginx
────────────────────────────────────────



.rs-template.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of ReplicaSet 'myapp-replicaset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 .rs-template.yaml:35-36
────────────────────────────────────────
  35 ┌         - name: nginx-container
  36 └           image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of ReplicaSet 'myapp-replicaset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 .rs-template.yaml:35-36
────────────────────────────────────────
  35 ┌         - name: nginx-container
  36 └           image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'replicaset' 'myapp-replicaset' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 .rs-template.yaml:35-36
────────────────────────────────────────
  35 ┌         - name: nginx-container
  36 └           image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of ReplicaSet 'myapp-replicaset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 .rs-template.yaml:35-36
────────────────────────────────────────
  35 ┌         - name: nginx-container
  36 └           image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of ReplicaSet 'myapp-replicaset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 .rs-template.yaml:35-36
────────────────────────────────────────
  35 ┌         - name: nginx-container
  36 └           image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of ReplicaSet 'myapp-replicaset' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 .rs-template.yaml:35-36
────────────────────────────────────────
  35 ┌         - name: nginx-container
  36 └           image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of ReplicaSet 'myapp-replicaset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 .rs-template.yaml:35-36
────────────────────────────────────────
  35 ┌         - name: nginx-container
  36 └           image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of ReplicaSet 'myapp-replicaset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 .rs-template.yaml:35-36
────────────────────────────────────────
  35 ┌         - name: nginx-container
  36 └           image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of ReplicaSet 'myapp-replicaset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 .rs-template.yaml:35-36
────────────────────────────────────────
  35 ┌         - name: nginx-container
  36 └           image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of ReplicaSet 'myapp-replicaset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 .rs-template.yaml:35-36
────────────────────────────────────────
  35 ┌         - name: nginx-container
  36 └           image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of ReplicaSet 'myapp-replicaset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 .rs-template.yaml:35-36
────────────────────────────────────────
  35 ┌         - name: nginx-container
  36 └           image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of ReplicaSet 'myapp-replicaset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 .rs-template.yaml:35-36
────────────────────────────────────────
  35 ┌         - name: nginx-container
  36 └           image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 .rs-template.yaml:35-36
────────────────────────────────────────
  35 ┌         - name: nginx-container
  36 └           image: nginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of replicaset "myapp-replicaset" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 .rs-template.yaml:35-36
────────────────────────────────────────
  35 ┌         - name: nginx-container
  36 └           image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 .rs-template.yaml:35-36
────────────────────────────────────────
  35 ┌         - name: nginx-container
  36 └           image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset myapp-replicaset in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 .rs-template.yaml:20-23
────────────────────────────────────────
  20 ┌   name: myapp-replicaset
  21 │   labels:
  22 │     app: myapp
  23 └     type: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-replicaset in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 .rs-template.yaml:35-36
────────────────────────────────────────
  35 ┌         - name: nginx-container
  36 └           image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset myapp-replicaset in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 .rs-template.yaml:34-36
────────────────────────────────────────
  34 ┌       containers:
  35 │         - name: nginx-container
  36 └           image: nginx
────────────────────────────────────────



.template.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of Deployment 'myapp-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 .template.yaml:28-29
────────────────────────────────────────
  28 ┌         - name: nginx-container
  29 └           image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of Deployment 'myapp-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 .template.yaml:28-29
────────────────────────────────────────
  28 ┌         - name: nginx-container
  29 └           image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'deployment' 'myapp-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 .template.yaml:28-29
────────────────────────────────────────
  28 ┌         - name: nginx-container
  29 └           image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of Deployment 'myapp-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 .template.yaml:28-29
────────────────────────────────────────
  28 ┌         - name: nginx-container
  29 └           image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of Deployment 'myapp-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 .template.yaml:28-29
────────────────────────────────────────
  28 ┌         - name: nginx-container
  29 └           image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of Deployment 'myapp-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 .template.yaml:28-29
────────────────────────────────────────
  28 ┌         - name: nginx-container
  29 └           image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of Deployment 'myapp-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 .template.yaml:28-29
────────────────────────────────────────
  28 ┌         - name: nginx-container
  29 └           image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of Deployment 'myapp-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 .template.yaml:28-29
────────────────────────────────────────
  28 ┌         - name: nginx-container
  29 └           image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of Deployment 'myapp-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 .template.yaml:28-29
────────────────────────────────────────
  28 ┌         - name: nginx-container
  29 └           image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of Deployment 'myapp-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 .template.yaml:28-29
────────────────────────────────────────
  28 ┌         - name: nginx-container
  29 └           image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of Deployment 'myapp-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 .template.yaml:28-29
────────────────────────────────────────
  28 ┌         - name: nginx-container
  29 └           image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of Deployment 'myapp-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 .template.yaml:28-29
────────────────────────────────────────
  28 ┌         - name: nginx-container
  29 └           image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 .template.yaml:28-29
────────────────────────────────────────
  28 ┌         - name: nginx-container
  29 └           image: nginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of deployment "myapp-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 .template.yaml:28-29
────────────────────────────────────────
  28 ┌         - name: nginx-container
  29 └           image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 .template.yaml:28-29
────────────────────────────────────────
  28 ┌         - name: nginx-container
  29 └           image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myapp-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 .template.yaml:13-16
────────────────────────────────────────
  13 ┌   name: myapp-deployment
  14 │   labels:
  15 │     app: myapp
  16 └     type: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 .template.yaml:28-29
────────────────────────────────────────
  28 ┌         - name: nginx-container
  29 └           image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myapp-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 .template.yaml:27-29
────────────────────────────────────────
  27 ┌       containers:
  28 │         - name: nginx-container
  29 └           image: nginx
────────────────────────────────────────



0-app-configmap.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'go-app' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"config.yaml"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 0-app-configmap.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'go-app' in 'default' namespace stores secrets in key(s) or value(s) '{"  password", "  secret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────
 0-app-configmap.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



0-app-configmap1.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'python-app' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"config.yaml"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 0-app-configmap1.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'python-app' in 'default' namespace stores secrets in key(s) or value(s) '{"  password", "  secret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────
 0-app-configmap1.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



0-app-configmap2.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'go-app' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"config.yaml"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 0-app-configmap2.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'go-app' in 'default' namespace stores secrets in key(s) or value(s) '{"  password", "  secret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────
 0-app-configmap2.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



0-app-configmap3.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'python-app' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"config.yaml"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 0-app-configmap3.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'python-app' in 'default' namespace stores secrets in key(s) or value(s) '{"  password", "  secret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────
 0-app-configmap3.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



0-cluster-autoscaler1_1.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 0-cluster-autoscaler1_1.yaml:94-103
────────────────────────────────────────
  94 ┌ - apiGroups:
  95 │   - batch
  96 │   - extensions
  97 │   resources:
  98 │   - jobs
  99 │   verbs:
 100 │   - get
 101 │   - list
 102 │   - watch
 103 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 0-cluster-autoscaler1_1.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 0-cluster-autoscaler1_1.yaml:29-37
────────────────────────────────────────
  29 ┌ - apiGroups:
  30 │   - ''
  31 │   resources:
  32 │   - endpoints
  33 │   resourceNames:
  34 │   - cluster-autoscaler
  35 │   verbs:
  36 │   - get
  37 └   - update
────────────────────────────────────────



0-cluster-autoscaler1_2.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 0-cluster-autoscaler1_2.yaml:10-17
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 │   - create
  16 │   - list
  17 └   - watch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 0-cluster-autoscaler1_2.yaml:18-29
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - configmaps
  22 │   resourceNames:
  23 │   - cluster-autoscaler-status
  24 │   - cluster-autoscaler-priority-expander
  25 │   verbs:
  26 └   - delete
  ..   
────────────────────────────────────────



0-cluster-autoscaler1_5.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-cluster-autoscaler1_5.yaml:22-45
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.20.0
  23 │         name: cluster-autoscaler
  24 │         resources:
  25 │           limits:
  26 │             cpu: 100m
  27 │             memory: 300Mi
  28 │           requests:
  29 │             cpu: 100m
  30 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-cluster-autoscaler1_5.yaml:22-45
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.20.0
  23 │         name: cluster-autoscaler
  24 │         resources:
  25 │           limits:
  26 │             cpu: 100m
  27 │             memory: 300Mi
  28 │           requests:
  29 │             cpu: 100m
  30 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-cluster-autoscaler1_5.yaml:22-45
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.20.0
  23 │         name: cluster-autoscaler
  24 │         resources:
  25 │           limits:
  26 │             cpu: 100m
  27 │             memory: 300Mi
  28 │           requests:
  29 │             cpu: 100m
  30 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-cluster-autoscaler1_5.yaml:22-45
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.20.0
  23 │         name: cluster-autoscaler
  24 │         resources:
  25 │           limits:
  26 │             cpu: 100m
  27 │             memory: 300Mi
  28 │           requests:
  29 │             cpu: 100m
  30 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-cluster-autoscaler1_5.yaml:22-45
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.20.0
  23 │         name: cluster-autoscaler
  24 │         resources:
  25 │           limits:
  26 │             cpu: 100m
  27 │             memory: 300Mi
  28 │           requests:
  29 │             cpu: 100m
  30 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-cluster-autoscaler1_5.yaml:22-45
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.20.0
  23 │         name: cluster-autoscaler
  24 │         resources:
  25 │           limits:
  26 │             cpu: 100m
  27 │             memory: 300Mi
  28 │           requests:
  29 │             cpu: 100m
  30 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-cluster-autoscaler1_5.yaml:22-45
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.20.0
  23 │         name: cluster-autoscaler
  24 │         resources:
  25 │           limits:
  26 │             cpu: 100m
  27 │             memory: 300Mi
  28 │           requests:
  29 │             cpu: 100m
  30 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 0-cluster-autoscaler1_5.yaml:9-49
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: cluster-autoscaler
  17 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-cluster-autoscaler1_5.yaml:22-45
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.20.0
  23 │         name: cluster-autoscaler
  24 │         resources:
  25 │           limits:
  26 │             cpu: 100m
  27 │             memory: 300Mi
  28 │           requests:
  29 │             cpu: 100m
  30 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 0-cluster-autoscaler1_5.yaml:9-49
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: cluster-autoscaler
  17 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-cluster-autoscaler1_5.yaml:22-45
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.20.0
  23 │         name: cluster-autoscaler
  24 │         resources:
  25 │           limits:
  26 │             cpu: 100m
  27 │             memory: 300Mi
  28 │           requests:
  29 │             cpu: 100m
  30 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-cluster-autoscaler1_5.yaml:22-45
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.20.0
  23 │         name: cluster-autoscaler
  24 │         resources:
  25 │           limits:
  26 │             cpu: 100m
  27 │             memory: 300Mi
  28 │           requests:
  29 │             cpu: 100m
  30 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cluster-autoscaler in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-cluster-autoscaler1_5.yaml:22-45
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.20.0
  23 │         name: cluster-autoscaler
  24 │         resources:
  25 │           limits:
  26 │             cpu: 100m
  27 │             memory: 300Mi
  28 │           requests:
  29 │             cpu: 100m
  30 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cluster-autoscaler in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-cluster-autoscaler1_5.yaml:20-49
────────────────────────────────────────
  20 ┌       serviceAccountName: cluster-autoscaler
  21 │       containers:
  22 │       - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.20.0
  23 │         name: cluster-autoscaler
  24 │         resources:
  25 │           limits:
  26 │             cpu: 100m
  27 │             memory: 300Mi
  28 └           requests:
  ..   
────────────────────────────────────────



0-cluster-autoscaler_1.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'cluster-autoscaler' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 0-cluster-autoscaler_1.yaml:94-103
────────────────────────────────────────
  94 ┌ - apiGroups:
  95 │   - batch
  96 │   - extensions
  97 │   resources:
  98 │   - jobs
  99 │   verbs:
 100 │   - get
 101 │   - list
 102 │   - watch
 103 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 0-cluster-autoscaler_1.yaml:9-16
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - events
  13 │   - endpoints
  14 │   verbs:
  15 │   - create
  16 └   - patch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cluster-autoscaler' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 0-cluster-autoscaler_1.yaml:29-37
────────────────────────────────────────
  29 ┌ - apiGroups:
  30 │   - ''
  31 │   resources:
  32 │   - endpoints
  33 │   resourceNames:
  34 │   - cluster-autoscaler
  35 │   verbs:
  36 │   - get
  37 └   - update
────────────────────────────────────────



0-cluster-autoscaler_2.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 0-cluster-autoscaler_2.yaml:10-17
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   verbs:
  15 │   - create
  16 │   - list
  17 └   - watch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'cluster-autoscaler' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 0-cluster-autoscaler_2.yaml:18-29
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - configmaps
  22 │   resourceNames:
  23 │   - cluster-autoscaler-status
  24 │   - cluster-autoscaler-priority-expander
  25 │   verbs:
  26 └   - delete
  ..   
────────────────────────────────────────



0-cluster-autoscaler_5.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-cluster-autoscaler_5.yaml:22-45
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.20.0
  23 │         name: cluster-autoscaler
  24 │         resources:
  25 │           limits:
  26 │             cpu: 100m
  27 │             memory: 300Mi
  28 │           requests:
  29 │             cpu: 100m
  30 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-cluster-autoscaler_5.yaml:22-45
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.20.0
  23 │         name: cluster-autoscaler
  24 │         resources:
  25 │           limits:
  26 │             cpu: 100m
  27 │             memory: 300Mi
  28 │           requests:
  29 │             cpu: 100m
  30 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-autoscaler' of 'deployment' 'cluster-autoscaler' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-cluster-autoscaler_5.yaml:22-45
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.20.0
  23 │         name: cluster-autoscaler
  24 │         resources:
  25 │           limits:
  26 │             cpu: 100m
  27 │             memory: 300Mi
  28 │           requests:
  29 │             cpu: 100m
  30 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-cluster-autoscaler_5.yaml:22-45
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.20.0
  23 │         name: cluster-autoscaler
  24 │         resources:
  25 │           limits:
  26 │             cpu: 100m
  27 │             memory: 300Mi
  28 │           requests:
  29 │             cpu: 100m
  30 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-cluster-autoscaler_5.yaml:22-45
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.20.0
  23 │         name: cluster-autoscaler
  24 │         resources:
  25 │           limits:
  26 │             cpu: 100m
  27 │             memory: 300Mi
  28 │           requests:
  29 │             cpu: 100m
  30 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-cluster-autoscaler_5.yaml:22-45
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.20.0
  23 │         name: cluster-autoscaler
  24 │         resources:
  25 │           limits:
  26 │             cpu: 100m
  27 │             memory: 300Mi
  28 │           requests:
  29 │             cpu: 100m
  30 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cluster-autoscaler' of Deployment 'cluster-autoscaler' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-cluster-autoscaler_5.yaml:22-45
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.20.0
  23 │         name: cluster-autoscaler
  24 │         resources:
  25 │           limits:
  26 │             cpu: 100m
  27 │             memory: 300Mi
  28 │           requests:
  29 │             cpu: 100m
  30 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'cluster-autoscaler' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 0-cluster-autoscaler_5.yaml:9-49
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: cluster-autoscaler
  17 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-cluster-autoscaler_5.yaml:22-45
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.20.0
  23 │         name: cluster-autoscaler
  24 │         resources:
  25 │           limits:
  26 │             cpu: 100m
  27 │             memory: 300Mi
  28 │           requests:
  29 │             cpu: 100m
  30 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'cluster-autoscaler' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 0-cluster-autoscaler_5.yaml:9-49
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: cluster-autoscaler
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: cluster-autoscaler
  17 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-autoscaler" of deployment "cluster-autoscaler" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-cluster-autoscaler_5.yaml:22-45
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.20.0
  23 │         name: cluster-autoscaler
  24 │         resources:
  25 │           limits:
  26 │             cpu: 100m
  27 │             memory: 300Mi
  28 │           requests:
  29 │             cpu: 100m
  30 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-cluster-autoscaler_5.yaml:22-45
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.20.0
  23 │         name: cluster-autoscaler
  24 │         resources:
  25 │           limits:
  26 │             cpu: 100m
  27 │             memory: 300Mi
  28 │           requests:
  29 │             cpu: 100m
  30 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cluster-autoscaler in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-cluster-autoscaler_5.yaml:22-45
────────────────────────────────────────
  22 ┌       - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.20.0
  23 │         name: cluster-autoscaler
  24 │         resources:
  25 │           limits:
  26 │             cpu: 100m
  27 │             memory: 300Mi
  28 │           requests:
  29 │             cpu: 100m
  30 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cluster-autoscaler in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-cluster-autoscaler_5.yaml:20-49
────────────────────────────────────────
  20 ┌       serviceAccountName: cluster-autoscaler
  21 │       containers:
  22 │       - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.20.0
  23 │         name: cluster-autoscaler
  24 │         resources:
  25 │           limits:
  26 │             cpu: 100m
  27 │             memory: 300Mi
  28 └           requests:
  ..   
────────────────────────────────────────



0-cluster-role.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'test-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 0-cluster-role.yaml:5
────────────────────────────────────────
   5 [   name: test-admin
────────────────────────────────────────



0-cluster-role1.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'test-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 0-cluster-role1.yaml:5
────────────────────────────────────────
   5 [   name: test-admin
────────────────────────────────────────



0-config.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'service-a' in 'golang' namespace stores secrets in key(s) or value(s) '{"secret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────
 0-config.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



0-config1.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'service-b' in 'golang' namespace stores sensitive contents in key(s) or value(s) '{"config.yaml", "mongodbUri"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 0-config1.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



0-config3.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'service-b' in 'nodejs' namespace stores sensitive contents in key(s) or value(s) '{"    \"mongodbUri\""}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 0-config3.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



0-config5.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'service-a' in 'golang' namespace stores secrets in key(s) or value(s) '{"secret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────
 0-config5.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



0-config6.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'service-b' in 'golang' namespace stores sensitive contents in key(s) or value(s) '{"config.yaml", "mongodbUri"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 0-config6.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



0-config8.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'service-b' in 'nodejs' namespace stores sensitive contents in key(s) or value(s) '{"    \"mongodbUri\""}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 0-config8.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



0-cronjob.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'backup' of CronJob 'backup' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-cronjob.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'backup' of CronJob 'backup' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-cronjob.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'backup' of 'cronjob' 'backup' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-cronjob.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'backup' of CronJob 'backup' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-cronjob.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'backup' of CronJob 'backup' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-cronjob.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'backup' of CronJob 'backup' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-cronjob.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'backup' of CronJob 'backup' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-cronjob.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'backup' of CronJob 'backup' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-cronjob.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'backup' of CronJob 'backup' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-cronjob.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'backup' of CronJob 'backup' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-cronjob.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'backup' of CronJob 'backup' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-cronjob.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-cronjob.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "backup" of cronjob "backup" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-cronjob.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-cronjob.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): cronjob backup in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-cronjob.yaml:5
────────────────────────────────────────
   5 [   name: backup
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container backup in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-cronjob.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): cronjob backup in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-cronjob.yaml:14-18
────────────────────────────────────────
  14 ┌           restartPolicy: OnFailure
  15 │           containers:
  16 │             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────



0-cronjob1.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cronjob' of CronJob 'cronjob' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-cronjob1.yaml:16-22
────────────────────────────────────────
  16 ┌           - name: cronjob
  17 │             image: busybox
  18 │             imagePullPolicy: IfNotPresent
  19 │             command:
  20 │             - /bin/sh
  21 │             - -c
  22 └             - date; echo Hello from the Kubernetes cluster
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cronjob' of CronJob 'cronjob' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-cronjob1.yaml:16-22
────────────────────────────────────────
  16 ┌           - name: cronjob
  17 │             image: busybox
  18 │             imagePullPolicy: IfNotPresent
  19 │             command:
  20 │             - /bin/sh
  21 │             - -c
  22 └             - date; echo Hello from the Kubernetes cluster
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cronjob' of 'cronjob' 'cronjob' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-cronjob1.yaml:16-22
────────────────────────────────────────
  16 ┌           - name: cronjob
  17 │             image: busybox
  18 │             imagePullPolicy: IfNotPresent
  19 │             command:
  20 │             - /bin/sh
  21 │             - -c
  22 └             - date; echo Hello from the Kubernetes cluster
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cronjob' of CronJob 'cronjob' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-cronjob1.yaml:16-22
────────────────────────────────────────
  16 ┌           - name: cronjob
  17 │             image: busybox
  18 │             imagePullPolicy: IfNotPresent
  19 │             command:
  20 │             - /bin/sh
  21 │             - -c
  22 └             - date; echo Hello from the Kubernetes cluster
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cronjob' of CronJob 'cronjob' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-cronjob1.yaml:16-22
────────────────────────────────────────
  16 ┌           - name: cronjob
  17 │             image: busybox
  18 │             imagePullPolicy: IfNotPresent
  19 │             command:
  20 │             - /bin/sh
  21 │             - -c
  22 └             - date; echo Hello from the Kubernetes cluster
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cronjob' of CronJob 'cronjob' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 0-cronjob1.yaml:16-22
────────────────────────────────────────
  16 ┌           - name: cronjob
  17 │             image: busybox
  18 │             imagePullPolicy: IfNotPresent
  19 │             command:
  20 │             - /bin/sh
  21 │             - -c
  22 └             - date; echo Hello from the Kubernetes cluster
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cronjob' of CronJob 'cronjob' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-cronjob1.yaml:16-22
────────────────────────────────────────
  16 ┌           - name: cronjob
  17 │             image: busybox
  18 │             imagePullPolicy: IfNotPresent
  19 │             command:
  20 │             - /bin/sh
  21 │             - -c
  22 └             - date; echo Hello from the Kubernetes cluster
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cronjob' of CronJob 'cronjob' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-cronjob1.yaml:16-22
────────────────────────────────────────
  16 ┌           - name: cronjob
  17 │             image: busybox
  18 │             imagePullPolicy: IfNotPresent
  19 │             command:
  20 │             - /bin/sh
  21 │             - -c
  22 └             - date; echo Hello from the Kubernetes cluster
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cronjob' of CronJob 'cronjob' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-cronjob1.yaml:16-22
────────────────────────────────────────
  16 ┌           - name: cronjob
  17 │             image: busybox
  18 │             imagePullPolicy: IfNotPresent
  19 │             command:
  20 │             - /bin/sh
  21 │             - -c
  22 └             - date; echo Hello from the Kubernetes cluster
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cronjob' of CronJob 'cronjob' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-cronjob1.yaml:16-22
────────────────────────────────────────
  16 ┌           - name: cronjob
  17 │             image: busybox
  18 │             imagePullPolicy: IfNotPresent
  19 │             command:
  20 │             - /bin/sh
  21 │             - -c
  22 └             - date; echo Hello from the Kubernetes cluster
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cronjob' of CronJob 'cronjob' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-cronjob1.yaml:16-22
────────────────────────────────────────
  16 ┌           - name: cronjob
  17 │             image: busybox
  18 │             imagePullPolicy: IfNotPresent
  19 │             command:
  20 │             - /bin/sh
  21 │             - -c
  22 └             - date; echo Hello from the Kubernetes cluster
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cronjob' of CronJob 'cronjob' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-cronjob1.yaml:16-22
────────────────────────────────────────
  16 ┌           - name: cronjob
  17 │             image: busybox
  18 │             imagePullPolicy: IfNotPresent
  19 │             command:
  20 │             - /bin/sh
  21 │             - -c
  22 └             - date; echo Hello from the Kubernetes cluster
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-cronjob1.yaml:16-22
────────────────────────────────────────
  16 ┌           - name: cronjob
  17 │             image: busybox
  18 │             imagePullPolicy: IfNotPresent
  19 │             command:
  20 │             - /bin/sh
  21 │             - -c
  22 └             - date; echo Hello from the Kubernetes cluster
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cronjob" of cronjob "cronjob" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-cronjob1.yaml:16-22
────────────────────────────────────────
  16 ┌           - name: cronjob
  17 │             image: busybox
  18 │             imagePullPolicy: IfNotPresent
  19 │             command:
  20 │             - /bin/sh
  21 │             - -c
  22 └             - date; echo Hello from the Kubernetes cluster
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-cronjob1.yaml:16-22
────────────────────────────────────────
  16 ┌           - name: cronjob
  17 │             image: busybox
  18 │             imagePullPolicy: IfNotPresent
  19 │             command:
  20 │             - /bin/sh
  21 │             - -c
  22 └             - date; echo Hello from the Kubernetes cluster
────────────────────────────────────────


AVD-KSV-0110 (LOW): cronjob cronjob in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-cronjob1.yaml:4
────────────────────────────────────────
   4 [   name: cronjob
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cronjob in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-cronjob1.yaml:16-22
────────────────────────────────────────
  16 ┌           - name: cronjob
  17 │             image: busybox
  18 │             imagePullPolicy: IfNotPresent
  19 │             command:
  20 │             - /bin/sh
  21 │             - -c
  22 └             - date; echo Hello from the Kubernetes cluster
────────────────────────────────────────


AVD-KSV-0118 (HIGH): cronjob cronjob in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-cronjob1.yaml:15-23
────────────────────────────────────────
  15 ┌           containers:
  16 │           - name: cronjob
  17 │             image: busybox
  18 │             imagePullPolicy: IfNotPresent
  19 │             command:
  20 │             - /bin/sh
  21 │             - -c
  22 │             - date; echo Hello from the Kubernetes cluster
  23 └           restartPolicy: OnFailure
────────────────────────────────────────



0-cronjob2.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'backup' of CronJob 'backup' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-cronjob2.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'backup' of CronJob 'backup' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-cronjob2.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'backup' of 'cronjob' 'backup' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-cronjob2.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'backup' of CronJob 'backup' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-cronjob2.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'backup' of CronJob 'backup' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-cronjob2.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'backup' of CronJob 'backup' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-cronjob2.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'backup' of CronJob 'backup' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-cronjob2.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'backup' of CronJob 'backup' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-cronjob2.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'backup' of CronJob 'backup' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-cronjob2.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'backup' of CronJob 'backup' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-cronjob2.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'backup' of CronJob 'backup' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-cronjob2.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-cronjob2.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "backup" of cronjob "backup" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-cronjob2.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-cronjob2.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): cronjob backup in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-cronjob2.yaml:5
────────────────────────────────────────
   5 [   name: backup
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container backup in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-cronjob2.yaml:16-18
────────────────────────────────────────
  16 ┌             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): cronjob backup in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-cronjob2.yaml:14-18
────────────────────────────────────────
  14 ┌           restartPolicy: OnFailure
  15 │           containers:
  16 │             - name: backup
  17 │               image: ubuntu:22.04
  18 └               command: ["echo", "Run migration"]
────────────────────────────────────────



0-dashboard1_11.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-dashboard1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-dashboard' of 'deployment' 'kubernetes-dashboard' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-dashboard1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-dashboard1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-dashboard1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-dashboard1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-dashboard1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-dashboard1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-dashboard1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-dashboard1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-dashboard1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-dashboard" of deployment "kubernetes-dashboard" in "kubernetes-dashboard" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-dashboard1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-dashboard1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubernetes-dashboard in kubernetes-dashboard namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-dashboard1_11.yaml:19-57
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard in deployment kubernetes-dashboard (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-dashboard1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────



0-dashboard1_13.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-dashboard1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dashboard-metrics-scraper' of 'deployment' 'dashboard-metrics-scraper' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-dashboard1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-dashboard1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-dashboard1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-dashboard1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-dashboard1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-dashboard1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-dashboard1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-dashboard1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "dashboard-metrics-scraper" of deployment "dashboard-metrics-scraper" in "kubernetes-dashboard" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-dashboard1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-dashboard1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment dashboard-metrics-scraper in kubernetes-dashboard namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-dashboard1_13.yaml:21-50
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dashboard-metrics-scraper in deployment dashboard-metrics-scraper (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-dashboard1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────



0-dashboard1_7.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 0-dashboard1_7.yaml:21-29
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   resourceNames:
  26 │   - kubernetes-dashboard-settings
  27 │   verbs:
  28 │   - get
  29 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard' shouldn't have access to manage secrets in namespace 'kubernetes-dashboard'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 0-dashboard1_7.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   resourceNames:
  14 │   - kubernetes-dashboard-key-holder
  15 │   - kubernetes-dashboard-certs
  16 │   - kubernetes-dashboard-csrf
  17 └   verbs:
  ..   
────────────────────────────────────────



0-dashboard_11.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-dashboard_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-dashboard' of 'deployment' 'kubernetes-dashboard' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-dashboard_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-dashboard_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-dashboard_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-dashboard_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-dashboard_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-dashboard_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-dashboard_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-dashboard_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-dashboard_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-dashboard" of deployment "kubernetes-dashboard" in "kubernetes-dashboard" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-dashboard_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-dashboard_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubernetes-dashboard in kubernetes-dashboard namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-dashboard_11.yaml:19-57
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard in deployment kubernetes-dashboard (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-dashboard_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────



0-dashboard_13.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-dashboard_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dashboard-metrics-scraper' of 'deployment' 'dashboard-metrics-scraper' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-dashboard_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-dashboard_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-dashboard_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-dashboard_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-dashboard_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-dashboard_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-dashboard_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-dashboard_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "dashboard-metrics-scraper" of deployment "dashboard-metrics-scraper" in "kubernetes-dashboard" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-dashboard_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-dashboard_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment dashboard-metrics-scraper in kubernetes-dashboard namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-dashboard_13.yaml:21-50
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dashboard-metrics-scraper in deployment dashboard-metrics-scraper (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-dashboard_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────



0-dashboard_7.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 0-dashboard_7.yaml:21-29
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   resourceNames:
  26 │   - kubernetes-dashboard-settings
  27 │   verbs:
  28 │   - get
  29 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard' shouldn't have access to manage secrets in namespace 'kubernetes-dashboard'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 0-dashboard_7.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   resourceNames:
  14 │   - kubernetes-dashboard-key-holder
  15 │   - kubernetes-dashboard-certs
  16 │   - kubernetes-dashboard-csrf
  17 └   verbs:
  ..   
────────────────────────────────────────



0-dep-vn.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'workload-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-dep-vn.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'workload-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-dep-vn.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'workload-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-dep-vn.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'workload-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-dep-vn.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'workload-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-dep-vn.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'workload-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-dep-vn.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'workload-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-dep-vn.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'workload-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-dep-vn.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'workload-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-dep-vn.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-dep-vn.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "workload-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-dep-vn.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-dep-vn.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment workload-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-dep-vn.yaml:4
────────────────────────────────────────
   4 [   name: workload-dep
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment workload-dep in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container workload-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-dep-vn.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment workload-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-dep-vn.yaml:16-33
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
  ..   
────────────────────────────────────────



0-dep-vn1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'workload-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-dep-vn1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'workload-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-dep-vn1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'workload-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-dep-vn1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'workload-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-dep-vn1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'workload-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-dep-vn1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'workload-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-dep-vn1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'workload-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-dep-vn1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'workload-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-dep-vn1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'workload-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-dep-vn1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-dep-vn1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "workload-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-dep-vn1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-dep-vn1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment workload-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-dep-vn1.yaml:4
────────────────────────────────────────
   4 [   name: workload-dep
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment workload-dep in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container workload-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-dep-vn1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment workload-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-dep-vn1.yaml:16-33
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx:1.18
  19 │         ports:
  20 │           - containerPort: 80
  21 │         resources:
  22 │           requests:
  23 │             cpu: 500m
  24 └             memory: 500Mi
  ..   
────────────────────────────────────────



0-deployment.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment.yaml:4-5
────────────────────────────────────────
   4 ┌   name: nginx-deployment
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



0-deployment1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment1.yaml:4-5
────────────────────────────────────────
   4 ┌   name: nginx-deployment
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment1.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



0-deployment10.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment10.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 │           resources:
  25 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Deployment 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment10.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 │           resources:
  25 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'deployment' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment10.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 │           resources:
  25 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment10.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 │           resources:
  25 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Deployment 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment10.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 │           resources:
  25 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment10.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 │           resources:
  25 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment10.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 │           resources:
  25 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment10.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 │           resources:
  25 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of deployment "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment10.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 │           resources:
  25 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment10.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 │           resources:
  25 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment10.yaml:5-6
────────────────────────────────────────
   5 ┌   name: myapp
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment10.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 │           resources:
  25 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment10.yaml:16-30
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in deployment myapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment10.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 │           resources:
  25 └             requests:
  ..   
────────────────────────────────────────



0-deployment11.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment11.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Deployment 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment11.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'deployment' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment11.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment11.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment11.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Deployment 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment11.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment11.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment11.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment11.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment11.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment11.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment11.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of deployment "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment11.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment11.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment11.yaml:5-6
────────────────────────────────────────
   5 ┌   name: myapp
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment11.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment11.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in deployment myapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment11.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────



0-deployment12.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rabbitmq-consumer' of Deployment 'rabbitmq-consumer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment12.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rabbitmq-consumer' of Deployment 'rabbitmq-consumer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment12.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rabbitmq-consumer' of 'deployment' 'rabbitmq-consumer' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment12.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rabbitmq-consumer' of Deployment 'rabbitmq-consumer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment12.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rabbitmq-consumer' of Deployment 'rabbitmq-consumer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment12.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rabbitmq-consumer' of Deployment 'rabbitmq-consumer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment12.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rabbitmq-consumer' of Deployment 'rabbitmq-consumer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment12.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rabbitmq-consumer' of Deployment 'rabbitmq-consumer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment12.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rabbitmq-consumer' of Deployment 'rabbitmq-consumer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment12.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rabbitmq-consumer' of Deployment 'rabbitmq-consumer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment12.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rabbitmq-consumer' of Deployment 'rabbitmq-consumer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment12.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment12.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rabbitmq-consumer" of deployment "rabbitmq-consumer" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment12.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment12.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment rabbitmq-consumer in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment12.yaml:5-6
────────────────────────────────────────
   5 ┌   name: rabbitmq-consumer
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rabbitmq-consumer in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment12.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment rabbitmq-consumer in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment12.yaml:16-22
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rabbitmq-consumer in deployment rabbitmq-consumer (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment12.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────



0-deployment13.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment13.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Deployment 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment13.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'deployment' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment13.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment13.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment13.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Deployment 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment13.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment13.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment13.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment13.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment13.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment13.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment13.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of deployment "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment13.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment13.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment13.yaml:5
────────────────────────────────────────
   5 [   name: myapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment13.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment13.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in deployment myapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment13.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────



0-deployment14.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'fluent-bit' of Deployment 'fluent-bit' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment14.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'fluent-bit' of Deployment 'fluent-bit' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment14.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'fluent-bit' of 'deployment' 'fluent-bit' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment14.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'fluent-bit' of Deployment 'fluent-bit' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment14.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'fluent-bit' of Deployment 'fluent-bit' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment14.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'fluent-bit' of Deployment 'fluent-bit' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment14.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'fluent-bit' of Deployment 'fluent-bit' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment14.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'fluent-bit' of Deployment 'fluent-bit' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment14.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'fluent-bit' of Deployment 'fluent-bit' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment14.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'fluent-bit' of Deployment 'fluent-bit' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment14.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'fluent-bit' of Deployment 'fluent-bit' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment14.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment14.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "fluent-bit" of deployment "fluent-bit" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment14.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment14.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment fluent-bit in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment14.yaml:5
────────────────────────────────────────
   5 [   name: fluent-bit
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container fluent-bit in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment14.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment fluent-bit in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment14.yaml:16-28
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: fluent-bit
  18 │           image: fluent/fluent-bit:2.1.9
  19 │       affinity:
  20 │         podAntiAffinity:
  21 │           requiredDuringSchedulingIgnoredDuringExecution:
  22 │             - labelSelector:
  23 │                 matchExpressions:
  24 └                   - key: app
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container fluent-bit in deployment fluent-bit (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment14.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────



0-deployment15.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'express' of Deployment 'express' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment15.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: shreyaspai77/xyz:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'express' of Deployment 'express' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment15.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: shreyaspai77/xyz:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'express' of 'deployment' 'express' in 'demo' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment15.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: shreyaspai77/xyz:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'express' of Deployment 'express' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment15.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: shreyaspai77/xyz:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'express' of Deployment 'express' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 0-deployment15.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: shreyaspai77/xyz:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'express' of Deployment 'express' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment15.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: shreyaspai77/xyz:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'express' of Deployment 'express' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment15.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: shreyaspai77/xyz:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'express' of Deployment 'express' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment15.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: shreyaspai77/xyz:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment15.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: shreyaspai77/xyz:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "express" of deployment "express" in "demo" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment15.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: shreyaspai77/xyz:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment15.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: shreyaspai77/xyz:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container express in demo namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment15.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: shreyaspai77/xyz:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment express in demo namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment15.yaml:16-28
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: shreyaspai77/xyz:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container express in deployment express (namespace: demo) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment15.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: shreyaspai77/xyz:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────



0-deployment16.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'buildkite-agent' of Deployment 'buildkite-agent' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment16.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: buildkite-agent
  19 │         image: buildkite/agent:latest
  20 │         env:
  21 │         - name: BUILDKITE_AGENT_TOKEN
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: buildkite-agent-token
  25 │               key: token
  26 └         # - name: DOCKER_HUB_ACCESS_TOKEN
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'buildkite-agent' of Deployment 'buildkite-agent' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment16.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: buildkite-agent
  19 │         image: buildkite/agent:latest
  20 │         env:
  21 │         - name: BUILDKITE_AGENT_TOKEN
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: buildkite-agent-token
  25 │               key: token
  26 └         # - name: DOCKER_HUB_ACCESS_TOKEN
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'buildkite-agent' of 'deployment' 'buildkite-agent' in 'buildkite' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment16.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: buildkite-agent
  19 │         image: buildkite/agent:latest
  20 │         env:
  21 │         - name: BUILDKITE_AGENT_TOKEN
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: buildkite-agent-token
  25 │               key: token
  26 └         # - name: DOCKER_HUB_ACCESS_TOKEN
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'buildkite-agent' of Deployment 'buildkite-agent' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment16.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: buildkite-agent
  19 │         image: buildkite/agent:latest
  20 │         env:
  21 │         - name: BUILDKITE_AGENT_TOKEN
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: buildkite-agent-token
  25 │               key: token
  26 └         # - name: DOCKER_HUB_ACCESS_TOKEN
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'buildkite-agent' of Deployment 'buildkite-agent' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment16.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: buildkite-agent
  19 │         image: buildkite/agent:latest
  20 │         env:
  21 │         - name: BUILDKITE_AGENT_TOKEN
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: buildkite-agent-token
  25 │               key: token
  26 └         # - name: DOCKER_HUB_ACCESS_TOKEN
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'buildkite-agent' of Deployment 'buildkite-agent' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 0-deployment16.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: buildkite-agent
  19 │         image: buildkite/agent:latest
  20 │         env:
  21 │         - name: BUILDKITE_AGENT_TOKEN
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: buildkite-agent-token
  25 │               key: token
  26 └         # - name: DOCKER_HUB_ACCESS_TOKEN
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'buildkite-agent' of Deployment 'buildkite-agent' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment16.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: buildkite-agent
  19 │         image: buildkite/agent:latest
  20 │         env:
  21 │         - name: BUILDKITE_AGENT_TOKEN
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: buildkite-agent-token
  25 │               key: token
  26 └         # - name: DOCKER_HUB_ACCESS_TOKEN
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'buildkite-agent' of Deployment 'buildkite-agent' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment16.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: buildkite-agent
  19 │         image: buildkite/agent:latest
  20 │         env:
  21 │         - name: BUILDKITE_AGENT_TOKEN
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: buildkite-agent-token
  25 │               key: token
  26 └         # - name: DOCKER_HUB_ACCESS_TOKEN
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'buildkite-agent' of Deployment 'buildkite-agent' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment16.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: buildkite-agent
  19 │         image: buildkite/agent:latest
  20 │         env:
  21 │         - name: BUILDKITE_AGENT_TOKEN
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: buildkite-agent-token
  25 │               key: token
  26 └         # - name: DOCKER_HUB_ACCESS_TOKEN
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'buildkite-agent' of Deployment 'buildkite-agent' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment16.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: buildkite-agent
  19 │         image: buildkite/agent:latest
  20 │         env:
  21 │         - name: BUILDKITE_AGENT_TOKEN
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: buildkite-agent-token
  25 │               key: token
  26 └         # - name: DOCKER_HUB_ACCESS_TOKEN
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'buildkite-agent' of Deployment 'buildkite-agent' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment16.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: buildkite-agent
  19 │         image: buildkite/agent:latest
  20 │         env:
  21 │         - name: BUILDKITE_AGENT_TOKEN
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: buildkite-agent-token
  25 │               key: token
  26 └         # - name: DOCKER_HUB_ACCESS_TOKEN
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'buildkite-agent' of Deployment 'buildkite-agent' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment16.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: buildkite-agent
  19 │         image: buildkite/agent:latest
  20 │         env:
  21 │         - name: BUILDKITE_AGENT_TOKEN
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: buildkite-agent-token
  25 │               key: token
  26 └         # - name: DOCKER_HUB_ACCESS_TOKEN
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment16.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: buildkite-agent
  19 │         image: buildkite/agent:latest
  20 │         env:
  21 │         - name: BUILDKITE_AGENT_TOKEN
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: buildkite-agent-token
  25 │               key: token
  26 └         # - name: DOCKER_HUB_ACCESS_TOKEN
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "buildkite-agent" of deployment "buildkite-agent" in "buildkite" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment16.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: buildkite-agent
  19 │         image: buildkite/agent:latest
  20 │         env:
  21 │         - name: BUILDKITE_AGENT_TOKEN
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: buildkite-agent-token
  25 │               key: token
  26 └         # - name: DOCKER_HUB_ACCESS_TOKEN
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment16.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: buildkite-agent
  19 │         image: buildkite/agent:latest
  20 │         env:
  21 │         - name: BUILDKITE_AGENT_TOKEN
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: buildkite-agent-token
  25 │               key: token
  26 └         # - name: DOCKER_HUB_ACCESS_TOKEN
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container buildkite-agent in buildkite namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment16.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: buildkite-agent
  19 │         image: buildkite/agent:latest
  20 │         env:
  21 │         - name: BUILDKITE_AGENT_TOKEN
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: buildkite-agent-token
  25 │               key: token
  26 └         # - name: DOCKER_HUB_ACCESS_TOKEN
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment buildkite-agent in buildkite namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment16.yaml:16-44
────────────────────────────────────────
  16 ┌       serviceAccountName: buildkite-agent
  17 │       containers:
  18 │       - name: buildkite-agent
  19 │         image: buildkite/agent:latest
  20 │         env:
  21 │         - name: BUILDKITE_AGENT_TOKEN
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: buildkite-agent-token
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container buildkite-agent in deployment buildkite-agent (namespace: buildkite) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment16.yaml:18-44
────────────────────────────────────────
  18 ┌       - name: buildkite-agent
  19 │         image: buildkite/agent:latest
  20 │         env:
  21 │         - name: BUILDKITE_AGENT_TOKEN
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: buildkite-agent-token
  25 │               key: token
  26 └         # - name: DOCKER_HUB_ACCESS_TOKEN
  ..   
────────────────────────────────────────



0-deployment17.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment17.yaml:4-5
────────────────────────────────────────
   4 ┌   name: nginx-deployment
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment17.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



0-deployment18.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment18.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment18.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment18.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment18.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment18.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment18.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment18.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment18.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment18.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment18.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment18.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment18.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment18.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment18.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment18.yaml:4-5
────────────────────────────────────────
   4 ┌   name: nginx-deployment
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment18.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment18.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



0-deployment19.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'express' of Deployment 'express' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment19.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'express' of Deployment 'express' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment19.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'express' of 'deployment' 'express' in 'demo' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment19.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'express' of Deployment 'express' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment19.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'express' of Deployment 'express' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 0-deployment19.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'express' of Deployment 'express' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment19.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'express' of Deployment 'express' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment19.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'express' of Deployment 'express' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment19.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment19.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "express" of deployment "express" in "demo" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment19.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment19.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container express in demo namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment19.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment express in demo namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment19.yaml:16-28
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container express in deployment express (namespace: demo) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment19.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────



0-deployment2.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'express' of Deployment 'express' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment2.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'express' of Deployment 'express' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment2.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'express' of 'deployment' 'express' in 'demo' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment2.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'express' of Deployment 'express' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment2.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'express' of Deployment 'express' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 0-deployment2.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'express' of Deployment 'express' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment2.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'express' of Deployment 'express' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment2.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'express' of Deployment 'express' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment2.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment2.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "express" of deployment "express" in "demo" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment2.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment2.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container express in demo namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment2.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment express in demo namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment2.yaml:16-28
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container express in deployment express (namespace: demo) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment2.yaml:17-28
────────────────────────────────────────
  17 ┌       - image: aputra/express-073:latest
  18 │         name: express
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8081
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 └             memory: 256Mi
  ..   
────────────────────────────────────────



0-deployment20.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hamster' of Deployment 'hamster' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment20.yaml:18-30
────────────────────────────────────────
  18 ┌         - name: hamster
  19 │           image: k8s.gcr.io/ubuntu-slim:0.1
  20 │           resources:
  21 │             requests:
  22 │               cpu: 180m
  23 │               memory: 50Mi
  24 │             limits:
  25 │               cpu: 600m
  26 └               memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hamster' of Deployment 'hamster' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment20.yaml:18-30
────────────────────────────────────────
  18 ┌         - name: hamster
  19 │           image: k8s.gcr.io/ubuntu-slim:0.1
  20 │           resources:
  21 │             requests:
  22 │               cpu: 180m
  23 │               memory: 50Mi
  24 │             limits:
  25 │               cpu: 600m
  26 └               memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hamster' of 'deployment' 'hamster' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment20.yaml:18-30
────────────────────────────────────────
  18 ┌         - name: hamster
  19 │           image: k8s.gcr.io/ubuntu-slim:0.1
  20 │           resources:
  21 │             requests:
  22 │               cpu: 180m
  23 │               memory: 50Mi
  24 │             limits:
  25 │               cpu: 600m
  26 └               memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'hamster' of Deployment 'hamster' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment20.yaml:18-30
────────────────────────────────────────
  18 ┌         - name: hamster
  19 │           image: k8s.gcr.io/ubuntu-slim:0.1
  20 │           resources:
  21 │             requests:
  22 │               cpu: 180m
  23 │               memory: 50Mi
  24 │             limits:
  25 │               cpu: 600m
  26 └               memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hamster' of Deployment 'hamster' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment20.yaml:18-30
────────────────────────────────────────
  18 ┌         - name: hamster
  19 │           image: k8s.gcr.io/ubuntu-slim:0.1
  20 │           resources:
  21 │             requests:
  22 │               cpu: 180m
  23 │               memory: 50Mi
  24 │             limits:
  25 │               cpu: 600m
  26 └               memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hamster' of Deployment 'hamster' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment20.yaml:18-30
────────────────────────────────────────
  18 ┌         - name: hamster
  19 │           image: k8s.gcr.io/ubuntu-slim:0.1
  20 │           resources:
  21 │             requests:
  22 │               cpu: 180m
  23 │               memory: 50Mi
  24 │             limits:
  25 │               cpu: 600m
  26 └               memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hamster' of Deployment 'hamster' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment20.yaml:18-30
────────────────────────────────────────
  18 ┌         - name: hamster
  19 │           image: k8s.gcr.io/ubuntu-slim:0.1
  20 │           resources:
  21 │             requests:
  22 │               cpu: 180m
  23 │               memory: 50Mi
  24 │             limits:
  25 │               cpu: 600m
  26 └               memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment20.yaml:18-30
────────────────────────────────────────
  18 ┌         - name: hamster
  19 │           image: k8s.gcr.io/ubuntu-slim:0.1
  20 │           resources:
  21 │             requests:
  22 │               cpu: 180m
  23 │               memory: 50Mi
  24 │             limits:
  25 │               cpu: 600m
  26 └               memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "hamster" of deployment "hamster" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment20.yaml:18-30
────────────────────────────────────────
  18 ┌         - name: hamster
  19 │           image: k8s.gcr.io/ubuntu-slim:0.1
  20 │           resources:
  21 │             requests:
  22 │               cpu: 180m
  23 │               memory: 50Mi
  24 │             limits:
  25 │               cpu: 600m
  26 └               memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment20.yaml:18-30
────────────────────────────────────────
  18 ┌         - name: hamster
  19 │           image: k8s.gcr.io/ubuntu-slim:0.1
  20 │           resources:
  21 │             requests:
  22 │               cpu: 180m
  23 │               memory: 50Mi
  24 │             limits:
  25 │               cpu: 600m
  26 └               memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment hamster in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment20.yaml:5-6
────────────────────────────────────────
   5 ┌   name: hamster
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hamster in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment20.yaml:18-30
────────────────────────────────────────
  18 ┌         - name: hamster
  19 │           image: k8s.gcr.io/ubuntu-slim:0.1
  20 │           resources:
  21 │             requests:
  22 │               cpu: 180m
  23 │               memory: 50Mi
  24 │             limits:
  25 │               cpu: 600m
  26 └               memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment hamster in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment20.yaml:17-30
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: hamster
  19 │           image: k8s.gcr.io/ubuntu-slim:0.1
  20 │           resources:
  21 │             requests:
  22 │               cpu: 180m
  23 │               memory: 50Mi
  24 │             limits:
  25 └               cpu: 600m
  ..   
────────────────────────────────────────



0-deployment21.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment21.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment21.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment21.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment21.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment21.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment21.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment21.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment21.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment21.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment21.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment21.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment21.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment21.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment21.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment21.yaml:5
────────────────────────────────────────
   5 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────
 0-deployment21.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment21.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment21.yaml:16-32
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 │         - containerPort: 80
  21 │       affinity:
  22 │         podAntiAffinity:
  23 │           preferredDuringSchedulingIgnoredDuringExecution:
  24 └           - weight: 100
  ..   
────────────────────────────────────────



0-deployment22.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'blackbox-exporter' of Deployment 'blackbox-exporter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment22.yaml:18-38
────────────────────────────────────────
  18 ┌         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 │             httpGet:
  26 └               path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'blackbox-exporter' of Deployment 'blackbox-exporter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment22.yaml:18-38
────────────────────────────────────────
  18 ┌         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 │             httpGet:
  26 └               path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'blackbox-exporter' of 'deployment' 'blackbox-exporter' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment22.yaml:18-38
────────────────────────────────────────
  18 ┌         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 │             httpGet:
  26 └               path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'blackbox-exporter' of Deployment 'blackbox-exporter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment22.yaml:18-38
────────────────────────────────────────
  18 ┌         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 │             httpGet:
  26 └               path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'blackbox-exporter' of Deployment 'blackbox-exporter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment22.yaml:18-38
────────────────────────────────────────
  18 ┌         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 │             httpGet:
  26 └               path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'blackbox-exporter' of Deployment 'blackbox-exporter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment22.yaml:18-38
────────────────────────────────────────
  18 ┌         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 │             httpGet:
  26 └               path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'blackbox-exporter' of Deployment 'blackbox-exporter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment22.yaml:18-38
────────────────────────────────────────
  18 ┌         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 │             httpGet:
  26 └               path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment22.yaml:18-38
────────────────────────────────────────
  18 ┌         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 │             httpGet:
  26 └               path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "blackbox-exporter" of deployment "blackbox-exporter" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment22.yaml:18-38
────────────────────────────────────────
  18 ┌         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 │             httpGet:
  26 └               path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment22.yaml:18-38
────────────────────────────────────────
  18 ┌         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 │             httpGet:
  26 └               path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container blackbox-exporter in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment22.yaml:18-38
────────────────────────────────────────
  18 ┌         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 │             httpGet:
  26 └               path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment blackbox-exporter in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment22.yaml:17-38
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 └             httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container blackbox-exporter in deployment blackbox-exporter (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment22.yaml:18-38
────────────────────────────────────────
  18 ┌         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 │             httpGet:
  26 └               path: /health
  ..   
────────────────────────────────────────



0-deployment23.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'echoserver' of Deployment 'echoserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment23.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'echoserver' of Deployment 'echoserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment23.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'echoserver' of 'deployment' 'echoserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment23.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'echoserver' of Deployment 'echoserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment23.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'echoserver' of Deployment 'echoserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment23.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'echoserver' of Deployment 'echoserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment23.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'echoserver' of Deployment 'echoserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment23.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'echoserver' of Deployment 'echoserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment23.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'echoserver' of Deployment 'echoserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment23.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'echoserver' of Deployment 'echoserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment23.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'echoserver' of Deployment 'echoserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment23.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment23.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "echoserver" of deployment "echoserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment23.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment23.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment echoserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment23.yaml:5-6
────────────────────────────────────────
   5 ┌   name: echoserver
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container echoserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment23.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment echoserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment23.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────



0-deployment24.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment24.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment24.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment24.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment24.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment24.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment24.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment24.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment24.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment24.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment24.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment24.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment24.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment24.yaml:5-7
────────────────────────────────────────
   5 ┌   name: nginx-deployment
   6 │   labels:
   7 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────
 0-deployment24.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment24.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment24.yaml:18-26
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────



0-deployment25.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment25.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Deployment 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment25.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'deployment' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment25.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment25.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment25.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Deployment 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment25.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment25.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment25.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment25.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment25.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment25.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment25.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of deployment "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment25.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment25.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment25.yaml:5-6
────────────────────────────────────────
   5 ┌   name: myapp
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment25.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment25.yaml:17-24
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in deployment myapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment25.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────



0-deployment26.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment26.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 │               memory: 256Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Deployment 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment26.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 │               memory: 256Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'deployment' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment26.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 │               memory: 256Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment26.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 │               memory: 256Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Deployment 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment26.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 │               memory: 256Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment26.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 │               memory: 256Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment26.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 │               memory: 256Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment26.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 │               memory: 256Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of deployment "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment26.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 │               memory: 256Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment26.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 │               memory: 256Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment26.yaml:5-6
────────────────────────────────────────
   5 ┌   name: myapp
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment26.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 │               memory: 256Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment26.yaml:16-28
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in deployment myapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment26.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 │               memory: 256Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────



0-deployment27.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment27.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 │           resources:
  25 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Deployment 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment27.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 │           resources:
  25 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'deployment' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment27.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 │           resources:
  25 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment27.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 │           resources:
  25 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Deployment 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment27.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 │           resources:
  25 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment27.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 │           resources:
  25 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment27.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 │           resources:
  25 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment27.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 │           resources:
  25 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of deployment "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment27.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 │           resources:
  25 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment27.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 │           resources:
  25 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment27.yaml:5-6
────────────────────────────────────────
   5 ┌   name: myapp
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment27.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 │           resources:
  25 └             requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment27.yaml:16-30
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in deployment myapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment27.yaml:17-30
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │             - name: metrics
  23 │               containerPort: 8081
  24 │           resources:
  25 └             requests:
  ..   
────────────────────────────────────────



0-deployment28.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment28.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Deployment 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment28.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'deployment' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment28.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment28.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment28.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Deployment 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment28.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment28.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment28.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment28.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment28.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment28.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment28.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of deployment "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment28.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment28.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment28.yaml:5-6
────────────────────────────────────────
   5 ┌   name: myapp
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment28.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment28.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in deployment myapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment28.yaml:18-22
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-181:v5
  20 │           ports:
  21 │             - name: http
  22 └               containerPort: 8080
────────────────────────────────────────



0-deployment29.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rabbitmq-consumer' of Deployment 'rabbitmq-consumer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment29.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rabbitmq-consumer' of Deployment 'rabbitmq-consumer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment29.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rabbitmq-consumer' of 'deployment' 'rabbitmq-consumer' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment29.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rabbitmq-consumer' of Deployment 'rabbitmq-consumer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment29.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rabbitmq-consumer' of Deployment 'rabbitmq-consumer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment29.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rabbitmq-consumer' of Deployment 'rabbitmq-consumer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment29.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rabbitmq-consumer' of Deployment 'rabbitmq-consumer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment29.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rabbitmq-consumer' of Deployment 'rabbitmq-consumer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment29.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rabbitmq-consumer' of Deployment 'rabbitmq-consumer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment29.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rabbitmq-consumer' of Deployment 'rabbitmq-consumer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment29.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rabbitmq-consumer' of Deployment 'rabbitmq-consumer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment29.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment29.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rabbitmq-consumer" of deployment "rabbitmq-consumer" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment29.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment29.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment rabbitmq-consumer in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment29.yaml:5-6
────────────────────────────────────────
   5 ┌   name: rabbitmq-consumer
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rabbitmq-consumer in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment29.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment rabbitmq-consumer in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment29.yaml:16-22
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rabbitmq-consumer in deployment rabbitmq-consumer (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment29.yaml:17-22
────────────────────────────────────────
  17 ┌         - name: rabbitmq-consumer
  18 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  19 │           command:
  20 │             - receive
  21 │           args:
  22 └             - "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672"
────────────────────────────────────────



0-deployment3.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hamster' of Deployment 'hamster' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment3.yaml:18-30
────────────────────────────────────────
  18 ┌         - name: hamster
  19 │           image: k8s.gcr.io/ubuntu-slim:0.1
  20 │           resources:
  21 │             requests:
  22 │               cpu: 180m
  23 │               memory: 50Mi
  24 │             limits:
  25 │               cpu: 600m
  26 └               memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hamster' of Deployment 'hamster' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment3.yaml:18-30
────────────────────────────────────────
  18 ┌         - name: hamster
  19 │           image: k8s.gcr.io/ubuntu-slim:0.1
  20 │           resources:
  21 │             requests:
  22 │               cpu: 180m
  23 │               memory: 50Mi
  24 │             limits:
  25 │               cpu: 600m
  26 └               memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hamster' of 'deployment' 'hamster' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment3.yaml:18-30
────────────────────────────────────────
  18 ┌         - name: hamster
  19 │           image: k8s.gcr.io/ubuntu-slim:0.1
  20 │           resources:
  21 │             requests:
  22 │               cpu: 180m
  23 │               memory: 50Mi
  24 │             limits:
  25 │               cpu: 600m
  26 └               memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'hamster' of Deployment 'hamster' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment3.yaml:18-30
────────────────────────────────────────
  18 ┌         - name: hamster
  19 │           image: k8s.gcr.io/ubuntu-slim:0.1
  20 │           resources:
  21 │             requests:
  22 │               cpu: 180m
  23 │               memory: 50Mi
  24 │             limits:
  25 │               cpu: 600m
  26 └               memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hamster' of Deployment 'hamster' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment3.yaml:18-30
────────────────────────────────────────
  18 ┌         - name: hamster
  19 │           image: k8s.gcr.io/ubuntu-slim:0.1
  20 │           resources:
  21 │             requests:
  22 │               cpu: 180m
  23 │               memory: 50Mi
  24 │             limits:
  25 │               cpu: 600m
  26 └               memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hamster' of Deployment 'hamster' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment3.yaml:18-30
────────────────────────────────────────
  18 ┌         - name: hamster
  19 │           image: k8s.gcr.io/ubuntu-slim:0.1
  20 │           resources:
  21 │             requests:
  22 │               cpu: 180m
  23 │               memory: 50Mi
  24 │             limits:
  25 │               cpu: 600m
  26 └               memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hamster' of Deployment 'hamster' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment3.yaml:18-30
────────────────────────────────────────
  18 ┌         - name: hamster
  19 │           image: k8s.gcr.io/ubuntu-slim:0.1
  20 │           resources:
  21 │             requests:
  22 │               cpu: 180m
  23 │               memory: 50Mi
  24 │             limits:
  25 │               cpu: 600m
  26 └               memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment3.yaml:18-30
────────────────────────────────────────
  18 ┌         - name: hamster
  19 │           image: k8s.gcr.io/ubuntu-slim:0.1
  20 │           resources:
  21 │             requests:
  22 │               cpu: 180m
  23 │               memory: 50Mi
  24 │             limits:
  25 │               cpu: 600m
  26 └               memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "hamster" of deployment "hamster" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment3.yaml:18-30
────────────────────────────────────────
  18 ┌         - name: hamster
  19 │           image: k8s.gcr.io/ubuntu-slim:0.1
  20 │           resources:
  21 │             requests:
  22 │               cpu: 180m
  23 │               memory: 50Mi
  24 │             limits:
  25 │               cpu: 600m
  26 └               memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment3.yaml:18-30
────────────────────────────────────────
  18 ┌         - name: hamster
  19 │           image: k8s.gcr.io/ubuntu-slim:0.1
  20 │           resources:
  21 │             requests:
  22 │               cpu: 180m
  23 │               memory: 50Mi
  24 │             limits:
  25 │               cpu: 600m
  26 └               memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment hamster in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment3.yaml:5-6
────────────────────────────────────────
   5 ┌   name: hamster
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hamster in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment3.yaml:18-30
────────────────────────────────────────
  18 ┌         - name: hamster
  19 │           image: k8s.gcr.io/ubuntu-slim:0.1
  20 │           resources:
  21 │             requests:
  22 │               cpu: 180m
  23 │               memory: 50Mi
  24 │             limits:
  25 │               cpu: 600m
  26 └               memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment hamster in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment3.yaml:17-30
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: hamster
  19 │           image: k8s.gcr.io/ubuntu-slim:0.1
  20 │           resources:
  21 │             requests:
  22 │               cpu: 180m
  23 │               memory: 50Mi
  24 │             limits:
  25 └               cpu: 600m
  ..   
────────────────────────────────────────



0-deployment30.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment30.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Deployment 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment30.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'deployment' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment30.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment30.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment30.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Deployment 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment30.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment30.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment30.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment30.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment30.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment30.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment30.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of deployment "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment30.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment30.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment30.yaml:5
────────────────────────────────────────
   5 [   name: myapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment30.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment30.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in deployment myapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment30.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-182:0.1.0
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────



0-deployment31.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'fluent-bit' of Deployment 'fluent-bit' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment31.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'fluent-bit' of Deployment 'fluent-bit' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment31.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'fluent-bit' of 'deployment' 'fluent-bit' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment31.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'fluent-bit' of Deployment 'fluent-bit' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment31.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'fluent-bit' of Deployment 'fluent-bit' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment31.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'fluent-bit' of Deployment 'fluent-bit' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment31.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'fluent-bit' of Deployment 'fluent-bit' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment31.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'fluent-bit' of Deployment 'fluent-bit' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment31.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'fluent-bit' of Deployment 'fluent-bit' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment31.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'fluent-bit' of Deployment 'fluent-bit' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment31.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'fluent-bit' of Deployment 'fluent-bit' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment31.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment31.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "fluent-bit" of deployment "fluent-bit" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment31.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment31.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment fluent-bit in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment31.yaml:5
────────────────────────────────────────
   5 [   name: fluent-bit
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container fluent-bit in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment31.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment fluent-bit in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment31.yaml:16-28
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: fluent-bit
  18 │           image: fluent/fluent-bit:2.1.9
  19 │       affinity:
  20 │         podAntiAffinity:
  21 │           requiredDuringSchedulingIgnoredDuringExecution:
  22 │             - labelSelector:
  23 │                 matchExpressions:
  24 └                   - key: app
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container fluent-bit in deployment fluent-bit (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment31.yaml:17-18
────────────────────────────────────────
  17 ┌         - name: fluent-bit
  18 └           image: fluent/fluent-bit:2.1.9
────────────────────────────────────────



0-deployment32.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment32.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment32.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container-1' of 'deployment' 'my-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment32.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment32.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment32.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment32.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment32.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment32.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment32.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment32.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment32.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment32.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container-1" of deployment "my-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment32.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment32.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment32.yaml:5-7
────────────────────────────────────────
   5 ┌   name: my-deployment
   6 │   labels:
   7 └     team: dev1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment32.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment32.yaml:18-22
────────────────────────────────────────
  18 ┌       containers:
  19 │         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-container-1 in deployment my-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment32.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────



0-deployment33.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment33.yaml:19-25
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           volumeMounts:
  24 │             - name: config-volume
  25 └               mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment33.yaml:19-25
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           volumeMounts:
  24 │             - name: config-volume
  25 └               mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container-1' of 'deployment' 'my-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment33.yaml:19-25
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           volumeMounts:
  24 │             - name: config-volume
  25 └               mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment33.yaml:19-25
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           volumeMounts:
  24 │             - name: config-volume
  25 └               mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment33.yaml:19-25
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           volumeMounts:
  24 │             - name: config-volume
  25 └               mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment33.yaml:19-25
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           volumeMounts:
  24 │             - name: config-volume
  25 └               mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment33.yaml:19-25
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           volumeMounts:
  24 │             - name: config-volume
  25 └               mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment33.yaml:19-25
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           volumeMounts:
  24 │             - name: config-volume
  25 └               mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment33.yaml:19-25
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           volumeMounts:
  24 │             - name: config-volume
  25 └               mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment33.yaml:19-25
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           volumeMounts:
  24 │             - name: config-volume
  25 └               mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment33.yaml:19-25
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           volumeMounts:
  24 │             - name: config-volume
  25 └               mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment33.yaml:19-25
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           volumeMounts:
  24 │             - name: config-volume
  25 └               mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container-1" of deployment "my-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment33.yaml:19-25
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           volumeMounts:
  24 │             - name: config-volume
  25 └               mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment33.yaml:19-25
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           volumeMounts:
  24 │             - name: config-volume
  25 └               mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment33.yaml:5-7
────────────────────────────────────────
   5 ┌   name: my-deployment
   6 │   labels:
   7 └     team: dev1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment33.yaml:19-25
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           volumeMounts:
  24 │             - name: config-volume
  25 └               mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment33.yaml:18-29
────────────────────────────────────────
  18 ┌       containers:
  19 │         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           volumeMounts:
  24 │             - name: config-volume
  25 │               mountPath: /etc/config
  26 └       volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-container-1 in deployment my-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment33.yaml:19-25
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           volumeMounts:
  24 │             - name: config-volume
  25 └               mountPath: /etc/config
────────────────────────────────────────



0-deployment34.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment34.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment34.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container-1' of 'deployment' 'my-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment34.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment34.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment34.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment34.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment34.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment34.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment34.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment34.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment34.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment34.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container-1" of deployment "my-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment34.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment34.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment34.yaml:5-7
────────────────────────────────────────
   5 ┌   name: my-deployment
   6 │   labels:
   7 └     team: dev1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment34.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment34.yaml:18-31
────────────────────────────────────────
  18 ┌       containers:
  19 │         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │       affinity:
  24 │         nodeAffinity:
  25 │           requiredDuringSchedulingIgnoredDuringExecution:
  26 └             nodeSelectorTerms:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-container-1 in deployment my-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment34.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────



0-deployment35.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment35.yaml:19-28
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           readinessProbe:
  24 │             httpGet:
  25 │               path: /
  26 │               port: 8080
  27 │             initialDelaySeconds: 3
  28 └             periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment35.yaml:19-28
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           readinessProbe:
  24 │             httpGet:
  25 │               path: /
  26 │               port: 8080
  27 │             initialDelaySeconds: 3
  28 └             periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container-1' of 'deployment' 'my-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment35.yaml:19-28
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           readinessProbe:
  24 │             httpGet:
  25 │               path: /
  26 │               port: 8080
  27 │             initialDelaySeconds: 3
  28 └             periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment35.yaml:19-28
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           readinessProbe:
  24 │             httpGet:
  25 │               path: /
  26 │               port: 8080
  27 │             initialDelaySeconds: 3
  28 └             periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment35.yaml:19-28
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           readinessProbe:
  24 │             httpGet:
  25 │               path: /
  26 │               port: 8080
  27 │             initialDelaySeconds: 3
  28 └             periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment35.yaml:19-28
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           readinessProbe:
  24 │             httpGet:
  25 │               path: /
  26 │               port: 8080
  27 │             initialDelaySeconds: 3
  28 └             periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment35.yaml:19-28
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           readinessProbe:
  24 │             httpGet:
  25 │               path: /
  26 │               port: 8080
  27 │             initialDelaySeconds: 3
  28 └             periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment35.yaml:19-28
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           readinessProbe:
  24 │             httpGet:
  25 │               path: /
  26 │               port: 8080
  27 │             initialDelaySeconds: 3
  28 └             periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment35.yaml:19-28
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           readinessProbe:
  24 │             httpGet:
  25 │               path: /
  26 │               port: 8080
  27 │             initialDelaySeconds: 3
  28 └             periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment35.yaml:19-28
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           readinessProbe:
  24 │             httpGet:
  25 │               path: /
  26 │               port: 8080
  27 │             initialDelaySeconds: 3
  28 └             periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment35.yaml:19-28
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           readinessProbe:
  24 │             httpGet:
  25 │               path: /
  26 │               port: 8080
  27 │             initialDelaySeconds: 3
  28 └             periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment35.yaml:19-28
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           readinessProbe:
  24 │             httpGet:
  25 │               path: /
  26 │               port: 8080
  27 │             initialDelaySeconds: 3
  28 └             periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container-1" of deployment "my-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment35.yaml:19-28
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           readinessProbe:
  24 │             httpGet:
  25 │               path: /
  26 │               port: 8080
  27 │             initialDelaySeconds: 3
  28 └             periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment35.yaml:19-28
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           readinessProbe:
  24 │             httpGet:
  25 │               path: /
  26 │               port: 8080
  27 │             initialDelaySeconds: 3
  28 └             periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment35.yaml:5-7
────────────────────────────────────────
   5 ┌   name: my-deployment
   6 │   labels:
   7 └     team: dev1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment35.yaml:19-28
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           readinessProbe:
  24 │             httpGet:
  25 │               path: /
  26 │               port: 8080
  27 │             initialDelaySeconds: 3
  28 └             periodSeconds: 5
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment35.yaml:18-28
────────────────────────────────────────
  18 ┌       containers:
  19 │         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           readinessProbe:
  24 │             httpGet:
  25 │               path: /
  26 └               port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-container-1 in deployment my-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment35.yaml:19-28
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - containerPort: 8080
  23 │           readinessProbe:
  24 │             httpGet:
  25 │               path: /
  26 │               port: 8080
  27 │             initialDelaySeconds: 3
  28 └             periodSeconds: 5
────────────────────────────────────────



0-deployment36.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment36.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment36.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container-1' of 'deployment' 'my-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment36.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment36.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment36.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment36.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment36.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment36.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment36.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment36.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment36.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment36.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container-1" of deployment "my-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment36.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment36.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment36.yaml:5-7
────────────────────────────────────────
   5 ┌   name: my-deployment
   6 │   labels:
   7 └     team: dev1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment36.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment36.yaml:18-22
────────────────────────────────────────
  18 ┌       containers:
  19 │         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-container-1 in deployment my-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment36.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────



0-deployment37.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment37.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment37.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container-1' of 'deployment' 'my-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment37.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment37.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment37.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment37.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment37.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment37.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment37.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment37.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment37.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment37.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container-1" of deployment "my-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment37.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment37.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment37.yaml:5-7
────────────────────────────────────────
   5 ┌   name: my-deployment
   6 │   labels:
   7 └     team: dev1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment37.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment37.yaml:18-22
────────────────────────────────────────
  18 ┌       containers:
  19 │         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-container-1 in deployment my-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment37.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────



0-deployment38.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container-1' of Deployment 'my-blue-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment38.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container-1' of Deployment 'my-blue-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment38.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container-1' of 'deployment' 'my-blue-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment38.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container-1' of Deployment 'my-blue-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment38.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container-1' of Deployment 'my-blue-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment38.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container-1' of Deployment 'my-blue-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment38.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container-1' of Deployment 'my-blue-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment38.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container-1' of Deployment 'my-blue-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment38.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container-1' of Deployment 'my-blue-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment38.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container-1' of Deployment 'my-blue-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment38.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container-1' of Deployment 'my-blue-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment38.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment38.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container-1" of deployment "my-blue-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment38.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment38.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-blue-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment38.yaml:5-7
────────────────────────────────────────
   5 ┌   name: my-blue-deployment
   6 │   labels:
   7 └     team: dev1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-blue-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment38.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-blue-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment38.yaml:20-24
────────────────────────────────────────
  20 ┌       containers:
  21 │         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-container-1 in deployment my-blue-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment38.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────



0-deployment39.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container-1' of Deployment 'my-blue-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment39.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container-1' of Deployment 'my-blue-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment39.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container-1' of 'deployment' 'my-blue-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment39.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container-1' of Deployment 'my-blue-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment39.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container-1' of Deployment 'my-blue-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment39.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container-1' of Deployment 'my-blue-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment39.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container-1' of Deployment 'my-blue-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment39.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container-1' of Deployment 'my-blue-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment39.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container-1' of Deployment 'my-blue-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment39.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container-1' of Deployment 'my-blue-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment39.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container-1' of Deployment 'my-blue-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment39.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment39.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container-1" of deployment "my-blue-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment39.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment39.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-blue-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment39.yaml:5-7
────────────────────────────────────────
   5 ┌   name: my-blue-deployment
   6 │   labels:
   7 └     team: dev1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-blue-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment39.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-blue-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment39.yaml:20-24
────────────────────────────────────────
  20 ┌       containers:
  21 │         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-container-1 in deployment my-blue-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment39.yaml:21-24
────────────────────────────────────────
  21 ┌         - image: aputra/myapp-193:v6
  22 │           name: my-container-1
  23 │           ports:
  24 └             - containerPort: 8080
────────────────────────────────────────



0-deployment4.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment4.yaml:5
────────────────────────────────────────
   5 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────
 0-deployment4.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment4.yaml:16-32
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 │         - containerPort: 80
  21 │       affinity:
  22 │         podAntiAffinity:
  23 │           preferredDuringSchedulingIgnoredDuringExecution:
  24 └           - weight: 100
  ..   
────────────────────────────────────────



0-deployment40.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment40.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment40.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container-1' of 'deployment' 'my-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment40.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment40.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment40.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment40.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment40.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment40.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment40.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment40.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment40.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment40.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container-1" of deployment "my-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment40.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment40.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment40.yaml:5-7
────────────────────────────────────────
   5 ┌   name: my-deployment
   6 │   labels:
   7 └     team: dev1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment40.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment40.yaml:18-23
────────────────────────────────────────
  18 ┌       containers:
  19 │         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-container-1 in deployment my-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment40.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────



0-deployment41.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container-1' of Deployment 'dep1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment41.yaml:17-20
────────────────────────────────────────
  17 ┌         - image: aputra/myapp-193:v6
  18 │           name: my-container-1
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container-1' of Deployment 'dep1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment41.yaml:17-20
────────────────────────────────────────
  17 ┌         - image: aputra/myapp-193:v6
  18 │           name: my-container-1
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container-1' of 'deployment' 'dep1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment41.yaml:17-20
────────────────────────────────────────
  17 ┌         - image: aputra/myapp-193:v6
  18 │           name: my-container-1
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container-1' of Deployment 'dep1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment41.yaml:17-20
────────────────────────────────────────
  17 ┌         - image: aputra/myapp-193:v6
  18 │           name: my-container-1
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container-1' of Deployment 'dep1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment41.yaml:17-20
────────────────────────────────────────
  17 ┌         - image: aputra/myapp-193:v6
  18 │           name: my-container-1
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container-1' of Deployment 'dep1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment41.yaml:17-20
────────────────────────────────────────
  17 ┌         - image: aputra/myapp-193:v6
  18 │           name: my-container-1
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container-1' of Deployment 'dep1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment41.yaml:17-20
────────────────────────────────────────
  17 ┌         - image: aputra/myapp-193:v6
  18 │           name: my-container-1
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container-1' of Deployment 'dep1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment41.yaml:17-20
────────────────────────────────────────
  17 ┌         - image: aputra/myapp-193:v6
  18 │           name: my-container-1
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container-1' of Deployment 'dep1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment41.yaml:17-20
────────────────────────────────────────
  17 ┌         - image: aputra/myapp-193:v6
  18 │           name: my-container-1
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container-1' of Deployment 'dep1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment41.yaml:17-20
────────────────────────────────────────
  17 ┌         - image: aputra/myapp-193:v6
  18 │           name: my-container-1
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container-1' of Deployment 'dep1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment41.yaml:17-20
────────────────────────────────────────
  17 ┌         - image: aputra/myapp-193:v6
  18 │           name: my-container-1
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment41.yaml:17-20
────────────────────────────────────────
  17 ┌         - image: aputra/myapp-193:v6
  18 │           name: my-container-1
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container-1" of deployment "dep1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment41.yaml:17-20
────────────────────────────────────────
  17 ┌         - image: aputra/myapp-193:v6
  18 │           name: my-container-1
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment41.yaml:17-20
────────────────────────────────────────
  17 ┌         - image: aputra/myapp-193:v6
  18 │           name: my-container-1
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment dep1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment41.yaml:5
────────────────────────────────────────
   5 [   name: dep1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dep1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment41.yaml:17-20
────────────────────────────────────────
  17 ┌         - image: aputra/myapp-193:v6
  18 │           name: my-container-1
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment dep1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment41.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │         - image: aputra/myapp-193:v6
  18 │           name: my-container-1
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-container-1 in deployment dep1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment41.yaml:17-20
────────────────────────────────────────
  17 ┌         - image: aputra/myapp-193:v6
  18 │           name: my-container-1
  19 │           ports:
  20 └             - containerPort: 8080
────────────────────────────────────────



0-deployment42.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment42.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment42.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container-1' of 'deployment' 'my-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment42.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment42.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment42.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment42.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment42.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment42.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment42.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment42.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment42.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment42.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container-1" of deployment "my-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment42.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment42.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment42.yaml:5-7
────────────────────────────────────────
   5 ┌   name: my-deployment
   6 │   labels:
   7 └     team: dev1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment42.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment42.yaml:18-22
────────────────────────────────────────
  18 ┌       containers:
  19 │         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-container-1 in deployment my-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment42.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────



0-deployment43.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment43.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment43.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container-1' of 'deployment' 'my-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment43.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment43.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment43.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment43.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment43.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment43.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment43.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment43.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment43.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment43.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container-1" of deployment "my-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment43.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment43.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment43.yaml:5-7
────────────────────────────────────────
   5 ┌   name: my-deployment
   6 │   labels:
   7 └     team: dev1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment43.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment43.yaml:18-23
────────────────────────────────────────
  18 ┌       containers:
  19 │         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-container-1 in deployment my-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment43.yaml:19-23
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 │             - name: web
  23 └               containerPort: 8080
────────────────────────────────────────



0-deployment44.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment44.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment44.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container-1' of 'deployment' 'my-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment44.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment44.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment44.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment44.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment44.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment44.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment44.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment44.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container-1' of Deployment 'my-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment44.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment44.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container-1" of deployment "my-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment44.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment44.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment44.yaml:5-7
────────────────────────────────────────
   5 ┌   name: my-deployment
   6 │   labels:
   7 └     team: dev1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment44.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment44.yaml:18-22
────────────────────────────────────────
  18 ┌       containers:
  19 │         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-container-1 in deployment my-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment44.yaml:19-22
────────────────────────────────────────
  19 ┌         - image: aputra/myapp-193:v6
  20 │           name: my-container-1
  21 │           ports:
  22 └             - containerPort: 8080
────────────────────────────────────────



0-deployment5.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'blackbox-exporter' of Deployment 'blackbox-exporter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment5.yaml:18-38
────────────────────────────────────────
  18 ┌         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 │             httpGet:
  26 └               path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'blackbox-exporter' of Deployment 'blackbox-exporter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment5.yaml:18-38
────────────────────────────────────────
  18 ┌         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 │             httpGet:
  26 └               path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'blackbox-exporter' of 'deployment' 'blackbox-exporter' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment5.yaml:18-38
────────────────────────────────────────
  18 ┌         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 │             httpGet:
  26 └               path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'blackbox-exporter' of Deployment 'blackbox-exporter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment5.yaml:18-38
────────────────────────────────────────
  18 ┌         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 │             httpGet:
  26 └               path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'blackbox-exporter' of Deployment 'blackbox-exporter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment5.yaml:18-38
────────────────────────────────────────
  18 ┌         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 │             httpGet:
  26 └               path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'blackbox-exporter' of Deployment 'blackbox-exporter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment5.yaml:18-38
────────────────────────────────────────
  18 ┌         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 │             httpGet:
  26 └               path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'blackbox-exporter' of Deployment 'blackbox-exporter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment5.yaml:18-38
────────────────────────────────────────
  18 ┌         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 │             httpGet:
  26 └               path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment5.yaml:18-38
────────────────────────────────────────
  18 ┌         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 │             httpGet:
  26 └               path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "blackbox-exporter" of deployment "blackbox-exporter" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment5.yaml:18-38
────────────────────────────────────────
  18 ┌         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 │             httpGet:
  26 └               path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment5.yaml:18-38
────────────────────────────────────────
  18 ┌         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 │             httpGet:
  26 └               path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container blackbox-exporter in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment5.yaml:18-38
────────────────────────────────────────
  18 ┌         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 │             httpGet:
  26 └               path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment blackbox-exporter in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment5.yaml:17-38
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 └             httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container blackbox-exporter in deployment blackbox-exporter (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment5.yaml:18-38
────────────────────────────────────────
  18 ┌         - name: blackbox-exporter
  19 │           image: quay.io/prometheus/blackbox-exporter:v0.23.0
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - name: http
  23 │               containerPort: 9115
  24 │           livenessProbe:
  25 │             httpGet:
  26 └               path: /health
  ..   
────────────────────────────────────────



0-deployment6.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'echoserver' of Deployment 'echoserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment6.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'echoserver' of Deployment 'echoserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment6.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'echoserver' of 'deployment' 'echoserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment6.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'echoserver' of Deployment 'echoserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment6.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'echoserver' of Deployment 'echoserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment6.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'echoserver' of Deployment 'echoserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment6.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'echoserver' of Deployment 'echoserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment6.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'echoserver' of Deployment 'echoserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment6.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'echoserver' of Deployment 'echoserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment6.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'echoserver' of Deployment 'echoserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment6.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'echoserver' of Deployment 'echoserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment6.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment6.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "echoserver" of deployment "echoserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment6.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment6.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment echoserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment6.yaml:5-6
────────────────────────────────────────
   5 ┌   name: echoserver
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container echoserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment6.yaml:18-21
────────────────────────────────────────
  18 ┌         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment echoserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment6.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │         - image: k8s.gcr.io/e2e-test-images/echoserver:2.5
  19 │           name: echoserver
  20 │           ports:
  21 └             - containerPort: 8080
────────────────────────────────────────



0-deployment7.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment7.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment7.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment7.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment7.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment7.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment7.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment7.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment7.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment7.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment7.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment7.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment7.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment7.yaml:5-7
────────────────────────────────────────
   5 ┌   name: nginx-deployment
   6 │   labels:
   7 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────
 0-deployment7.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment7.yaml:19-26
────────────────────────────────────────
  19 ┌         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment7.yaml:18-26
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: nginx
  20 │           image: nginx:1.14.2
  21 │           resources:
  22 │             requests:
  23 │               cpu: "2"
  24 │               memory: 4Gi
  25 │           ports:
  26 └             - containerPort: 80
────────────────────────────────────────



0-deployment8.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment8.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Deployment 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment8.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'deployment' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment8.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-deployment8.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment8.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Deployment 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment8.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-deployment8.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-deployment8.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Deployment 'myapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-deployment8.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment8.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment8.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment8.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of deployment "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment8.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment8.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment8.yaml:5-6
────────────────────────────────────────
   5 ┌   name: myapp
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment8.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment8.yaml:17-24
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in deployment myapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment8.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: myapp
  19 │           image: aputra/myapp-178:v1
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: OTLP_ENDPOINT
  24 └               value: tempo.monitoring:4318
────────────────────────────────────────



0-deployment9.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-deployment9.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 │               memory: 256Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Deployment 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-deployment9.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 │               memory: 256Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'deployment' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-deployment9.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 │               memory: 256Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-deployment9.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 │               memory: 256Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Deployment 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-deployment9.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 │               memory: 256Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-deployment9.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 │               memory: 256Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Deployment 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-deployment9.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 │               memory: 256Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-deployment9.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 │               memory: 256Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of deployment "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-deployment9.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 │               memory: 256Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-deployment9.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 │               memory: 256Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-deployment9.yaml:5-6
────────────────────────────────────────
   5 ┌   name: myapp
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment9.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 │               memory: 256Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-deployment9.yaml:16-28
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in deployment myapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-deployment9.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: myapp
  18 │           image: aputra/myapp-181:v5
  19 │           ports:
  20 │             - name: http
  21 │               containerPort: 8080
  22 │           resources:
  23 │             requests:
  24 │               memory: 256Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────



0-go-client-deployment.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'go-app-client' of Job 'go-app-client' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-go-client-deployment.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=500
  27 │             - -scaleInterval=1000
  28 │             - -randomSleep=4000
  29 │             - -target=http://go-app:8000/api/devices
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'go-app-client' of Job 'go-app-client' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-go-client-deployment.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=500
  27 │             - -scaleInterval=1000
  28 │             - -randomSleep=4000
  29 │             - -target=http://go-app:8000/api/devices
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'go-app-client' of 'job' 'go-app-client' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-go-client-deployment.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=500
  27 │             - -scaleInterval=1000
  28 │             - -randomSleep=4000
  29 │             - -target=http://go-app:8000/api/devices
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'go-app-client' of Job 'go-app-client' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-go-client-deployment.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=500
  27 │             - -scaleInterval=1000
  28 │             - -randomSleep=4000
  29 │             - -target=http://go-app:8000/api/devices
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'go-app-client' of Job 'go-app-client' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-go-client-deployment.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=500
  27 │             - -scaleInterval=1000
  28 │             - -randomSleep=4000
  29 │             - -target=http://go-app:8000/api/devices
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'go-app-client' of Job 'go-app-client' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-go-client-deployment.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=500
  27 │             - -scaleInterval=1000
  28 │             - -randomSleep=4000
  29 │             - -target=http://go-app:8000/api/devices
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'go-app-client' of Job 'go-app-client' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-go-client-deployment.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=500
  27 │             - -scaleInterval=1000
  28 │             - -randomSleep=4000
  29 │             - -target=http://go-app:8000/api/devices
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-go-client-deployment.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=500
  27 │             - -scaleInterval=1000
  28 │             - -randomSleep=4000
  29 │             - -target=http://go-app:8000/api/devices
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "go-app-client" of job "go-app-client" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-go-client-deployment.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=500
  27 │             - -scaleInterval=1000
  28 │             - -randomSleep=4000
  29 │             - -target=http://go-app:8000/api/devices
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-go-client-deployment.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=500
  27 │             - -scaleInterval=1000
  28 │             - -randomSleep=4000
  29 │             - -target=http://go-app:8000/api/devices
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job go-app-client in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-go-client-deployment.yaml:5-6
────────────────────────────────────────
   5 ┌   name: go-app-client
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container go-app-client in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-go-client-deployment.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=500
  27 │             - -scaleInterval=1000
  28 │             - -randomSleep=4000
  29 │             - -target=http://go-app:8000/api/devices
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job go-app-client in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-go-client-deployment.yaml:13-39
────────────────────────────────────────
  13 ┌       restartPolicy: Never
  14 │       nodeSelector:
  15 │         service: golang-client
  16 │       tolerations:
  17 │         - key: service
  18 │           operator: Equal
  19 │           value: golang-client
  20 │           effect: NoSchedule
  21 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container go-app-client in job go-app-client (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-go-client-deployment.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=500
  27 │             - -scaleInterval=1000
  28 │             - -randomSleep=4000
  29 │             - -target=http://go-app:8000/api/devices
  30 └           ports:
  ..   
────────────────────────────────────────



0-go-client-deployment1.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'go-app-client' of Job 'go-app-client' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-go-client-deployment1.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=30
  27 │             - -scaleInterval=4000
  28 │             - -randomSleep=90000
  29 │             - -target=http://go-app:8000/api/images
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'go-app-client' of Job 'go-app-client' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-go-client-deployment1.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=30
  27 │             - -scaleInterval=4000
  28 │             - -randomSleep=90000
  29 │             - -target=http://go-app:8000/api/images
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'go-app-client' of 'job' 'go-app-client' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-go-client-deployment1.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=30
  27 │             - -scaleInterval=4000
  28 │             - -randomSleep=90000
  29 │             - -target=http://go-app:8000/api/images
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'go-app-client' of Job 'go-app-client' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-go-client-deployment1.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=30
  27 │             - -scaleInterval=4000
  28 │             - -randomSleep=90000
  29 │             - -target=http://go-app:8000/api/images
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'go-app-client' of Job 'go-app-client' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-go-client-deployment1.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=30
  27 │             - -scaleInterval=4000
  28 │             - -randomSleep=90000
  29 │             - -target=http://go-app:8000/api/images
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'go-app-client' of Job 'go-app-client' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-go-client-deployment1.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=30
  27 │             - -scaleInterval=4000
  28 │             - -randomSleep=90000
  29 │             - -target=http://go-app:8000/api/images
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'go-app-client' of Job 'go-app-client' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-go-client-deployment1.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=30
  27 │             - -scaleInterval=4000
  28 │             - -randomSleep=90000
  29 │             - -target=http://go-app:8000/api/images
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-go-client-deployment1.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=30
  27 │             - -scaleInterval=4000
  28 │             - -randomSleep=90000
  29 │             - -target=http://go-app:8000/api/images
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "go-app-client" of job "go-app-client" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-go-client-deployment1.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=30
  27 │             - -scaleInterval=4000
  28 │             - -randomSleep=90000
  29 │             - -target=http://go-app:8000/api/images
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-go-client-deployment1.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=30
  27 │             - -scaleInterval=4000
  28 │             - -randomSleep=90000
  29 │             - -target=http://go-app:8000/api/images
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job go-app-client in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-go-client-deployment1.yaml:5-6
────────────────────────────────────────
   5 ┌   name: go-app-client
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container go-app-client in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-go-client-deployment1.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=30
  27 │             - -scaleInterval=4000
  28 │             - -randomSleep=90000
  29 │             - -target=http://go-app:8000/api/images
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job go-app-client in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-go-client-deployment1.yaml:13-39
────────────────────────────────────────
  13 ┌       restartPolicy: Never
  14 │       nodeSelector:
  15 │         service: golang-client
  16 │       tolerations:
  17 │         - key: service
  18 │           operator: Equal
  19 │           value: golang-client
  20 │           effect: NoSchedule
  21 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container go-app-client in job go-app-client (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-go-client-deployment1.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=30
  27 │             - -scaleInterval=4000
  28 │             - -randomSleep=90000
  29 │             - -target=http://go-app:8000/api/images
  30 └           ports:
  ..   
────────────────────────────────────────



0-go-client-deployment2.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'go-app-client' of Job 'go-app-client' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-go-client-deployment2.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=500
  27 │             - -scaleInterval=1000
  28 │             - -randomSleep=4000
  29 │             - -target=http://go-app:8000/api/devices
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'go-app-client' of Job 'go-app-client' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-go-client-deployment2.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=500
  27 │             - -scaleInterval=1000
  28 │             - -randomSleep=4000
  29 │             - -target=http://go-app:8000/api/devices
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'go-app-client' of 'job' 'go-app-client' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-go-client-deployment2.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=500
  27 │             - -scaleInterval=1000
  28 │             - -randomSleep=4000
  29 │             - -target=http://go-app:8000/api/devices
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'go-app-client' of Job 'go-app-client' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-go-client-deployment2.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=500
  27 │             - -scaleInterval=1000
  28 │             - -randomSleep=4000
  29 │             - -target=http://go-app:8000/api/devices
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'go-app-client' of Job 'go-app-client' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-go-client-deployment2.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=500
  27 │             - -scaleInterval=1000
  28 │             - -randomSleep=4000
  29 │             - -target=http://go-app:8000/api/devices
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'go-app-client' of Job 'go-app-client' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-go-client-deployment2.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=500
  27 │             - -scaleInterval=1000
  28 │             - -randomSleep=4000
  29 │             - -target=http://go-app:8000/api/devices
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'go-app-client' of Job 'go-app-client' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-go-client-deployment2.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=500
  27 │             - -scaleInterval=1000
  28 │             - -randomSleep=4000
  29 │             - -target=http://go-app:8000/api/devices
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-go-client-deployment2.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=500
  27 │             - -scaleInterval=1000
  28 │             - -randomSleep=4000
  29 │             - -target=http://go-app:8000/api/devices
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "go-app-client" of job "go-app-client" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-go-client-deployment2.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=500
  27 │             - -scaleInterval=1000
  28 │             - -randomSleep=4000
  29 │             - -target=http://go-app:8000/api/devices
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-go-client-deployment2.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=500
  27 │             - -scaleInterval=1000
  28 │             - -randomSleep=4000
  29 │             - -target=http://go-app:8000/api/devices
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job go-app-client in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-go-client-deployment2.yaml:5-6
────────────────────────────────────────
   5 ┌   name: go-app-client
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container go-app-client in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-go-client-deployment2.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=500
  27 │             - -scaleInterval=1000
  28 │             - -randomSleep=4000
  29 │             - -target=http://go-app:8000/api/devices
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job go-app-client in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-go-client-deployment2.yaml:13-39
────────────────────────────────────────
  13 ┌       restartPolicy: Never
  14 │       nodeSelector:
  15 │         service: golang-client
  16 │       tolerations:
  17 │         - key: service
  18 │           operator: Equal
  19 │           value: golang-client
  20 │           effect: NoSchedule
  21 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container go-app-client in job go-app-client (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-go-client-deployment2.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=500
  27 │             - -scaleInterval=1000
  28 │             - -randomSleep=4000
  29 │             - -target=http://go-app:8000/api/devices
  30 └           ports:
  ..   
────────────────────────────────────────



0-go-client-deployment3.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'go-app-client' of Job 'go-app-client' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-go-client-deployment3.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=30
  27 │             - -scaleInterval=4000
  28 │             - -randomSleep=90000
  29 │             - -target=http://go-app:8000/api/images
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'go-app-client' of Job 'go-app-client' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-go-client-deployment3.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=30
  27 │             - -scaleInterval=4000
  28 │             - -randomSleep=90000
  29 │             - -target=http://go-app:8000/api/images
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'go-app-client' of 'job' 'go-app-client' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-go-client-deployment3.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=30
  27 │             - -scaleInterval=4000
  28 │             - -randomSleep=90000
  29 │             - -target=http://go-app:8000/api/images
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'go-app-client' of Job 'go-app-client' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-go-client-deployment3.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=30
  27 │             - -scaleInterval=4000
  28 │             - -randomSleep=90000
  29 │             - -target=http://go-app:8000/api/images
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'go-app-client' of Job 'go-app-client' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-go-client-deployment3.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=30
  27 │             - -scaleInterval=4000
  28 │             - -randomSleep=90000
  29 │             - -target=http://go-app:8000/api/images
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'go-app-client' of Job 'go-app-client' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-go-client-deployment3.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=30
  27 │             - -scaleInterval=4000
  28 │             - -randomSleep=90000
  29 │             - -target=http://go-app:8000/api/images
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'go-app-client' of Job 'go-app-client' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-go-client-deployment3.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=30
  27 │             - -scaleInterval=4000
  28 │             - -randomSleep=90000
  29 │             - -target=http://go-app:8000/api/images
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-go-client-deployment3.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=30
  27 │             - -scaleInterval=4000
  28 │             - -randomSleep=90000
  29 │             - -target=http://go-app:8000/api/images
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "go-app-client" of job "go-app-client" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-go-client-deployment3.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=30
  27 │             - -scaleInterval=4000
  28 │             - -randomSleep=90000
  29 │             - -target=http://go-app:8000/api/images
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-go-client-deployment3.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=30
  27 │             - -scaleInterval=4000
  28 │             - -randomSleep=90000
  29 │             - -target=http://go-app:8000/api/images
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job go-app-client in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-go-client-deployment3.yaml:5-6
────────────────────────────────────────
   5 ┌   name: go-app-client
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container go-app-client in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-go-client-deployment3.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=30
  27 │             - -scaleInterval=4000
  28 │             - -randomSleep=90000
  29 │             - -target=http://go-app:8000/api/images
  30 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job go-app-client in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-go-client-deployment3.yaml:13-39
────────────────────────────────────────
  13 ┌       restartPolicy: Never
  14 │       nodeSelector:
  15 │         service: golang-client
  16 │       tolerations:
  17 │         - key: service
  18 │           operator: Equal
  19 │           value: golang-client
  20 │           effect: NoSchedule
  21 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container go-app-client in job go-app-client (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-go-client-deployment3.yaml:22-39
────────────────────────────────────────
  22 ┌         - name: go-app-client
  23 │           image: aputra/client-180:v14
  24 │           command:
  25 │             - /myapp
  26 │             - -maxClients=30
  27 │             - -scaleInterval=4000
  28 │             - -randomSleep=90000
  29 │             - -target=http://go-app:8000/api/images
  30 └           ports:
  ..   
────────────────────────────────────────



0-job.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rabbitmq-client' of Job 'rabbitmq-publish' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-job.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rabbitmq-client' of Job 'rabbitmq-publish' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-job.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rabbitmq-client' of 'job' 'rabbitmq-publish' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-job.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rabbitmq-client' of Job 'rabbitmq-publish' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-job.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rabbitmq-client' of Job 'rabbitmq-publish' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-job.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rabbitmq-client' of Job 'rabbitmq-publish' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-job.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rabbitmq-client' of Job 'rabbitmq-publish' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-job.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rabbitmq-client' of Job 'rabbitmq-publish' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-job.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rabbitmq-client' of Job 'rabbitmq-publish' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-job.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rabbitmq-client' of Job 'rabbitmq-publish' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-job.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rabbitmq-client' of Job 'rabbitmq-publish' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-job.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-job.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rabbitmq-client" of job "rabbitmq-publish" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-job.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-job.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0110 (LOW): job rabbitmq-publish in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-job.yaml:5-6
────────────────────────────────────────
   5 ┌   name: rabbitmq-publish
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rabbitmq-publish in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-job.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job rabbitmq-publish in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-job.yaml:10-19
────────────────────────────────────────
  10 ┌       containers:
  11 │         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 │               "300",
  18 │             ]
  19 └       restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rabbitmq-client in job rabbitmq-publish (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-job.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────



0-job1.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rabbitmq-client' of Job 'rabbitmq-publish' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-job1.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rabbitmq-client' of Job 'rabbitmq-publish' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-job1.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rabbitmq-client' of 'job' 'rabbitmq-publish' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-job1.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rabbitmq-client' of Job 'rabbitmq-publish' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-job1.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rabbitmq-client' of Job 'rabbitmq-publish' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-job1.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rabbitmq-client' of Job 'rabbitmq-publish' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-job1.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rabbitmq-client' of Job 'rabbitmq-publish' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-job1.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rabbitmq-client' of Job 'rabbitmq-publish' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-job1.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rabbitmq-client' of Job 'rabbitmq-publish' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-job1.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rabbitmq-client' of Job 'rabbitmq-publish' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-job1.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rabbitmq-client' of Job 'rabbitmq-publish' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-job1.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-job1.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rabbitmq-client" of job "rabbitmq-publish" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-job1.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-job1.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0110 (LOW): job rabbitmq-publish in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-job1.yaml:5-6
────────────────────────────────────────
   5 ┌   name: rabbitmq-publish
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rabbitmq-publish in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-job1.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job rabbitmq-publish in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-job1.yaml:10-19
────────────────────────────────────────
  10 ┌       containers:
  11 │         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 │               "300",
  18 │             ]
  19 └       restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rabbitmq-client in job rabbitmq-publish (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-job1.yaml:11-17
────────────────────────────────────────
  11 ┌         - name: rabbitmq-client
  12 │           image: ghcr.io/kedacore/rabbitmq-client:v1.0
  13 │           command:
  14 │             [
  15 │               "send",
  16 │               "amqp://myapp:devops123@rabbitmq.rabbitmq.svc.cluster.local:5672",
  17 └               "300",
────────────────────────────────────────



0-linkerd-deployment.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp-linkerd' of Deployment 'myapp-linkerd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-linkerd-deployment.yaml:24-35
────────────────────────────────────────
  24 ┌         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 │               memory: 2Gi
  32 └               cpu: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp-linkerd' of Deployment 'myapp-linkerd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-linkerd-deployment.yaml:24-35
────────────────────────────────────────
  24 ┌         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 │               memory: 2Gi
  32 └               cpu: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp-linkerd' of 'deployment' 'myapp-linkerd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-linkerd-deployment.yaml:24-35
────────────────────────────────────────
  24 ┌         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 │               memory: 2Gi
  32 └               cpu: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp-linkerd' of Deployment 'myapp-linkerd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-linkerd-deployment.yaml:24-35
────────────────────────────────────────
  24 ┌         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 │               memory: 2Gi
  32 └               cpu: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp-linkerd' of Deployment 'myapp-linkerd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-linkerd-deployment.yaml:24-35
────────────────────────────────────────
  24 ┌         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 │               memory: 2Gi
  32 └               cpu: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp-linkerd' of Deployment 'myapp-linkerd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-linkerd-deployment.yaml:24-35
────────────────────────────────────────
  24 ┌         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 │               memory: 2Gi
  32 └               cpu: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp-linkerd' of Deployment 'myapp-linkerd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-linkerd-deployment.yaml:24-35
────────────────────────────────────────
  24 ┌         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 │               memory: 2Gi
  32 └               cpu: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-linkerd-deployment.yaml:24-35
────────────────────────────────────────
  24 ┌         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 │               memory: 2Gi
  32 └               cpu: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp-linkerd" of deployment "myapp-linkerd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-linkerd-deployment.yaml:24-35
────────────────────────────────────────
  24 ┌         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 │               memory: 2Gi
  32 └               cpu: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-linkerd-deployment.yaml:24-35
────────────────────────────────────────
  24 ┌         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 │               memory: 2Gi
  32 └               cpu: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myapp-linkerd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-linkerd-deployment.yaml:5-6
────────────────────────────────────────
   5 ┌   name: myapp-linkerd
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-linkerd in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-linkerd-deployment.yaml:24-35
────────────────────────────────────────
  24 ┌         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 │               memory: 2Gi
  32 └               cpu: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myapp-linkerd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-linkerd-deployment.yaml:23-42
────────────────────────────────────────
  23 ┌       containers:
  24 │         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 └               memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp-linkerd in deployment myapp-linkerd (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-linkerd-deployment.yaml:24-35
────────────────────────────────────────
  24 ┌         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 │               memory: 2Gi
  32 └               cpu: "1"
  ..   
────────────────────────────────────────



0-linkerd-deployment1.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp-linkerd' of Deployment 'myapp-linkerd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-linkerd-deployment1.yaml:24-35
────────────────────────────────────────
  24 ┌         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 │               memory: 2Gi
  32 └               cpu: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp-linkerd' of Deployment 'myapp-linkerd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-linkerd-deployment1.yaml:24-35
────────────────────────────────────────
  24 ┌         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 │               memory: 2Gi
  32 └               cpu: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp-linkerd' of 'deployment' 'myapp-linkerd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-linkerd-deployment1.yaml:24-35
────────────────────────────────────────
  24 ┌         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 │               memory: 2Gi
  32 └               cpu: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp-linkerd' of Deployment 'myapp-linkerd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-linkerd-deployment1.yaml:24-35
────────────────────────────────────────
  24 ┌         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 │               memory: 2Gi
  32 └               cpu: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp-linkerd' of Deployment 'myapp-linkerd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-linkerd-deployment1.yaml:24-35
────────────────────────────────────────
  24 ┌         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 │               memory: 2Gi
  32 └               cpu: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp-linkerd' of Deployment 'myapp-linkerd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-linkerd-deployment1.yaml:24-35
────────────────────────────────────────
  24 ┌         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 │               memory: 2Gi
  32 └               cpu: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp-linkerd' of Deployment 'myapp-linkerd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-linkerd-deployment1.yaml:24-35
────────────────────────────────────────
  24 ┌         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 │               memory: 2Gi
  32 └               cpu: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-linkerd-deployment1.yaml:24-35
────────────────────────────────────────
  24 ┌         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 │               memory: 2Gi
  32 └               cpu: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp-linkerd" of deployment "myapp-linkerd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-linkerd-deployment1.yaml:24-35
────────────────────────────────────────
  24 ┌         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 │               memory: 2Gi
  32 └               cpu: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-linkerd-deployment1.yaml:24-35
────────────────────────────────────────
  24 ┌         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 │               memory: 2Gi
  32 └               cpu: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myapp-linkerd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-linkerd-deployment1.yaml:5-6
────────────────────────────────────────
   5 ┌   name: myapp-linkerd
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-linkerd in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-linkerd-deployment1.yaml:24-35
────────────────────────────────────────
  24 ┌         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 │               memory: 2Gi
  32 └               cpu: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myapp-linkerd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-linkerd-deployment1.yaml:23-42
────────────────────────────────────────
  23 ┌       containers:
  24 │         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 └               memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp-linkerd in deployment myapp-linkerd (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-linkerd-deployment1.yaml:24-35
────────────────────────────────────────
  24 ┌         - name: myapp-linkerd
  25 │           image: aputra/service-b-172:v4
  26 │           ports:
  27 │             - name: http
  28 │               containerPort: 8181
  29 │           resources:
  30 │             requests:
  31 │               memory: 2Gi
  32 └               cpu: "1"
  ..   
────────────────────────────────────────



0-linkerd-job.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'linkerd-client' of Job 'linkerd-client' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-linkerd-job.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-linkerd-job.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'linkerd-client' of 'job' 'linkerd-client' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-linkerd-job.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-linkerd-job.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'linkerd-client' of Job 'linkerd-client' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-linkerd-job.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'linkerd-client' of Job 'linkerd-client' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-linkerd-job.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-linkerd-job.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-linkerd-job.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-linkerd-job.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-linkerd-job.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-linkerd-job.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-linkerd-job.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "linkerd-client" of job "linkerd-client" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-linkerd-job.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-linkerd-job.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0110 (LOW): job linkerd-client in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-linkerd-job.yaml:5-6
────────────────────────────────────────
   5 ┌   name: linkerd-client
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container linkerd-client in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-linkerd-job.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job linkerd-client in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-linkerd-job.yaml:19-26
────────────────────────────────────────
  19 ┌       restartPolicy: Never
  20 │       containers:
  21 │         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container linkerd-client in job linkerd-client (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-linkerd-job.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────



0-linkerd-job1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'linkerd-client' of Job 'linkerd-client' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-linkerd-job1.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-linkerd-job1.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'linkerd-client' of 'job' 'linkerd-client' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-linkerd-job1.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-linkerd-job1.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'linkerd-client' of Job 'linkerd-client' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-linkerd-job1.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'linkerd-client' of Job 'linkerd-client' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-linkerd-job1.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-linkerd-job1.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-linkerd-job1.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-linkerd-job1.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-linkerd-job1.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-linkerd-job1.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-linkerd-job1.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "linkerd-client" of job "linkerd-client" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-linkerd-job1.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-linkerd-job1.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0110 (LOW): job linkerd-client in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-linkerd-job1.yaml:5-6
────────────────────────────────────────
   5 ┌   name: linkerd-client
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container linkerd-client in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-linkerd-job1.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job linkerd-client in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-linkerd-job1.yaml:19-27
────────────────────────────────────────
  19 ┌       restartPolicy: Never
  20 │       containers:
  21 │         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container linkerd-client in job linkerd-client (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-linkerd-job1.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────



0-linkerd-job2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'linkerd-client' of Job 'linkerd-client' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-linkerd-job2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-linkerd-job2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'linkerd-client' of 'job' 'linkerd-client' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-linkerd-job2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-linkerd-job2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'linkerd-client' of Job 'linkerd-client' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-linkerd-job2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'linkerd-client' of Job 'linkerd-client' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-linkerd-job2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-linkerd-job2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-linkerd-job2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-linkerd-job2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-linkerd-job2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-linkerd-job2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-linkerd-job2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "linkerd-client" of job "linkerd-client" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-linkerd-job2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-linkerd-job2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0110 (LOW): job linkerd-client in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-linkerd-job2.yaml:5-6
────────────────────────────────────────
   5 ┌   name: linkerd-client
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container linkerd-client in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-linkerd-job2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job linkerd-client in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-linkerd-job2.yaml:19-26
────────────────────────────────────────
  19 ┌       restartPolicy: Never
  20 │       containers:
  21 │         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container linkerd-client in job linkerd-client (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-linkerd-job2.yaml:21-26
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command: ["/main", "-maxClients", "1000", "-scaleInterval", "1000", "-target1", "http://myapp-linkerd.default:8181/api/devices"]
  24 │           ports:
  25 │             - name: metrics
  26 └               containerPort: 8081
────────────────────────────────────────



0-linkerd-job3.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'linkerd-client' of Job 'linkerd-client' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-linkerd-job3.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-linkerd-job3.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'linkerd-client' of 'job' 'linkerd-client' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-linkerd-job3.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-linkerd-job3.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'linkerd-client' of Job 'linkerd-client' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-linkerd-job3.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'linkerd-client' of Job 'linkerd-client' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-linkerd-job3.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-linkerd-job3.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-linkerd-job3.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-linkerd-job3.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-linkerd-job3.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'linkerd-client' of Job 'linkerd-client' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-linkerd-job3.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-linkerd-job3.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "linkerd-client" of job "linkerd-client" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-linkerd-job3.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-linkerd-job3.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0110 (LOW): job linkerd-client in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-linkerd-job3.yaml:5-6
────────────────────────────────────────
   5 ┌   name: linkerd-client
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container linkerd-client in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-linkerd-job3.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job linkerd-client in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-linkerd-job3.yaml:19-27
────────────────────────────────────────
  19 ┌       restartPolicy: Never
  20 │       containers:
  21 │         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container linkerd-client in job linkerd-client (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-linkerd-job3.yaml:21-27
────────────────────────────────────────
  21 ┌         - name: linkerd-client
  22 │           image: aputra/client-172:v2
  23 │           command:
  24 │             ["/main", "-maxClients", "500", "-scaleInterval", "1000", "-target1", "http://service-a-linkerd.default:8282/api/devices"]
  25 │           ports:
  26 │             - name: metrics
  27 └               containerPort: 8081
────────────────────────────────────────



0-metric-server_6.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 0-metric-server_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



0-metric-server_7.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-metric-server_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-metric-server_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-metric-server_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-metric-server_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-metric-server_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-metric-server_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-metric-server_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-metric-server_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 0-metric-server_7.yaml:9-67
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-metric-server_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-metric-server_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment metrics-server in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-metric-server_7.yaml:20-67
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  ..   
────────────────────────────────────────



0-metrics-server1_6.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 0-metrics-server1_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



0-metrics-server1_7.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-metrics-server1_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-metrics-server1_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-metrics-server1_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-metrics-server1_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-metrics-server1_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-metrics-server1_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-metrics-server1_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-metrics-server1_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 0-metrics-server1_7.yaml:9-66
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-metrics-server1_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-metrics-server1_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment metrics-server in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-metrics-server1_7.yaml:20-66
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



0-metrics-server_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 0-metrics-server_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



0-metrics-server_7.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-metrics-server_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-metrics-server_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-metrics-server_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-metrics-server_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-metrics-server_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-metrics-server_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-metrics-server_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-metrics-server_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 0-metrics-server_7.yaml:9-66
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-metrics-server_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-metrics-server_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment metrics-server in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-metrics-server_7.yaml:20-66
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



0-mongo-secret-sts_1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mongo' of StatefulSet 'mongodb-sts' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-mongo-secret-sts_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: mongo
  18 │         image: mongo:latest
  19 │         env:
  20 │         - name: MONGO_INITDB_ROOT_USERNAME
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mongodb-root-credentials
  24 │               key: username
  25 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mongo' of StatefulSet 'mongodb-sts' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-mongo-secret-sts_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: mongo
  18 │         image: mongo:latest
  19 │         env:
  20 │         - name: MONGO_INITDB_ROOT_USERNAME
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mongodb-root-credentials
  24 │               key: username
  25 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mongo' of 'statefulset' 'mongodb-sts' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-mongo-secret-sts_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: mongo
  18 │         image: mongo:latest
  19 │         env:
  20 │         - name: MONGO_INITDB_ROOT_USERNAME
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mongodb-root-credentials
  24 │               key: username
  25 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mongo' of StatefulSet 'mongodb-sts' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-mongo-secret-sts_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: mongo
  18 │         image: mongo:latest
  19 │         env:
  20 │         - name: MONGO_INITDB_ROOT_USERNAME
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mongodb-root-credentials
  24 │               key: username
  25 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mongo' of StatefulSet 'mongodb-sts' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-mongo-secret-sts_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: mongo
  18 │         image: mongo:latest
  19 │         env:
  20 │         - name: MONGO_INITDB_ROOT_USERNAME
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mongodb-root-credentials
  24 │               key: username
  25 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mongo' of StatefulSet 'mongodb-sts' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 0-mongo-secret-sts_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: mongo
  18 │         image: mongo:latest
  19 │         env:
  20 │         - name: MONGO_INITDB_ROOT_USERNAME
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mongodb-root-credentials
  24 │               key: username
  25 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mongo' of StatefulSet 'mongodb-sts' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-mongo-secret-sts_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: mongo
  18 │         image: mongo:latest
  19 │         env:
  20 │         - name: MONGO_INITDB_ROOT_USERNAME
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mongodb-root-credentials
  24 │               key: username
  25 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mongo' of StatefulSet 'mongodb-sts' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-mongo-secret-sts_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: mongo
  18 │         image: mongo:latest
  19 │         env:
  20 │         - name: MONGO_INITDB_ROOT_USERNAME
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mongodb-root-credentials
  24 │               key: username
  25 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mongo' of StatefulSet 'mongodb-sts' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-mongo-secret-sts_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: mongo
  18 │         image: mongo:latest
  19 │         env:
  20 │         - name: MONGO_INITDB_ROOT_USERNAME
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mongodb-root-credentials
  24 │               key: username
  25 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mongo' of StatefulSet 'mongodb-sts' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-mongo-secret-sts_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: mongo
  18 │         image: mongo:latest
  19 │         env:
  20 │         - name: MONGO_INITDB_ROOT_USERNAME
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mongodb-root-credentials
  24 │               key: username
  25 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mongo' of StatefulSet 'mongodb-sts' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-mongo-secret-sts_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: mongo
  18 │         image: mongo:latest
  19 │         env:
  20 │         - name: MONGO_INITDB_ROOT_USERNAME
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mongodb-root-credentials
  24 │               key: username
  25 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mongo' of StatefulSet 'mongodb-sts' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-mongo-secret-sts_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: mongo
  18 │         image: mongo:latest
  19 │         env:
  20 │         - name: MONGO_INITDB_ROOT_USERNAME
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mongodb-root-credentials
  24 │               key: username
  25 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-mongo-secret-sts_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: mongo
  18 │         image: mongo:latest
  19 │         env:
  20 │         - name: MONGO_INITDB_ROOT_USERNAME
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mongodb-root-credentials
  24 │               key: username
  25 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mongo" of statefulset "mongodb-sts" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-mongo-secret-sts_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: mongo
  18 │         image: mongo:latest
  19 │         env:
  20 │         - name: MONGO_INITDB_ROOT_USERNAME
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mongodb-root-credentials
  24 │               key: username
  25 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-mongo-secret-sts_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: mongo
  18 │         image: mongo:latest
  19 │         env:
  20 │         - name: MONGO_INITDB_ROOT_USERNAME
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mongodb-root-credentials
  24 │               key: username
  25 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset mongodb-sts in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-mongo-secret-sts_1.yaml:4
────────────────────────────────────────
   4 [   name: mongodb-sts
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mongodb-sts in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-mongo-secret-sts_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: mongo
  18 │         image: mongo:latest
  19 │         env:
  20 │         - name: MONGO_INITDB_ROOT_USERNAME
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mongodb-root-credentials
  24 │               key: username
  25 └         - name: MONGO_INITDB_ROOT_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mongodb-sts in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-mongo-secret-sts_1.yaml:16-38
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: mongo
  18 │         image: mongo:latest
  19 │         env:
  20 │         - name: MONGO_INITDB_ROOT_USERNAME
  21 │           valueFrom:
  22 │             secretKeyRef:
  23 │               name: mongodb-root-credentials
  24 └               key: username
  ..   
────────────────────────────────────────



0-mongo-sts.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mongo' of StatefulSet 'mongodb-sts' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-mongo-sts.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: mongo
  18 │           image: mongo:latest
  19 │           env:
  20 │             - name: MONGO_INITDB_ROOT_USERNAME
  21 │               value: "root"
  22 │             - name: MONGO_INITDB_ROOT_PASSWORD
  23 │               value: "Password"
  24 │           ports:
  25 └             - containerPort: 27017
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mongo' of StatefulSet 'mongodb-sts' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-mongo-sts.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: mongo
  18 │           image: mongo:latest
  19 │           env:
  20 │             - name: MONGO_INITDB_ROOT_USERNAME
  21 │               value: "root"
  22 │             - name: MONGO_INITDB_ROOT_PASSWORD
  23 │               value: "Password"
  24 │           ports:
  25 └             - containerPort: 27017
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mongo' of 'statefulset' 'mongodb-sts' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-mongo-sts.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: mongo
  18 │           image: mongo:latest
  19 │           env:
  20 │             - name: MONGO_INITDB_ROOT_USERNAME
  21 │               value: "root"
  22 │             - name: MONGO_INITDB_ROOT_PASSWORD
  23 │               value: "Password"
  24 │           ports:
  25 └             - containerPort: 27017
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mongo' of StatefulSet 'mongodb-sts' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-mongo-sts.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: mongo
  18 │           image: mongo:latest
  19 │           env:
  20 │             - name: MONGO_INITDB_ROOT_USERNAME
  21 │               value: "root"
  22 │             - name: MONGO_INITDB_ROOT_PASSWORD
  23 │               value: "Password"
  24 │           ports:
  25 └             - containerPort: 27017
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mongo' of StatefulSet 'mongodb-sts' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-mongo-sts.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: mongo
  18 │           image: mongo:latest
  19 │           env:
  20 │             - name: MONGO_INITDB_ROOT_USERNAME
  21 │               value: "root"
  22 │             - name: MONGO_INITDB_ROOT_PASSWORD
  23 │               value: "Password"
  24 │           ports:
  25 └             - containerPort: 27017
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mongo' of StatefulSet 'mongodb-sts' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 0-mongo-sts.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: mongo
  18 │           image: mongo:latest
  19 │           env:
  20 │             - name: MONGO_INITDB_ROOT_USERNAME
  21 │               value: "root"
  22 │             - name: MONGO_INITDB_ROOT_PASSWORD
  23 │               value: "Password"
  24 │           ports:
  25 └             - containerPort: 27017
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mongo' of StatefulSet 'mongodb-sts' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-mongo-sts.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: mongo
  18 │           image: mongo:latest
  19 │           env:
  20 │             - name: MONGO_INITDB_ROOT_USERNAME
  21 │               value: "root"
  22 │             - name: MONGO_INITDB_ROOT_PASSWORD
  23 │               value: "Password"
  24 │           ports:
  25 └             - containerPort: 27017
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mongo' of StatefulSet 'mongodb-sts' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-mongo-sts.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: mongo
  18 │           image: mongo:latest
  19 │           env:
  20 │             - name: MONGO_INITDB_ROOT_USERNAME
  21 │               value: "root"
  22 │             - name: MONGO_INITDB_ROOT_PASSWORD
  23 │               value: "Password"
  24 │           ports:
  25 └             - containerPort: 27017
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mongo' of StatefulSet 'mongodb-sts' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-mongo-sts.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: mongo
  18 │           image: mongo:latest
  19 │           env:
  20 │             - name: MONGO_INITDB_ROOT_USERNAME
  21 │               value: "root"
  22 │             - name: MONGO_INITDB_ROOT_PASSWORD
  23 │               value: "Password"
  24 │           ports:
  25 └             - containerPort: 27017
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mongo' of StatefulSet 'mongodb-sts' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-mongo-sts.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: mongo
  18 │           image: mongo:latest
  19 │           env:
  20 │             - name: MONGO_INITDB_ROOT_USERNAME
  21 │               value: "root"
  22 │             - name: MONGO_INITDB_ROOT_PASSWORD
  23 │               value: "Password"
  24 │           ports:
  25 └             - containerPort: 27017
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mongo' of StatefulSet 'mongodb-sts' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-mongo-sts.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: mongo
  18 │           image: mongo:latest
  19 │           env:
  20 │             - name: MONGO_INITDB_ROOT_USERNAME
  21 │               value: "root"
  22 │             - name: MONGO_INITDB_ROOT_PASSWORD
  23 │               value: "Password"
  24 │           ports:
  25 └             - containerPort: 27017
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mongo' of StatefulSet 'mongodb-sts' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-mongo-sts.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: mongo
  18 │           image: mongo:latest
  19 │           env:
  20 │             - name: MONGO_INITDB_ROOT_USERNAME
  21 │               value: "root"
  22 │             - name: MONGO_INITDB_ROOT_PASSWORD
  23 │               value: "Password"
  24 │           ports:
  25 └             - containerPort: 27017
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-mongo-sts.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: mongo
  18 │           image: mongo:latest
  19 │           env:
  20 │             - name: MONGO_INITDB_ROOT_USERNAME
  21 │               value: "root"
  22 │             - name: MONGO_INITDB_ROOT_PASSWORD
  23 │               value: "Password"
  24 │           ports:
  25 └             - containerPort: 27017
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mongo" of statefulset "mongodb-sts" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-mongo-sts.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: mongo
  18 │           image: mongo:latest
  19 │           env:
  20 │             - name: MONGO_INITDB_ROOT_USERNAME
  21 │               value: "root"
  22 │             - name: MONGO_INITDB_ROOT_PASSWORD
  23 │               value: "Password"
  24 │           ports:
  25 └             - containerPort: 27017
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-mongo-sts.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: mongo
  18 │           image: mongo:latest
  19 │           env:
  20 │             - name: MONGO_INITDB_ROOT_USERNAME
  21 │               value: "root"
  22 │             - name: MONGO_INITDB_ROOT_PASSWORD
  23 │               value: "Password"
  24 │           ports:
  25 └             - containerPort: 27017
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset mongodb-sts in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-mongo-sts.yaml:4
────────────────────────────────────────
   4 [   name: mongodb-sts
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mongodb-sts in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-mongo-sts.yaml:17-28
────────────────────────────────────────
  17 ┌         - name: mongo
  18 │           image: mongo:latest
  19 │           env:
  20 │             - name: MONGO_INITDB_ROOT_USERNAME
  21 │               value: "root"
  22 │             - name: MONGO_INITDB_ROOT_PASSWORD
  23 │               value: "Password"
  24 │           ports:
  25 └             - containerPort: 27017
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mongodb-sts in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-mongo-sts.yaml:16-28
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: mongo
  18 │           image: mongo:latest
  19 │           env:
  20 │             - name: MONGO_INITDB_ROOT_USERNAME
  21 │               value: "root"
  22 │             - name: MONGO_INITDB_ROOT_PASSWORD
  23 │               value: "Password"
  24 └           ports:
  ..   
────────────────────────────────────────



0-nginx.pod.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-nginx.pod.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-nginx.pod.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-nginx.pod.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-nginx.pod.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-nginx.pod.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 0-nginx.pod.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-nginx.pod.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-nginx.pod.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-nginx.pod.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-nginx.pod.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-nginx.pod.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-nginx.pod.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-nginx.pod.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-nginx.pod.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-nginx.pod.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-nginx.pod.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx
   5 │   labels:
   6 └     type: reverse-proxy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-nginx.pod.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx
  10 └     image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-nginx.pod.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx
  10 └     image: nginx
────────────────────────────────────────



0-nginx.serviceaccount.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'external-pod' of Pod 'external-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-nginx.serviceaccount.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx
   9 └     name: external-pod
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'external-pod' of Pod 'external-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-nginx.serviceaccount.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx
   9 └     name: external-pod
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'external-pod' of 'pod' 'external-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-nginx.serviceaccount.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx
   9 └     name: external-pod
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'external-pod' of Pod 'external-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-nginx.serviceaccount.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx
   9 └     name: external-pod
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'external-pod' of Pod 'external-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-nginx.serviceaccount.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx
   9 └     name: external-pod
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'external-pod' of Pod 'external-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 0-nginx.serviceaccount.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx
   9 └     name: external-pod
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'external-pod' of Pod 'external-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-nginx.serviceaccount.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx
   9 └     name: external-pod
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'external-pod' of Pod 'external-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-nginx.serviceaccount.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx
   9 └     name: external-pod
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'external-pod' of Pod 'external-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-nginx.serviceaccount.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx
   9 └     name: external-pod
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'external-pod' of Pod 'external-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-nginx.serviceaccount.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx
   9 └     name: external-pod
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'external-pod' of Pod 'external-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-nginx.serviceaccount.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx
   9 └     name: external-pod
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'external-pod' of Pod 'external-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-nginx.serviceaccount.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx
   9 └     name: external-pod
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-nginx.serviceaccount.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx
   9 └     name: external-pod
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "external-pod" of pod "external-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-nginx.serviceaccount.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx
   9 └     name: external-pod
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-nginx.serviceaccount.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx
   9 └     name: external-pod
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod external-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-nginx.serviceaccount.yaml:4
────────────────────────────────────────
   4 [   name: external-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container external-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-nginx.serviceaccount.yaml:8-9
────────────────────────────────────────
   8 ┌   - image: nginx
   9 └     name: external-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod external-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-nginx.serviceaccount.yaml:6-9
────────────────────────────────────────
   6 ┌   serviceAccountName: external
   7 │   containers:
   8 │   - image: nginx
   9 └     name: external-pod
────────────────────────────────────────



0-node-selector.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-node-selector' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-node-selector.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-node-selector' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-node-selector.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-node-selector' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-node-selector.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-node-selector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-node-selector.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-node-selector' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-node-selector.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-node-selector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-node-selector.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-node-selector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-node-selector.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-node-selector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-node-selector.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-node-selector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-node-selector.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-node-selector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-node-selector.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-node-selector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-node-selector.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-node-selector.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-node-selector" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-node-selector.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-node-selector.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-node-selector in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-node-selector.yaml:5
────────────────────────────────────────
   5 [   name: nginx-node-selector
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-node-selector in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────
 0-node-selector.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-node-selector in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-node-selector.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-node-selector in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-node-selector.yaml:16-22
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 │         - containerPort: 80
  21 │       nodeSelector:
  22 └         role: spot
────────────────────────────────────────



0-node-selector1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-node-selector' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-node-selector1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-node-selector' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-node-selector1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-node-selector' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-node-selector1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-node-selector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-node-selector1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-node-selector' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-node-selector1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-node-selector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-node-selector1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-node-selector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-node-selector1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-node-selector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-node-selector1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-node-selector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-node-selector1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-node-selector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-node-selector1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-node-selector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-node-selector1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-node-selector1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-node-selector" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-node-selector1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-node-selector1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-node-selector in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-node-selector1.yaml:5
────────────────────────────────────────
   5 [   name: nginx-node-selector
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-node-selector in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────
 0-node-selector1.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-node-selector in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-node-selector1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-node-selector in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-node-selector1.yaml:16-22
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 │         - containerPort: 80
  21 │       nodeSelector:
  22 └         role: spot
────────────────────────────────────────



0-pod.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Pod 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-pod.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Pod 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-pod.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'pod' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-pod.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-pod.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-pod.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Pod 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-pod.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-pod.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-pod.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-pod.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-pod.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-pod.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-pod.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of pod "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-pod.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-pod.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-pod.yaml:5
────────────────────────────────────────
   5 [   name: myapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   containers:
   8 │     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in pod myapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-pod.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────



0-pod1.yaml (kubernetes)
========================
Tests: 131 (SUCCESSES: 97, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'envoy' of Pod 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'myapp' of Pod 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-pod1.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'envoy' of Pod 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Pod 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-pod1.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'envoy' of 'pod' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'pod' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-pod1.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'envoy' of Pod 'myapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-pod1.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'envoy' of Pod 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-pod1.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'envoy' of Pod 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Pod 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-pod1.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'envoy' of Pod 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-pod1.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'envoy' of Pod 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-pod1.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'envoy' of Pod 'myapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-pod1.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'envoy' of Pod 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-pod1.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'envoy' of Pod 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-pod1.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-pod1.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "envoy" of pod "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of pod "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-pod1.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-pod1.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-pod1.yaml:5
────────────────────────────────────────
   5 [   name: myapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod1.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod1.yaml:7-13
────────────────────────────────────────
   7 ┌   containers:
   8 │     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 │         - containerPort: 8080
  12 │     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container envoy in pod myapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in pod myapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-pod1.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────



0-pod10.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Pod 'myapp-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-pod10.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-193:v16
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Pod 'myapp-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-pod10.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-193:v16
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'pod' 'myapp-1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-pod10.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-193:v16
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Pod 'myapp-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-pod10.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-193:v16
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Pod 'myapp-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-pod10.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-193:v16
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Pod 'myapp-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-pod10.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-193:v16
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Pod 'myapp-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-pod10.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-193:v16
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Pod 'myapp-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-pod10.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-193:v16
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Pod 'myapp-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-pod10.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-193:v16
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Pod 'myapp-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-pod10.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-193:v16
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Pod 'myapp-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-pod10.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-193:v16
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-pod10.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-193:v16
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of pod "myapp-1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-pod10.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-193:v16
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-pod10.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-193:v16
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myapp-1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-pod10.yaml:5
────────────────────────────────────────
   5 [   name: myapp-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod10.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-193:v16
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myapp-1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod10.yaml:7-11
────────────────────────────────────────
   7 ┌   containers:
   8 │     - name: myapp
   9 │       image: aputra/myapp-193:v16
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in pod myapp-1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-pod10.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-193:v16
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────



0-pod2.yaml (kubernetes)
========================
Tests: 130 (SUCCESSES: 97, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 21, MEDIUM: 7, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'init-myservice' of Pod 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-pod2.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'myapp' of Pod 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-pod2.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'init-myservice' of Pod 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-pod2.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Pod 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-pod2.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'init-myservice' of 'pod' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-pod2.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'pod' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-pod2.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'init-myservice' of Pod 'myapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-pod2.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-pod2.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'init-myservice' of Pod 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-pod2.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-pod2.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'init-myservice' of Pod 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-pod2.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Pod 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-pod2.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'init-myservice' of Pod 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-pod2.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-pod2.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'init-myservice' of Pod 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-pod2.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-pod2.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'init-myservice' of Pod 'myapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-pod2.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-pod2.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'init-myservice' of Pod 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-pod2.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-pod2.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'init-myservice' of Pod 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-pod2.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-pod2.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-pod2.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-pod2.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "init-myservice" of pod "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-pod2.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of pod "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-pod2.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-pod2.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-pod2.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-pod2.yaml:5
────────────────────────────────────────
   5 [   name: myapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod2.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod2.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod2.yaml:7-14
────────────────────────────────────────
   7 ┌   initContainers:
   8 │     - name: init-myservice
   9 │       image: busybox:1.28
  10 │   containers:
  11 │     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in pod myapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-pod2.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────



0-pod3.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Pod 'myapp-0' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-pod3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Pod 'myapp-0' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-pod3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'pod' 'myapp-0' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-pod3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Pod 'myapp-0' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-pod3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Pod 'myapp-0' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-pod3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Pod 'myapp-0' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-pod3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Pod 'myapp-0' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-pod3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Pod 'myapp-0' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-pod3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Pod 'myapp-0' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-pod3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Pod 'myapp-0' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-pod3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Pod 'myapp-0' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-pod3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-pod3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of pod "myapp-0" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-pod3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-pod3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myapp-0 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-pod3.yaml:4
────────────────────────────────────────
   4 [   name: myapp-0
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-0 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myapp-0 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod3.yaml:6-17
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 └         path: /status
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in pod myapp-0 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-pod3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────



0-pod3_1.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Pod 'myapp-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-pod3_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Pod 'myapp-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-pod3_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'pod' 'myapp-1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-pod3_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Pod 'myapp-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-pod3_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Pod 'myapp-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-pod3_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Pod 'myapp-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-pod3_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Pod 'myapp-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-pod3_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Pod 'myapp-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-pod3_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Pod 'myapp-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-pod3_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Pod 'myapp-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-pod3_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Pod 'myapp-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-pod3_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-pod3_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of pod "myapp-1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-pod3_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-pod3_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myapp-1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-pod3_1.yaml:4
────────────────────────────────────────
   4 [   name: myapp-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod3_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myapp-1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod3_1.yaml:6-17
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 └         path: /status
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in pod myapp-1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-pod3_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────



0-pod3_2.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Pod 'myapp-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-pod3_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Pod 'myapp-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-pod3_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'pod' 'myapp-2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-pod3_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Pod 'myapp-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-pod3_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Pod 'myapp-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-pod3_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Pod 'myapp-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-pod3_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Pod 'myapp-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-pod3_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Pod 'myapp-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-pod3_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Pod 'myapp-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-pod3_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Pod 'myapp-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-pod3_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Pod 'myapp-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-pod3_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-pod3_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of pod "myapp-2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-pod3_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-pod3_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myapp-2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-pod3_2.yaml:4
────────────────────────────────────────
   4 [   name: myapp-2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod3_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myapp-2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod3_2.yaml:6-17
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 └         path: /status
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in pod myapp-2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-pod3_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────



0-pod3_3.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Pod 'myapp-3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-pod3_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Pod 'myapp-3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-pod3_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'pod' 'myapp-3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-pod3_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Pod 'myapp-3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-pod3_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Pod 'myapp-3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-pod3_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Pod 'myapp-3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-pod3_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Pod 'myapp-3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-pod3_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Pod 'myapp-3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-pod3_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Pod 'myapp-3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-pod3_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Pod 'myapp-3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-pod3_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Pod 'myapp-3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-pod3_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-pod3_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of pod "myapp-3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-pod3_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-pod3_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myapp-3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-pod3_3.yaml:4
────────────────────────────────────────
   4 [   name: myapp-3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod3_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myapp-3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod3_3.yaml:6-17
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 └         path: /status
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in pod myapp-3 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-pod3_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────



0-pod3_4.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Pod 'myapp-4' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-pod3_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Pod 'myapp-4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-pod3_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'pod' 'myapp-4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-pod3_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Pod 'myapp-4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-pod3_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Pod 'myapp-4' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-pod3_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Pod 'myapp-4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-pod3_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Pod 'myapp-4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-pod3_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Pod 'myapp-4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-pod3_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Pod 'myapp-4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-pod3_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Pod 'myapp-4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-pod3_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Pod 'myapp-4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-pod3_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-pod3_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of pod "myapp-4" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-pod3_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-pod3_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myapp-4 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-pod3_4.yaml:4
────────────────────────────────────────
   4 [   name: myapp-4
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-4 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod3_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myapp-4 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod3_4.yaml:6-17
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 └         path: /status
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in pod myapp-4 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-pod3_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────



0-pod4.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pi' of Pod 'pi' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pi' of Pod 'pi' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pi' of 'pod' 'pi' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pi' of Pod 'pi' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pi' of Pod 'pi' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pi' of Pod 'pi' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pi' of Pod 'pi' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pi' of Pod 'pi' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pi' of Pod 'pi' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pi' of Pod 'pi' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pi' of Pod 'pi' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pi" of pod "pi" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pi in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-pod4.yaml:5
────────────────────────────────────────
   5 [   name: pi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod4.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pi in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod4.yaml:7-10
────────────────────────────────────────
   7 ┌   containers:
   8 │     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────



0-pod5.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Pod 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-pod5.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Pod 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-pod5.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'pod' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-pod5.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-pod5.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-pod5.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Pod 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-pod5.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-pod5.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-pod5.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-pod5.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-pod5.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-pod5.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-pod5.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of pod "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-pod5.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-pod5.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-pod5.yaml:5
────────────────────────────────────────
   5 [   name: myapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod5.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod5.yaml:7-11
────────────────────────────────────────
   7 ┌   containers:
   8 │     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in pod myapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-pod5.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────



0-pod6.yaml (kubernetes)
========================
Tests: 131 (SUCCESSES: 97, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'envoy' of Pod 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-pod6.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'myapp' of Pod 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-pod6.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'envoy' of Pod 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-pod6.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Pod 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-pod6.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'envoy' of 'pod' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-pod6.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'pod' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-pod6.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'envoy' of Pod 'myapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-pod6.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-pod6.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'envoy' of Pod 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-pod6.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-pod6.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'envoy' of Pod 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-pod6.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Pod 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-pod6.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'envoy' of Pod 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-pod6.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-pod6.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'envoy' of Pod 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-pod6.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-pod6.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'envoy' of Pod 'myapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-pod6.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-pod6.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'envoy' of Pod 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-pod6.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-pod6.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'envoy' of Pod 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-pod6.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-pod6.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-pod6.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-pod6.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "envoy" of pod "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-pod6.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of pod "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-pod6.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-pod6.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-pod6.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-pod6.yaml:5
────────────────────────────────────────
   5 [   name: myapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod6.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod6.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod6.yaml:7-13
────────────────────────────────────────
   7 ┌   containers:
   8 │     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 │         - containerPort: 8080
  12 │     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container envoy in pod myapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-pod6.yaml:12-13
────────────────────────────────────────
  12 ┌     - name: envoy
  13 └       image: envoyproxy/envoy:v1.28-latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in pod myapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-pod6.yaml:8-11
────────────────────────────────────────
   8 ┌     - name: myapp
   9 │       image: aputra/myapp-182:0.1.0
  10 │       ports:
  11 └         - containerPort: 8080
────────────────────────────────────────



0-pod7.yaml (kubernetes)
========================
Tests: 130 (SUCCESSES: 97, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 21, MEDIUM: 7, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'init-myservice' of Pod 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-pod7.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'myapp' of Pod 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-pod7.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'init-myservice' of Pod 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-pod7.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Pod 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-pod7.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'init-myservice' of 'pod' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-pod7.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'pod' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-pod7.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'init-myservice' of Pod 'myapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-pod7.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-pod7.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'init-myservice' of Pod 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-pod7.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-pod7.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'init-myservice' of Pod 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-pod7.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Pod 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-pod7.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'init-myservice' of Pod 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-pod7.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-pod7.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'init-myservice' of Pod 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-pod7.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-pod7.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'init-myservice' of Pod 'myapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-pod7.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-pod7.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'init-myservice' of Pod 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-pod7.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-pod7.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'init-myservice' of Pod 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-pod7.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-pod7.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-pod7.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-pod7.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "init-myservice" of pod "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-pod7.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of pod "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-pod7.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-pod7.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-pod7.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-pod7.yaml:5
────────────────────────────────────────
   5 [   name: myapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod7.yaml:8-9
────────────────────────────────────────
   8 ┌     - name: init-myservice
   9 └       image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod7.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod7.yaml:7-14
────────────────────────────────────────
   7 ┌   initContainers:
   8 │     - name: init-myservice
   9 │       image: busybox:1.28
  10 │   containers:
  11 │     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in pod myapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-pod7.yaml:11-14
────────────────────────────────────────
  11 ┌     - name: myapp
  12 │       image: aputra/myapp-182:0.1.0
  13 │       ports:
  14 └         - containerPort: 8080
────────────────────────────────────────



0-pod8.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Pod 'myapp-0' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-pod8.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Pod 'myapp-0' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-pod8.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'pod' 'myapp-0' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-pod8.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Pod 'myapp-0' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-pod8.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Pod 'myapp-0' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-pod8.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Pod 'myapp-0' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-pod8.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Pod 'myapp-0' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-pod8.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Pod 'myapp-0' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-pod8.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Pod 'myapp-0' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-pod8.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Pod 'myapp-0' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-pod8.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Pod 'myapp-0' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-pod8.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-pod8.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of pod "myapp-0" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-pod8.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-pod8.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myapp-0 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-pod8.yaml:4
────────────────────────────────────────
   4 [   name: myapp-0
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-0 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod8.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myapp-0 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod8.yaml:6-17
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 └         path: /status
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in pod myapp-0 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-pod8.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────



0-pod8_1.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Pod 'myapp-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-pod8_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Pod 'myapp-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-pod8_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'pod' 'myapp-1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-pod8_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Pod 'myapp-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-pod8_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Pod 'myapp-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-pod8_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Pod 'myapp-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-pod8_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Pod 'myapp-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-pod8_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Pod 'myapp-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-pod8_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Pod 'myapp-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-pod8_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Pod 'myapp-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-pod8_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Pod 'myapp-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-pod8_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-pod8_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of pod "myapp-1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-pod8_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-pod8_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myapp-1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-pod8_1.yaml:4
────────────────────────────────────────
   4 [   name: myapp-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod8_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myapp-1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod8_1.yaml:6-17
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 └         path: /status
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in pod myapp-1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-pod8_1.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────



0-pod8_2.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Pod 'myapp-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-pod8_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Pod 'myapp-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-pod8_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'pod' 'myapp-2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-pod8_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Pod 'myapp-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-pod8_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Pod 'myapp-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-pod8_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Pod 'myapp-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-pod8_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Pod 'myapp-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-pod8_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Pod 'myapp-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-pod8_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Pod 'myapp-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-pod8_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Pod 'myapp-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-pod8_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Pod 'myapp-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-pod8_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-pod8_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of pod "myapp-2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-pod8_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-pod8_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myapp-2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-pod8_2.yaml:4
────────────────────────────────────────
   4 [   name: myapp-2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod8_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myapp-2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod8_2.yaml:6-17
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 └         path: /status
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in pod myapp-2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-pod8_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────



0-pod8_3.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Pod 'myapp-3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-pod8_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Pod 'myapp-3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-pod8_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'pod' 'myapp-3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-pod8_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Pod 'myapp-3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-pod8_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Pod 'myapp-3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-pod8_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Pod 'myapp-3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-pod8_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Pod 'myapp-3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-pod8_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Pod 'myapp-3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-pod8_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Pod 'myapp-3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-pod8_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Pod 'myapp-3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-pod8_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Pod 'myapp-3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-pod8_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-pod8_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of pod "myapp-3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-pod8_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-pod8_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myapp-3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-pod8_3.yaml:4
────────────────────────────────────────
   4 [   name: myapp-3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod8_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myapp-3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod8_3.yaml:6-17
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 └         path: /status
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in pod myapp-3 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-pod8_3.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────



0-pod8_4.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Pod 'myapp-4' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-pod8_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Pod 'myapp-4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-pod8_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'pod' 'myapp-4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-pod8_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp' of Pod 'myapp-4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-pod8_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Pod 'myapp-4' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-pod8_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Pod 'myapp-4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-pod8_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Pod 'myapp-4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-pod8_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Pod 'myapp-4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-pod8_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp' of Pod 'myapp-4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-pod8_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Pod 'myapp-4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-pod8_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Pod 'myapp-4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-pod8_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-pod8_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of pod "myapp-4" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-pod8_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-pod8_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myapp-4 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-pod8_4.yaml:4
────────────────────────────────────────
   4 [   name: myapp-4
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-4 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod8_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myapp-4 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod8_4.yaml:6-17
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 └         path: /status
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in pod myapp-4 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-pod8_4.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: myapp
   8 │     image: aputra/myapp-182:0.2.0
   9 │     ports:
  10 │     - name: http
  11 │       containerPort: 8080
  12 │     readinessProbe:
  13 │       httpGet:
  14 │         path: /status
  15 └         port: http
  ..   
────────────────────────────────────────



0-pod9.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pi' of Pod 'pi' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-pod9.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pi' of Pod 'pi' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-pod9.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pi' of 'pod' 'pi' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-pod9.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pi' of Pod 'pi' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-pod9.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pi' of Pod 'pi' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-pod9.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pi' of Pod 'pi' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-pod9.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pi' of Pod 'pi' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-pod9.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pi' of Pod 'pi' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-pod9.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pi' of Pod 'pi' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-pod9.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pi' of Pod 'pi' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-pod9.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pi' of Pod 'pi' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-pod9.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-pod9.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pi" of pod "pi" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-pod9.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-pod9.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pi in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-pod9.yaml:5
────────────────────────────────────────
   5 [   name: pi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pi in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod9.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pi in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-pod9.yaml:7-10
────────────────────────────────────────
   7 ┌   containers:
   8 │     - name: pi
   9 │       image: perl:5.34.0
  10 └       command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
────────────────────────────────────────



0-rbac11.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'prometheus-adapter-server-resources' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 0-rbac11.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - custom.metrics.k8s.io
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────



0-rbac15_1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 109, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 3)

AVD-KSV-0041 (CRITICAL): ClusterRole 'prometheus-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 0-rbac15_1.yaml:32-38
────────────────────────────────────────
  32 ┌ - apiGroups:
  33 │   - ''
  34 │   resources:
  35 │   - configmaps
  36 │   - secrets
  37 │   verbs:
  38 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 0-rbac15_1.yaml:26-31
────────────────────────────────────────
  26 ┌ - apiGroups:
  27 │   - apps
  28 │   resources:
  29 │   - statefulsets
  30 │   verbs:
  31 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 0-rbac15_1.yaml:32-38
────────────────────────────────────────
  32 ┌ - apiGroups:
  33 │   - ''
  34 │   resources:
  35 │   - configmaps
  36 │   - secrets
  37 │   verbs:
  38 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 0-rbac15_1.yaml:26-31
────────────────────────────────────────
  26 ┌ - apiGroups:
  27 │   - apps
  28 │   resources:
  29 │   - statefulsets
  30 │   verbs:
  31 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 0-rbac15_1.yaml:39-45
────────────────────────────────────────
  39 ┌ - apiGroups:
  40 │   - ''
  41 │   resources:
  42 │   - pods
  43 │   verbs:
  44 │   - list
  45 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 0-rbac15_1.yaml:32-38
────────────────────────────────────────
  32 ┌ - apiGroups:
  33 │   - ''
  34 │   resources:
  35 │   - configmaps
  36 │   - secrets
  37 │   verbs:
  38 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'prometheus-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 0-rbac15_1.yaml:46-56
────────────────────────────────────────
  46 ┌ - apiGroups:
  47 │   - ''
  48 │   resources:
  49 │   - services
  50 │   - services/finalizers
  51 │   - endpoints
  52 │   verbs:
  53 │   - get
  54 └   - create
  ..   
────────────────────────────────────────



0-rbac18.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'prometheus-adapter-server-resources' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 0-rbac18.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - custom.metrics.k8s.io
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────



0-rbac1_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 109, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 3)

AVD-KSV-0041 (CRITICAL): ClusterRole 'prometheus-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 0-rbac1_1.yaml:32-38
────────────────────────────────────────
  32 ┌ - apiGroups:
  33 │   - ''
  34 │   resources:
  35 │   - configmaps
  36 │   - secrets
  37 │   verbs:
  38 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 0-rbac1_1.yaml:26-31
────────────────────────────────────────
  26 ┌ - apiGroups:
  27 │   - apps
  28 │   resources:
  29 │   - statefulsets
  30 │   verbs:
  31 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 0-rbac1_1.yaml:32-38
────────────────────────────────────────
  32 ┌ - apiGroups:
  33 │   - ''
  34 │   resources:
  35 │   - configmaps
  36 │   - secrets
  37 │   verbs:
  38 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 0-rbac1_1.yaml:26-31
────────────────────────────────────────
  26 ┌ - apiGroups:
  27 │   - apps
  28 │   resources:
  29 │   - statefulsets
  30 │   verbs:
  31 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 0-rbac1_1.yaml:39-45
────────────────────────────────────────
  39 ┌ - apiGroups:
  40 │   - ''
  41 │   resources:
  42 │   - pods
  43 │   verbs:
  44 │   - list
  45 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 0-rbac1_1.yaml:32-38
────────────────────────────────────────
  32 ┌ - apiGroups:
  33 │   - ''
  34 │   resources:
  35 │   - configmaps
  36 │   - secrets
  37 │   verbs:
  38 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'prometheus-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 0-rbac1_1.yaml:46-56
────────────────────────────────────────
  46 ┌ - apiGroups:
  47 │   - ''
  48 │   resources:
  49 │   - services
  50 │   - services/finalizers
  51 │   - endpoints
  52 │   verbs:
  53 │   - get
  54 └   - create
  ..   
────────────────────────────────────────



0-rbac4.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'prometheus-adapter-server-resources' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 0-rbac4.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - custom.metrics.k8s.io
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────



0-rbac8_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 109, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 3)

AVD-KSV-0041 (CRITICAL): ClusterRole 'prometheus-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 0-rbac8_1.yaml:32-38
────────────────────────────────────────
  32 ┌ - apiGroups:
  33 │   - ''
  34 │   resources:
  35 │   - configmaps
  36 │   - secrets
  37 │   verbs:
  38 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 0-rbac8_1.yaml:26-31
────────────────────────────────────────
  26 ┌ - apiGroups:
  27 │   - apps
  28 │   resources:
  29 │   - statefulsets
  30 │   verbs:
  31 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 0-rbac8_1.yaml:32-38
────────────────────────────────────────
  32 ┌ - apiGroups:
  33 │   - ''
  34 │   resources:
  35 │   - configmaps
  36 │   - secrets
  37 │   verbs:
  38 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 0-rbac8_1.yaml:26-31
────────────────────────────────────────
  26 ┌ - apiGroups:
  27 │   - apps
  28 │   resources:
  29 │   - statefulsets
  30 │   verbs:
  31 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 0-rbac8_1.yaml:39-45
────────────────────────────────────────
  39 ┌ - apiGroups:
  40 │   - ''
  41 │   resources:
  42 │   - pods
  43 │   verbs:
  44 │   - list
  45 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'prometheus-operator' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 0-rbac8_1.yaml:32-38
────────────────────────────────────────
  32 ┌ - apiGroups:
  33 │   - ''
  34 │   resources:
  35 │   - configmaps
  36 │   - secrets
  37 │   verbs:
  38 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'prometheus-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 0-rbac8_1.yaml:46-56
────────────────────────────────────────
  46 ┌ - apiGroups:
  47 │   - ''
  48 │   resources:
  49 │   - services
  50 │   - services/finalizers
  51 │   - endpoints
  52 │   verbs:
  53 │   - get
  54 └   - create
  ..   
────────────────────────────────────────



0-req-limits.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Pod 'example' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-req-limits.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: app
   9 │     image: nginx:1.14.2
  10 │     resources:
  11 │       requests:
  12 │         memory: 64Mi
  13 │         cpu: 250m
  14 │       limits:
  15 │         memory: 128Mi
  16 └         cpu: 500m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Pod 'example' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-req-limits.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: app
   9 │     image: nginx:1.14.2
  10 │     resources:
  11 │       requests:
  12 │         memory: 64Mi
  13 │         cpu: 250m
  14 │       limits:
  15 │         memory: 128Mi
  16 └         cpu: 500m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'pod' 'example' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-req-limits.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: app
   9 │     image: nginx:1.14.2
  10 │     resources:
  11 │       requests:
  12 │         memory: 64Mi
  13 │         cpu: 250m
  14 │       limits:
  15 │         memory: 128Mi
  16 └         cpu: 500m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Pod 'example' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-req-limits.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: app
   9 │     image: nginx:1.14.2
  10 │     resources:
  11 │       requests:
  12 │         memory: 64Mi
  13 │         cpu: 250m
  14 │       limits:
  15 │         memory: 128Mi
  16 └         cpu: 500m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Pod 'example' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-req-limits.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: app
   9 │     image: nginx:1.14.2
  10 │     resources:
  11 │       requests:
  12 │         memory: 64Mi
  13 │         cpu: 250m
  14 │       limits:
  15 │         memory: 128Mi
  16 └         cpu: 500m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Pod 'example' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-req-limits.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: app
   9 │     image: nginx:1.14.2
  10 │     resources:
  11 │       requests:
  12 │         memory: 64Mi
  13 │         cpu: 250m
  14 │       limits:
  15 │         memory: 128Mi
  16 └         cpu: 500m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Pod 'example' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-req-limits.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: app
   9 │     image: nginx:1.14.2
  10 │     resources:
  11 │       requests:
  12 │         memory: 64Mi
  13 │         cpu: 250m
  14 │       limits:
  15 │         memory: 128Mi
  16 └         cpu: 500m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-req-limits.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: app
   9 │     image: nginx:1.14.2
  10 │     resources:
  11 │       requests:
  12 │         memory: 64Mi
  13 │         cpu: 250m
  14 │       limits:
  15 │         memory: 128Mi
  16 └         cpu: 500m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of pod "example" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-req-limits.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: app
   9 │     image: nginx:1.14.2
  10 │     resources:
  11 │       requests:
  12 │         memory: 64Mi
  13 │         cpu: 250m
  14 │       limits:
  15 │         memory: 128Mi
  16 └         cpu: 500m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-req-limits.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: app
   9 │     image: nginx:1.14.2
  10 │     resources:
  11 │       requests:
  12 │         memory: 64Mi
  13 │         cpu: 250m
  14 │       limits:
  15 │         memory: 128Mi
  16 └         cpu: 500m
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod example in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-req-limits.yaml:5
────────────────────────────────────────
   5 [   name: example
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container example in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-req-limits.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: app
   9 │     image: nginx:1.14.2
  10 │     resources:
  11 │       requests:
  12 │         memory: 64Mi
  13 │         cpu: 250m
  14 │       limits:
  15 │         memory: 128Mi
  16 └         cpu: 500m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod example in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-req-limits.yaml:7-16
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: app
   9 │     image: nginx:1.14.2
  10 │     resources:
  11 │       requests:
  12 │         memory: 64Mi
  13 │         cpu: 250m
  14 │       limits:
  15 │         memory: 128Mi
  16 └         cpu: 500m
────────────────────────────────────────



0-req-limits1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Pod 'example' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-req-limits1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: app
   9 │     image: nginx:1.14.2
  10 │     resources:
  11 │       requests:
  12 │         memory: 64Mi
  13 │         cpu: 250m
  14 │       limits:
  15 │         memory: 128Mi
  16 └         cpu: 500m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Pod 'example' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-req-limits1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: app
   9 │     image: nginx:1.14.2
  10 │     resources:
  11 │       requests:
  12 │         memory: 64Mi
  13 │         cpu: 250m
  14 │       limits:
  15 │         memory: 128Mi
  16 └         cpu: 500m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'pod' 'example' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-req-limits1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: app
   9 │     image: nginx:1.14.2
  10 │     resources:
  11 │       requests:
  12 │         memory: 64Mi
  13 │         cpu: 250m
  14 │       limits:
  15 │         memory: 128Mi
  16 └         cpu: 500m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Pod 'example' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-req-limits1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: app
   9 │     image: nginx:1.14.2
  10 │     resources:
  11 │       requests:
  12 │         memory: 64Mi
  13 │         cpu: 250m
  14 │       limits:
  15 │         memory: 128Mi
  16 └         cpu: 500m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Pod 'example' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-req-limits1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: app
   9 │     image: nginx:1.14.2
  10 │     resources:
  11 │       requests:
  12 │         memory: 64Mi
  13 │         cpu: 250m
  14 │       limits:
  15 │         memory: 128Mi
  16 └         cpu: 500m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Pod 'example' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-req-limits1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: app
   9 │     image: nginx:1.14.2
  10 │     resources:
  11 │       requests:
  12 │         memory: 64Mi
  13 │         cpu: 250m
  14 │       limits:
  15 │         memory: 128Mi
  16 └         cpu: 500m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Pod 'example' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-req-limits1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: app
   9 │     image: nginx:1.14.2
  10 │     resources:
  11 │       requests:
  12 │         memory: 64Mi
  13 │         cpu: 250m
  14 │       limits:
  15 │         memory: 128Mi
  16 └         cpu: 500m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-req-limits1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: app
   9 │     image: nginx:1.14.2
  10 │     resources:
  11 │       requests:
  12 │         memory: 64Mi
  13 │         cpu: 250m
  14 │       limits:
  15 │         memory: 128Mi
  16 └         cpu: 500m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of pod "example" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-req-limits1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: app
   9 │     image: nginx:1.14.2
  10 │     resources:
  11 │       requests:
  12 │         memory: 64Mi
  13 │         cpu: 250m
  14 │       limits:
  15 │         memory: 128Mi
  16 └         cpu: 500m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-req-limits1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: app
   9 │     image: nginx:1.14.2
  10 │     resources:
  11 │       requests:
  12 │         memory: 64Mi
  13 │         cpu: 250m
  14 │       limits:
  15 │         memory: 128Mi
  16 └         cpu: 500m
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod example in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-req-limits1.yaml:5
────────────────────────────────────────
   5 [   name: example
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container example in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-req-limits1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: app
   9 │     image: nginx:1.14.2
  10 │     resources:
  11 │       requests:
  12 │         memory: 64Mi
  13 │         cpu: 250m
  14 │       limits:
  15 │         memory: 128Mi
  16 └         cpu: 500m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod example in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-req-limits1.yaml:7-16
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: app
   9 │     image: nginx:1.14.2
  10 │     resources:
  11 │       requests:
  12 │         memory: 64Mi
  13 │         cpu: 250m
  14 │       limits:
  15 │         memory: 128Mi
  16 └         cpu: 500m
────────────────────────────────────────



0-role-binding.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): RoleBinding 'qa-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 0-role-binding.yaml:5-6
────────────────────────────────────────
   5 ┌   name: qa-admin
   6 └   namespace: qa
────────────────────────────────────────



0-role-binding1.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): RoleBinding 'qa-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 0-role-binding1.yaml:5-6
────────────────────────────────────────
   5 ┌   name: qa-admin
   6 └   namespace: qa
────────────────────────────────────────



0-role1.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 0-role1.yaml:8-10
────────────────────────────────────────
   8 ┌   - apiGroups: ["*"]
   9 │     resources: ["*"]
  10 └     verbs: ["*"]
────────────────────────────────────────


AVD-KSV-0112 (CRITICAL): Role 'dev-admin' shouldn't manage all resources at the namespace 'dev'
════════════════════════════════════════
Full control of the resources within a namespace.  In some cluster configurations, this is excessive. In others, this is normal (a gitops deployment operator like flux)

See https://avd.aquasec.com/misconfig/ksv112
────────────────────────────────────────
 0-role1.yaml:8-10
────────────────────────────────────────
   8 ┌   - apiGroups: ["*"]
   9 │     resources: ["*"]
  10 └     verbs: ["*"]
────────────────────────────────────────



0-role2.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 0-role2.yaml:8-10
────────────────────────────────────────
   8 ┌   - apiGroups: ["*"]
   9 │     resources: ["*"]
  10 └     verbs: ["*"]
────────────────────────────────────────


AVD-KSV-0112 (CRITICAL): Role 'staging-admin' shouldn't manage all resources at the namespace 'staging'
════════════════════════════════════════
Full control of the resources within a namespace.  In some cluster configurations, this is excessive. In others, this is normal (a gitops deployment operator like flux)

See https://avd.aquasec.com/misconfig/ksv112
────────────────────────────────────────
 0-role2.yaml:8-10
────────────────────────────────────────
   8 ┌   - apiGroups: ["*"]
   9 │     resources: ["*"]
  10 └     verbs: ["*"]
────────────────────────────────────────



0-role4.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 0-role4.yaml:8-10
────────────────────────────────────────
   8 ┌   - apiGroups: ["*"]
   9 │     resources: ["*"]
  10 └     verbs: ["*"]
────────────────────────────────────────


AVD-KSV-0112 (CRITICAL): Role 'dev-admin' shouldn't manage all resources at the namespace 'dev'
════════════════════════════════════════
Full control of the resources within a namespace.  In some cluster configurations, this is excessive. In others, this is normal (a gitops deployment operator like flux)

See https://avd.aquasec.com/misconfig/ksv112
────────────────────────────────────────
 0-role4.yaml:8-10
────────────────────────────────────────
   8 ┌   - apiGroups: ["*"]
   9 │     resources: ["*"]
  10 └     verbs: ["*"]
────────────────────────────────────────



0-role5.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 0-role5.yaml:8-10
────────────────────────────────────────
   8 ┌   - apiGroups: ["*"]
   9 │     resources: ["*"]
  10 └     verbs: ["*"]
────────────────────────────────────────


AVD-KSV-0112 (CRITICAL): Role 'staging-admin' shouldn't manage all resources at the namespace 'staging'
════════════════════════════════════════
Full control of the resources within a namespace.  In some cluster configurations, this is excessive. In others, this is normal (a gitops deployment operator like flux)

See https://avd.aquasec.com/misconfig/ksv112
────────────────────────────────────────
 0-role5.yaml:8-10
────────────────────────────────────────
   8 ┌   - apiGroups: ["*"]
   9 │     resources: ["*"]
  10 └     verbs: ["*"]
────────────────────────────────────────



0-service-a-linkerd.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service-a-linkerd' of Deployment 'service-a-linkerd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-service-a-linkerd.yaml:24-38
────────────────────────────────────────
  24 ┌         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 │               containerPort: 8282
  32 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service-a-linkerd' of Deployment 'service-a-linkerd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-service-a-linkerd.yaml:24-38
────────────────────────────────────────
  24 ┌         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 │               containerPort: 8282
  32 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service-a-linkerd' of 'deployment' 'service-a-linkerd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-service-a-linkerd.yaml:24-38
────────────────────────────────────────
  24 ┌         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 │               containerPort: 8282
  32 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service-a-linkerd' of Deployment 'service-a-linkerd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-service-a-linkerd.yaml:24-38
────────────────────────────────────────
  24 ┌         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 │               containerPort: 8282
  32 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service-a-linkerd' of Deployment 'service-a-linkerd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-service-a-linkerd.yaml:24-38
────────────────────────────────────────
  24 ┌         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 │               containerPort: 8282
  32 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service-a-linkerd' of Deployment 'service-a-linkerd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-service-a-linkerd.yaml:24-38
────────────────────────────────────────
  24 ┌         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 │               containerPort: 8282
  32 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service-a-linkerd' of Deployment 'service-a-linkerd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-service-a-linkerd.yaml:24-38
────────────────────────────────────────
  24 ┌         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 │               containerPort: 8282
  32 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-service-a-linkerd.yaml:24-38
────────────────────────────────────────
  24 ┌         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 │               containerPort: 8282
  32 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service-a-linkerd" of deployment "service-a-linkerd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-service-a-linkerd.yaml:24-38
────────────────────────────────────────
  24 ┌         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 │               containerPort: 8282
  32 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-service-a-linkerd.yaml:24-38
────────────────────────────────────────
  24 ┌         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 │               containerPort: 8282
  32 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment service-a-linkerd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-service-a-linkerd.yaml:5-6
────────────────────────────────────────
   5 ┌   name: service-a-linkerd
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service-a-linkerd in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-service-a-linkerd.yaml:24-38
────────────────────────────────────────
  24 ┌         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 │               containerPort: 8282
  32 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment service-a-linkerd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-service-a-linkerd.yaml:23-45
────────────────────────────────────────
  23 ┌       containers:
  24 │         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 └               containerPort: 8282
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container service-a-linkerd in deployment service-a-linkerd (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-service-a-linkerd.yaml:24-38
────────────────────────────────────────
  24 ┌         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 │               containerPort: 8282
  32 └           resources:
  ..   
────────────────────────────────────────



0-service-a-linkerd1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service-a-linkerd' of Deployment 'service-a-linkerd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-service-a-linkerd1.yaml:24-38
────────────────────────────────────────
  24 ┌         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 │               containerPort: 8282
  32 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service-a-linkerd' of Deployment 'service-a-linkerd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-service-a-linkerd1.yaml:24-38
────────────────────────────────────────
  24 ┌         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 │               containerPort: 8282
  32 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service-a-linkerd' of 'deployment' 'service-a-linkerd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-service-a-linkerd1.yaml:24-38
────────────────────────────────────────
  24 ┌         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 │               containerPort: 8282
  32 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service-a-linkerd' of Deployment 'service-a-linkerd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-service-a-linkerd1.yaml:24-38
────────────────────────────────────────
  24 ┌         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 │               containerPort: 8282
  32 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service-a-linkerd' of Deployment 'service-a-linkerd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-service-a-linkerd1.yaml:24-38
────────────────────────────────────────
  24 ┌         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 │               containerPort: 8282
  32 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service-a-linkerd' of Deployment 'service-a-linkerd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-service-a-linkerd1.yaml:24-38
────────────────────────────────────────
  24 ┌         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 │               containerPort: 8282
  32 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service-a-linkerd' of Deployment 'service-a-linkerd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-service-a-linkerd1.yaml:24-38
────────────────────────────────────────
  24 ┌         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 │               containerPort: 8282
  32 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-service-a-linkerd1.yaml:24-38
────────────────────────────────────────
  24 ┌         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 │               containerPort: 8282
  32 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service-a-linkerd" of deployment "service-a-linkerd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-service-a-linkerd1.yaml:24-38
────────────────────────────────────────
  24 ┌         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 │               containerPort: 8282
  32 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-service-a-linkerd1.yaml:24-38
────────────────────────────────────────
  24 ┌         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 │               containerPort: 8282
  32 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment service-a-linkerd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-service-a-linkerd1.yaml:5-6
────────────────────────────────────────
   5 ┌   name: service-a-linkerd
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service-a-linkerd in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-service-a-linkerd1.yaml:24-38
────────────────────────────────────────
  24 ┌         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 │               containerPort: 8282
  32 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment service-a-linkerd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-service-a-linkerd1.yaml:23-45
────────────────────────────────────────
  23 ┌       containers:
  24 │         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 └               containerPort: 8282
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container service-a-linkerd in deployment service-a-linkerd (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-service-a-linkerd1.yaml:24-38
────────────────────────────────────────
  24 ┌         - name: service-a-linkerd
  25 │           image: aputra/service-a-172:v4
  26 │           env:
  27 │             - name: TARGET
  28 │               value: "http://service-b-linkerd.default:8181"
  29 │           ports:
  30 │             - name: http
  31 │               containerPort: 8282
  32 └           resources:
  ..   
────────────────────────────────────────



0-statefulset.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of StatefulSet 'web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-statefulset.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of StatefulSet 'web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-statefulset.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'statefulset' 'web' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-statefulset.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of StatefulSet 'web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-statefulset.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of StatefulSet 'web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-statefulset.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of StatefulSet 'web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-statefulset.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of StatefulSet 'web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-statefulset.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of StatefulSet 'web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-statefulset.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of StatefulSet 'web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-statefulset.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of StatefulSet 'web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-statefulset.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of StatefulSet 'web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-statefulset.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-statefulset.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of statefulset "web" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-statefulset.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-statefulset.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset web in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-statefulset.yaml:5-6
────────────────────────────────────────
   5 ┌   name: web
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): statefulset web in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────
 0-statefulset.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-statefulset.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset web in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-statefulset.yaml:19-27
────────────────────────────────────────
  19 ┌       containers:
  20 │         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx in statefulset web (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-statefulset.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────



0-statefulset1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kafka' of StatefulSet 'kafka' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-statefulset1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kafka' of StatefulSet 'kafka' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-statefulset1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kafka' of 'statefulset' 'kafka' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-statefulset1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kafka' of StatefulSet 'kafka' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-statefulset1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kafka' of StatefulSet 'kafka' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-statefulset1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kafka' of StatefulSet 'kafka' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 0-statefulset1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kafka' of StatefulSet 'kafka' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-statefulset1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kafka' of StatefulSet 'kafka' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-statefulset1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kafka' of StatefulSet 'kafka' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-statefulset1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kafka' of StatefulSet 'kafka' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-statefulset1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kafka' of StatefulSet 'kafka' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-statefulset1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kafka' of StatefulSet 'kafka' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-statefulset1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-statefulset1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kafka" of statefulset "kafka" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-statefulset1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-statefulset1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset kafka in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-statefulset1.yaml:5
────────────────────────────────────────
   5 [   name: kafka
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kafka in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-statefulset1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset kafka in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-statefulset1.yaml:17-25
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────



0-statefulset2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of StatefulSet 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-statefulset2.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of StatefulSet 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-statefulset2.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'statefulset' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-statefulset2.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of StatefulSet 'myapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-statefulset2.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of StatefulSet 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-statefulset2.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of StatefulSet 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-statefulset2.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of StatefulSet 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-statefulset2.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of StatefulSet 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-statefulset2.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of StatefulSet 'myapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-statefulset2.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of StatefulSet 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-statefulset2.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of StatefulSet 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-statefulset2.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-statefulset2.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of statefulset "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-statefulset2.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-statefulset2.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-statefulset2.yaml:5
────────────────────────────────────────
   5 [   name: myapp
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): statefulset myapp in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────
 0-statefulset2.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-statefulset2.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-statefulset2.yaml:17-25
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────



0-statefulset3.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of StatefulSet 'web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-statefulset3.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of StatefulSet 'web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-statefulset3.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'statefulset' 'web' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-statefulset3.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of StatefulSet 'web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-statefulset3.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of StatefulSet 'web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-statefulset3.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of StatefulSet 'web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-statefulset3.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of StatefulSet 'web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-statefulset3.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of StatefulSet 'web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-statefulset3.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of StatefulSet 'web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-statefulset3.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of StatefulSet 'web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-statefulset3.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of StatefulSet 'web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-statefulset3.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-statefulset3.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of statefulset "web" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-statefulset3.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-statefulset3.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset web in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-statefulset3.yaml:5-6
────────────────────────────────────────
   5 ┌   name: web
   6 └   namespace: default
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): statefulset web in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────
 0-statefulset3.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-statefulset3.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset web in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-statefulset3.yaml:19-27
────────────────────────────────────────
  19 ┌       containers:
  20 │         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx in statefulset web (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 0-statefulset3.yaml:20-27
────────────────────────────────────────
  20 ┌         - name: nginx
  21 │           image: registry.k8s.io/nginx-slim:0.8
  22 │           ports:
  23 │             - containerPort: 80
  24 │               name: web
  25 │           volumeMounts:
  26 │             - name: www
  27 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────



0-statefulset4.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kafka' of StatefulSet 'kafka' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-statefulset4.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kafka' of StatefulSet 'kafka' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-statefulset4.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kafka' of 'statefulset' 'kafka' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-statefulset4.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kafka' of StatefulSet 'kafka' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-statefulset4.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kafka' of StatefulSet 'kafka' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-statefulset4.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kafka' of StatefulSet 'kafka' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 0-statefulset4.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kafka' of StatefulSet 'kafka' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-statefulset4.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kafka' of StatefulSet 'kafka' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-statefulset4.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kafka' of StatefulSet 'kafka' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-statefulset4.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kafka' of StatefulSet 'kafka' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-statefulset4.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kafka' of StatefulSet 'kafka' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-statefulset4.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kafka' of StatefulSet 'kafka' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-statefulset4.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-statefulset4.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kafka" of statefulset "kafka" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-statefulset4.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-statefulset4.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset kafka in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-statefulset4.yaml:5
────────────────────────────────────────
   5 [   name: kafka
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kafka in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-statefulset4.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset kafka in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-statefulset4.yaml:17-25
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: kafka
  19 │           image: kafka
  20 │           ports:
  21 │             - containerPort: 9092
  22 │               name: kafka
  23 │           volumeMounts:
  24 │             - name: data
  25 └               mountPath: /data
────────────────────────────────────────



0-statefulset5.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of StatefulSet 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-statefulset5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of StatefulSet 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-statefulset5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'statefulset' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-statefulset5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of StatefulSet 'myapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-statefulset5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of StatefulSet 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-statefulset5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of StatefulSet 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-statefulset5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of StatefulSet 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-statefulset5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of StatefulSet 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-statefulset5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of StatefulSet 'myapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-statefulset5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of StatefulSet 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-statefulset5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of StatefulSet 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-statefulset5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-statefulset5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of statefulset "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-statefulset5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-statefulset5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-statefulset5.yaml:5
────────────────────────────────────────
   5 [   name: myapp
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): statefulset myapp in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────
 0-statefulset5.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-statefulset5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-statefulset5.yaml:17-25
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: nginx
  19 │           image: nginx:1.25.3
  20 │           ports:
  21 │             - containerPort: 80
  22 │               name: web
  23 │           volumeMounts:
  24 │             - name: www
  25 └               mountPath: /usr/share/nginx/html
────────────────────────────────────────



0-toleration.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'example-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-toleration.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'example-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-toleration.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'example-1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-toleration.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'example-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-toleration.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'example-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-toleration.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'example-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-toleration.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'example-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-toleration.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'example-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-toleration.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'example-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-toleration.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'example-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-toleration.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'example-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-toleration.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-toleration.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "example-1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-toleration.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-toleration.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment example-1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-toleration.yaml:5
────────────────────────────────────────
   5 [   name: example-1
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment example-1 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────
 0-toleration.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container example-1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-toleration.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment example-1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-toleration.yaml:16-25
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 │         - containerPort: 80
  21 │       tolerations:
  22 │       - key: role
  23 │         operator: Equal
  24 │         value: spot
  25 └         effect: NoSchedule
────────────────────────────────────────



0-toleration1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'example-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 0-toleration1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'example-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 0-toleration1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'example-1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 0-toleration1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'example-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 0-toleration1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'example-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 0-toleration1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'example-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 0-toleration1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'example-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 0-toleration1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'example-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 0-toleration1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'example-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 0-toleration1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'example-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 0-toleration1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'example-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 0-toleration1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 0-toleration1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "example-1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 0-toleration1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 0-toleration1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment example-1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 0-toleration1.yaml:5
────────────────────────────────────────
   5 [   name: example-1
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment example-1 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────
 0-toleration1.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container example-1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-toleration1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment example-1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 0-toleration1.yaml:16-25
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 │         - containerPort: 80
  21 │       tolerations:
  22 │       - key: role
  23 │         operator: Equal
  24 │         value: spot
  25 └         effect: NoSchedule
────────────────────────────────────────



00-DeplyExternalDNS_3.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 98, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'external-dns' of Deployment 'external-dns' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-DeplyExternalDNS_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: external-dns
  19 │         image: k8s.gcr.io/external-dns/external-dns:v0.10.2
  20 │         args:
  21 │         - --source=service
  22 │         - --source=ingress
  23 │         - --provider=aws
  24 │         - --aws-zone-type=public
  25 │         - --registry=txt
  26 └         - --txt-owner-id=my-hostedzone-identifier
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'external-dns' of Deployment 'external-dns' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-DeplyExternalDNS_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: external-dns
  19 │         image: k8s.gcr.io/external-dns/external-dns:v0.10.2
  20 │         args:
  21 │         - --source=service
  22 │         - --source=ingress
  23 │         - --provider=aws
  24 │         - --aws-zone-type=public
  25 │         - --registry=txt
  26 └         - --txt-owner-id=my-hostedzone-identifier
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'external-dns' of 'deployment' 'external-dns' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-DeplyExternalDNS_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: external-dns
  19 │         image: k8s.gcr.io/external-dns/external-dns:v0.10.2
  20 │         args:
  21 │         - --source=service
  22 │         - --source=ingress
  23 │         - --provider=aws
  24 │         - --aws-zone-type=public
  25 │         - --registry=txt
  26 └         - --txt-owner-id=my-hostedzone-identifier
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'external-dns' of Deployment 'external-dns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 00-DeplyExternalDNS_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: external-dns
  19 │         image: k8s.gcr.io/external-dns/external-dns:v0.10.2
  20 │         args:
  21 │         - --source=service
  22 │         - --source=ingress
  23 │         - --provider=aws
  24 │         - --aws-zone-type=public
  25 │         - --registry=txt
  26 └         - --txt-owner-id=my-hostedzone-identifier
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'external-dns' of Deployment 'external-dns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-DeplyExternalDNS_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: external-dns
  19 │         image: k8s.gcr.io/external-dns/external-dns:v0.10.2
  20 │         args:
  21 │         - --source=service
  22 │         - --source=ingress
  23 │         - --provider=aws
  24 │         - --aws-zone-type=public
  25 │         - --registry=txt
  26 └         - --txt-owner-id=my-hostedzone-identifier
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'external-dns' of Deployment 'external-dns' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-DeplyExternalDNS_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: external-dns
  19 │         image: k8s.gcr.io/external-dns/external-dns:v0.10.2
  20 │         args:
  21 │         - --source=service
  22 │         - --source=ingress
  23 │         - --provider=aws
  24 │         - --aws-zone-type=public
  25 │         - --registry=txt
  26 └         - --txt-owner-id=my-hostedzone-identifier
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'external-dns' of Deployment 'external-dns' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-DeplyExternalDNS_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: external-dns
  19 │         image: k8s.gcr.io/external-dns/external-dns:v0.10.2
  20 │         args:
  21 │         - --source=service
  22 │         - --source=ingress
  23 │         - --provider=aws
  24 │         - --aws-zone-type=public
  25 │         - --registry=txt
  26 └         - --txt-owner-id=my-hostedzone-identifier
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'external-dns' of Deployment 'external-dns' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-DeplyExternalDNS_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: external-dns
  19 │         image: k8s.gcr.io/external-dns/external-dns:v0.10.2
  20 │         args:
  21 │         - --source=service
  22 │         - --source=ingress
  23 │         - --provider=aws
  24 │         - --aws-zone-type=public
  25 │         - --registry=txt
  26 └         - --txt-owner-id=my-hostedzone-identifier
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'external-dns' of Deployment 'external-dns' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 00-DeplyExternalDNS_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: external-dns
  19 │         image: k8s.gcr.io/external-dns/external-dns:v0.10.2
  20 │         args:
  21 │         - --source=service
  22 │         - --source=ingress
  23 │         - --provider=aws
  24 │         - --aws-zone-type=public
  25 │         - --registry=txt
  26 └         - --txt-owner-id=my-hostedzone-identifier
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'external-dns' of Deployment 'external-dns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-DeplyExternalDNS_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: external-dns
  19 │         image: k8s.gcr.io/external-dns/external-dns:v0.10.2
  20 │         args:
  21 │         - --source=service
  22 │         - --source=ingress
  23 │         - --provider=aws
  24 │         - --aws-zone-type=public
  25 │         - --registry=txt
  26 └         - --txt-owner-id=my-hostedzone-identifier
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'external-dns' of Deployment 'external-dns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-DeplyExternalDNS_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: external-dns
  19 │         image: k8s.gcr.io/external-dns/external-dns:v0.10.2
  20 │         args:
  21 │         - --source=service
  22 │         - --source=ingress
  23 │         - --provider=aws
  24 │         - --aws-zone-type=public
  25 │         - --registry=txt
  26 └         - --txt-owner-id=my-hostedzone-identifier
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-DeplyExternalDNS_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: external-dns
  19 │         image: k8s.gcr.io/external-dns/external-dns:v0.10.2
  20 │         args:
  21 │         - --source=service
  22 │         - --source=ingress
  23 │         - --provider=aws
  24 │         - --aws-zone-type=public
  25 │         - --registry=txt
  26 └         - --txt-owner-id=my-hostedzone-identifier
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "external-dns" of deployment "external-dns" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-DeplyExternalDNS_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: external-dns
  19 │         image: k8s.gcr.io/external-dns/external-dns:v0.10.2
  20 │         args:
  21 │         - --source=service
  22 │         - --source=ingress
  23 │         - --provider=aws
  24 │         - --aws-zone-type=public
  25 │         - --registry=txt
  26 └         - --txt-owner-id=my-hostedzone-identifier
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-DeplyExternalDNS_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: external-dns
  19 │         image: k8s.gcr.io/external-dns/external-dns:v0.10.2
  20 │         args:
  21 │         - --source=service
  22 │         - --source=ingress
  23 │         - --provider=aws
  24 │         - --aws-zone-type=public
  25 │         - --registry=txt
  26 └         - --txt-owner-id=my-hostedzone-identifier
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment external-dns in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 00-DeplyExternalDNS_3.yaml:4
────────────────────────────────────────
   4 [   name: external-dns
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container external-dns in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-DeplyExternalDNS_3.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: external-dns
  19 │         image: k8s.gcr.io/external-dns/external-dns:v0.10.2
  20 │         args:
  21 │         - --source=service
  22 │         - --source=ingress
  23 │         - --provider=aws
  24 │         - --aws-zone-type=public
  25 │         - --registry=txt
  26 └         - --txt-owner-id=my-hostedzone-identifier
────────────────────────────────────────



00-assert1.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): statefulset caddy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 00-assert1.yaml:4
────────────────────────────────────────
   4 [   name: caddy
────────────────────────────────────────



00-assert11_2.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0118 (HIGH): statefulset weaviate in weaviate namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-assert11_2.yaml:9-10
────────────────────────────────────────
   9 ┌       imagePullSecrets:
  10 └       - name: canonical-registry-credentials
────────────────────────────────────────



00-assert1_1.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): pod assert-caddy-ready in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 00-assert1_1.yaml:4
────────────────────────────────────────
   4 [   name: assert-caddy-ready
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod assert-caddy-ready in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-assert1_1.yaml:1-6
────────────────────────────────────────
   1 ┌ apiVersion: v1
   2 │ kind: Pod
   3 │ metadata:
   4 │   name: assert-caddy-ready
   5 │ status:
   6 └   phase: Succeeded
────────────────────────────────────────



00-assert21_1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'confluent-rest-proxy' of Deployment 'confluent-rest-proxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-assert21_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-rest-proxy
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'confluent-rest-proxy' of Deployment 'confluent-rest-proxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-assert21_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-rest-proxy
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'confluent-rest-proxy' of 'deployment' 'confluent-rest-proxy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-assert21_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-rest-proxy
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'confluent-rest-proxy' of Deployment 'confluent-rest-proxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 00-assert21_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-rest-proxy
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'confluent-rest-proxy' of Deployment 'confluent-rest-proxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-assert21_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-rest-proxy
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'confluent-rest-proxy' of Deployment 'confluent-rest-proxy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 00-assert21_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-rest-proxy
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'confluent-rest-proxy' of Deployment 'confluent-rest-proxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-assert21_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-rest-proxy
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'confluent-rest-proxy' of Deployment 'confluent-rest-proxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 00-assert21_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-rest-proxy
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'confluent-rest-proxy' of Deployment 'confluent-rest-proxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-assert21_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-rest-proxy
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'confluent-rest-proxy' of Deployment 'confluent-rest-proxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-assert21_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-rest-proxy
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-assert21_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-rest-proxy
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "confluent-rest-proxy" of deployment "confluent-rest-proxy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-assert21_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-rest-proxy
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-assert21_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-rest-proxy
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment confluent-rest-proxy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 00-assert21_1.yaml:4
────────────────────────────────────────
   4 [   name: confluent-rest-proxy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container confluent-rest-proxy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-assert21_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-rest-proxy
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment confluent-rest-proxy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-assert21_1.yaml:8-13
────────────────────────────────────────
   8 ┌       containers:
   9 │       - name: confluent-rest-proxy
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────



00-assert22_1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'confluent-schema-registry' of Deployment 'confluent-schema-registry' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-assert22_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-schema-registry
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'confluent-schema-registry' of Deployment 'confluent-schema-registry' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-assert22_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-schema-registry
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'confluent-schema-registry' of 'deployment' 'confluent-schema-registry' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-assert22_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-schema-registry
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'confluent-schema-registry' of Deployment 'confluent-schema-registry' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 00-assert22_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-schema-registry
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'confluent-schema-registry' of Deployment 'confluent-schema-registry' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-assert22_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-schema-registry
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'confluent-schema-registry' of Deployment 'confluent-schema-registry' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 00-assert22_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-schema-registry
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'confluent-schema-registry' of Deployment 'confluent-schema-registry' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-assert22_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-schema-registry
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'confluent-schema-registry' of Deployment 'confluent-schema-registry' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 00-assert22_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-schema-registry
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'confluent-schema-registry' of Deployment 'confluent-schema-registry' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-assert22_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-schema-registry
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'confluent-schema-registry' of Deployment 'confluent-schema-registry' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-assert22_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-schema-registry
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-assert22_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-schema-registry
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "confluent-schema-registry" of deployment "confluent-schema-registry" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-assert22_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-schema-registry
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-assert22_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-schema-registry
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment confluent-schema-registry in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 00-assert22_1.yaml:4
────────────────────────────────────────
   4 [   name: confluent-schema-registry
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container confluent-schema-registry in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-assert22_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: confluent-schema-registry
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment confluent-schema-registry in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-assert22_1.yaml:8-13
────────────────────────────────────────
   8 ┌       containers:
   9 │       - name: confluent-schema-registry
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 250m
────────────────────────────────────────



00-assert23_1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-zookeeper' of StatefulSet 'zk-zookeeper' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-assert23_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-zookeeper' of StatefulSet 'zk-zookeeper' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-assert23_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-zookeeper' of 'statefulset' 'zk-zookeeper' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-assert23_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-zookeeper' of StatefulSet 'zk-zookeeper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 00-assert23_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-zookeeper' of StatefulSet 'zk-zookeeper' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-assert23_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubernetes-zookeeper' of StatefulSet 'zk-zookeeper' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 00-assert23_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-zookeeper' of StatefulSet 'zk-zookeeper' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-assert23_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-zookeeper' of StatefulSet 'zk-zookeeper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 00-assert23_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-zookeeper' of StatefulSet 'zk-zookeeper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-assert23_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-zookeeper' of StatefulSet 'zk-zookeeper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-assert23_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-assert23_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-zookeeper" of statefulset "zk-zookeeper" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-assert23_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-assert23_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset zk-zookeeper in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 00-assert23_1.yaml:4
────────────────────────────────────────
   4 [   name: zk-zookeeper
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container zk-zookeeper in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-assert23_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset zk-zookeeper in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-assert23_1.yaml:8-13
────────────────────────────────────────
   8 ┌       containers:
   9 │       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────



00-assert24.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0118 (HIGH): pod kudo-controller-manager-0 in kudo-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-assert24.yaml:1-7
────────────────────────────────────────
   1 ┌ apiVersion: v1
   2 │ kind: Pod
   3 │ metadata:
   4 │   name: kudo-controller-manager-0
   5 │   namespace: kudo-system
   6 │ status:
   7 └   phase: Running
────────────────────────────────────────



00-assert25_1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-zookeeper' of StatefulSet 'zk-zookeeper' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-assert25_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-zookeeper' of StatefulSet 'zk-zookeeper' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-assert25_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-zookeeper' of 'statefulset' 'zk-zookeeper' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-assert25_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-zookeeper' of StatefulSet 'zk-zookeeper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 00-assert25_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-zookeeper' of StatefulSet 'zk-zookeeper' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-assert25_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubernetes-zookeeper' of StatefulSet 'zk-zookeeper' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 00-assert25_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-zookeeper' of StatefulSet 'zk-zookeeper' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-assert25_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-zookeeper' of StatefulSet 'zk-zookeeper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 00-assert25_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-zookeeper' of StatefulSet 'zk-zookeeper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-assert25_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-zookeeper' of StatefulSet 'zk-zookeeper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-assert25_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-assert25_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-zookeeper" of statefulset "zk-zookeeper" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-assert25_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-assert25_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset zk-zookeeper in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 00-assert25_1.yaml:4
────────────────────────────────────────
   4 [   name: zk-zookeeper
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container zk-zookeeper in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-assert25_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset zk-zookeeper in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-assert25_1.yaml:8-13
────────────────────────────────────────
   8 ┌       containers:
   9 │       - name: kubernetes-zookeeper
  10 │         resources:
  11 │           requests:
  12 │             memory: 256Mi
  13 └             cpu: 300m
────────────────────────────────────────



00-assert3.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): statefulset caddy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 00-assert3.yaml:4
────────────────────────────────────────
   4 [   name: caddy
────────────────────────────────────────



00-assert3_1.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): pod assert-caddy-ready in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 00-assert3_1.yaml:4
────────────────────────────────────────
   4 [   name: assert-caddy-ready
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod assert-caddy-ready in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-assert3_1.yaml:1-6
────────────────────────────────────────
   1 ┌ apiVersion: v1
   2 │ kind: Pod
   3 │ metadata:
   4 │   name: assert-caddy-ready
   5 │ status:
   6 └   phase: Succeeded
────────────────────────────────────────



00-assert5_5.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0118 (HIGH): deployment dapr-operator in dapr-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-assert5_5.yaml:9-10
────────────────────────────────────────
   9 ┌       imagePullSecrets:
  10 └       - name: canonical-registry-credentials
────────────────────────────────────────



00-assert5_6.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0118 (HIGH): deployment dapr-sentry in dapr-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-assert5_6.yaml:9-10
────────────────────────────────────────
   9 ┌       imagePullSecrets:
  10 └       - name: canonical-registry-credentials
────────────────────────────────────────



00-assert5_7.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0118 (HIGH): deployment dapr-sidecar-injector in dapr-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-assert5_7.yaml:9-10
────────────────────────────────────────
   9 ┌       imagePullSecrets:
  10 └       - name: canonical-registry-credentials
────────────────────────────────────────



00-assert5_8.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0118 (HIGH): statefulset dapr-placement-server in dapr-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-assert5_8.yaml:9-10
────────────────────────────────────────
   9 ┌       imagePullSecrets:
  10 └       - name: canonical-registry-credentials
────────────────────────────────────────



00-busybox.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-busybox.yaml:10-15
────────────────────────────────────────
  10 ┌   - image: busybox:1.28
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     imagePullPolicy: IfNotPresent
  15 └     name: busybox
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'busybox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-busybox.yaml:10-15
────────────────────────────────────────
  10 ┌   - image: busybox:1.28
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     imagePullPolicy: IfNotPresent
  15 └     name: busybox
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'busybox' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-busybox.yaml:10-15
────────────────────────────────────────
  10 ┌   - image: busybox:1.28
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     imagePullPolicy: IfNotPresent
  15 └     name: busybox
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 00-busybox.yaml:10-15
────────────────────────────────────────
  10 ┌   - image: busybox:1.28
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     imagePullPolicy: IfNotPresent
  15 └     name: busybox
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-busybox.yaml:10-15
────────────────────────────────────────
  10 ┌   - image: busybox:1.28
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     imagePullPolicy: IfNotPresent
  15 └     name: busybox
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'busybox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-busybox.yaml:10-15
────────────────────────────────────────
  10 ┌   - image: busybox:1.28
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     imagePullPolicy: IfNotPresent
  15 └     name: busybox
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-busybox.yaml:10-15
────────────────────────────────────────
  10 ┌   - image: busybox:1.28
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     imagePullPolicy: IfNotPresent
  15 └     name: busybox
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-busybox.yaml:10-15
────────────────────────────────────────
  10 ┌   - image: busybox:1.28
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     imagePullPolicy: IfNotPresent
  15 └     name: busybox
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 00-busybox.yaml:10-15
────────────────────────────────────────
  10 ┌   - image: busybox:1.28
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     imagePullPolicy: IfNotPresent
  15 └     name: busybox
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-busybox.yaml:10-15
────────────────────────────────────────
  10 ┌   - image: busybox:1.28
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     imagePullPolicy: IfNotPresent
  15 └     name: busybox
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-busybox.yaml:10-15
────────────────────────────────────────
  10 ┌   - image: busybox:1.28
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     imagePullPolicy: IfNotPresent
  15 └     name: busybox
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-busybox.yaml:10-15
────────────────────────────────────────
  10 ┌   - image: busybox:1.28
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     imagePullPolicy: IfNotPresent
  15 └     name: busybox
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "busybox" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-busybox.yaml:10-15
────────────────────────────────────────
  10 ┌   - image: busybox:1.28
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     imagePullPolicy: IfNotPresent
  15 └     name: busybox
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-busybox.yaml:10-15
────────────────────────────────────────
  10 ┌   - image: busybox:1.28
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     imagePullPolicy: IfNotPresent
  15 └     name: busybox
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod busybox in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 00-busybox.yaml:4-5
────────────────────────────────────────
   4 ┌   name: busybox
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container busybox in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-busybox.yaml:10-15
────────────────────────────────────────
  10 ┌   - image: busybox:1.28
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     imagePullPolicy: IfNotPresent
  15 └     name: busybox
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod busybox in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-busybox.yaml:7-15
────────────────────────────────────────
   7 ┌   imagePullSecrets:
   8 │   - name: regcred
   9 │   containers:
  10 │   - image: busybox:1.28
  11 │     command:
  12 │       - sleep
  13 │       - "3600"
  14 │     imagePullPolicy: IfNotPresent
  15 └     name: busybox
────────────────────────────────────────



00-caddy1_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'caddy' of StatefulSet 'caddy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-caddy1_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'caddy' of StatefulSet 'caddy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-caddy1_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'caddy' of 'statefulset' 'caddy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-caddy1_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'caddy' of StatefulSet 'caddy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-caddy1_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'caddy' of StatefulSet 'caddy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-caddy1_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'caddy' of StatefulSet 'caddy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-caddy1_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'caddy' of StatefulSet 'caddy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-caddy1_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'caddy' of StatefulSet 'caddy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-caddy1_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'caddy' of StatefulSet 'caddy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-caddy1_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-caddy1_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "caddy" of statefulset "caddy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-caddy1_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-caddy1_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset caddy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 00-caddy1_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: caddy
   5 │   labels:
   6 └     restarter.kubedoop.dev/enable: 'true'
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): statefulset caddy in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container caddy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-caddy1_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset caddy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-caddy1_2.yaml:18-53
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 └               key: BASIC_AUTH
  ..   
────────────────────────────────────────



00-caddy1_4.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'assert-caddy' of Pod 'assert-caddy-ready' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-caddy1_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'assert-caddy' of Pod 'assert-caddy-ready' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-caddy1_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'assert-caddy' of 'pod' 'assert-caddy-ready' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-caddy1_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'assert-caddy' of Pod 'assert-caddy-ready' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-caddy1_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'assert-caddy' of Pod 'assert-caddy-ready' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 00-caddy1_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'assert-caddy' of Pod 'assert-caddy-ready' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-caddy1_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'assert-caddy' of Pod 'assert-caddy-ready' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-caddy1_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'assert-caddy' of Pod 'assert-caddy-ready' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-caddy1_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'assert-caddy' of Pod 'assert-caddy-ready' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-caddy1_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'assert-caddy' of Pod 'assert-caddy-ready' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-caddy1_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-caddy1_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "assert-caddy" of pod "assert-caddy-ready" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-caddy1_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-caddy1_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod assert-caddy-ready in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 00-caddy1_4.yaml:4
────────────────────────────────────────
   4 [   name: assert-caddy-ready
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container assert-caddy-ready in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-caddy1_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod assert-caddy-ready in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-caddy1_4.yaml:6-17
────────────────────────────────────────
   6 ┌   restartPolicy: Never
   7 │   containers:
   8 │   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container assert-caddy in pod assert-caddy-ready (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 00-caddy1_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────



00-caddy_2.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'caddy' of StatefulSet 'caddy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-caddy_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'caddy' of StatefulSet 'caddy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-caddy_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'caddy' of 'statefulset' 'caddy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-caddy_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'caddy' of StatefulSet 'caddy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-caddy_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'caddy' of StatefulSet 'caddy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-caddy_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'caddy' of StatefulSet 'caddy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-caddy_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'caddy' of StatefulSet 'caddy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-caddy_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'caddy' of StatefulSet 'caddy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-caddy_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'caddy' of StatefulSet 'caddy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-caddy_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-caddy_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "caddy" of statefulset "caddy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-caddy_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-caddy_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset caddy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 00-caddy_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: caddy
   5 │   labels:
   6 └     restarter.kubedoop.dev/enable: 'true'
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): statefulset caddy in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container caddy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-caddy_2.yaml:19-49
────────────────────────────────────────
  19 ┌       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 │               key: BASIC_AUTH
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset caddy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-caddy_2.yaml:18-53
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: caddy
  20 │         image: caddy:2
  21 │         env:
  22 │         - name: BASIC_AUTH
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 │               name: basic-auth
  26 └               key: BASIC_AUTH
  ..   
────────────────────────────────────────



00-caddy_4.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'assert-caddy' of Pod 'assert-caddy-ready' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-caddy_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'assert-caddy' of Pod 'assert-caddy-ready' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-caddy_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'assert-caddy' of 'pod' 'assert-caddy-ready' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-caddy_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'assert-caddy' of Pod 'assert-caddy-ready' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-caddy_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'assert-caddy' of Pod 'assert-caddy-ready' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 00-caddy_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'assert-caddy' of Pod 'assert-caddy-ready' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-caddy_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'assert-caddy' of Pod 'assert-caddy-ready' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-caddy_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'assert-caddy' of Pod 'assert-caddy-ready' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-caddy_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'assert-caddy' of Pod 'assert-caddy-ready' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-caddy_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'assert-caddy' of Pod 'assert-caddy-ready' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-caddy_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-caddy_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "assert-caddy" of pod "assert-caddy-ready" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-caddy_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-caddy_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod assert-caddy-ready in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 00-caddy_4.yaml:4
────────────────────────────────────────
   4 [   name: assert-caddy-ready
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container assert-caddy-ready in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-caddy_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod assert-caddy-ready in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-caddy_4.yaml:6-17
────────────────────────────────────────
   6 ┌   restartPolicy: Never
   7 │   containers:
   8 │   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container assert-caddy in pod assert-caddy-ready (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 00-caddy_4.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: assert-caddy
   9 │     image: registry.access.redhat.com/ubi9-minimal:latest
  10 │     resources:
  11 │       limits:
  12 │         memory: 100Mi
  13 │         cpu: 100m
  14 │     command:
  15 │     - sh
  16 │     - -c
  17 └     - "EXPECTED=\"Welcome,\"\nwhile true; do\n  ACTUAL=$(curl -s http://caddy:80)\n\
────────────────────────────────────────



00-db.yaml (kubernetes)
=======================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'db-cm' in 'dify-deploy' namespace stores secrets in key(s) or value(s) '{"PODTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



00-db_3.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'db' of Deployment 'db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-db_3.yaml:17-56
────────────────────────────────────────
  17 ┌       - name: db
  18 │         env:
  19 │         - name: PGDATA
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: db-cm
  23 │               key: PGDATA
  24 │         - name: PGUSER
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'db' of Deployment 'db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-db_3.yaml:17-56
────────────────────────────────────────
  17 ┌       - name: db
  18 │         env:
  19 │         - name: PGDATA
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: db-cm
  23 │               key: PGDATA
  24 │         - name: PGUSER
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'db' of 'deployment' 'db' in 'dify-deploy' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-db_3.yaml:17-56
────────────────────────────────────────
  17 ┌       - name: db
  18 │         env:
  19 │         - name: PGDATA
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: db-cm
  23 │               key: PGDATA
  24 │         - name: PGUSER
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'db' of Deployment 'db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-db_3.yaml:17-56
────────────────────────────────────────
  17 ┌       - name: db
  18 │         env:
  19 │         - name: PGDATA
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: db-cm
  23 │               key: PGDATA
  24 │         - name: PGUSER
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'db' of Deployment 'db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-db_3.yaml:17-56
────────────────────────────────────────
  17 ┌       - name: db
  18 │         env:
  19 │         - name: PGDATA
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: db-cm
  23 │               key: PGDATA
  24 │         - name: PGUSER
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'db' of Deployment 'db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-db_3.yaml:17-56
────────────────────────────────────────
  17 ┌       - name: db
  18 │         env:
  19 │         - name: PGDATA
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: db-cm
  23 │               key: PGDATA
  24 │         - name: PGUSER
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'db' of Deployment 'db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-db_3.yaml:17-56
────────────────────────────────────────
  17 ┌       - name: db
  18 │         env:
  19 │         - name: PGDATA
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: db-cm
  23 │               key: PGDATA
  24 │         - name: PGUSER
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'db' of Deployment 'db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-db_3.yaml:17-56
────────────────────────────────────────
  17 ┌       - name: db
  18 │         env:
  19 │         - name: PGDATA
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: db-cm
  23 │               key: PGDATA
  24 │         - name: PGUSER
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'db' of Deployment 'db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-db_3.yaml:17-56
────────────────────────────────────────
  17 ┌       - name: db
  18 │         env:
  19 │         - name: PGDATA
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: db-cm
  23 │               key: PGDATA
  24 │         - name: PGUSER
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-db_3.yaml:17-56
────────────────────────────────────────
  17 ┌       - name: db
  18 │         env:
  19 │         - name: PGDATA
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: db-cm
  23 │               key: PGDATA
  24 │         - name: PGUSER
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "db" of deployment "db" in "dify-deploy" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-db_3.yaml:17-56
────────────────────────────────────────
  17 ┌       - name: db
  18 │         env:
  19 │         - name: PGDATA
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: db-cm
  23 │               key: PGDATA
  24 │         - name: PGUSER
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-db_3.yaml:17-56
────────────────────────────────────────
  17 ┌       - name: db
  18 │         env:
  19 │         - name: PGDATA
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: db-cm
  23 │               key: PGDATA
  24 │         - name: PGUSER
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container db in dify-deploy namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-db_3.yaml:17-56
────────────────────────────────────────
  17 ┌       - name: db
  18 │         env:
  19 │         - name: PGDATA
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: db-cm
  23 │               key: PGDATA
  24 │         - name: PGUSER
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment db in dify-deploy namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-db_3.yaml:16-60
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: db
  18 │         env:
  19 │         - name: PGDATA
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: db-cm
  23 │               key: PGDATA
  24 └         - name: PGUSER
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container db in deployment db (namespace: dify-deploy) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 00-db_3.yaml:17-56
────────────────────────────────────────
  17 ┌       - name: db
  18 │         env:
  19 │         - name: PGDATA
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: db-cm
  23 │               key: PGDATA
  24 │         - name: PGUSER
  25 └           valueFrom:
  ..   
────────────────────────────────────────



00-deployment.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 7, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'php-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-deployment.yaml:22-107
────────────────────────────────────────
  22 ┌       - name: web
  23 │         image: devinfrabr/laravel-app:latest
  24 │         ports:
  25 │           - name: http
  26 │             containerPort: 80
  27 │         env:
  28 │           - name: DB_USERNAME
  29 │             valueFrom:
  30 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'php-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-deployment.yaml:22-107
────────────────────────────────────────
  22 ┌       - name: web
  23 │         image: devinfrabr/laravel-app:latest
  24 │         ports:
  25 │           - name: http
  26 │             containerPort: 80
  27 │         env:
  28 │           - name: DB_USERNAME
  29 │             valueFrom:
  30 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'php-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-deployment.yaml:22-107
────────────────────────────────────────
  22 ┌       - name: web
  23 │         image: devinfrabr/laravel-app:latest
  24 │         ports:
  25 │           - name: http
  26 │             containerPort: 80
  27 │         env:
  28 │           - name: DB_USERNAME
  29 │             valueFrom:
  30 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'php-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-deployment.yaml:22-107
────────────────────────────────────────
  22 ┌       - name: web
  23 │         image: devinfrabr/laravel-app:latest
  24 │         ports:
  25 │           - name: http
  26 │             containerPort: 80
  27 │         env:
  28 │           - name: DB_USERNAME
  29 │             valueFrom:
  30 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'web' of Deployment 'php-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 00-deployment.yaml:22-107
────────────────────────────────────────
  22 ┌       - name: web
  23 │         image: devinfrabr/laravel-app:latest
  24 │         ports:
  25 │           - name: http
  26 │             containerPort: 80
  27 │         env:
  28 │           - name: DB_USERNAME
  29 │             valueFrom:
  30 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'php-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-deployment.yaml:22-107
────────────────────────────────────────
  22 ┌       - name: web
  23 │         image: devinfrabr/laravel-app:latest
  24 │         ports:
  25 │           - name: http
  26 │             containerPort: 80
  27 │         env:
  28 │           - name: DB_USERNAME
  29 │             valueFrom:
  30 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'php-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-deployment.yaml:22-107
────────────────────────────────────────
  22 ┌       - name: web
  23 │         image: devinfrabr/laravel-app:latest
  24 │         ports:
  25 │           - name: http
  26 │             containerPort: 80
  27 │         env:
  28 │           - name: DB_USERNAME
  29 │             valueFrom:
  30 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'php-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-deployment.yaml:22-107
────────────────────────────────────────
  22 ┌       - name: web
  23 │         image: devinfrabr/laravel-app:latest
  24 │         ports:
  25 │           - name: http
  26 │             containerPort: 80
  27 │         env:
  28 │           - name: DB_USERNAME
  29 │             valueFrom:
  30 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-deployment.yaml:22-107
────────────────────────────────────────
  22 ┌       - name: web
  23 │         image: devinfrabr/laravel-app:latest
  24 │         ports:
  25 │           - name: http
  26 │             containerPort: 80
  27 │         env:
  28 │           - name: DB_USERNAME
  29 │             valueFrom:
  30 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "php-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-deployment.yaml:22-107
────────────────────────────────────────
  22 ┌       - name: web
  23 │         image: devinfrabr/laravel-app:latest
  24 │         ports:
  25 │           - name: http
  26 │             containerPort: 80
  27 │         env:
  28 │           - name: DB_USERNAME
  29 │             valueFrom:
  30 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-deployment.yaml:22-107
────────────────────────────────────────
  22 ┌       - name: web
  23 │         image: devinfrabr/laravel-app:latest
  24 │         ports:
  25 │           - name: http
  26 │             containerPort: 80
  27 │         env:
  28 │           - name: DB_USERNAME
  29 │             valueFrom:
  30 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment php-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 00-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: php-app
   5 │   labels:
   6 └     app: php-app
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment php-app in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container php-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-deployment.yaml:22-107
────────────────────────────────────────
  22 ┌       - name: web
  23 │         image: devinfrabr/laravel-app:latest
  24 │         ports:
  25 │           - name: http
  26 │             containerPort: 80
  27 │         env:
  28 │           - name: DB_USERNAME
  29 │             valueFrom:
  30 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment php-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-deployment.yaml:19-131
────────────────────────────────────────
  19 ┌       serviceAccountName: php-app
  20 │       terminationGracePeriodSeconds: 5
  21 │       containers:
  22 │       - name: web
  23 │         image: devinfrabr/laravel-app:latest
  24 │         ports:
  25 │           - name: http
  26 │             containerPort: 80
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment php-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 00-deployment.yaml:22-107
────────────────────────────────────────
  22 ┌       - name: web
  23 │         image: devinfrabr/laravel-app:latest
  24 │         ports:
  25 │           - name: http
  26 │             containerPort: 80
  27 │         env:
  28 │           - name: DB_USERNAME
  29 │             valueFrom:
  30 └               secretKeyRef:
  ..   
────────────────────────────────────────



00-env-configmap.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'audiobookshelf-env-configmap' in 'app-audiobookshelf' namespace stores sensitive contents in key(s) or value(s) '{"user"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



00-exporter_1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-server' of Deployment 'ndb-cluster-exporter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-exporter_1.yaml:30-66
────────────────────────────────────────
  30 ┌       - name: cluster-server
  31 │         image: hub.askug.net/mysql-cluster-mysql-prometheus-exporter:0.0.2-beta3
  32 │         args:
  33 │         - mysqld_exporter
  34 │         - ndb-cluster-balancer-service.ndb-cluster.svc.kube.askug.net:3306
  35 │         ports:
  36 │         - name: tcp9104
  37 │           protocol: TCP
  38 └           containerPort: 9104
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-server' of Deployment 'ndb-cluster-exporter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-exporter_1.yaml:30-66
────────────────────────────────────────
  30 ┌       - name: cluster-server
  31 │         image: hub.askug.net/mysql-cluster-mysql-prometheus-exporter:0.0.2-beta3
  32 │         args:
  33 │         - mysqld_exporter
  34 │         - ndb-cluster-balancer-service.ndb-cluster.svc.kube.askug.net:3306
  35 │         ports:
  36 │         - name: tcp9104
  37 │           protocol: TCP
  38 └           containerPort: 9104
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-server' of 'deployment' 'ndb-cluster-exporter' in 'ndb-cluster' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-exporter_1.yaml:30-66
────────────────────────────────────────
  30 ┌       - name: cluster-server
  31 │         image: hub.askug.net/mysql-cluster-mysql-prometheus-exporter:0.0.2-beta3
  32 │         args:
  33 │         - mysqld_exporter
  34 │         - ndb-cluster-balancer-service.ndb-cluster.svc.kube.askug.net:3306
  35 │         ports:
  36 │         - name: tcp9104
  37 │           protocol: TCP
  38 └           containerPort: 9104
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-server' of Deployment 'ndb-cluster-exporter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-exporter_1.yaml:30-66
────────────────────────────────────────
  30 ┌       - name: cluster-server
  31 │         image: hub.askug.net/mysql-cluster-mysql-prometheus-exporter:0.0.2-beta3
  32 │         args:
  33 │         - mysqld_exporter
  34 │         - ndb-cluster-balancer-service.ndb-cluster.svc.kube.askug.net:3306
  35 │         ports:
  36 │         - name: tcp9104
  37 │           protocol: TCP
  38 └           containerPort: 9104
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-server' of Deployment 'ndb-cluster-exporter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-exporter_1.yaml:30-66
────────────────────────────────────────
  30 ┌       - name: cluster-server
  31 │         image: hub.askug.net/mysql-cluster-mysql-prometheus-exporter:0.0.2-beta3
  32 │         args:
  33 │         - mysqld_exporter
  34 │         - ndb-cluster-balancer-service.ndb-cluster.svc.kube.askug.net:3306
  35 │         ports:
  36 │         - name: tcp9104
  37 │           protocol: TCP
  38 └           containerPort: 9104
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cluster-server' of Deployment 'ndb-cluster-exporter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-exporter_1.yaml:30-66
────────────────────────────────────────
  30 ┌       - name: cluster-server
  31 │         image: hub.askug.net/mysql-cluster-mysql-prometheus-exporter:0.0.2-beta3
  32 │         args:
  33 │         - mysqld_exporter
  34 │         - ndb-cluster-balancer-service.ndb-cluster.svc.kube.askug.net:3306
  35 │         ports:
  36 │         - name: tcp9104
  37 │           protocol: TCP
  38 └           containerPort: 9104
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cluster-server' of Deployment 'ndb-cluster-exporter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-exporter_1.yaml:30-66
────────────────────────────────────────
  30 ┌       - name: cluster-server
  31 │         image: hub.askug.net/mysql-cluster-mysql-prometheus-exporter:0.0.2-beta3
  32 │         args:
  33 │         - mysqld_exporter
  34 │         - ndb-cluster-balancer-service.ndb-cluster.svc.kube.askug.net:3306
  35 │         ports:
  36 │         - name: tcp9104
  37 │           protocol: TCP
  38 └           containerPort: 9104
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'cluster-server' of Deployment 'ndb-cluster-exporter' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 00-exporter_1.yaml:30-66
────────────────────────────────────────
  30 ┌       - name: cluster-server
  31 │         image: hub.askug.net/mysql-cluster-mysql-prometheus-exporter:0.0.2-beta3
  32 │         args:
  33 │         - mysqld_exporter
  34 │         - ndb-cluster-balancer-service.ndb-cluster.svc.kube.askug.net:3306
  35 │         ports:
  36 │         - name: tcp9104
  37 │           protocol: TCP
  38 └           containerPort: 9104
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-exporter_1.yaml:30-66
────────────────────────────────────────
  30 ┌       - name: cluster-server
  31 │         image: hub.askug.net/mysql-cluster-mysql-prometheus-exporter:0.0.2-beta3
  32 │         args:
  33 │         - mysqld_exporter
  34 │         - ndb-cluster-balancer-service.ndb-cluster.svc.kube.askug.net:3306
  35 │         ports:
  36 │         - name: tcp9104
  37 │           protocol: TCP
  38 └           containerPort: 9104
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-server" of deployment "ndb-cluster-exporter" in "ndb-cluster" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-exporter_1.yaml:30-66
────────────────────────────────────────
  30 ┌       - name: cluster-server
  31 │         image: hub.askug.net/mysql-cluster-mysql-prometheus-exporter:0.0.2-beta3
  32 │         args:
  33 │         - mysqld_exporter
  34 │         - ndb-cluster-balancer-service.ndb-cluster.svc.kube.askug.net:3306
  35 │         ports:
  36 │         - name: tcp9104
  37 │           protocol: TCP
  38 └           containerPort: 9104
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-exporter_1.yaml:30-66
────────────────────────────────────────
  30 ┌       - name: cluster-server
  31 │         image: hub.askug.net/mysql-cluster-mysql-prometheus-exporter:0.0.2-beta3
  32 │         args:
  33 │         - mysqld_exporter
  34 │         - ndb-cluster-balancer-service.ndb-cluster.svc.kube.askug.net:3306
  35 │         ports:
  36 │         - name: tcp9104
  37 │           protocol: TCP
  38 └           containerPort: 9104
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ndb-cluster-exporter in ndb-cluster namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-exporter_1.yaml:30-66
────────────────────────────────────────
  30 ┌       - name: cluster-server
  31 │         image: hub.askug.net/mysql-cluster-mysql-prometheus-exporter:0.0.2-beta3
  32 │         args:
  33 │         - mysqld_exporter
  34 │         - ndb-cluster-balancer-service.ndb-cluster.svc.kube.askug.net:3306
  35 │         ports:
  36 │         - name: tcp9104
  37 │           protocol: TCP
  38 └           containerPort: 9104
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ndb-cluster-exporter in ndb-cluster namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-exporter_1.yaml:18-66
────────────────────────────────────────
  18 ┌       restartPolicy: Always
  19 │       affinity:
  20 │         nodeAffinity:
  21 │           requiredDuringSchedulingIgnoredDuringExecution:
  22 │             nodeSelectorTerms:
  23 │             - matchExpressions:
  24 │               - key: ndbDataType
  25 │                 operator: In
  26 └                 values:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-server in deployment ndb-cluster-exporter (namespace: ndb-cluster) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 00-exporter_1.yaml:30-66
────────────────────────────────────────
  30 ┌       - name: cluster-server
  31 │         image: hub.askug.net/mysql-cluster-mysql-prometheus-exporter:0.0.2-beta3
  32 │         args:
  33 │         - mysqld_exporter
  34 │         - ndb-cluster-balancer-service.ndb-cluster.svc.kube.askug.net:3306
  35 │         ports:
  36 │         - name: tcp9104
  37 │           protocol: TCP
  38 └           containerPort: 9104
  ..   
────────────────────────────────────────



00-helloworld.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-helloworld.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'k8s-demo' of Deployment 'helloworld-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-helloworld.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'k8s-demo' of 'deployment' 'helloworld-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-helloworld.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 00-helloworld.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-helloworld.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'k8s-demo' of Deployment 'helloworld-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 00-helloworld.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-helloworld.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-helloworld.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-helloworld.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 00-helloworld.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-helloworld.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-helloworld.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-helloworld.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "k8s-demo" of deployment "helloworld-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-helloworld.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-helloworld.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment helloworld-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 00-helloworld.yaml:4-6
────────────────────────────────────────
   4 ┌   name: helloworld-deployment
   5 │   labels:
   6 └     app: helloworld
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment helloworld-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container helloworld-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-helloworld.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment helloworld-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-helloworld.yaml:17-23
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container k8s-demo in deployment helloworld-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 00-helloworld.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────



00-helloworld1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-helloworld1.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'k8s-demo' of Deployment 'helloworld-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-helloworld1.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'k8s-demo' of 'deployment' 'helloworld-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-helloworld1.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 00-helloworld1.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-helloworld1.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'k8s-demo' of Deployment 'helloworld-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 00-helloworld1.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-helloworld1.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-helloworld1.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-helloworld1.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 00-helloworld1.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-helloworld1.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-helloworld1.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-helloworld1.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "k8s-demo" of deployment "helloworld-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-helloworld1.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-helloworld1.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment helloworld-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 00-helloworld1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: helloworld-deployment
   5 │   labels:
   6 └     app: helloworld
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment helloworld-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container helloworld-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-helloworld1.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment helloworld-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-helloworld1.yaml:17-23
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container k8s-demo in deployment helloworld-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 00-helloworld1.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────



00-helloworld2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-helloworld2.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'k8s-demo' of Deployment 'helloworld-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-helloworld2.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'k8s-demo' of 'deployment' 'helloworld-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-helloworld2.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 00-helloworld2.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-helloworld2.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'k8s-demo' of Deployment 'helloworld-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 00-helloworld2.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-helloworld2.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-helloworld2.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-helloworld2.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 00-helloworld2.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-helloworld2.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'k8s-demo' of Deployment 'helloworld-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-helloworld2.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-helloworld2.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "k8s-demo" of deployment "helloworld-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-helloworld2.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-helloworld2.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment helloworld-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 00-helloworld2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: helloworld-deployment
   5 │   labels:
   6 └     app: helloworld
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment helloworld-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container helloworld-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-helloworld2.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment helloworld-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-helloworld2.yaml:17-23
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container k8s-demo in deployment helloworld-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 00-helloworld2.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: k8s-demo
  19 │         image: amitvashist7/k8s-tiny-web
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - name: node-port
  23 └           containerPort: 80
────────────────────────────────────────



00-mi-nginx.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of Deployment 'mi-nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-mi-nginx.yaml:22-25
────────────────────────────────────────
  22 ┌         - name: nginx-container
  23 │           image: nginx:1.26-bookworm
  24 │           ports:
  25 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of Deployment 'mi-nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-mi-nginx.yaml:22-25
────────────────────────────────────────
  22 ┌         - name: nginx-container
  23 │           image: nginx:1.26-bookworm
  24 │           ports:
  25 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'deployment' 'mi-nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-mi-nginx.yaml:22-25
────────────────────────────────────────
  22 ┌         - name: nginx-container
  23 │           image: nginx:1.26-bookworm
  24 │           ports:
  25 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of Deployment 'mi-nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 00-mi-nginx.yaml:22-25
────────────────────────────────────────
  22 ┌         - name: nginx-container
  23 │           image: nginx:1.26-bookworm
  24 │           ports:
  25 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of Deployment 'mi-nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-mi-nginx.yaml:22-25
────────────────────────────────────────
  22 ┌         - name: nginx-container
  23 │           image: nginx:1.26-bookworm
  24 │           ports:
  25 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of Deployment 'mi-nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-mi-nginx.yaml:22-25
────────────────────────────────────────
  22 ┌         - name: nginx-container
  23 │           image: nginx:1.26-bookworm
  24 │           ports:
  25 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of Deployment 'mi-nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-mi-nginx.yaml:22-25
────────────────────────────────────────
  22 ┌         - name: nginx-container
  23 │           image: nginx:1.26-bookworm
  24 │           ports:
  25 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of Deployment 'mi-nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-mi-nginx.yaml:22-25
────────────────────────────────────────
  22 ┌         - name: nginx-container
  23 │           image: nginx:1.26-bookworm
  24 │           ports:
  25 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of Deployment 'mi-nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 00-mi-nginx.yaml:22-25
────────────────────────────────────────
  22 ┌         - name: nginx-container
  23 │           image: nginx:1.26-bookworm
  24 │           ports:
  25 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of Deployment 'mi-nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-mi-nginx.yaml:22-25
────────────────────────────────────────
  22 ┌         - name: nginx-container
  23 │           image: nginx:1.26-bookworm
  24 │           ports:
  25 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of Deployment 'mi-nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-mi-nginx.yaml:22-25
────────────────────────────────────────
  22 ┌         - name: nginx-container
  23 │           image: nginx:1.26-bookworm
  24 │           ports:
  25 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-mi-nginx.yaml:22-25
────────────────────────────────────────
  22 ┌         - name: nginx-container
  23 │           image: nginx:1.26-bookworm
  24 │           ports:
  25 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of deployment "mi-nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-mi-nginx.yaml:22-25
────────────────────────────────────────
  22 ┌         - name: nginx-container
  23 │           image: nginx:1.26-bookworm
  24 │           ports:
  25 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-mi-nginx.yaml:22-25
────────────────────────────────────────
  22 ┌         - name: nginx-container
  23 │           image: nginx:1.26-bookworm
  24 │           ports:
  25 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mi-nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 00-mi-nginx.yaml:4-8
────────────────────────────────────────
   4 ┌   name: mi-nginx
   5 │   namespace: default
   6 │   labels:
   7 │     app: v1
   8 └     environment: dev
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mi-nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mi-nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-mi-nginx.yaml:22-25
────────────────────────────────────────
  22 ┌         - name: nginx-container
  23 │           image: nginx:1.26-bookworm
  24 │           ports:
  25 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mi-nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-mi-nginx.yaml:21-25
────────────────────────────────────────
  21 ┌       containers:
  22 │         - name: nginx-container
  23 │           image: nginx:1.26-bookworm
  24 │           ports:
  25 └             - containerPort: 80
────────────────────────────────────────



00-minio-deployment1_1.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'minio' of Deployment 'minio' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-minio-deployment1_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'minio' of Deployment 'minio' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-minio-deployment1_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'minio' of 'deployment' 'minio' in 'velero' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-minio-deployment1_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'minio' of Deployment 'minio' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 00-minio-deployment1_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'minio' of Deployment 'minio' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-minio-deployment1_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'minio' of Deployment 'minio' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 00-minio-deployment1_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'minio' of Deployment 'minio' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-minio-deployment1_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'minio' of Deployment 'minio' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-minio-deployment1_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'minio' of Deployment 'minio' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-minio-deployment1_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'minio' of Deployment 'minio' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 00-minio-deployment1_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'minio' of Deployment 'minio' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-minio-deployment1_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'minio' of Deployment 'minio' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-minio-deployment1_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-minio-deployment1_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "minio" of deployment "minio" in "velero" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-minio-deployment1_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-minio-deployment1_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container minio in velero namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-minio-deployment1_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment minio in velero namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-minio-deployment1_1.yaml:19-43
────────────────────────────────────────
  19 ┌       volumes:
  20 │       - name: storage
  21 │         emptyDir: {}
  22 │       - name: config
  23 │         emptyDir: {}
  24 │       containers:
  25 │       - name: minio
  26 │         image: minio/minio:latest
  27 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container minio in deployment minio (namespace: velero) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 00-minio-deployment1_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────



00-minio-deployment1_3.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mc' of Job 'minio-setup' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-minio-deployment1_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mc' of Job 'minio-setup' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-minio-deployment1_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mc' of 'job' 'minio-setup' in 'velero' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-minio-deployment1_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mc' of Job 'minio-setup' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 00-minio-deployment1_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mc' of Job 'minio-setup' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-minio-deployment1_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mc' of Job 'minio-setup' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 00-minio-deployment1_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mc' of Job 'minio-setup' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-minio-deployment1_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mc' of Job 'minio-setup' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-minio-deployment1_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mc' of Job 'minio-setup' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-minio-deployment1_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mc' of Job 'minio-setup' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 00-minio-deployment1_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mc' of Job 'minio-setup' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-minio-deployment1_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mc' of Job 'minio-setup' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-minio-deployment1_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-minio-deployment1_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mc" of job "minio-setup" in "velero" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-minio-deployment1_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-minio-deployment1_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container minio-setup in velero namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-minio-deployment1_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job minio-setup in velero namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-minio-deployment1_3.yaml:13-28
────────────────────────────────────────
  13 ┌       restartPolicy: OnFailure
  14 │       volumes:
  15 │       - name: config
  16 │         emptyDir: {}
  17 │       containers:
  18 │       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 └         command:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mc in job minio-setup (namespace: velero) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 00-minio-deployment1_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────



00-minio-deployment2_1.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'minio' of Deployment 'minio' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-minio-deployment2_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'minio' of Deployment 'minio' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-minio-deployment2_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'minio' of 'deployment' 'minio' in 'velero' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-minio-deployment2_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'minio' of Deployment 'minio' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 00-minio-deployment2_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'minio' of Deployment 'minio' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-minio-deployment2_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'minio' of Deployment 'minio' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 00-minio-deployment2_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'minio' of Deployment 'minio' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-minio-deployment2_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'minio' of Deployment 'minio' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-minio-deployment2_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'minio' of Deployment 'minio' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-minio-deployment2_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'minio' of Deployment 'minio' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 00-minio-deployment2_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'minio' of Deployment 'minio' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-minio-deployment2_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'minio' of Deployment 'minio' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-minio-deployment2_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-minio-deployment2_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "minio" of deployment "minio" in "velero" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-minio-deployment2_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-minio-deployment2_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container minio in velero namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-minio-deployment2_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment minio in velero namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-minio-deployment2_1.yaml:19-43
────────────────────────────────────────
  19 ┌       volumes:
  20 │       - name: storage
  21 │         emptyDir: {}
  22 │       - name: config
  23 │         emptyDir: {}
  24 │       containers:
  25 │       - name: minio
  26 │         image: minio/minio:latest
  27 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container minio in deployment minio (namespace: velero) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 00-minio-deployment2_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────



00-minio-deployment2_3.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mc' of Job 'minio-setup' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-minio-deployment2_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mc' of Job 'minio-setup' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-minio-deployment2_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mc' of 'job' 'minio-setup' in 'velero' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-minio-deployment2_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mc' of Job 'minio-setup' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 00-minio-deployment2_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mc' of Job 'minio-setup' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-minio-deployment2_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mc' of Job 'minio-setup' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 00-minio-deployment2_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mc' of Job 'minio-setup' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-minio-deployment2_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mc' of Job 'minio-setup' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-minio-deployment2_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mc' of Job 'minio-setup' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-minio-deployment2_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mc' of Job 'minio-setup' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 00-minio-deployment2_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mc' of Job 'minio-setup' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-minio-deployment2_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mc' of Job 'minio-setup' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-minio-deployment2_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-minio-deployment2_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mc" of job "minio-setup" in "velero" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-minio-deployment2_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-minio-deployment2_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container minio-setup in velero namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-minio-deployment2_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job minio-setup in velero namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-minio-deployment2_3.yaml:13-28
────────────────────────────────────────
  13 ┌       restartPolicy: OnFailure
  14 │       volumes:
  15 │       - name: config
  16 │         emptyDir: {}
  17 │       containers:
  18 │       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 └         command:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mc in job minio-setup (namespace: velero) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 00-minio-deployment2_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────



00-minio-deployment3.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'minio' of Deployment 'minio' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-minio-deployment3.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'minio' of Deployment 'minio' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-minio-deployment3.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'minio' of 'deployment' 'minio' in 'velero' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-minio-deployment3.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'minio' of Deployment 'minio' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 00-minio-deployment3.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'minio' of Deployment 'minio' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-minio-deployment3.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'minio' of Deployment 'minio' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 00-minio-deployment3.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'minio' of Deployment 'minio' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-minio-deployment3.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'minio' of Deployment 'minio' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-minio-deployment3.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'minio' of Deployment 'minio' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-minio-deployment3.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'minio' of Deployment 'minio' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 00-minio-deployment3.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'minio' of Deployment 'minio' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-minio-deployment3.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'minio' of Deployment 'minio' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-minio-deployment3.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-minio-deployment3.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "minio" of deployment "minio" in "velero" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-minio-deployment3.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-minio-deployment3.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container minio in velero namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-minio-deployment3.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment minio in velero namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-minio-deployment3.yaml:19-43
────────────────────────────────────────
  19 ┌       volumes:
  20 │       - name: storage
  21 │         emptyDir: {}
  22 │       - name: config
  23 │         emptyDir: {}
  24 │       containers:
  25 │       - name: minio
  26 │         image: minio/minio:latest
  27 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container minio in deployment minio (namespace: velero) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 00-minio-deployment3.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: minio/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────



00-minio-deployment3_2.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mc' of Job 'minio-setup' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-minio-deployment3_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mc' of Job 'minio-setup' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-minio-deployment3_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mc' of 'job' 'minio-setup' in 'velero' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-minio-deployment3_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mc' of Job 'minio-setup' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 00-minio-deployment3_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mc' of Job 'minio-setup' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-minio-deployment3_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mc' of Job 'minio-setup' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 00-minio-deployment3_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mc' of Job 'minio-setup' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-minio-deployment3_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mc' of Job 'minio-setup' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-minio-deployment3_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mc' of Job 'minio-setup' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-minio-deployment3_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mc' of Job 'minio-setup' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 00-minio-deployment3_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mc' of Job 'minio-setup' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-minio-deployment3_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mc' of Job 'minio-setup' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-minio-deployment3_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-minio-deployment3_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mc" of job "minio-setup" in "velero" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-minio-deployment3_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-minio-deployment3_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container minio-setup in velero namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-minio-deployment3_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job minio-setup in velero namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-minio-deployment3_2.yaml:13-28
────────────────────────────────────────
  13 ┌       restartPolicy: OnFailure
  14 │       volumes:
  15 │       - name: config
  16 │         emptyDir: {}
  17 │       containers:
  18 │       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 └         command:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mc in job minio-setup (namespace: velero) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 00-minio-deployment3_2.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: minio/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────



00-minio-deployment_1.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'minio' of Deployment 'minio' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-minio-deployment_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: harbor.geniusafc.com/docker.io/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'minio' of Deployment 'minio' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-minio-deployment_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: harbor.geniusafc.com/docker.io/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'minio' of 'deployment' 'minio' in 'velero' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-minio-deployment_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: harbor.geniusafc.com/docker.io/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'minio' of Deployment 'minio' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 00-minio-deployment_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: harbor.geniusafc.com/docker.io/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'minio' of Deployment 'minio' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-minio-deployment_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: harbor.geniusafc.com/docker.io/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'minio' of Deployment 'minio' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 00-minio-deployment_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: harbor.geniusafc.com/docker.io/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'minio' of Deployment 'minio' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-minio-deployment_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: harbor.geniusafc.com/docker.io/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'minio' of Deployment 'minio' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-minio-deployment_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: harbor.geniusafc.com/docker.io/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'minio' of Deployment 'minio' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-minio-deployment_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: harbor.geniusafc.com/docker.io/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'minio' of Deployment 'minio' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 00-minio-deployment_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: harbor.geniusafc.com/docker.io/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'minio' of Deployment 'minio' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-minio-deployment_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: harbor.geniusafc.com/docker.io/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'minio' of Deployment 'minio' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-minio-deployment_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: harbor.geniusafc.com/docker.io/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-minio-deployment_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: harbor.geniusafc.com/docker.io/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "minio" of deployment "minio" in "velero" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-minio-deployment_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: harbor.geniusafc.com/docker.io/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-minio-deployment_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: harbor.geniusafc.com/docker.io/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container minio in velero namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-minio-deployment_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: harbor.geniusafc.com/docker.io/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment minio in velero namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-minio-deployment_1.yaml:19-43
────────────────────────────────────────
  19 ┌       volumes:
  20 │       - name: storage
  21 │         emptyDir: {}
  22 │       - name: config
  23 │         emptyDir: {}
  24 │       containers:
  25 │       - name: minio
  26 │         image: harbor.geniusafc.com/docker.io/minio:latest
  27 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container minio in deployment minio (namespace: velero) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 00-minio-deployment_1.yaml:25-43
────────────────────────────────────────
  25 ┌       - name: minio
  26 │         image: harbor.geniusafc.com/docker.io/minio:latest
  27 │         imagePullPolicy: IfNotPresent
  28 │         args:
  29 │         - server
  30 │         - /storage
  31 │         - --config-dir=/config
  32 │         env:
  33 └         - name: MINIO_ACCESS_KEY
  ..   
────────────────────────────────────────



00-minio-deployment_3.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mc' of Job 'minio-setup' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-minio-deployment_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: harbor.geniusafc.com/docker.io/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mc' of Job 'minio-setup' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-minio-deployment_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: harbor.geniusafc.com/docker.io/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mc' of 'job' 'minio-setup' in 'velero' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-minio-deployment_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: harbor.geniusafc.com/docker.io/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mc' of Job 'minio-setup' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 00-minio-deployment_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: harbor.geniusafc.com/docker.io/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mc' of Job 'minio-setup' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-minio-deployment_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: harbor.geniusafc.com/docker.io/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mc' of Job 'minio-setup' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 00-minio-deployment_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: harbor.geniusafc.com/docker.io/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mc' of Job 'minio-setup' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-minio-deployment_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: harbor.geniusafc.com/docker.io/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mc' of Job 'minio-setup' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-minio-deployment_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: harbor.geniusafc.com/docker.io/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mc' of Job 'minio-setup' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-minio-deployment_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: harbor.geniusafc.com/docker.io/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mc' of Job 'minio-setup' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 00-minio-deployment_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: harbor.geniusafc.com/docker.io/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mc' of Job 'minio-setup' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-minio-deployment_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: harbor.geniusafc.com/docker.io/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mc' of Job 'minio-setup' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-minio-deployment_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: harbor.geniusafc.com/docker.io/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-minio-deployment_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: harbor.geniusafc.com/docker.io/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mc" of job "minio-setup" in "velero" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-minio-deployment_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: harbor.geniusafc.com/docker.io/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-minio-deployment_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: harbor.geniusafc.com/docker.io/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container minio-setup in velero namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-minio-deployment_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: harbor.geniusafc.com/docker.io/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job minio-setup in velero namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-minio-deployment_3.yaml:13-28
────────────────────────────────────────
  13 ┌       restartPolicy: OnFailure
  14 │       volumes:
  15 │       - name: config
  16 │         emptyDir: {}
  17 │       containers:
  18 │       - name: mc
  19 │         image: harbor.geniusafc.com/docker.io/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 └         command:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mc in job minio-setup (namespace: velero) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 00-minio-deployment_3.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: mc
  19 │         image: harbor.geniusafc.com/docker.io/mc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 │         - mc --config-dir=/config config host add velero http://minio:9000 minio minio123
  25 │           && mc --config-dir=/config mb -p velero/velero
  26 └         volumeMounts:
  ..   
────────────────────────────────────────



00-pod.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Pod 'my-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-pod.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Pod 'my-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-pod.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'pod' 'my-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-pod.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Pod 'my-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 00-pod.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Pod 'my-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-pod.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Pod 'my-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-pod.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Pod 'my-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-pod.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Pod 'my-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-pod.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Pod 'my-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 00-pod.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Pod 'my-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-pod.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Pod 'my-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-pod.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-pod.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of pod "my-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-pod.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-pod.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod my-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 00-pod.yaml:5-9
────────────────────────────────────────
   5 ┌   name: my-pod
   6 │   labels:
   7 │     app.kubernetes.io/name: wordpress
   8 │     pod-template-hash: 84bbf6f4dd
   9 └     app: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-pod.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-pod.yaml:11-13
────────────────────────────────────────
  11 ┌   containers:
  12 │     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────



00-pod1.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Pod 'my-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Pod 'my-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'pod' 'my-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Pod 'my-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 00-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Pod 'my-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Pod 'my-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Pod 'my-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Pod 'my-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Pod 'my-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 00-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Pod 'my-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Pod 'my-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of pod "my-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod my-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 00-pod1.yaml:5-9
────────────────────────────────────────
   5 ┌   name: my-pod
   6 │   labels:
   7 │     app.kubernetes.io/name: wordpress
   8 │     pod-template-hash: 84bbf6f4dd
   9 └     app: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-pod1.yaml:12-13
────────────────────────────────────────
  12 ┌     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-pod1.yaml:11-13
────────────────────────────────────────
  11 ┌   containers:
  12 │     - image: nginx:1.14.2
  13 └       name: app
────────────────────────────────────────



00-pod2.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Pod 'my-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-pod2.yaml:13-14
────────────────────────────────────────
  13 ┌     - image: nginx:1.14.2
  14 └       name: app
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Pod 'my-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-pod2.yaml:13-14
────────────────────────────────────────
  13 ┌     - image: nginx:1.14.2
  14 └       name: app
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'pod' 'my-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-pod2.yaml:13-14
────────────────────────────────────────
  13 ┌     - image: nginx:1.14.2
  14 └       name: app
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Pod 'my-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 00-pod2.yaml:13-14
────────────────────────────────────────
  13 ┌     - image: nginx:1.14.2
  14 └       name: app
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Pod 'my-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-pod2.yaml:13-14
────────────────────────────────────────
  13 ┌     - image: nginx:1.14.2
  14 └       name: app
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Pod 'my-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-pod2.yaml:13-14
────────────────────────────────────────
  13 ┌     - image: nginx:1.14.2
  14 └       name: app
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Pod 'my-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-pod2.yaml:13-14
────────────────────────────────────────
  13 ┌     - image: nginx:1.14.2
  14 └       name: app
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Pod 'my-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-pod2.yaml:13-14
────────────────────────────────────────
  13 ┌     - image: nginx:1.14.2
  14 └       name: app
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Pod 'my-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 00-pod2.yaml:13-14
────────────────────────────────────────
  13 ┌     - image: nginx:1.14.2
  14 └       name: app
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Pod 'my-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-pod2.yaml:13-14
────────────────────────────────────────
  13 ┌     - image: nginx:1.14.2
  14 └       name: app
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Pod 'my-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-pod2.yaml:13-14
────────────────────────────────────────
  13 ┌     - image: nginx:1.14.2
  14 └       name: app
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-pod2.yaml:13-14
────────────────────────────────────────
  13 ┌     - image: nginx:1.14.2
  14 └       name: app
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of pod "my-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-pod2.yaml:13-14
────────────────────────────────────────
  13 ┌     - image: nginx:1.14.2
  14 └       name: app
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-pod2.yaml:13-14
────────────────────────────────────────
  13 ┌     - image: nginx:1.14.2
  14 └       name: app
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod my-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 00-pod2.yaml:5-10
────────────────────────────────────────
   5 ┌   name: my-pod
   6 │   labels:
   7 │     app.kubernetes.io/name: wordpress
   8 │     pod-template-hash: 84bbf6f4dd
   9 │     app: nginx
  10 └     team: rnd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-pod2.yaml:13-14
────────────────────────────────────────
  13 ┌     - image: nginx:1.14.2
  14 └       name: app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-pod2.yaml:12-14
────────────────────────────────────────
  12 ┌   containers:
  13 │     - image: nginx:1.14.2
  14 └       name: app
────────────────────────────────────────



00-pod3.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Pod 'my-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-pod3.yaml:15-17
────────────────────────────────────────
  15 ┌     - image: aquasec/private-test:1.16.1
  16 │       name: app
  17 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Pod 'my-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-pod3.yaml:15-17
────────────────────────────────────────
  15 ┌     - image: aquasec/private-test:1.16.1
  16 │       name: app
  17 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'pod' 'my-pod' in 'private' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-pod3.yaml:15-17
────────────────────────────────────────
  15 ┌     - image: aquasec/private-test:1.16.1
  16 │       name: app
  17 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Pod 'my-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 00-pod3.yaml:15-17
────────────────────────────────────────
  15 ┌     - image: aquasec/private-test:1.16.1
  16 │       name: app
  17 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Pod 'my-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-pod3.yaml:15-17
────────────────────────────────────────
  15 ┌     - image: aquasec/private-test:1.16.1
  16 │       name: app
  17 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Pod 'my-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-pod3.yaml:15-17
────────────────────────────────────────
  15 ┌     - image: aquasec/private-test:1.16.1
  16 │       name: app
  17 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Pod 'my-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-pod3.yaml:15-17
────────────────────────────────────────
  15 ┌     - image: aquasec/private-test:1.16.1
  16 │       name: app
  17 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Pod 'my-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-pod3.yaml:15-17
────────────────────────────────────────
  15 ┌     - image: aquasec/private-test:1.16.1
  16 │       name: app
  17 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Pod 'my-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 00-pod3.yaml:15-17
────────────────────────────────────────
  15 ┌     - image: aquasec/private-test:1.16.1
  16 │       name: app
  17 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Pod 'my-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-pod3.yaml:15-17
────────────────────────────────────────
  15 ┌     - image: aquasec/private-test:1.16.1
  16 │       name: app
  17 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Pod 'my-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-pod3.yaml:15-17
────────────────────────────────────────
  15 ┌     - image: aquasec/private-test:1.16.1
  16 │       name: app
  17 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-pod3.yaml:15-17
────────────────────────────────────────
  15 ┌     - image: aquasec/private-test:1.16.1
  16 │       name: app
  17 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of pod "my-pod" in "private" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-pod3.yaml:15-17
────────────────────────────────────────
  15 ┌     - image: aquasec/private-test:1.16.1
  16 │       name: app
  17 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-pod3.yaml:15-17
────────────────────────────────────────
  15 ┌     - image: aquasec/private-test:1.16.1
  16 │       name: app
  17 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod in private namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-pod3.yaml:15-17
────────────────────────────────────────
  15 ┌     - image: aquasec/private-test:1.16.1
  16 │       name: app
  17 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod in private namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-pod3.yaml:12-17
────────────────────────────────────────
  12 ┌   imagePullSecrets:
  13 │     - name: artcred
  14 │   containers:
  15 │     - image: aquasec/private-test:1.16.1
  16 │       name: app
  17 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container app in pod my-pod (namespace: private) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 00-pod3.yaml:15-17
────────────────────────────────────────
  15 ┌     - image: aquasec/private-test:1.16.1
  16 │       name: app
  17 └       imagePullPolicy: Always
────────────────────────────────────────



00-pod4.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Pod 'my-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-pod4.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.22.1
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Pod 'my-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-pod4.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.22.1
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'pod' 'my-pod' in 'private' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-pod4.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.22.1
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Pod 'my-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 00-pod4.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.22.1
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Pod 'my-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-pod4.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.22.1
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Pod 'my-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-pod4.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.22.1
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Pod 'my-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-pod4.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.22.1
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Pod 'my-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-pod4.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.22.1
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Pod 'my-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 00-pod4.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.22.1
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Pod 'my-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-pod4.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.22.1
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Pod 'my-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-pod4.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.22.1
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-pod4.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.22.1
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of pod "my-pod" in "private" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-pod4.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.22.1
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-pod4.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.22.1
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod in private namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-pod4.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.22.1
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod in private namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-pod4.yaml:12-15
────────────────────────────────────────
  12 ┌   containers:
  13 │     - image: aquasec/private-test:1.22.1
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container app in pod my-pod (namespace: private) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 00-pod4.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.22.1
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────



00-pod5.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Pod 'sa-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 00-pod5.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.23.3
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Pod 'sa-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 00-pod5.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.23.3
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'pod' 'sa-pod' in 'private' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 00-pod5.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.23.3
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Pod 'sa-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 00-pod5.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.23.3
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Pod 'sa-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 00-pod5.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.23.3
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Pod 'sa-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 00-pod5.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.23.3
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Pod 'sa-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 00-pod5.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.23.3
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Pod 'sa-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 00-pod5.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.23.3
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Pod 'sa-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 00-pod5.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.23.3
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Pod 'sa-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 00-pod5.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.23.3
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Pod 'sa-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 00-pod5.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.23.3
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 00-pod5.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.23.3
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of pod "sa-pod" in "private" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 00-pod5.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.23.3
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 00-pod5.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.23.3
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container sa-pod in private namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-pod5.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.23.3
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod sa-pod in private namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 00-pod5.yaml:12-16
────────────────────────────────────────
  12 ┌   containers:
  13 │     - image: aquasec/private-test:1.23.3
  14 │       name: app
  15 │       imagePullPolicy: Always
  16 └   serviceAccountName: private-reg
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container app in pod sa-pod (namespace: private) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 00-pod5.yaml:13-15
────────────────────────────────────────
  13 ┌     - image: aquasec/private-test:1.23.3
  14 │       name: app
  15 └       imagePullPolicy: Always
────────────────────────────────────────



00-prereqs1_2.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 109, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'nats-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 00-prereqs1_2.yaml:47-57
────────────────────────────────────────
  47 ┌ - apiGroups:
  48 │   - ''
  49 │   resources:
  50 │   - secrets
  51 │   verbs:
  52 │   - create
  53 │   - watch
  54 │   - get
  55 └   - update
  ..   
────────────────────────────────────────


AVD-KSV-0042 (MEDIUM): ClusterRole 'nats-operator' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 00-prereqs1_2.yaml:58-66
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - pods/exec
  62 │   - pods/log
  63 │   - serviceaccounts/token
  64 │   - events
  65 │   verbs:
  66 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'nats-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 00-prereqs1_2.yaml:23-34
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - pods
  27 │   verbs:
  28 │   - create
  29 │   - watch
  30 │   - get
  31 └   - patch
  ..   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): ClusterRole 'nats-operator' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 00-prereqs1_2.yaml:58-66
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - pods/exec
  62 │   - pods/log
  63 │   - serviceaccounts/token
  64 │   - events
  65 │   verbs:
  66 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'nats-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 00-prereqs1_2.yaml:35-46
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - services
  39 │   verbs:
  40 │   - create
  41 │   - watch
  42 │   - get
  43 └   - patch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'nats-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 00-prereqs1_2.yaml:76-86
────────────────────────────────────────
  76 ┌ - apiGroups:
  77 │   - ''
  78 │   resources:
  79 │   - endpoints
  80 │   verbs:
  81 │   - create
  82 │   - watch
  83 │   - get
  84 └   - update
  ..   
────────────────────────────────────────



00-prereqs2_2.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 109, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'nats-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 00-prereqs2_2.yaml:47-57
────────────────────────────────────────
  47 ┌ - apiGroups:
  48 │   - ''
  49 │   resources:
  50 │   - secrets
  51 │   verbs:
  52 │   - create
  53 │   - watch
  54 │   - get
  55 └   - update
  ..   
────────────────────────────────────────


AVD-KSV-0042 (MEDIUM): ClusterRole 'nats-operator' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 00-prereqs2_2.yaml:58-66
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - pods/exec
  62 │   - pods/log
  63 │   - serviceaccounts/token
  64 │   - events
  65 │   verbs:
  66 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'nats-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 00-prereqs2_2.yaml:23-34
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - pods
  27 │   verbs:
  28 │   - create
  29 │   - watch
  30 │   - get
  31 └   - patch
  ..   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): ClusterRole 'nats-operator' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 00-prereqs2_2.yaml:58-66
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - pods/exec
  62 │   - pods/log
  63 │   - serviceaccounts/token
  64 │   - events
  65 │   verbs:
  66 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'nats-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 00-prereqs2_2.yaml:35-46
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - services
  39 │   verbs:
  40 │   - create
  41 │   - watch
  42 │   - get
  43 └   - patch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'nats-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 00-prereqs2_2.yaml:76-86
────────────────────────────────────────
  76 ┌ - apiGroups:
  77 │   - ''
  78 │   resources:
  79 │   - endpoints
  80 │   verbs:
  81 │   - create
  82 │   - watch
  83 │   - get
  84 └   - update
  ..   
────────────────────────────────────────



00-prereqs3_2.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 109, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'nats-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 00-prereqs3_2.yaml:47-57
────────────────────────────────────────
  47 ┌ - apiGroups:
  48 │   - ''
  49 │   resources:
  50 │   - secrets
  51 │   verbs:
  52 │   - create
  53 │   - watch
  54 │   - get
  55 └   - update
  ..   
────────────────────────────────────────


AVD-KSV-0042 (MEDIUM): ClusterRole 'nats-operator' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 00-prereqs3_2.yaml:58-66
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - pods/exec
  62 │   - pods/log
  63 │   - serviceaccounts/token
  64 │   - events
  65 │   verbs:
  66 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'nats-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 00-prereqs3_2.yaml:23-34
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - pods
  27 │   verbs:
  28 │   - create
  29 │   - watch
  30 │   - get
  31 └   - patch
  ..   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): ClusterRole 'nats-operator' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 00-prereqs3_2.yaml:58-66
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - pods/exec
  62 │   - pods/log
  63 │   - serviceaccounts/token
  64 │   - events
  65 │   verbs:
  66 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'nats-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 00-prereqs3_2.yaml:35-46
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - services
  39 │   verbs:
  40 │   - create
  41 │   - watch
  42 │   - get
  43 └   - patch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'nats-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 00-prereqs3_2.yaml:76-86
────────────────────────────────────────
  76 ┌ - apiGroups:
  77 │   - ''
  78 │   resources:
  79 │   - endpoints
  80 │   verbs:
  81 │   - create
  82 │   - watch
  83 │   - get
  84 └   - update
  ..   
────────────────────────────────────────



00-prereqs4_2.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 109, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 3, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'nats-operator' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 00-prereqs4_2.yaml:47-57
────────────────────────────────────────
  47 ┌ - apiGroups:
  48 │   - ''
  49 │   resources:
  50 │   - secrets
  51 │   verbs:
  52 │   - create
  53 │   - watch
  54 │   - get
  55 └   - update
  ..   
────────────────────────────────────────


AVD-KSV-0042 (MEDIUM): ClusterRole 'nats-operator' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 00-prereqs4_2.yaml:58-66
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - pods/exec
  62 │   - pods/log
  63 │   - serviceaccounts/token
  64 │   - events
  65 │   verbs:
  66 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'nats-operator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 00-prereqs4_2.yaml:23-34
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - pods
  27 │   verbs:
  28 │   - create
  29 │   - watch
  30 │   - get
  31 └   - patch
  ..   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): ClusterRole 'nats-operator' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 00-prereqs4_2.yaml:58-66
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - pods/exec
  62 │   - pods/log
  63 │   - serviceaccounts/token
  64 │   - events
  65 │   verbs:
  66 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'nats-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 00-prereqs4_2.yaml:35-46
────────────────────────────────────────
  35 ┌ - apiGroups:
  36 │   - ''
  37 │   resources:
  38 │   - services
  39 │   verbs:
  40 │   - create
  41 │   - watch
  42 │   - get
  43 └   - patch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'nats-operator' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 00-prereqs4_2.yaml:76-86
────────────────────────────────────────
  76 ┌ - apiGroups:
  77 │   - ''
  78 │   resources:
  79 │   - endpoints
  80 │   verbs:
  81 │   - create
  82 │   - watch
  83 │   - get
  84 └   - update
  ..   
────────────────────────────────────────


