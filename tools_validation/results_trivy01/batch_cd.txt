
Report Summary

┌────────────────────────────────────────────────────┬────────────┬───────────────────┐
│                       Target                       │    Type    │ Misconfigurations │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ converter-deploy17.yaml                            │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ converter-deploy18.yaml                            │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ converter-deploy19.yaml                            │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ converter-deploy2.yaml                             │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ converter-deploy20.yaml                            │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ converter-deploy21.yaml                            │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ converter-deploy22.yaml                            │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ converter-deploy23.yaml                            │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ converter-deploy24.yaml                            │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ converter-deploy25.yaml                            │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ converter-deploy26.yaml                            │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ converter-deploy27.yaml                            │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ converter-deploy28.yaml                            │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ converter-deploy29.yaml                            │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ converter-deploy3.yaml                             │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ converter-deploy30.yaml                            │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ converter-deploy4.yaml                             │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ converter-deploy5.yaml                             │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ converter-deploy6.yaml                             │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ converter-deploy7.yaml                             │ kubernetes │        16         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ converter-deploy8.yaml                             │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ converter-deploy9.yaml                             │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ converter-deployment.yaml                          │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ converter-secret.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cool-pod.yaml                                      │ kubernetes │        18         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease.after_roundtrip.yaml  │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease.after_roundtrip1.yaml │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease.yaml                  │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease1.yaml                 │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease10.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease11.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease12.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease13.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease14.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease15.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease16.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease17.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease18.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease19.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease2.yaml                 │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease20.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease21.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease22.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease23.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease24.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease25.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease26.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease27.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease28.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease29.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease3.yaml                 │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease30.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease31.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease32.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease33.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease34.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease35.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease39.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease4.yaml                 │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease40.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease41.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease42.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease43.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease44.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease45.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease46.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease47.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease48.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease49.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease5.yaml                 │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease50.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease51.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease52.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease53.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease54.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease55.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease56.yaml                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease6.yaml                 │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease7.yaml                 │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease8.yaml                 │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordination.k8s.io.v1.Lease9.yaml                 │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordinator-deployment.yaml                        │ kubernetes │        18         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordinator-service.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coordinator-service1.yaml                          │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ copier.yaml                                        │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ copier_1.yaml                                      │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ copier_2.yaml                                      │ kubernetes │        36         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ copypaste-netpol.yaml                              │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-dns.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-dns1.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-dns1_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-dns1_2.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-dns1_3.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-dns1_4.yaml                                   │ kubernetes │        12         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-dns1_5.yaml                                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-dns2.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-dns2_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-dns2_2.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-dns2_3.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-dns2_4.yaml                                   │ kubernetes │        14         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-dns2_5.yaml                                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-dns_1.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-dns_2.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-dns_3.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-dns_4.yaml                                    │ kubernetes │        12         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-dns_5.yaml                                    │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_10.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_11.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_12.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_13.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_14.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_15.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_16.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_17.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_18.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_19.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_20.yaml                              │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_21.yaml                              │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_22.yaml                              │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_23.yaml                              │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_25.yaml                              │ kubernetes │         8         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_28.yaml                              │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_29.yaml                              │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_3.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_30.yaml                              │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_31.yaml                              │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_4.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_5.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_6.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_7.yaml                               │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_8.yaml                               │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install1_9.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_10.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_11.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_12.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_13.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_14.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_15.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_16.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_17.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_18.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_19.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_20.yaml                              │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_21.yaml                              │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_22.yaml                              │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_23.yaml                              │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_25.yaml                              │ kubernetes │         8         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_28.yaml                              │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_29.yaml                              │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_3.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_30.yaml                              │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_31.yaml                              │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_4.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_5.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_6.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_7.yaml                               │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_8.yaml                               │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install2_9.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_10.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_11.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_12.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_13.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_14.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_15.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_16.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_17.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_18.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_19.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_20.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_21.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_22.yaml                               │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_23.yaml                               │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_24.yaml                               │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_25.yaml                               │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_27.yaml                               │ kubernetes │        15         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_3.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_30.yaml                               │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_31.yaml                               │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_32.yaml                               │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_33.yaml                               │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_4.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_5.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_6.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_7.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_8.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-install_9.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-qa1.yaml                                      │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-svc.configmap.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-svc.deployment.service.yaml                   │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core-svc.deployment.service_1.yaml                 │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding.after_roundtrip.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding.after_roundtrip1.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding1.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding10.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding11.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding12.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding13.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding14.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding15.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding16.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding17.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding18.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding19.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding2.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding20.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding21.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding22.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding23.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding24.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding25.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding26.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding27.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding28.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding29.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding3.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding30.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding31.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding32.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding33.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding34.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding35.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding39.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding4.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding40.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding41.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding42.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding43.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding44.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding45.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding46.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding47.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding48.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding49.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding5.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding50.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding51.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding52.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding53.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding54.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding55.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding56.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding6.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding7.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding8.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Binding9.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus.after_roundtrip.yaml       │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus.after_roundtrip1.yaml      │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus1.yaml                      │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus10.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus11.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus12.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus13.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus14.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus15.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus16.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus17.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus18.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus19.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus2.yaml                      │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus20.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus21.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus22.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus23.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus24.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus25.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus26.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus27.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus28.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus29.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus3.yaml                      │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus30.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus31.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus32.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus33.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus34.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus35.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus39.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus4.yaml                      │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus40.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus41.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus42.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus43.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus44.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus45.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus46.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus47.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus48.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus49.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus5.yaml                      │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus50.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus51.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus52.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus53.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus54.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus55.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus56.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus6.yaml                      │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus7.yaml                      │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus8.yaml                      │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ComponentStatus9.yaml                      │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap.after_roundtrip.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap.after_roundtrip1.yaml            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap.yaml                             │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap1.yaml                            │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap10.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap11.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap12.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap13.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap14.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap15.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap16.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap17.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap18.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap19.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap2.yaml                            │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap20.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap21.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap22.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap23.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap24.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap25.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap26.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap27.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap28.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap29.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap3.yaml                            │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap30.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap31.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap32.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap33.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap34.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap35.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap39.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap4.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap40.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap41.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap42.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap43.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap44.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap45.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap46.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap47.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap48.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap49.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap5.yaml                            │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap50.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap51.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap52.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap53.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap54.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap55.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap56.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap6.yaml                            │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap7.yaml                            │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap8.yaml                            │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ConfigMap9.yaml                            │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints.after_roundtrip.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints.after_roundtrip1.yaml            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints1.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints10.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints11.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints12.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints13.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints14.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints15.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints16.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints17.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints18.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints19.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints2.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints20.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints21.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints22.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints23.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints24.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints25.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints26.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints27.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints28.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints29.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints3.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints30.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints31.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints32.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints33.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints34.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints35.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints39.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints4.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints40.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints41.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints42.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints43.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints44.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints45.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints46.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints47.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints48.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints49.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints5.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints50.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints51.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints52.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints53.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints54.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints55.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints56.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints6.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints7.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints8.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Endpoints9.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event.after_roundtrip.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event.after_roundtrip1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event10.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event11.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event12.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event13.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event14.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event15.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event16.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event17.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event18.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event19.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event20.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event21.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event22.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event23.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event24.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event25.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event26.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event27.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event28.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event29.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event3.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event30.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event31.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event32.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event33.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event34.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event35.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event39.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event4.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event40.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event41.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event42.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event43.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event44.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event45.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event46.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event47.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event48.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event49.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event5.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event50.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event51.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event52.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event53.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event54.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event55.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event56.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event6.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event7.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event8.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Event9.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange.after_roundtrip.yaml            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange.after_roundtrip1.yaml           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange1.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange10.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange11.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange12.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange13.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange14.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange15.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange16.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange17.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange18.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange19.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange2.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange20.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange21.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange22.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange23.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange24.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange25.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange26.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange27.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange28.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange29.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange3.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange30.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange31.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange32.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange33.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange34.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange35.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange39.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange4.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange40.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange41.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange42.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange43.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange44.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange45.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange46.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange47.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange48.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange49.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange5.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange50.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange51.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange52.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange53.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange54.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange55.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange56.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange6.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange7.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange8.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.LimitRange9.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace.after_roundtrip.yaml             │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace.after_roundtrip1.yaml            │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace.yaml                             │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace1.yaml                            │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace10.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace11.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace12.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace13.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace14.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace15.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace16.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace17.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace18.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace19.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace2.yaml                            │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace20.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace21.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace22.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace23.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace24.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace25.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace26.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace27.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace28.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace29.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace3.yaml                            │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace30.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace31.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace32.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace33.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace34.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace35.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace39.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace4.yaml                            │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace40.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace41.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace42.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace43.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace44.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace45.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace46.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace47.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace48.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace49.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace5.yaml                            │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace50.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace51.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace52.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace53.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace54.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace55.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace56.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace6.yaml                            │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace7.yaml                            │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace8.yaml                            │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Namespace9.yaml                            │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node.after_roundtrip.yaml                  │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node.after_roundtrip1.yaml                 │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node.yaml                                  │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node1.yaml                                 │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node10.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node11.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node12.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node13.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node14.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node15.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node16.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node17.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node18.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node19.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node2.yaml                                 │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node20.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node21.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node22.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node23.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node24.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node25.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node26.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node27.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node28.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node29.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node3.yaml                                 │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node30.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node31.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node32.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node33.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node34.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node35.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node39.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node4.yaml                                 │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node40.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node41.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node42.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node43.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node44.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node45.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node46.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node47.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node48.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node49.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node5.yaml                                 │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node50.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node51.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node52.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node53.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node54.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node55.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node56.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node6.yaml                                 │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node7.yaml                                 │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node8.yaml                                 │ kubernetes │         1         │
└────────────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


converter-deploy17.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 converter-deploy17.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'converter' of Deployment 'converter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 converter-deploy17.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'converter' of 'deployment' 'converter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 converter-deploy17.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 converter-deploy17.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 converter-deploy17.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'converter' of Deployment 'converter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 converter-deploy17.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'converter' of Deployment 'converter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 converter-deploy17.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 converter-deploy17.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 converter-deploy17.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 converter-deploy17.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 converter-deploy17.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 converter-deploy17.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 converter-deploy17.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 converter-deploy17.yaml:8-28
────────────────────────────────────────
   8 ┌   replicas: 4
   9 │   selector:
  10 │     matchLabels:
  11 │       app: converter
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxSurge: 8
  16 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "converter" of deployment "converter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 converter-deploy17.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 converter-deploy17.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment converter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 converter-deploy17.yaml:4-6
────────────────────────────────────────
   4 ┌   name: converter
   5 │   labels:
   6 └     app: converter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container converter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy17.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment converter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy17.yaml:21-28
────────────────────────────────────────
  21 ┌       containers:
  22 │         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container converter in deployment converter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 converter-deploy17.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────



converter-deploy18.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 converter-deploy18.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'converter' of Deployment 'converter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 converter-deploy18.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'converter' of 'deployment' 'converter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 converter-deploy18.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 converter-deploy18.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 converter-deploy18.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'converter' of Deployment 'converter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 converter-deploy18.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'converter' of Deployment 'converter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 converter-deploy18.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 converter-deploy18.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 converter-deploy18.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 converter-deploy18.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 converter-deploy18.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 converter-deploy18.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 converter-deploy18.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 converter-deploy18.yaml:8-28
────────────────────────────────────────
   8 ┌   replicas: 4
   9 │   selector:
  10 │     matchLabels:
  11 │       app: converter
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxSurge: 8
  16 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "converter" of deployment "converter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 converter-deploy18.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 converter-deploy18.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment converter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 converter-deploy18.yaml:4-6
────────────────────────────────────────
   4 ┌   name: converter
   5 │   labels:
   6 └     app: converter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container converter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy18.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment converter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy18.yaml:21-28
────────────────────────────────────────
  21 ┌       containers:
  22 │         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container converter in deployment converter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 converter-deploy18.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────



converter-deploy19.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 converter-deploy19.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'converter' of Deployment 'converter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 converter-deploy19.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'converter' of 'deployment' 'converter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 converter-deploy19.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 converter-deploy19.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 converter-deploy19.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'converter' of Deployment 'converter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 converter-deploy19.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'converter' of Deployment 'converter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 converter-deploy19.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 converter-deploy19.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 converter-deploy19.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 converter-deploy19.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 converter-deploy19.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 converter-deploy19.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 converter-deploy19.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 converter-deploy19.yaml:8-28
────────────────────────────────────────
   8 ┌   replicas: 4
   9 │   selector:
  10 │     matchLabels:
  11 │       app: converter
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxSurge: 8
  16 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "converter" of deployment "converter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 converter-deploy19.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 converter-deploy19.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment converter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 converter-deploy19.yaml:4-6
────────────────────────────────────────
   4 ┌   name: converter
   5 │   labels:
   6 └     app: converter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container converter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy19.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment converter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy19.yaml:21-28
────────────────────────────────────────
  21 ┌       containers:
  22 │         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container converter in deployment converter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 converter-deploy19.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────



converter-deploy2.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 converter-deploy2.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'converter' of Deployment 'converter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 converter-deploy2.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'converter' of 'deployment' 'converter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 converter-deploy2.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 converter-deploy2.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 converter-deploy2.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'converter' of Deployment 'converter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 converter-deploy2.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'converter' of Deployment 'converter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 converter-deploy2.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 converter-deploy2.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 converter-deploy2.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 converter-deploy2.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 converter-deploy2.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 converter-deploy2.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 converter-deploy2.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 converter-deploy2.yaml:8-28
────────────────────────────────────────
   8 ┌   replicas: 4
   9 │   selector:
  10 │     matchLabels:
  11 │       app: converter
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxSurge: 8
  16 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "converter" of deployment "converter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 converter-deploy2.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 converter-deploy2.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment converter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 converter-deploy2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: converter
   5 │   labels:
   6 └     app: converter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container converter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy2.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment converter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy2.yaml:21-28
────────────────────────────────────────
  21 ┌       containers:
  22 │         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container converter in deployment converter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 converter-deploy2.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────



converter-deploy20.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 converter-deploy20.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: rustx2802/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'converter' of Deployment 'converter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 converter-deploy20.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: rustx2802/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'converter' of 'deployment' 'converter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 converter-deploy20.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: rustx2802/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 converter-deploy20.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: rustx2802/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 converter-deploy20.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: rustx2802/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'converter' of Deployment 'converter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 converter-deploy20.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: rustx2802/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'converter' of Deployment 'converter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 converter-deploy20.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: rustx2802/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 converter-deploy20.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: rustx2802/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 converter-deploy20.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: rustx2802/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 converter-deploy20.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: rustx2802/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 converter-deploy20.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: rustx2802/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 converter-deploy20.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: rustx2802/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 converter-deploy20.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: rustx2802/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 converter-deploy20.yaml:8-28
────────────────────────────────────────
   8 ┌   replicas: 4
   9 │   selector:
  10 │     matchLabels:
  11 │       app: converter
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxSurge: 8
  16 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "converter" of deployment "converter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 converter-deploy20.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: rustx2802/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 converter-deploy20.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: rustx2802/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment converter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 converter-deploy20.yaml:4-6
────────────────────────────────────────
   4 ┌   name: converter
   5 │   labels:
   6 └     app: converter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container converter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy20.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: rustx2802/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment converter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy20.yaml:21-28
────────────────────────────────────────
  21 ┌       containers:
  22 │         - name: converter
  23 │           image: rustx2802/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container converter in deployment converter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 converter-deploy20.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: rustx2802/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────



converter-deploy21.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 converter-deploy21.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: amitkrshaw/video2mp3-converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'converter' of Deployment 'converter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 converter-deploy21.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: amitkrshaw/video2mp3-converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'converter' of 'deployment' 'converter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 converter-deploy21.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: amitkrshaw/video2mp3-converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 converter-deploy21.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: amitkrshaw/video2mp3-converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 converter-deploy21.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: amitkrshaw/video2mp3-converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'converter' of Deployment 'converter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 converter-deploy21.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: amitkrshaw/video2mp3-converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'converter' of Deployment 'converter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 converter-deploy21.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: amitkrshaw/video2mp3-converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 converter-deploy21.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: amitkrshaw/video2mp3-converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 converter-deploy21.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: amitkrshaw/video2mp3-converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 converter-deploy21.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: amitkrshaw/video2mp3-converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 converter-deploy21.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: amitkrshaw/video2mp3-converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 converter-deploy21.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: amitkrshaw/video2mp3-converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 converter-deploy21.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: amitkrshaw/video2mp3-converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 converter-deploy21.yaml:8-28
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: converter
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxSurge: 8
  16 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "converter" of deployment "converter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 converter-deploy21.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: amitkrshaw/video2mp3-converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 converter-deploy21.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: amitkrshaw/video2mp3-converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment converter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 converter-deploy21.yaml:4-6
────────────────────────────────────────
   4 ┌   name: converter
   5 │   labels:
   6 └     app: converter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container converter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy21.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: amitkrshaw/video2mp3-converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment converter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy21.yaml:21-28
────────────────────────────────────────
  21 ┌       containers:
  22 │         - name: converter
  23 │           image: amitkrshaw/video2mp3-converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container converter in deployment converter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 converter-deploy21.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: amitkrshaw/video2mp3-converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────



converter-deploy22.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 converter-deploy22.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: lawrencejews/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'converter' of Deployment 'converter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 converter-deploy22.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: lawrencejews/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'converter' of 'deployment' 'converter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 converter-deploy22.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: lawrencejews/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 converter-deploy22.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: lawrencejews/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 converter-deploy22.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: lawrencejews/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'converter' of Deployment 'converter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 converter-deploy22.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: lawrencejews/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'converter' of Deployment 'converter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 converter-deploy22.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: lawrencejews/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 converter-deploy22.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: lawrencejews/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 converter-deploy22.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: lawrencejews/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 converter-deploy22.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: lawrencejews/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 converter-deploy22.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: lawrencejews/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 converter-deploy22.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: lawrencejews/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 converter-deploy22.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: lawrencejews/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 converter-deploy22.yaml:8-28
────────────────────────────────────────
   8 ┌   replicas: 2
   9 │   selector:
  10 │     matchLabels:
  11 │       app: converter
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxSurge: 4
  16 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "converter" of deployment "converter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 converter-deploy22.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: lawrencejews/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 converter-deploy22.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: lawrencejews/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment converter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 converter-deploy22.yaml:4-6
────────────────────────────────────────
   4 ┌   name: converter
   5 │   labels:
   6 └     app: converter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container converter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy22.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: lawrencejews/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment converter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy22.yaml:21-28
────────────────────────────────────────
  21 ┌       containers:
  22 │         - name: converter
  23 │           image: lawrencejews/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container converter in deployment converter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 converter-deploy22.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: lawrencejews/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────



converter-deploy23.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 converter-deploy23.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sweasytech/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'converter' of Deployment 'converter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 converter-deploy23.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sweasytech/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'converter' of 'deployment' 'converter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 converter-deploy23.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sweasytech/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 converter-deploy23.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sweasytech/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 converter-deploy23.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sweasytech/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'converter' of Deployment 'converter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 converter-deploy23.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sweasytech/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'converter' of Deployment 'converter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 converter-deploy23.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sweasytech/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 converter-deploy23.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sweasytech/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 converter-deploy23.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sweasytech/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 converter-deploy23.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sweasytech/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 converter-deploy23.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sweasytech/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 converter-deploy23.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sweasytech/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 converter-deploy23.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sweasytech/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 converter-deploy23.yaml:8-28
────────────────────────────────────────
   8 ┌   replicas: 4
   9 │   selector:
  10 │     matchLabels:
  11 │       app: converter
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxSurge: 8
  16 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "converter" of deployment "converter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 converter-deploy23.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sweasytech/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 converter-deploy23.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sweasytech/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment converter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 converter-deploy23.yaml:4-6
────────────────────────────────────────
   4 ┌   name: converter
   5 │   labels:
   6 └     app: converter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container converter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy23.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sweasytech/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment converter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy23.yaml:21-28
────────────────────────────────────────
  21 ┌       containers:
  22 │         - name: converter
  23 │           image: sweasytech/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container converter in deployment converter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 converter-deploy23.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sweasytech/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────



converter-deploy24.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 converter-deploy24.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sheikhsh/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'converter' of Deployment 'converter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 converter-deploy24.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sheikhsh/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'converter' of 'deployment' 'converter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 converter-deploy24.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sheikhsh/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 converter-deploy24.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sheikhsh/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 converter-deploy24.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sheikhsh/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'converter' of Deployment 'converter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 converter-deploy24.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sheikhsh/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'converter' of Deployment 'converter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 converter-deploy24.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sheikhsh/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 converter-deploy24.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sheikhsh/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 converter-deploy24.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sheikhsh/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 converter-deploy24.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sheikhsh/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 converter-deploy24.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sheikhsh/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 converter-deploy24.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sheikhsh/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 converter-deploy24.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sheikhsh/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 converter-deploy24.yaml:8-28
────────────────────────────────────────
   8 ┌   replicas: 4
   9 │   selector:
  10 │     matchLabels:
  11 │       app: converter
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxSurge: 8
  16 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "converter" of deployment "converter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 converter-deploy24.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sheikhsh/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 converter-deploy24.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sheikhsh/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment converter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 converter-deploy24.yaml:4-6
────────────────────────────────────────
   4 ┌   name: converter
   5 │   labels:
   6 └     app: converter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container converter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy24.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sheikhsh/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment converter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy24.yaml:21-28
────────────────────────────────────────
  21 ┌       containers:
  22 │         - name: converter
  23 │           image: sheikhsh/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container converter in deployment converter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 converter-deploy24.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: sheikhsh/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────



converter-deploy25.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 converter-deploy25.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: clipify.azurecr.io/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'converter' of Deployment 'converter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 converter-deploy25.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: clipify.azurecr.io/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'converter' of 'deployment' 'converter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 converter-deploy25.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: clipify.azurecr.io/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 converter-deploy25.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: clipify.azurecr.io/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 converter-deploy25.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: clipify.azurecr.io/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'converter' of Deployment 'converter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 converter-deploy25.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: clipify.azurecr.io/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'converter' of Deployment 'converter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 converter-deploy25.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: clipify.azurecr.io/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 converter-deploy25.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: clipify.azurecr.io/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 converter-deploy25.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: clipify.azurecr.io/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 converter-deploy25.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: clipify.azurecr.io/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 converter-deploy25.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: clipify.azurecr.io/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 converter-deploy25.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: clipify.azurecr.io/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 converter-deploy25.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: clipify.azurecr.io/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 converter-deploy25.yaml:8-28
────────────────────────────────────────
   8 ┌   replicas: 4
   9 │   selector:
  10 │     matchLabels:
  11 │       app: converter
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxSurge: 8
  16 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "converter" of deployment "converter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 converter-deploy25.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: clipify.azurecr.io/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 converter-deploy25.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: clipify.azurecr.io/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment converter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 converter-deploy25.yaml:4-6
────────────────────────────────────────
   4 ┌   name: converter
   5 │   labels:
   6 └     app: converter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container converter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy25.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: clipify.azurecr.io/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment converter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy25.yaml:21-28
────────────────────────────────────────
  21 ┌       containers:
  22 │         - name: converter
  23 │           image: clipify.azurecr.io/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────



converter-deploy26.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 converter-deploy26.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'converter' of Deployment 'converter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 converter-deploy26.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'converter' of 'deployment' 'converter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 converter-deploy26.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 converter-deploy26.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 converter-deploy26.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'converter' of Deployment 'converter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 converter-deploy26.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'converter' of Deployment 'converter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 converter-deploy26.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 converter-deploy26.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 converter-deploy26.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 converter-deploy26.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 converter-deploy26.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 converter-deploy26.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 converter-deploy26.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 converter-deploy26.yaml:8-28
────────────────────────────────────────
   8 ┌   replicas: 4
   9 │   selector:
  10 │     matchLabels:
  11 │       app: converter
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxSurge: 8
  16 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "converter" of deployment "converter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 converter-deploy26.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 converter-deploy26.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment converter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 converter-deploy26.yaml:4-6
────────────────────────────────────────
   4 ┌   name: converter
   5 │   labels:
   6 └     app: converter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container converter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy26.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment converter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy26.yaml:21-28
────────────────────────────────────────
  21 ┌       containers:
  22 │         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container converter in deployment converter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 converter-deploy26.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────



converter-deploy27.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 converter-deploy27.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'converter' of Deployment 'converter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 converter-deploy27.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'converter' of 'deployment' 'converter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 converter-deploy27.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 converter-deploy27.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 converter-deploy27.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'converter' of Deployment 'converter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 converter-deploy27.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'converter' of Deployment 'converter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 converter-deploy27.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 converter-deploy27.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 converter-deploy27.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 converter-deploy27.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 converter-deploy27.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 converter-deploy27.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 converter-deploy27.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 converter-deploy27.yaml:8-28
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: converter
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxSurge: 8
  16 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "converter" of deployment "converter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 converter-deploy27.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 converter-deploy27.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment converter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 converter-deploy27.yaml:4-6
────────────────────────────────────────
   4 ┌   name: converter
   5 │   labels:
   6 └     app: converter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container converter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy27.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment converter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy27.yaml:21-28
────────────────────────────────────────
  21 ┌       containers:
  22 │         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container converter in deployment converter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 converter-deploy27.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────



converter-deploy28.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 converter-deploy28.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: alfielloyd12/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'converter' of Deployment 'converter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 converter-deploy28.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: alfielloyd12/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'converter' of 'deployment' 'converter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 converter-deploy28.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: alfielloyd12/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 converter-deploy28.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: alfielloyd12/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 converter-deploy28.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: alfielloyd12/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'converter' of Deployment 'converter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 converter-deploy28.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: alfielloyd12/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'converter' of Deployment 'converter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 converter-deploy28.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: alfielloyd12/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 converter-deploy28.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: alfielloyd12/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 converter-deploy28.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: alfielloyd12/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 converter-deploy28.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: alfielloyd12/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 converter-deploy28.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: alfielloyd12/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 converter-deploy28.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: alfielloyd12/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 converter-deploy28.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: alfielloyd12/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 converter-deploy28.yaml:8-28
────────────────────────────────────────
   8 ┌   replicas: 4
   9 │   selector:
  10 │     matchLabels:
  11 │       app: converter
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxSurge: 8
  16 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "converter" of deployment "converter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 converter-deploy28.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: alfielloyd12/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 converter-deploy28.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: alfielloyd12/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment converter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 converter-deploy28.yaml:4-6
────────────────────────────────────────
   4 ┌   name: converter
   5 │   labels:
   6 └     app: converter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container converter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy28.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: alfielloyd12/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment converter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy28.yaml:21-28
────────────────────────────────────────
  21 ┌       containers:
  22 │         - name: converter
  23 │           image: alfielloyd12/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container converter in deployment converter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 converter-deploy28.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: alfielloyd12/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────



converter-deploy29.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 converter-deploy29.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'converter' of Deployment 'converter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 converter-deploy29.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'converter' of 'deployment' 'converter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 converter-deploy29.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 converter-deploy29.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 converter-deploy29.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'converter' of Deployment 'converter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 converter-deploy29.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'converter' of Deployment 'converter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 converter-deploy29.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 converter-deploy29.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 converter-deploy29.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 converter-deploy29.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 converter-deploy29.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 converter-deploy29.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 converter-deploy29.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 converter-deploy29.yaml:8-28
────────────────────────────────────────
   8 ┌   replicas: 4
   9 │   selector:
  10 │     matchLabels:
  11 │       app: converter
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxSurge: 8
  16 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "converter" of deployment "converter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 converter-deploy29.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 converter-deploy29.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment converter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 converter-deploy29.yaml:4-6
────────────────────────────────────────
   4 ┌   name: converter
   5 │   labels:
   6 └     app: converter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container converter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy29.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment converter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy29.yaml:21-28
────────────────────────────────────────
  21 ┌       containers:
  22 │         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container converter in deployment converter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 converter-deploy29.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────



converter-deploy3.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 converter-deploy3.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: 1547465045/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'converter' of Deployment 'converter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 converter-deploy3.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: 1547465045/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'converter' of 'deployment' 'converter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 converter-deploy3.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: 1547465045/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 converter-deploy3.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: 1547465045/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 converter-deploy3.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: 1547465045/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'converter' of Deployment 'converter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 converter-deploy3.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: 1547465045/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'converter' of Deployment 'converter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 converter-deploy3.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: 1547465045/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 converter-deploy3.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: 1547465045/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 converter-deploy3.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: 1547465045/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 converter-deploy3.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: 1547465045/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 converter-deploy3.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: 1547465045/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 converter-deploy3.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: 1547465045/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 converter-deploy3.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: 1547465045/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 converter-deploy3.yaml:8-28
────────────────────────────────────────
   8 ┌   replicas: 4
   9 │   selector:
  10 │     matchLabels:
  11 │       app: converter
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxSurge: 8
  16 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "converter" of deployment "converter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 converter-deploy3.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: 1547465045/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 converter-deploy3.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: 1547465045/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment converter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 converter-deploy3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: converter
   5 │   labels:
   6 └     app: converter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container converter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy3.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: 1547465045/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment converter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy3.yaml:21-28
────────────────────────────────────────
  21 ┌       containers:
  22 │         - name: converter
  23 │           image: 1547465045/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container converter in deployment converter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 converter-deploy3.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: 1547465045/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────



converter-deploy30.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 converter-deploy30.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: stefanjokic99/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'converter' of Deployment 'converter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 converter-deploy30.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: stefanjokic99/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'converter' of 'deployment' 'converter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 converter-deploy30.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: stefanjokic99/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 converter-deploy30.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: stefanjokic99/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 converter-deploy30.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: stefanjokic99/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'converter' of Deployment 'converter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 converter-deploy30.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: stefanjokic99/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'converter' of Deployment 'converter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 converter-deploy30.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: stefanjokic99/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 converter-deploy30.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: stefanjokic99/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 converter-deploy30.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: stefanjokic99/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 converter-deploy30.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: stefanjokic99/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 converter-deploy30.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: stefanjokic99/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 converter-deploy30.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: stefanjokic99/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 converter-deploy30.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: stefanjokic99/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 converter-deploy30.yaml:8-28
────────────────────────────────────────
   8 ┌   replicas: 4
   9 │   selector:
  10 │     matchLabels:
  11 │       app: converter
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxSurge: 8
  16 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "converter" of deployment "converter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 converter-deploy30.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: stefanjokic99/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 converter-deploy30.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: stefanjokic99/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment converter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 converter-deploy30.yaml:4-6
────────────────────────────────────────
   4 ┌   name: converter
   5 │   labels:
   6 └     app: converter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container converter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy30.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: stefanjokic99/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment converter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy30.yaml:21-28
────────────────────────────────────────
  21 ┌       containers:
  22 │         - name: converter
  23 │           image: stefanjokic99/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container converter in deployment converter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 converter-deploy30.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: stefanjokic99/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────



converter-deploy4.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 converter-deploy4.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: strong7201111/converter:latest
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'converter' of Deployment 'converter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 converter-deploy4.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: strong7201111/converter:latest
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'converter' of 'deployment' 'converter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 converter-deploy4.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: strong7201111/converter:latest
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 converter-deploy4.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: strong7201111/converter:latest
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 converter-deploy4.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: strong7201111/converter:latest
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'converter' of Deployment 'converter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 converter-deploy4.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: strong7201111/converter:latest
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'converter' of Deployment 'converter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 converter-deploy4.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: strong7201111/converter:latest
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 converter-deploy4.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: strong7201111/converter:latest
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 converter-deploy4.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: strong7201111/converter:latest
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 converter-deploy4.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: strong7201111/converter:latest
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 converter-deploy4.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: strong7201111/converter:latest
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 converter-deploy4.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: strong7201111/converter:latest
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 converter-deploy4.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: strong7201111/converter:latest
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 converter-deploy4.yaml:8-28
────────────────────────────────────────
   8 ┌   replicas: 4
   9 │   selector:
  10 │     matchLabels:
  11 │       app: converter
  12 │   strategy: 
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxSurge: 8
  16 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "converter" of deployment "converter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 converter-deploy4.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: strong7201111/converter:latest
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 converter-deploy4.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: strong7201111/converter:latest
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment converter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 converter-deploy4.yaml:4-6
────────────────────────────────────────
   4 ┌   name: converter
   5 │   labels:
   6 └     app: converter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container converter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy4.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: strong7201111/converter:latest
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment converter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy4.yaml:21-28
────────────────────────────────────────
  21 ┌       containers:
  22 │         - name: converter
  23 │           image: strong7201111/converter:latest
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container converter in deployment converter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 converter-deploy4.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: strong7201111/converter:latest
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────



converter-deploy5.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 converter-deploy5.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: tcsharath6497/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'converter' of Deployment 'converter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 converter-deploy5.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: tcsharath6497/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'converter' of 'deployment' 'converter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 converter-deploy5.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: tcsharath6497/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 converter-deploy5.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: tcsharath6497/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 converter-deploy5.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: tcsharath6497/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'converter' of Deployment 'converter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 converter-deploy5.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: tcsharath6497/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'converter' of Deployment 'converter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 converter-deploy5.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: tcsharath6497/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 converter-deploy5.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: tcsharath6497/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 converter-deploy5.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: tcsharath6497/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 converter-deploy5.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: tcsharath6497/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 converter-deploy5.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: tcsharath6497/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 converter-deploy5.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: tcsharath6497/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 converter-deploy5.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: tcsharath6497/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 converter-deploy5.yaml:8-28
────────────────────────────────────────
   8 ┌   replicas: 4
   9 │   selector:
  10 │     matchLabels:
  11 │       app: converter
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxSurge: 8
  16 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "converter" of deployment "converter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 converter-deploy5.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: tcsharath6497/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 converter-deploy5.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: tcsharath6497/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment converter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 converter-deploy5.yaml:4-6
────────────────────────────────────────
   4 ┌   name: converter
   5 │   labels:
   6 └     app: converter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container converter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy5.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: tcsharath6497/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment converter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy5.yaml:21-28
────────────────────────────────────────
  21 ┌       containers:
  22 │         - name: converter
  23 │           image: tcsharath6497/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container converter in deployment converter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 converter-deploy5.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: tcsharath6497/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────



converter-deploy6.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 converter-deploy6.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: hilliedockerhub/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'converter' of Deployment 'converter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 converter-deploy6.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: hilliedockerhub/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'converter' of 'deployment' 'converter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 converter-deploy6.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: hilliedockerhub/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 converter-deploy6.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: hilliedockerhub/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 converter-deploy6.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: hilliedockerhub/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'converter' of Deployment 'converter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 converter-deploy6.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: hilliedockerhub/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'converter' of Deployment 'converter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 converter-deploy6.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: hilliedockerhub/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 converter-deploy6.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: hilliedockerhub/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 converter-deploy6.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: hilliedockerhub/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 converter-deploy6.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: hilliedockerhub/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 converter-deploy6.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: hilliedockerhub/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 converter-deploy6.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: hilliedockerhub/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 converter-deploy6.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: hilliedockerhub/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 converter-deploy6.yaml:8-28
────────────────────────────────────────
   8 ┌   replicas: 4
   9 │   selector:
  10 │     matchLabels:
  11 │       app: converter
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxSurge: 8
  16 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "converter" of deployment "converter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 converter-deploy6.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: hilliedockerhub/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 converter-deploy6.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: hilliedockerhub/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment converter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 converter-deploy6.yaml:4-6
────────────────────────────────────────
   4 ┌   name: converter
   5 │   labels:
   6 └     app: converter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container converter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy6.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: hilliedockerhub/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment converter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy6.yaml:21-28
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: converter
  23 │         image: hilliedockerhub/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container converter in deployment converter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 converter-deploy6.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: hilliedockerhub/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────



converter-deploy7.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 100, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 converter-deploy7.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: mhizterpaul/converter
  24 │         resources:
  25 │           requests:
  26 │             memory: "128Mi"
  27 │             cpu: "250m"
  28 │           limits:
  29 │             memory: "256Mi"
  30 └             cpu: "500m"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'converter' of Deployment 'converter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 converter-deploy7.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: mhizterpaul/converter
  24 │         resources:
  25 │           requests:
  26 │             memory: "128Mi"
  27 │             cpu: "250m"
  28 │           limits:
  29 │             memory: "256Mi"
  30 └             cpu: "500m"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'converter' of 'deployment' 'converter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 converter-deploy7.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: mhizterpaul/converter
  24 │         resources:
  25 │           requests:
  26 │             memory: "128Mi"
  27 │             cpu: "250m"
  28 │           limits:
  29 │             memory: "256Mi"
  30 └             cpu: "500m"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 converter-deploy7.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: mhizterpaul/converter
  24 │         resources:
  25 │           requests:
  26 │             memory: "128Mi"
  27 │             cpu: "250m"
  28 │           limits:
  29 │             memory: "256Mi"
  30 └             cpu: "500m"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'converter' of Deployment 'converter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 converter-deploy7.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: mhizterpaul/converter
  24 │         resources:
  25 │           requests:
  26 │             memory: "128Mi"
  27 │             cpu: "250m"
  28 │           limits:
  29 │             memory: "256Mi"
  30 └             cpu: "500m"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'converter' of Deployment 'converter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 converter-deploy7.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: mhizterpaul/converter
  24 │         resources:
  25 │           requests:
  26 │             memory: "128Mi"
  27 │             cpu: "250m"
  28 │           limits:
  29 │             memory: "256Mi"
  30 └             cpu: "500m"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 converter-deploy7.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: mhizterpaul/converter
  24 │         resources:
  25 │           requests:
  26 │             memory: "128Mi"
  27 │             cpu: "250m"
  28 │           limits:
  29 │             memory: "256Mi"
  30 └             cpu: "500m"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 converter-deploy7.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: mhizterpaul/converter
  24 │         resources:
  25 │           requests:
  26 │             memory: "128Mi"
  27 │             cpu: "250m"
  28 │           limits:
  29 │             memory: "256Mi"
  30 └             cpu: "500m"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 converter-deploy7.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: mhizterpaul/converter
  24 │         resources:
  25 │           requests:
  26 │             memory: "128Mi"
  27 │             cpu: "250m"
  28 │           limits:
  29 │             memory: "256Mi"
  30 └             cpu: "500m"
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 converter-deploy7.yaml:8-35
────────────────────────────────────────
   8 ┌   replicas: 4
   9 │   selector:
  10 │     matchLabels:
  11 │       app: converter
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxSurge: 8
  16 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "converter" of deployment "converter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 converter-deploy7.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: mhizterpaul/converter
  24 │         resources:
  25 │           requests:
  26 │             memory: "128Mi"
  27 │             cpu: "250m"
  28 │           limits:
  29 │             memory: "256Mi"
  30 └             cpu: "500m"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 converter-deploy7.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: mhizterpaul/converter
  24 │         resources:
  25 │           requests:
  26 │             memory: "128Mi"
  27 │             cpu: "250m"
  28 │           limits:
  29 │             memory: "256Mi"
  30 └             cpu: "500m"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment converter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 converter-deploy7.yaml:4-6
────────────────────────────────────────
   4 ┌   name: converter
   5 │   labels:
   6 └     app: converter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container converter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy7.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: mhizterpaul/converter
  24 │         resources:
  25 │           requests:
  26 │             memory: "128Mi"
  27 │             cpu: "250m"
  28 │           limits:
  29 │             memory: "256Mi"
  30 └             cpu: "500m"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment converter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy7.yaml:21-35
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: converter
  23 │         image: mhizterpaul/converter
  24 │         resources:
  25 │           requests:
  26 │             memory: "128Mi"
  27 │             cpu: "250m"
  28 │           limits:
  29 └             memory: "256Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container converter in deployment converter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 converter-deploy7.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: mhizterpaul/converter
  24 │         resources:
  25 │           requests:
  26 │             memory: "128Mi"
  27 │             cpu: "250m"
  28 │           limits:
  29 │             memory: "256Mi"
  30 └             cpu: "500m"
  ..   
────────────────────────────────────────



converter-deploy8.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 converter-deploy8.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: danwyh/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'converter' of Deployment 'converter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 converter-deploy8.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: danwyh/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'converter' of 'deployment' 'converter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 converter-deploy8.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: danwyh/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 converter-deploy8.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: danwyh/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 converter-deploy8.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: danwyh/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'converter' of Deployment 'converter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 converter-deploy8.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: danwyh/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'converter' of Deployment 'converter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 converter-deploy8.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: danwyh/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 converter-deploy8.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: danwyh/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 converter-deploy8.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: danwyh/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 converter-deploy8.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: danwyh/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 converter-deploy8.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: danwyh/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 converter-deploy8.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: danwyh/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 converter-deploy8.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: danwyh/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 converter-deploy8.yaml:8-28
────────────────────────────────────────
   8 ┌   replicas: 4
   9 │   selector:
  10 │     matchLabels:
  11 │       app: converter
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxSurge: 8
  16 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "converter" of deployment "converter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 converter-deploy8.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: danwyh/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 converter-deploy8.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: danwyh/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment converter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 converter-deploy8.yaml:4-6
────────────────────────────────────────
   4 ┌   name: converter
   5 │   labels:
   6 └     app: converter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container converter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy8.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: danwyh/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment converter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy8.yaml:21-28
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: converter
  23 │         image: danwyh/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container converter in deployment converter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 converter-deploy8.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: converter
  23 │         image: danwyh/converter
  24 │         envFrom:
  25 │           - configMapRef:
  26 │               name: converter-configmap
  27 │           - secretRef:
  28 └               name: converter-secret
────────────────────────────────────────



converter-deploy9.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 converter-deploy9.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'converter' of Deployment 'converter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 converter-deploy9.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'converter' of 'deployment' 'converter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 converter-deploy9.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 converter-deploy9.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 converter-deploy9.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'converter' of Deployment 'converter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 converter-deploy9.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'converter' of Deployment 'converter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 converter-deploy9.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 converter-deploy9.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 converter-deploy9.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'converter' of Deployment 'converter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 converter-deploy9.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 converter-deploy9.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'converter' of Deployment 'converter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 converter-deploy9.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 converter-deploy9.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 converter-deploy9.yaml:8-28
────────────────────────────────────────
   8 ┌   replicas: 4
   9 │   selector:
  10 │     matchLabels:
  11 │       app: converter
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxSurge: 8
  16 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "converter" of deployment "converter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 converter-deploy9.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 converter-deploy9.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment converter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 converter-deploy9.yaml:4-6
────────────────────────────────────────
   4 ┌   name: converter
   5 │   labels:
   6 └     app: converter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container converter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy9.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment converter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deploy9.yaml:21-28
────────────────────────────────────────
  21 ┌       containers:
  22 │         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container converter in deployment converter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 converter-deploy9.yaml:22-28
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: nasi101/converter
  24 │           envFrom:
  25 │             - configMapRef:
  26 │                 name: converter-configmap
  27 │             - secretRef:
  28 └                 name: converter-secret
────────────────────────────────────────



converter-deployment.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'converter' of Deployment 'converter-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 converter-deployment.yaml:22-76
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: pritamsarkar123/vtm3_converter_kube_2024:latest
  24 │           env:
  25 │             - name: RABBITMQ_HOST
  26 │               valueFrom:
  27 │                 configMapKeyRef:
  28 │                   name: rabbitmq-configmap
  29 │                   key: rabbitmq-url
  30 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'converter' of Deployment 'converter-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 converter-deployment.yaml:22-76
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: pritamsarkar123/vtm3_converter_kube_2024:latest
  24 │           env:
  25 │             - name: RABBITMQ_HOST
  26 │               valueFrom:
  27 │                 configMapKeyRef:
  28 │                   name: rabbitmq-configmap
  29 │                   key: rabbitmq-url
  30 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'converter' of 'deployment' 'converter-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 converter-deployment.yaml:22-76
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: pritamsarkar123/vtm3_converter_kube_2024:latest
  24 │           env:
  25 │             - name: RABBITMQ_HOST
  26 │               valueFrom:
  27 │                 configMapKeyRef:
  28 │                   name: rabbitmq-configmap
  29 │                   key: rabbitmq-url
  30 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'converter' of Deployment 'converter-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 converter-deployment.yaml:22-76
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: pritamsarkar123/vtm3_converter_kube_2024:latest
  24 │           env:
  25 │             - name: RABBITMQ_HOST
  26 │               valueFrom:
  27 │                 configMapKeyRef:
  28 │                   name: rabbitmq-configmap
  29 │                   key: rabbitmq-url
  30 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'converter' of Deployment 'converter-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 converter-deployment.yaml:22-76
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: pritamsarkar123/vtm3_converter_kube_2024:latest
  24 │           env:
  25 │             - name: RABBITMQ_HOST
  26 │               valueFrom:
  27 │                 configMapKeyRef:
  28 │                   name: rabbitmq-configmap
  29 │                   key: rabbitmq-url
  30 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'converter' of Deployment 'converter-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 converter-deployment.yaml:22-76
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: pritamsarkar123/vtm3_converter_kube_2024:latest
  24 │           env:
  25 │             - name: RABBITMQ_HOST
  26 │               valueFrom:
  27 │                 configMapKeyRef:
  28 │                   name: rabbitmq-configmap
  29 │                   key: rabbitmq-url
  30 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'converter' of Deployment 'converter-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 converter-deployment.yaml:22-76
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: pritamsarkar123/vtm3_converter_kube_2024:latest
  24 │           env:
  25 │             - name: RABBITMQ_HOST
  26 │               valueFrom:
  27 │                 configMapKeyRef:
  28 │                   name: rabbitmq-configmap
  29 │                   key: rabbitmq-url
  30 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'converter' of Deployment 'converter-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 converter-deployment.yaml:22-76
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: pritamsarkar123/vtm3_converter_kube_2024:latest
  24 │           env:
  25 │             - name: RABBITMQ_HOST
  26 │               valueFrom:
  27 │                 configMapKeyRef:
  28 │                   name: rabbitmq-configmap
  29 │                   key: rabbitmq-url
  30 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'converter' of Deployment 'converter-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 converter-deployment.yaml:22-76
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: pritamsarkar123/vtm3_converter_kube_2024:latest
  24 │           env:
  25 │             - name: RABBITMQ_HOST
  26 │               valueFrom:
  27 │                 configMapKeyRef:
  28 │                   name: rabbitmq-configmap
  29 │                   key: rabbitmq-url
  30 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'converter' of Deployment 'converter-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 converter-deployment.yaml:22-76
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: pritamsarkar123/vtm3_converter_kube_2024:latest
  24 │           env:
  25 │             - name: RABBITMQ_HOST
  26 │               valueFrom:
  27 │                 configMapKeyRef:
  28 │                   name: rabbitmq-configmap
  29 │                   key: rabbitmq-url
  30 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'converter' of Deployment 'converter-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 converter-deployment.yaml:22-76
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: pritamsarkar123/vtm3_converter_kube_2024:latest
  24 │           env:
  25 │             - name: RABBITMQ_HOST
  26 │               valueFrom:
  27 │                 configMapKeyRef:
  28 │                   name: rabbitmq-configmap
  29 │                   key: rabbitmq-url
  30 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'converter' of Deployment 'converter-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 converter-deployment.yaml:22-76
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: pritamsarkar123/vtm3_converter_kube_2024:latest
  24 │           env:
  25 │             - name: RABBITMQ_HOST
  26 │               valueFrom:
  27 │                 configMapKeyRef:
  28 │                   name: rabbitmq-configmap
  29 │                   key: rabbitmq-url
  30 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 converter-deployment.yaml:22-76
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: pritamsarkar123/vtm3_converter_kube_2024:latest
  24 │           env:
  25 │             - name: RABBITMQ_HOST
  26 │               valueFrom:
  27 │                 configMapKeyRef:
  28 │                   name: rabbitmq-configmap
  29 │                   key: rabbitmq-url
  30 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 converter-deployment.yaml:8-76
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: converter
  12 │   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxSurge: 8
  16 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "converter" of deployment "converter-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 converter-deployment.yaml:22-76
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: pritamsarkar123/vtm3_converter_kube_2024:latest
  24 │           env:
  25 │             - name: RABBITMQ_HOST
  26 │               valueFrom:
  27 │                 configMapKeyRef:
  28 │                   name: rabbitmq-configmap
  29 │                   key: rabbitmq-url
  30 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 converter-deployment.yaml:22-76
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: pritamsarkar123/vtm3_converter_kube_2024:latest
  24 │           env:
  25 │             - name: RABBITMQ_HOST
  26 │               valueFrom:
  27 │                 configMapKeyRef:
  28 │                   name: rabbitmq-configmap
  29 │                   key: rabbitmq-url
  30 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment converter-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 converter-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: converter-deployment
   5 │   labels:
   6 └     app: converter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container converter-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deployment.yaml:22-76
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: pritamsarkar123/vtm3_converter_kube_2024:latest
  24 │           env:
  25 │             - name: RABBITMQ_HOST
  26 │               valueFrom:
  27 │                 configMapKeyRef:
  28 │                   name: rabbitmq-configmap
  29 │                   key: rabbitmq-url
  30 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment converter-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 converter-deployment.yaml:21-76
────────────────────────────────────────
  21 ┌       containers:
  22 │         - name: converter
  23 │           image: pritamsarkar123/vtm3_converter_kube_2024:latest
  24 │           env:
  25 │             - name: RABBITMQ_HOST
  26 │               valueFrom:
  27 │                 configMapKeyRef:
  28 │                   name: rabbitmq-configmap
  29 └                   key: rabbitmq-url
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container converter in deployment converter-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 converter-deployment.yaml:22-76
────────────────────────────────────────
  22 ┌         - name: converter
  23 │           image: pritamsarkar123/vtm3_converter_kube_2024:latest
  24 │           env:
  25 │             - name: RABBITMQ_HOST
  26 │               valueFrom:
  27 │                 configMapKeyRef:
  28 │                   name: rabbitmq-configmap
  29 │                   key: rabbitmq-url
  30 └ 
  ..   
────────────────────────────────────────



cool-pod.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cool-container' of Pod 'cool-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cool-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: cool-container
   9 └     image: cool/app:v1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cool-container' of Pod 'cool-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cool-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: cool-container
   9 └     image: cool/app:v1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cool-container' of 'pod' 'cool-pod' in 'the-namespace' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cool-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: cool-container
   9 └     image: cool/app:v1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cool-container' of Pod 'cool-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cool-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: cool-container
   9 └     image: cool/app:v1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cool-container' of Pod 'cool-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cool-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: cool-container
   9 └     image: cool/app:v1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cool-container' of Pod 'cool-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cool-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: cool-container
   9 └     image: cool/app:v1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cool-container' of Pod 'cool-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cool-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: cool-container
   9 └     image: cool/app:v1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cool-container' of Pod 'cool-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cool-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: cool-container
   9 └     image: cool/app:v1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cool-container' of Pod 'cool-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cool-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: cool-container
   9 └     image: cool/app:v1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cool-container' of Pod 'cool-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cool-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: cool-container
   9 └     image: cool/app:v1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cool-container' of Pod 'cool-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cool-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: cool-container
   9 └     image: cool/app:v1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cool-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: cool-container
   9 └     image: cool/app:v1
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cool-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: cool-container
   9 │     image: cool/app:v1
  10 │   imagePullSecrets:
  11 └   - name: the-registry-secret
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cool-container" of pod "cool-pod" in "the-namespace" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cool-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: cool-container
   9 └     image: cool/app:v1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cool-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: cool-container
   9 └     image: cool/app:v1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cool-pod in the-namespace namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cool-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: cool-container
   9 └     image: cool/app:v1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cool-pod in the-namespace namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cool-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: cool-container
   9 │     image: cool/app:v1
  10 │   imagePullSecrets:
  11 └   - name: the-registry-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cool-container in pod cool-pod (namespace: the-namespace) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cool-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: cool-container
   9 └     image: cool/app:v1
────────────────────────────────────────



coordination.k8s.io.v1.Lease.after_roundtrip.yaml (kubernetes)
==============================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease.after_roundtrip.yaml:32-34
────────────────────────────────────────
  32 ┌   holderIdentity: "24"
  33 │   leaseDurationSeconds: -1978186127
  34 └   leaseTransitions: -1821918122
────────────────────────────────────────



coordination.k8s.io.v1.Lease.after_roundtrip1.yaml (kubernetes)
===============================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease.after_roundtrip1.yaml:32-34
────────────────────────────────────────
  32 ┌   holderIdentity: "24"
  33 │   leaseDurationSeconds: -1978186127
  34 └   leaseTransitions: -1821918122
────────────────────────────────────────



coordination.k8s.io.v1.Lease.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease1.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease1.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease10.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease10.yaml:33-37
────────────────────────────────────────
  33 ┌   acquireTime: "1970-01-01T00:00:02.000000Z"
  34 │   holderIdentity: "20"
  35 │   leaseDurationSeconds: 896585016
  36 │   leaseTransitions: 1305381319
  37 └   renewTime: "1970-01-01T00:00:03.000000Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease11.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease11.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease12.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease12.yaml:33-35
────────────────────────────────────────
  33 ┌   holderIdentity: "19"
  34 │   leaseDurationSeconds: 896585016
  35 └   leaseTransitions: 1305381319
────────────────────────────────────────



coordination.k8s.io.v1.Lease13.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease13.yaml:35-37
────────────────────────────────────────
  35 ┌   holderIdentity: "24"
  36 │   leaseDurationSeconds: -1978186127
  37 └   leaseTransitions: -1821918122
────────────────────────────────────────



coordination.k8s.io.v1.Lease14.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease14.yaml:33-35
────────────────────────────────────────
  33 ┌   holderIdentity: "19"
  34 │   leaseDurationSeconds: 896585016
  35 └   leaseTransitions: 1305381319
────────────────────────────────────────



coordination.k8s.io.v1.Lease15.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease15.yaml:37-41
────────────────────────────────────────
  37 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  38 │   holderIdentity: holderIdentityValue
  39 │   leaseDurationSeconds: 2
  40 │   leaseTransitions: 5
  41 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease16.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease16.yaml:34-38
────────────────────────────────────────
  34 ┌   acquireTime: "1970-01-01T00:00:02.000000Z"
  35 │   holderIdentity: "20"
  36 │   leaseDurationSeconds: 896585016
  37 │   leaseTransitions: 1305381319
  38 └   renewTime: "1970-01-01T00:00:03.000000Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease17.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease17.yaml:34-38
────────────────────────────────────────
  34 ┌   acquireTime: "1970-01-01T00:00:02.000000Z"
  35 │   holderIdentity: "20"
  36 │   leaseDurationSeconds: 896585016
  37 │   leaseTransitions: 1305381319
  38 └   renewTime: "1970-01-01T00:00:03.000000Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease18.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease18.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease19.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease19.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease2.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease2.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease20.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease20.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease21.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease21.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease22.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease22.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease23.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease23.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease24.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease24.yaml:33-37
────────────────────────────────────────
  33 ┌   acquireTime: "1970-01-01T00:00:02.000000Z"
  34 │   holderIdentity: "19"
  35 │   leaseDurationSeconds: 896585016
  36 │   leaseTransitions: 1305381319
  37 └   renewTime: "1970-01-01T00:00:03.000000Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease25.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease25.yaml:35-37
────────────────────────────────────────
  35 ┌   holderIdentity: "24"
  36 │   leaseDurationSeconds: -1978186127
  37 └   leaseTransitions: -1821918122
────────────────────────────────────────



coordination.k8s.io.v1.Lease26.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease26.yaml:33-35
────────────────────────────────────────
  33 ┌   holderIdentity: "19"
  34 │   leaseDurationSeconds: 896585016
  35 └   leaseTransitions: 1305381319
────────────────────────────────────────



coordination.k8s.io.v1.Lease27.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease27.yaml:37-41
────────────────────────────────────────
  37 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  38 │   holderIdentity: holderIdentityValue
  39 │   leaseDurationSeconds: 2
  40 │   leaseTransitions: 5
  41 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease28.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease28.yaml:34-38
────────────────────────────────────────
  34 ┌   acquireTime: "1970-01-01T00:00:02.000000Z"
  35 │   holderIdentity: "20"
  36 │   leaseDurationSeconds: 896585016
  37 │   leaseTransitions: 1305381319
  38 └   renewTime: "1970-01-01T00:00:03.000000Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease29.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease29.yaml:34-38
────────────────────────────────────────
  34 ┌   acquireTime: "1970-01-01T00:00:02.000000Z"
  35 │   holderIdentity: "20"
  36 │   leaseDurationSeconds: 896585016
  37 │   leaseTransitions: 1305381319
  38 └   renewTime: "1970-01-01T00:00:03.000000Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease3.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease3.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease30.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease30.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease31.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease31.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease32.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease32.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease33.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease33.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease34.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease34.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease35.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease35.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease39.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease39.yaml:33-37
────────────────────────────────────────
  33 ┌   acquireTime: "1970-01-01T00:00:02.000000Z"
  34 │   holderIdentity: "19"
  35 │   leaseDurationSeconds: 896585016
  36 │   leaseTransitions: 1305381319
  37 └   renewTime: "1970-01-01T00:00:03.000000Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease4.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease4.yaml:33-37
────────────────────────────────────────
  33 ┌   acquireTime: "1970-01-01T00:00:02.000000Z"
  34 │   holderIdentity: "20"
  35 │   leaseDurationSeconds: 896585016
  36 │   leaseTransitions: 1305381319
  37 └   renewTime: "1970-01-01T00:00:03.000000Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease40.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease40.yaml:33-37
────────────────────────────────────────
  33 ┌   acquireTime: "1970-01-01T00:00:02.000000Z"
  34 │   holderIdentity: "19"
  35 │   leaseDurationSeconds: 896585016
  36 │   leaseTransitions: 1305381319
  37 └   renewTime: "1970-01-01T00:00:03.000000Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease41.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease41.yaml:33-37
────────────────────────────────────────
  33 ┌   acquireTime: "1970-01-01T00:00:02.000000Z"
  34 │   holderIdentity: "19"
  35 │   leaseDurationSeconds: 896585016
  36 │   leaseTransitions: 1305381319
  37 └   renewTime: "1970-01-01T00:00:03.000000Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease42.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease42.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease43.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease43.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease44.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease44.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease45.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease45.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease46.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease46.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease47.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease47.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease48.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease48.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease49.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease49.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease5.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease5.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease50.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease50.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease51.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease51.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease52.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease52.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease53.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease53.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease54.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease54.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease55.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease55.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease56.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease56.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease6.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease6.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease7.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease7.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease8.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease8.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordination.k8s.io.v1.Lease9.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordination.k8s.io.v1.Lease9.yaml:36-40
────────────────────────────────────────
  36 ┌   acquireTime: "2003-01-01T01:01:01.000003Z"
  37 │   holderIdentity: holderIdentityValue
  38 │   leaseDurationSeconds: 2
  39 │   leaseTransitions: 5
  40 └   renewTime: "2004-01-01T01:01:01.000004Z"
────────────────────────────────────────



coordinator-deployment.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coordinator' of Deployment 'coordinator-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coordinator-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: coordinator
  17 │         image: iscsregistry.azurecr.io/calculator:v1
  18 │         ports:
  19 └         - containerPort: 8501
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coordinator' of Deployment 'coordinator-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coordinator-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: coordinator
  17 │         image: iscsregistry.azurecr.io/calculator:v1
  18 │         ports:
  19 └         - containerPort: 8501
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coordinator' of 'deployment' 'coordinator-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coordinator-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: coordinator
  17 │         image: iscsregistry.azurecr.io/calculator:v1
  18 │         ports:
  19 └         - containerPort: 8501
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coordinator' of Deployment 'coordinator-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coordinator-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: coordinator
  17 │         image: iscsregistry.azurecr.io/calculator:v1
  18 │         ports:
  19 └         - containerPort: 8501
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coordinator' of Deployment 'coordinator-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coordinator-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: coordinator
  17 │         image: iscsregistry.azurecr.io/calculator:v1
  18 │         ports:
  19 └         - containerPort: 8501
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coordinator' of Deployment 'coordinator-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coordinator-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: coordinator
  17 │         image: iscsregistry.azurecr.io/calculator:v1
  18 │         ports:
  19 └         - containerPort: 8501
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coordinator' of Deployment 'coordinator-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coordinator-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: coordinator
  17 │         image: iscsregistry.azurecr.io/calculator:v1
  18 │         ports:
  19 └         - containerPort: 8501
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coordinator' of Deployment 'coordinator-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coordinator-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: coordinator
  17 │         image: iscsregistry.azurecr.io/calculator:v1
  18 │         ports:
  19 └         - containerPort: 8501
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coordinator' of Deployment 'coordinator-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coordinator-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: coordinator
  17 │         image: iscsregistry.azurecr.io/calculator:v1
  18 │         ports:
  19 └         - containerPort: 8501
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coordinator' of Deployment 'coordinator-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coordinator-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: coordinator
  17 │         image: iscsregistry.azurecr.io/calculator:v1
  18 │         ports:
  19 └         - containerPort: 8501
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coordinator' of Deployment 'coordinator-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coordinator-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: coordinator
  17 │         image: iscsregistry.azurecr.io/calculator:v1
  18 │         ports:
  19 └         - containerPort: 8501
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coordinator-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: coordinator
  17 │         image: iscsregistry.azurecr.io/calculator:v1
  18 │         ports:
  19 └         - containerPort: 8501
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordinator-deployment.yaml:6-19
────────────────────────────────────────
   6 ┌   replicas: 3
   7 │   selector:
   8 │     matchLabels:
   9 │       app: coordinator
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: coordinator
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coordinator" of deployment "coordinator-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coordinator-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: coordinator
  17 │         image: iscsregistry.azurecr.io/calculator:v1
  18 │         ports:
  19 └         - containerPort: 8501
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coordinator-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: coordinator
  17 │         image: iscsregistry.azurecr.io/calculator:v1
  18 │         ports:
  19 └         - containerPort: 8501
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coordinator-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coordinator-deployment.yaml:4
────────────────────────────────────────
   4 [   name: coordinator-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coordinator-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coordinator-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: coordinator
  17 │         image: iscsregistry.azurecr.io/calculator:v1
  18 │         ports:
  19 └         - containerPort: 8501
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coordinator-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coordinator-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: coordinator
  17 │         image: iscsregistry.azurecr.io/calculator:v1
  18 │         ports:
  19 └         - containerPort: 8501
────────────────────────────────────────



coordinator-service.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordinator-service.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: coordinator
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 80
  11 │     targetPort: 8501
  12 └   type: ClusterIP
────────────────────────────────────────



coordinator-service1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coordinator-service1.yaml:7-13
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: coordinator-service
   9 │   ports:
  10 │     - protocol: TCP
  11 │       port: 80
  12 │       targetPort: 5000
  13 └   type: ClusterIP
────────────────────────────────────────



copier.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 copier.yaml:6-12
────────────────────────────────────────
   6 ┌   storageClassName: standard
   7 │   capacity:
   8 │     storage: 5Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 └     path: /data/flower
────────────────────────────────────────



copier_1.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 copier_1.yaml:6-13
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 │       storage: 5Gi
  11 │   selector:
  12 │     matchLabels:
  13 └       pv-name: my-pv
────────────────────────────────────────



copier_2.yaml (kubernetes)
==========================
Tests: 132 (SUCCESSES: 96, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 22, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'init' of Pod 'my-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 copier_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: init
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - cp -r /data/* /mnt/data
  13 │     volumeMounts:
  14 │     - name: data
  15 └       mountPath: /mnt/data
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'my-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 copier_2.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: my-container
  20 │     image: flower:latest
  21 │     volumeMounts:
  22 │     - name: my-pv
  23 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'init' of Pod 'my-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 copier_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: init
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - cp -r /data/* /mnt/data
  13 │     volumeMounts:
  14 │     - name: data
  15 └       mountPath: /mnt/data
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'my-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 copier_2.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: my-container
  20 │     image: flower:latest
  21 │     volumeMounts:
  22 │     - name: my-pv
  23 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'init' of 'pod' 'my-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 copier_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: init
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - cp -r /data/* /mnt/data
  13 │     volumeMounts:
  14 │     - name: data
  15 └       mountPath: /mnt/data
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'my-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 copier_2.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: my-container
  20 │     image: flower:latest
  21 │     volumeMounts:
  22 │     - name: my-pv
  23 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'init' of Pod 'my-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 copier_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: init
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - cp -r /data/* /mnt/data
  13 │     volumeMounts:
  14 │     - name: data
  15 └       mountPath: /mnt/data
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 copier_2.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: my-container
  20 │     image: flower:latest
  21 │     volumeMounts:
  22 │     - name: my-pv
  23 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'init' of Pod 'my-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 copier_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: init
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - cp -r /data/* /mnt/data
  13 │     volumeMounts:
  14 │     - name: data
  15 └       mountPath: /mnt/data
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 copier_2.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: my-container
  20 │     image: flower:latest
  21 │     volumeMounts:
  22 │     - name: my-pv
  23 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'init' of Pod 'my-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 copier_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: init
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - cp -r /data/* /mnt/data
  13 │     volumeMounts:
  14 │     - name: data
  15 └       mountPath: /mnt/data
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'my-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 copier_2.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: my-container
  20 │     image: flower:latest
  21 │     volumeMounts:
  22 │     - name: my-pv
  23 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'init' of Pod 'my-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 copier_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: init
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - cp -r /data/* /mnt/data
  13 │     volumeMounts:
  14 │     - name: data
  15 └       mountPath: /mnt/data
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'my-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 copier_2.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: my-container
  20 │     image: flower:latest
  21 │     volumeMounts:
  22 │     - name: my-pv
  23 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'init' of Pod 'my-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 copier_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: init
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - cp -r /data/* /mnt/data
  13 │     volumeMounts:
  14 │     - name: data
  15 └       mountPath: /mnt/data
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 copier_2.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: my-container
  20 │     image: flower:latest
  21 │     volumeMounts:
  22 │     - name: my-pv
  23 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'init' of Pod 'my-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 copier_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: init
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - cp -r /data/* /mnt/data
  13 │     volumeMounts:
  14 │     - name: data
  15 └       mountPath: /mnt/data
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 copier_2.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: my-container
  20 │     image: flower:latest
  21 │     volumeMounts:
  22 │     - name: my-pv
  23 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'init' of Pod 'my-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 copier_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: init
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - cp -r /data/* /mnt/data
  13 │     volumeMounts:
  14 │     - name: data
  15 └       mountPath: /mnt/data
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 copier_2.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: my-container
  20 │     image: flower:latest
  21 │     volumeMounts:
  22 │     - name: my-pv
  23 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'init' of Pod 'my-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 copier_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: init
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - cp -r /data/* /mnt/data
  13 │     volumeMounts:
  14 │     - name: data
  15 └       mountPath: /mnt/data
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 copier_2.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: my-container
  20 │     image: flower:latest
  21 │     volumeMounts:
  22 │     - name: my-pv
  23 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'init' of Pod 'my-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 copier_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: init
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - cp -r /data/* /mnt/data
  13 │     volumeMounts:
  14 │     - name: data
  15 └       mountPath: /mnt/data
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 copier_2.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: my-container
  20 │     image: flower:latest
  21 │     volumeMounts:
  22 │     - name: my-pv
  23 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'my-pod' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 copier_2.yaml:6-30
────────────────────────────────────────
   6 ┌   initContainers:
   7 │   - name: init
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - cp -r /data/* /mnt/data
  13 │     volumeMounts:
  14 └     - name: data
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 copier_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: init
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - cp -r /data/* /mnt/data
  13 │     volumeMounts:
  14 │     - name: data
  15 └       mountPath: /mnt/data
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 copier_2.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: my-container
  20 │     image: flower:latest
  21 │     volumeMounts:
  22 │     - name: my-pv
  23 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 copier_2.yaml:6-30
────────────────────────────────────────
   6 ┌   initContainers:
   7 │   - name: init
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - cp -r /data/* /mnt/data
  13 │     volumeMounts:
  14 └     - name: data
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "init" of pod "my-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 copier_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: init
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - cp -r /data/* /mnt/data
  13 │     volumeMounts:
  14 │     - name: data
  15 └       mountPath: /mnt/data
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "my-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 copier_2.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: my-container
  20 │     image: flower:latest
  21 │     volumeMounts:
  22 │     - name: my-pv
  23 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 copier_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: init
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - cp -r /data/* /mnt/data
  13 │     volumeMounts:
  14 │     - name: data
  15 └       mountPath: /mnt/data
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 copier_2.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: my-container
  20 │     image: flower:latest
  21 │     volumeMounts:
  22 │     - name: my-pv
  23 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod my-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 copier_2.yaml:4
────────────────────────────────────────
   4 [   name: my-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 copier_2.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: my-container
  20 │     image: flower:latest
  21 │     volumeMounts:
  22 │     - name: my-pv
  23 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 copier_2.yaml:7-17
────────────────────────────────────────
   7 ┌   - name: init
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - cp -r /data/* /mnt/data
  13 │     volumeMounts:
  14 │     - name: data
  15 └       mountPath: /mnt/data
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 copier_2.yaml:6-30
────────────────────────────────────────
   6 ┌   initContainers:
   7 │   - name: init
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 │     - cp -r /data/* /mnt/data
  13 │     volumeMounts:
  14 └     - name: data
  ..   
────────────────────────────────────────



copypaste-netpol.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 copypaste-netpol.yaml:7-27
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       pod: "1"
  10 │   policyTypes:
  11 │     - Ingress
  12 │     - Egress
  13 │   ingress:
  14 │     - from:
  15 └         - podSelector:
  ..   
────────────────────────────────────────



core-dns1_4.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 core-dns1_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.8.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 core-dns1_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.8.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 core-dns1_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.8.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 core-dns1_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.8.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 core-dns1_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.8.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 core-dns1_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.8.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 core-dns1_4.yaml:10-86
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-dns1_4.yaml:10-86
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 core-dns1_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.8.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 core-dns1_4.yaml:23-86
────────────────────────────────────────
  23 ┌       priorityClassName: system-cluster-critical
  24 │       serviceAccountName: coredns
  25 │       tolerations:
  26 │       - key: CriticalAddonsOnly
  27 │         operator: Exists
  28 │       nodeSelector:
  29 │         kubernetes.io/os: linux
  30 │       containers:
  31 └       - name: coredns
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 core-dns1_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.8.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────



core-dns1_5.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 core-dns1_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-dns1_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────



core-dns2_4.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 5, MEDIUM: 8, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 core-dns2_4.yaml:40-90
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: kubernetes.registry:5000/coredns/coredns:latest
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 170Mi
  46 │           requests:
  47 │             cpu: 100m
  48 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 core-dns2_4.yaml:40-90
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: kubernetes.registry:5000/coredns/coredns:latest
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 170Mi
  46 │           requests:
  47 │             cpu: 100m
  48 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'coredns' of Deployment 'coredns' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 core-dns2_4.yaml:40-90
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: kubernetes.registry:5000/coredns/coredns:latest
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 170Mi
  46 │           requests:
  47 │             cpu: 100m
  48 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 core-dns2_4.yaml:40-90
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: kubernetes.registry:5000/coredns/coredns:latest
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 170Mi
  46 │           requests:
  47 │             cpu: 100m
  48 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 core-dns2_4.yaml:40-90
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: kubernetes.registry:5000/coredns/coredns:latest
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 170Mi
  46 │           requests:
  47 │             cpu: 100m
  48 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 core-dns2_4.yaml:40-90
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: kubernetes.registry:5000/coredns/coredns:latest
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 170Mi
  46 │           requests:
  47 │             cpu: 100m
  48 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'coredns' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 core-dns2_4.yaml:10-101
────────────────────────────────────────
  10 ┌   strategy:
  11 │     type: RollingUpdate
  12 │     rollingUpdate:
  13 │       maxUnavailable: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       k8s-app: kube-dns
  17 │   template:
  18 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 core-dns2_4.yaml:40-90
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: kubernetes.registry:5000/coredns/coredns:latest
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 170Mi
  46 │           requests:
  47 │             cpu: 100m
  48 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 core-dns2_4.yaml:10-101
────────────────────────────────────────
  10 ┌   strategy:
  11 │     type: RollingUpdate
  12 │     rollingUpdate:
  13 │       maxUnavailable: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       k8s-app: kube-dns
  17 │   template:
  18 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-dns2_4.yaml:10-101
────────────────────────────────────────
  10 ┌   strategy:
  11 │     type: RollingUpdate
  12 │     rollingUpdate:
  13 │       maxUnavailable: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       k8s-app: kube-dns
  17 │   template:
  18 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 core-dns2_4.yaml:40-90
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: kubernetes.registry:5000/coredns/coredns:latest
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 170Mi
  46 │           requests:
  47 │             cpu: 100m
  48 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 core-dns2_4.yaml:22-101
────────────────────────────────────────
  22 ┌       priorityClassName: system-cluster-critical
  23 │       serviceAccountName: coredns
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       nodeSelector:
  28 │         kubernetes.io/os: linux
  29 │       affinity:
  30 └         podAntiAffinity:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 core-dns2_4.yaml:40-90
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: kubernetes.registry:5000/coredns/coredns:latest
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 170Mi
  46 │           requests:
  47 │             cpu: 100m
  48 └             memory: 70Mi
  ..   
────────────────────────────────────────



core-dns2_5.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 core-dns2_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: CLUSTER_DNS_SVC_IP
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-dns2_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: CLUSTER_DNS_SVC_IP
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────



core-dns_4.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 core-dns_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.8.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 core-dns_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.8.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 core-dns_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.8.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 core-dns_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.8.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 core-dns_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.8.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 core-dns_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.8.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 core-dns_4.yaml:10-86
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-dns_4.yaml:10-86
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 core-dns_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.8.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 core-dns_4.yaml:23-86
────────────────────────────────────────
  23 ┌       priorityClassName: system-cluster-critical
  24 │       serviceAccountName: coredns
  25 │       tolerations:
  26 │       - key: CriticalAddonsOnly
  27 │         operator: Exists
  28 │       nodeSelector:
  29 │         kubernetes.io/os: linux
  30 │       containers:
  31 └       - name: coredns
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 core-dns_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.8.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────



core-dns_5.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 core-dns_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-dns_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────



core-install1_20.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install1_20.yaml:10-20
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: webhook
  12 │     port: 7000
  13 │     protocol: TCP
  14 │     targetPort: webhook
  15 │   - name: metrics
  16 │     port: 8080
  17 │     protocol: TCP
  18 └     targetPort: metrics
  ..   
────────────────────────────────────────



core-install1_21.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install1_21.yaml:10-16
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: metrics
  12 │     port: 8082
  13 │     protocol: TCP
  14 │     targetPort: 8082
  15 │   selector:
  16 └     app.kubernetes.io/name: argocd-application-controller
────────────────────────────────────────



core-install1_22.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install1_22.yaml:10-15
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: tcp-redis
  12 │     port: 6379
  13 │     targetPort: 6379
  14 │   selector:
  15 └     app.kubernetes.io/name: argocd-redis
────────────────────────────────────────



core-install1_23.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install1_23.yaml:10-20
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: server
  12 │     port: 8081
  13 │     protocol: TCP
  14 │     targetPort: 8081
  15 │   - name: metrics
  16 │     port: 8084
  17 │     protocol: TCP
  18 └     targetPort: 8084
  ..   
────────────────────────────────────────



core-install1_25.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 8, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 core-install1_25.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 core-install1_25.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 core-install1_25.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 core-install1_25.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 core-install1_25.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 core-install1_25.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install1_25.yaml:10-55
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app.kubernetes.io/name: argocd-redis
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/name: argocd-redis
  17 │     spec:
  18 └       affinity:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-redis in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 core-install1_25.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: redis
   6 │     app.kubernetes.io/name: argocd-redis
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-redis
────────────────────────────────────────



core-install1_28.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install1_28.yaml:6-15
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - namespaceSelector: {}
   9 │     ports:
  10 │     - port: 8082
  11 │   podSelector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/name: argocd-application-controller
  14 │   policyTypes:
  15 └   - Ingress
────────────────────────────────────────



core-install1_29.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install1_29.yaml:6-18
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - namespaceSelector: {}
   9 │     ports:
  10 │     - port: 7000
  11 │       protocol: TCP
  12 │     - port: 8080
  13 │       protocol: TCP
  14 └   podSelector:
  ..   
────────────────────────────────────────



core-install1_30.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install1_30.yaml:6-31
────────────────────────────────────────
   6 ┌   egress:
   7 │   - ports:
   8 │     - port: 53
   9 │       protocol: UDP
  10 │     - port: 53
  11 │       protocol: TCP
  12 │   ingress:
  13 │   - from:
  14 └     - podSelector:
  ..   
────────────────────────────────────────



core-install1_31.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install1_31.yaml:6-31
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - podSelector:
   9 │         matchLabels:
  10 │           app.kubernetes.io/name: argocd-server
  11 │     - podSelector:
  12 │         matchLabels:
  13 │           app.kubernetes.io/name: argocd-application-controller
  14 └     - podSelector:
  ..   
────────────────────────────────────────



core-install1_7.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-application-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 core-install1_7.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



core-install1_8.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-applicationset-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 core-install1_8.yaml:48-56
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   resources:
  51 │   - secrets
  52 │   - configmaps
  53 │   verbs:
  54 │   - get
  55 │   - list
  56 └   - watch
────────────────────────────────────────



core-install1_9.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 core-install1_9.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-application-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 core-install1_9.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────



core-install2_20.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install2_20.yaml:10-20
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: webhook
  12 │     port: 7000
  13 │     protocol: TCP
  14 │     targetPort: webhook
  15 │   - name: metrics
  16 │     port: 8080
  17 │     protocol: TCP
  18 └     targetPort: metrics
  ..   
────────────────────────────────────────



core-install2_21.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install2_21.yaml:10-16
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: metrics
  12 │     port: 8082
  13 │     protocol: TCP
  14 │     targetPort: 8082
  15 │   selector:
  16 └     app.kubernetes.io/name: argocd-application-controller
────────────────────────────────────────



core-install2_22.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install2_22.yaml:10-15
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: tcp-redis
  12 │     port: 6379
  13 │     targetPort: 6379
  14 │   selector:
  15 └     app.kubernetes.io/name: argocd-redis
────────────────────────────────────────



core-install2_23.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install2_23.yaml:10-20
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: server
  12 │     port: 8081
  13 │     protocol: TCP
  14 │     targetPort: 8081
  15 │   - name: metrics
  16 │     port: 8084
  17 │     protocol: TCP
  18 └     targetPort: 8084
  ..   
────────────────────────────────────────



core-install2_25.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 8, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 core-install2_25.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 core-install2_25.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 core-install2_25.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 core-install2_25.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 core-install2_25.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 core-install2_25.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install2_25.yaml:10-55
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app.kubernetes.io/name: argocd-redis
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/name: argocd-redis
  17 │     spec:
  18 └       affinity:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-redis in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 core-install2_25.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: redis
   6 │     app.kubernetes.io/name: argocd-redis
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-redis
────────────────────────────────────────



core-install2_28.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install2_28.yaml:6-15
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - namespaceSelector: {}
   9 │     ports:
  10 │     - port: 8082
  11 │   podSelector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/name: argocd-application-controller
  14 │   policyTypes:
  15 └   - Ingress
────────────────────────────────────────



core-install2_29.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install2_29.yaml:6-18
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - namespaceSelector: {}
   9 │     ports:
  10 │     - port: 7000
  11 │       protocol: TCP
  12 │     - port: 8080
  13 │       protocol: TCP
  14 └   podSelector:
  ..   
────────────────────────────────────────



core-install2_30.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install2_30.yaml:6-31
────────────────────────────────────────
   6 ┌   egress:
   7 │   - ports:
   8 │     - port: 53
   9 │       protocol: UDP
  10 │     - port: 53
  11 │       protocol: TCP
  12 │   ingress:
  13 │   - from:
  14 └     - podSelector:
  ..   
────────────────────────────────────────



core-install2_31.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install2_31.yaml:6-31
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - podSelector:
   9 │         matchLabels:
  10 │           app.kubernetes.io/name: argocd-server
  11 │     - podSelector:
  12 │         matchLabels:
  13 │           app.kubernetes.io/name: argocd-application-controller
  14 └     - podSelector:
  ..   
────────────────────────────────────────



core-install2_7.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-application-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 core-install2_7.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



core-install2_8.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-applicationset-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 core-install2_8.yaml:48-56
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   resources:
  51 │   - secrets
  52 │   - configmaps
  53 │   verbs:
  54 │   - get
  55 │   - list
  56 └   - watch
────────────────────────────────────────



core-install2_9.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 core-install2_9.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-application-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 core-install2_9.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────



core-install_10.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 core-install_10.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-application-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 core-install_10.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────



core-install_22.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install_22.yaml:10-20
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: webhook
  12 │     port: 7000
  13 │     protocol: TCP
  14 │     targetPort: webhook
  15 │   - name: metrics
  16 │     port: 8080
  17 │     protocol: TCP
  18 └     targetPort: metrics
  ..   
────────────────────────────────────────



core-install_23.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install_23.yaml:10-16
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: metrics
  12 │     port: 8082
  13 │     protocol: TCP
  14 │     targetPort: 8082
  15 │   selector:
  16 └     app.kubernetes.io/name: argocd-application-controller
────────────────────────────────────────



core-install_24.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install_24.yaml:10-15
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: tcp-redis
  12 │     port: 6379
  13 │     targetPort: 6379
  14 │   selector:
  15 └     app.kubernetes.io/name: argocd-redis
────────────────────────────────────────



core-install_25.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install_25.yaml:10-20
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: server
  12 │     port: 8081
  13 │     protocol: TCP
  14 │     targetPort: 8081
  15 │   - name: metrics
  16 │     port: 8084
  17 │     protocol: TCP
  18 └     targetPort: 8084
  ..   
────────────────────────────────────────



core-install_27.yaml (kubernetes)
=================================
Tests: 121 (SUCCESSES: 106, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 14, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 core-install_27.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 core-install_27.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.13.3
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 core-install_27.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 core-install_27.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.13.3
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 core-install_27.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 core-install_27.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.13.3
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 core-install_27.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 core-install_27.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.13.3
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 core-install_27.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 core-install_27.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.13.3
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 core-install_27.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 core-install_27.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.13.3
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install_27.yaml:10-79
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app.kubernetes.io/name: argocd-redis
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/name: argocd-redis
  17 │     spec:
  18 └       affinity:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-redis in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 core-install_27.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: redis
   6 │     app.kubernetes.io/name: argocd-redis
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-redis
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container secret-init in deployment argocd-redis (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 core-install_27.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.13.3
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────



core-install_30.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install_30.yaml:6-15
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - namespaceSelector: {}
   9 │     ports:
  10 │     - port: 8082
  11 │   podSelector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/name: argocd-application-controller
  14 │   policyTypes:
  15 └   - Ingress
────────────────────────────────────────



core-install_31.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install_31.yaml:6-18
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - namespaceSelector: {}
   9 │     ports:
  10 │     - port: 7000
  11 │       protocol: TCP
  12 │     - port: 8080
  13 │       protocol: TCP
  14 └   podSelector:
  ..   
────────────────────────────────────────



core-install_32.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install_32.yaml:6-24
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - podSelector:
   9 │         matchLabels:
  10 │           app.kubernetes.io/name: argocd-server
  11 │     - podSelector:
  12 │         matchLabels:
  13 │           app.kubernetes.io/name: argocd-repo-server
  14 └     - podSelector:
  ..   
────────────────────────────────────────



core-install_33.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-install_33.yaml:6-31
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - podSelector:
   9 │         matchLabels:
  10 │           app.kubernetes.io/name: argocd-server
  11 │     - podSelector:
  12 │         matchLabels:
  13 │           app.kubernetes.io/name: argocd-application-controller
  14 └     - podSelector:
  ..   
────────────────────────────────────────



core-install_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-application-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 core-install_7.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



core-install_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-applicationset-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 core-install_8.yaml:50-58
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   - configmaps
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



core-install_9.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-redis' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 core-install_9.yaml:10-17
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resourceNames:
  13 │   - argocd-redis
  14 │   resources:
  15 │   - secrets
  16 │   verbs:
  17 └   - get
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-redis' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 core-install_9.yaml:18-23
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - secrets
  22 │   verbs:
  23 └   - create
────────────────────────────────────────



core-qa1.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-qa1.yaml:12-54
────────────────────────────────────────
  12 ┌   tls:
  13 │     - hosts:
  14 │         - qa1.txc.afflo.dev
  15 │       secretName: afflo-core-qa1-tls-certificate
  16 │   rules:
  17 │     - host: qa1.txc.afflo.dev
  18 │       http:
  19 │         paths:
  20 └           - path: /api/v1/services/external/itransplant
  ..   
────────────────────────────────────────



core-svc.deployment.service.yaml (kubernetes)
=============================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'core-svc' of Deployment 'core-svc-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 core-svc.deployment.service.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: core-svc
  19 │         image: core-svc
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 8086
  23 │         env:
  24 │         - name: SERVICE_NOTIFICATION_URL
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'core-svc' of Deployment 'core-svc-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 core-svc.deployment.service.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: core-svc
  19 │         image: core-svc
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 8086
  23 │         env:
  24 │         - name: SERVICE_NOTIFICATION_URL
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'core-svc' of 'deployment' 'core-svc-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 core-svc.deployment.service.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: core-svc
  19 │         image: core-svc
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 8086
  23 │         env:
  24 │         - name: SERVICE_NOTIFICATION_URL
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'core-svc' of Deployment 'core-svc-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 core-svc.deployment.service.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: core-svc
  19 │         image: core-svc
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 8086
  23 │         env:
  24 │         - name: SERVICE_NOTIFICATION_URL
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'core-svc' of Deployment 'core-svc-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 core-svc.deployment.service.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: core-svc
  19 │         image: core-svc
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 8086
  23 │         env:
  24 │         - name: SERVICE_NOTIFICATION_URL
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'core-svc' of Deployment 'core-svc-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 core-svc.deployment.service.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: core-svc
  19 │         image: core-svc
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 8086
  23 │         env:
  24 │         - name: SERVICE_NOTIFICATION_URL
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'core-svc' of Deployment 'core-svc-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 core-svc.deployment.service.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: core-svc
  19 │         image: core-svc
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 8086
  23 │         env:
  24 │         - name: SERVICE_NOTIFICATION_URL
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'core-svc' of Deployment 'core-svc-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 core-svc.deployment.service.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: core-svc
  19 │         image: core-svc
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 8086
  23 │         env:
  24 │         - name: SERVICE_NOTIFICATION_URL
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'core-svc' of Deployment 'core-svc-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 core-svc.deployment.service.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: core-svc
  19 │         image: core-svc
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 8086
  23 │         env:
  24 │         - name: SERVICE_NOTIFICATION_URL
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'core-svc' of Deployment 'core-svc-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 core-svc.deployment.service.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: core-svc
  19 │         image: core-svc
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 8086
  23 │         env:
  24 │         - name: SERVICE_NOTIFICATION_URL
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'core-svc' of Deployment 'core-svc-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 core-svc.deployment.service.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: core-svc
  19 │         image: core-svc
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 8086
  23 │         env:
  24 │         - name: SERVICE_NOTIFICATION_URL
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'core-svc' of Deployment 'core-svc-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 core-svc.deployment.service.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: core-svc
  19 │         image: core-svc
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 8086
  23 │         env:
  24 │         - name: SERVICE_NOTIFICATION_URL
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 core-svc.deployment.service.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: core-svc
  19 │         image: core-svc
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 8086
  23 │         env:
  24 │         - name: SERVICE_NOTIFICATION_URL
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-svc.deployment.service.yaml:8-28
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: core-svc
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: core-svc
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "core-svc" of deployment "core-svc-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 core-svc.deployment.service.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: core-svc
  19 │         image: core-svc
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 8086
  23 │         env:
  24 │         - name: SERVICE_NOTIFICATION_URL
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 core-svc.deployment.service.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: core-svc
  19 │         image: core-svc
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 8086
  23 │         env:
  24 │         - name: SERVICE_NOTIFICATION_URL
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment core-svc-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 core-svc.deployment.service.yaml:4-6
────────────────────────────────────────
   4 ┌   name: core-svc-deployment
   5 │   labels:
   6 └     app: core-svc
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container core-svc-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 core-svc.deployment.service.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: core-svc
  19 │         image: core-svc
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 8086
  23 │         env:
  24 │         - name: SERVICE_NOTIFICATION_URL
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment core-svc-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 core-svc.deployment.service.yaml:17-28
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: core-svc
  19 │         image: core-svc
  20 │         imagePullPolicy: Never
  21 │         ports:
  22 │         - containerPort: 8086
  23 │         env:
  24 │         - name: SERVICE_NOTIFICATION_URL
  25 └           valueFrom:
  ..   
────────────────────────────────────────



core-svc.deployment.service_1.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core-svc.deployment.service_1.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: core-svc
   8 │   type: LoadBalancer
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 8086
  12 └     targetPort: 8085
────────────────────────────────────────



core.v1.ConfigMap.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap11.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap15.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap18.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap19.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap2.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap20.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap21.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap22.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap23.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap27.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap3.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap30.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap31.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap32.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap33.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap34.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap35.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap42.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap43.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap44.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap45.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap46.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap47.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap48.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap49.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap5.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap50.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap51.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap52.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap53.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap54.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap55.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap56.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap6.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap7.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap8.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.ConfigMap9.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'nameValue' in 'namespaceValue' namespace stores sensitive contents in key(s) or value(s) '{"dataKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



core.v1.Namespace.after_roundtrip.yaml (kubernetes)
===================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace.after_roundtrip.yaml:32-33
────────────────────────────────────────
  32 ┌   finalizers:
  33 └   - 脽ěĂ凗蓏Ŋ蛊ĉy緅縕
────────────────────────────────────────



core.v1.Namespace.after_roundtrip1.yaml (kubernetes)
====================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace.after_roundtrip1.yaml:32-33
────────────────────────────────────────
  32 ┌   finalizers:
  33 └   - 脽ěĂ凗蓏Ŋ蛊ĉy緅縕
────────────────────────────────────────



core.v1.Namespace.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace1.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace10.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace10.yaml:33-34
────────────────────────────────────────
  33 ┌   finalizers:
  34 └   - '@Hr鯹)晿'
────────────────────────────────────────



core.v1.Namespace11.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace11.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace12.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace12.yaml:33-34
────────────────────────────────────────
  33 ┌   finalizers:
  34 └   - '@Hr鯹)晿'
────────────────────────────────────────



core.v1.Namespace13.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace13.yaml:35-36
────────────────────────────────────────
  35 ┌   finalizers:
  36 └   - 脽ěĂ凗蓏Ŋ蛊ĉy緅縕
────────────────────────────────────────



core.v1.Namespace14.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace14.yaml:33-34
────────────────────────────────────────
  33 ┌   finalizers:
  34 └   - '@Hr鯹)晿'
────────────────────────────────────────



core.v1.Namespace15.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace15.yaml:37-38
────────────────────────────────────────
  37 ┌   finalizers:
  38 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace16.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace16.yaml:34-35
────────────────────────────────────────
  34 ┌   finalizers:
  35 └   - '@Hr鯹)晿'
────────────────────────────────────────



core.v1.Namespace17.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace17.yaml:34-35
────────────────────────────────────────
  34 ┌   finalizers:
  35 └   - '@Hr鯹)晿'
────────────────────────────────────────



core.v1.Namespace18.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace18.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace19.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace19.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace2.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace2.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace20.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace20.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace21.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace21.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace22.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace22.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace23.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace23.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace24.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace24.yaml:33-34
────────────────────────────────────────
  33 ┌   finalizers:
  34 └   - '@Hr鯹)晿'
────────────────────────────────────────



core.v1.Namespace25.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace25.yaml:35-36
────────────────────────────────────────
  35 ┌   finalizers:
  36 └   - 脽ěĂ凗蓏Ŋ蛊ĉy緅縕
────────────────────────────────────────



core.v1.Namespace26.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace26.yaml:33-34
────────────────────────────────────────
  33 ┌   finalizers:
  34 └   - '@Hr鯹)晿'
────────────────────────────────────────



core.v1.Namespace27.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace27.yaml:37-38
────────────────────────────────────────
  37 ┌   finalizers:
  38 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace28.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace28.yaml:34-35
────────────────────────────────────────
  34 ┌   finalizers:
  35 └   - '@Hr鯹)晿'
────────────────────────────────────────



core.v1.Namespace29.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace29.yaml:34-35
────────────────────────────────────────
  34 ┌   finalizers:
  35 └   - '@Hr鯹)晿'
────────────────────────────────────────



core.v1.Namespace3.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace3.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace30.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace30.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace31.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace31.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace32.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace32.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace33.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace33.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace34.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace34.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace35.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace35.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace39.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace39.yaml:33-34
────────────────────────────────────────
  33 ┌   finalizers:
  34 └   - '@Hr鯹)晿'
────────────────────────────────────────



core.v1.Namespace4.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace4.yaml:33-34
────────────────────────────────────────
  33 ┌   finalizers:
  34 └   - '@Hr鯹)晿'
────────────────────────────────────────



core.v1.Namespace40.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace40.yaml:33-34
────────────────────────────────────────
  33 ┌   finalizers:
  34 └   - '@Hr鯹)晿'
────────────────────────────────────────



core.v1.Namespace41.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace41.yaml:33-34
────────────────────────────────────────
  33 ┌   finalizers:
  34 └   - '@Hr鯹)晿'
────────────────────────────────────────



core.v1.Namespace42.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace42.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace43.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace43.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace44.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace44.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace45.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace45.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace46.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace46.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace47.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace47.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace48.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace48.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace49.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace49.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace5.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace5.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace50.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace50.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace51.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace51.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace52.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace52.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace53.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace53.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace54.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace54.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace55.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace55.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace56.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace56.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace6.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace6.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace7.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace7.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace8.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace8.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Namespace9.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Namespace9.yaml:36-37
────────────────────────────────────────
  36 ┌   finalizers:
  37 └   - finalizersValue
────────────────────────────────────────



core.v1.Node.after_roundtrip.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node.after_roundtrip.yaml:32-46
────────────────────────────────────────
  32 ┌   configSource:
  33 │     configMap:
  34 │       kubeletConfigKey: "31"
  35 │       name: "29"
  36 │       namespace: "28"
  37 │       resourceVersion: "30"
  38 │       uid: 蛊ĉy緅縕>Ž燹憍峕?狱³-
  39 │   externalID: "32"
  40 └   podCIDR: "24"
  ..   
────────────────────────────────────────



core.v1.Node.after_roundtrip1.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node.after_roundtrip1.yaml:32-46
────────────────────────────────────────
  32 ┌   configSource:
  33 │     configMap:
  34 │       kubeletConfigKey: "31"
  35 │       name: "29"
  36 │       namespace: "28"
  37 │       resourceVersion: "30"
  38 │       uid: 蛊ĉy緅縕>Ž燹憍峕?狱³-
  39 │   externalID: "32"
  40 └   podCIDR: "24"
  ..   
────────────────────────────────────────



core.v1.Node.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node1.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node10.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node10.yaml:33-48
────────────────────────────────────────
  33 ┌   configSource:
  34 │     configMap:
  35 │       kubeletConfigKey: "28"
  36 │       name: "26"
  37 │       namespace: "25"
  38 │       resourceVersion: "27"
  39 │       uid: Ă凗蓏Ŋ蛊ĉy
  40 │   externalID: "29"
  41 └   podCIDR: "20"
  ..   
────────────────────────────────────────



core.v1.Node11.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node11.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node12.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node12.yaml:33-48
────────────────────────────────────────
  33 ┌   configSource:
  34 │     configMap:
  35 │       kubeletConfigKey: "27"
  36 │       name: "25"
  37 │       namespace: "24"
  38 │       resourceVersion: "26"
  39 │       uid: Ă凗蓏Ŋ蛊ĉy
  40 │   externalID: "28"
  41 └   podCIDR: "19"
  ..   
────────────────────────────────────────



core.v1.Node13.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node13.yaml:35-49
────────────────────────────────────────
  35 ┌   configSource:
  36 │     configMap:
  37 │       kubeletConfigKey: "31"
  38 │       name: "29"
  39 │       namespace: "28"
  40 │       resourceVersion: "30"
  41 │       uid: 蛊ĉy緅縕>Ž燹憍峕?狱³-
  42 │   externalID: "32"
  43 └   podCIDR: "24"
  ..   
────────────────────────────────────────



core.v1.Node14.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node14.yaml:33-48
────────────────────────────────────────
  33 ┌   configSource:
  34 │     configMap:
  35 │       kubeletConfigKey: "27"
  36 │       name: "25"
  37 │       namespace: "24"
  38 │       resourceVersion: "26"
  39 │       uid: Ă凗蓏Ŋ蛊ĉy
  40 │   externalID: "28"
  41 └   podCIDR: "19"
  ..   
────────────────────────────────────────



core.v1.Node15.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node15.yaml:37-54
────────────────────────────────────────
  37 ┌   configSource:
  38 │     configMap:
  39 │       kubeletConfigKey: kubeletConfigKeyValue
  40 │       name: nameValue
  41 │       namespace: namespaceValue
  42 │       resourceVersion: resourceVersionValue
  43 │       uid: uidValue
  44 │   externalID: externalIDValue
  45 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node16.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node16.yaml:34-49
────────────────────────────────────────
  34 ┌   configSource:
  35 │     configMap:
  36 │       kubeletConfigKey: "28"
  37 │       name: "26"
  38 │       namespace: "25"
  39 │       resourceVersion: "27"
  40 │       uid: Ă凗蓏Ŋ蛊ĉy
  41 │   externalID: "29"
  42 └   podCIDR: "20"
  ..   
────────────────────────────────────────



core.v1.Node17.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node17.yaml:34-49
────────────────────────────────────────
  34 ┌   configSource:
  35 │     configMap:
  36 │       kubeletConfigKey: "28"
  37 │       name: "26"
  38 │       namespace: "25"
  39 │       resourceVersion: "27"
  40 │       uid: Ă凗蓏Ŋ蛊ĉy
  41 │   externalID: "29"
  42 └   podCIDR: "20"
  ..   
────────────────────────────────────────



core.v1.Node18.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node18.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node19.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node19.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node2.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node2.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node20.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node20.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node21.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node21.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node22.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node22.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node23.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node23.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node24.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node24.yaml:33-48
────────────────────────────────────────
  33 ┌   configSource:
  34 │     configMap:
  35 │       kubeletConfigKey: "27"
  36 │       name: "25"
  37 │       namespace: "24"
  38 │       resourceVersion: "26"
  39 │       uid: Ă凗蓏Ŋ蛊ĉy
  40 │   externalID: "28"
  41 └   podCIDR: "19"
  ..   
────────────────────────────────────────



core.v1.Node25.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node25.yaml:35-49
────────────────────────────────────────
  35 ┌   configSource:
  36 │     configMap:
  37 │       kubeletConfigKey: "31"
  38 │       name: "29"
  39 │       namespace: "28"
  40 │       resourceVersion: "30"
  41 │       uid: 蛊ĉy緅縕>Ž燹憍峕?狱³-
  42 │   externalID: "32"
  43 └   podCIDR: "24"
  ..   
────────────────────────────────────────



core.v1.Node26.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node26.yaml:33-48
────────────────────────────────────────
  33 ┌   configSource:
  34 │     configMap:
  35 │       kubeletConfigKey: "27"
  36 │       name: "25"
  37 │       namespace: "24"
  38 │       resourceVersion: "26"
  39 │       uid: Ă凗蓏Ŋ蛊ĉy
  40 │   externalID: "28"
  41 └   podCIDR: "19"
  ..   
────────────────────────────────────────



core.v1.Node27.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node27.yaml:37-54
────────────────────────────────────────
  37 ┌   configSource:
  38 │     configMap:
  39 │       kubeletConfigKey: kubeletConfigKeyValue
  40 │       name: nameValue
  41 │       namespace: namespaceValue
  42 │       resourceVersion: resourceVersionValue
  43 │       uid: uidValue
  44 │   externalID: externalIDValue
  45 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node28.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node28.yaml:34-49
────────────────────────────────────────
  34 ┌   configSource:
  35 │     configMap:
  36 │       kubeletConfigKey: "28"
  37 │       name: "26"
  38 │       namespace: "25"
  39 │       resourceVersion: "27"
  40 │       uid: Ă凗蓏Ŋ蛊ĉy
  41 │   externalID: "29"
  42 └   podCIDR: "20"
  ..   
────────────────────────────────────────



core.v1.Node29.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node29.yaml:34-49
────────────────────────────────────────
  34 ┌   configSource:
  35 │     configMap:
  36 │       kubeletConfigKey: "28"
  37 │       name: "26"
  38 │       namespace: "25"
  39 │       resourceVersion: "27"
  40 │       uid: Ă凗蓏Ŋ蛊ĉy
  41 │   externalID: "29"
  42 └   podCIDR: "20"
  ..   
────────────────────────────────────────



core.v1.Node3.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node3.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node30.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node30.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node31.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node31.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node32.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node32.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node33.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node33.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node34.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node34.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node35.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node35.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node39.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node39.yaml:33-48
────────────────────────────────────────
  33 ┌   configSource:
  34 │     configMap:
  35 │       kubeletConfigKey: "27"
  36 │       name: "25"
  37 │       namespace: "24"
  38 │       resourceVersion: "26"
  39 │       uid: Ă凗蓏Ŋ蛊ĉy
  40 │   externalID: "28"
  41 └   podCIDR: "19"
  ..   
────────────────────────────────────────



core.v1.Node4.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node4.yaml:33-48
────────────────────────────────────────
  33 ┌   configSource:
  34 │     configMap:
  35 │       kubeletConfigKey: "28"
  36 │       name: "26"
  37 │       namespace: "25"
  38 │       resourceVersion: "27"
  39 │       uid: Ă凗蓏Ŋ蛊ĉy
  40 │   externalID: "29"
  41 └   podCIDR: "20"
  ..   
────────────────────────────────────────



core.v1.Node40.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node40.yaml:33-48
────────────────────────────────────────
  33 ┌   configSource:
  34 │     configMap:
  35 │       kubeletConfigKey: "27"
  36 │       name: "25"
  37 │       namespace: "24"
  38 │       resourceVersion: "26"
  39 │       uid: Ă凗蓏Ŋ蛊ĉy
  40 │   externalID: "28"
  41 └   podCIDR: "19"
  ..   
────────────────────────────────────────



core.v1.Node41.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node41.yaml:33-48
────────────────────────────────────────
  33 ┌   configSource:
  34 │     configMap:
  35 │       kubeletConfigKey: "27"
  36 │       name: "25"
  37 │       namespace: "24"
  38 │       resourceVersion: "26"
  39 │       uid: Ă凗蓏Ŋ蛊ĉy
  40 │   externalID: "28"
  41 └   podCIDR: "19"
  ..   
────────────────────────────────────────



core.v1.Node42.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node42.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node43.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node43.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node44.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node44.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node45.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node45.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node46.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node46.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node47.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node47.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node48.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node48.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node49.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node49.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node5.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node5.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node50.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node50.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node51.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node51.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node52.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node52.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node53.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node53.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node54.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node54.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node55.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node55.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node56.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node56.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node6.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node6.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node7.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node7.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.Node8.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node8.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────


